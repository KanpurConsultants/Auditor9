Imports CrystalDecisions.CrystalReports.Engine
Imports Microsoft.Reporting.WinForms
Imports System.IO
Imports System.ComponentModel
Imports System.Xml
Imports AgLibrary.ClsMain.agConstants
Imports Customised.ClsMain
Imports Customised.ClsMain.ConfigurableFields
Imports System.Linq
Imports Customised

Public Class FrmSaleInvoiceDirect_WithDimension
    Inherits AgTemplate.TempTransaction1
    Dim mQry$

    Dim mSW As New Stopwatch


    Public WithEvents AgCalcGrid1 As New AgStructure.AgCalcGrid
    Public WithEvents AgCustomGrid1 As New AgCustomFields.AgCustomGrid

    '========================================================================
    '======================== DATA GRID AND COLUMNS DEFINITION ================
    '========================================================================
    Public WithEvents Dgl1 As New AgControls.AgDataGrid
    Public Const ColSNo As String = "Srl."
    Public Const Col1ImportStatus As String = "Import Status"
    Public Const Col1V_Nature As String = "V_Nature"
    Public Const Col1Barcode As String = "Barcode"
    Public Const Col1ItemType As String = "Item Type"
    Public Const Col1SKU As String = "SKU"
    Public Const Col1ItemCategory As String = "Item Category"
    Public Const Col1ItemGroup As String = "Item Group"
    Public Const Col1ItemCode As String = "Item Code"
    Public Const Col1Item As String = "Item"
    Public Const Col1Dimension1 As String = "Dimension1"
    Public Const Col1Dimension2 As String = "Dimension2"
    Public Const Col1Dimension3 As String = "Dimension3"
    Public Const Col1Dimension4 As String = "Dimension4"
    Public Const Col1Size As String = "Size"
    Public Const Col1Specification As String = "Specification"
    Public Const Col1ItemInvoiceGroup As String = "Item Invoice Group"
    Public Const Col1ItemState As String = "Item State"
    Public Const Col1SalesTaxGroup As String = "Sales Tax Group Item"
    Public Const Col1BaleNo As String = "Bale No"
    Public Const Col1LotNo As String = "Lot No"
    Public Const Col1DocQty As String = "Doc Qty"
    Public Const Col1FreeQty As String = "Free Qty"
    Public Const Col1LossQty As String = "Loss Qty"
    Public Const Col1Qty As String = "Qty"
    Public Const Col1Unit As String = "Unit"
    Public Const Col1QtyDecimalPlaces As String = "Qty Decimal Places"
    Public Const Col1Pcs As String = "Pcs"
    Public Const Col1UnitMultiplier As String = "Unit Multiplier"
    Public Const Col1DocDealQty As String = "Doc Deal Qty"
    Public Const Col1FreeDealQty As String = "Free Deal Qty"
    Public Const Col1LossDealQtyPer As String = "Loss Deal Qty @"
    Public Const Col1LossDealQty As String = "Loss Deal Qty"
    Public Const Col1DealQty As String = "Deal Qty"
    Public Const Col1DealUnit As String = "Deal Unit"
    Public Const Col1DealQtyDecimalPlaces As String = "Deal Qty Decimal Places"
    'This Deal & Deal Amount is not related to deal qty in anyway.
    'This is taken for Medical Industry to manage their offer requirements.
    Public Const Col1Deal As String = "Deal"
    Public Const Col1DealAmount As String = "Deal Amount"
    Public Const Col1MasterSaleRate As String = "Master Rate"
    Public Const Col1RateDiscountPer As String = "Rate Disc. %"
    Public Const Col1Rate As String = "Rate"
    Public Const Col1DiscountPer As String = "Disc. %"
    Public Const Col1DiscountAmount As String = "Disc. Amt"
    Public Const Col1AdditionalDiscountPer As String = "Add. Disc. %"
    Public Const Col1AdditionalDiscountAmount As String = "Add. Disc. Amt"
    Public Const Col1AdditionPer As String = "Addition %"
    Public Const Col1AdditionAmount As String = "Addition Amt"
    Public Const Col1PurityPer As String = "Purity %"
    Public Const Col1Amount As String = "Amount"
    Public Const Col1ExpiryDate As String = "Expiry Date"
    Public Const Col1MRP As String = "MRP"
    Public Const Col1Remark As String = "Remark"
    Public Const Col1Remark1 As String = "Remark1"
    Public Const Col1Remark2 As String = "Remark2"
    Public Const Col1Remark3 As String = "Remark3"
    Public Const Col1Remark4 As String = "Remark4"
    Public Const Col1Godown As String = "Godown"
    Public Const Col1SalesRepresentative As String = "Sales Rep."
    Public Const Col1Catalog As String = "Catalog"
    Public Const Col1ReferenceNo As String = "Reference No"
    Public Const Col1ReferenceDate As String = "Reference Date"
    Public Const Col1ReferenceDocId As String = "Reference DocID"
    Public Const Col1ReferenceDocIdTSr As String = "Reference TSr"
    Public Const Col1ReferenceDocIdSr As String = "Reference Sr"
    Public Const Col1SaleInvoice As String = "Sale Invoice DocID"
    Public Const Col1SaleInvoiceSr As String = "Sale Invoice Sr"
    Public Const Col1DefaultDiscountPer As String = "Default Discount %"
    Public Const Col1DefaultAdditionalDiscountPer As String = "Default Additional Discount %"
    Public Const Col1DefaultAdditionPer As String = "Default Addition %"
    Public Const Col1DiscountCalculationPattern As String = "Discount Calculation Pattern"
    Public Const Col1AdditionalDiscountCalculationPattern As String = "Additional Discount Calculation Pattern"
    Public Const Col1AdditionCalculationPattern As String = "Additional Calculation Pattern"
    Public Const Col1PersonalDiscountPer As String = "Personal Discount %"
    Public Const Col1PersonalAdditionalDiscountPer As String = "Personal Additional Discount %"
    Public Const Col1PersonalAdditionPer As String = "Personal Addition %"
    Public Const Col1StockSr As String = "Stock Sr"
    Public Const Col1StockInDocId As String = "Stock In"
    Public Const Col1StockInTSr As String = "Stock In TSr"
    Public Const Col1StockInSr As String = "Stock In Sr"
    Public Const Col1StockInDiv_Code As String = "Stock In Division"
    Public Const Col1IsRecordLocked As String = "Is Record Locked"
    Public Const Col1BarcodeType As String = "Barcode Type"
    Public Const Col1MaintainStockYn As String = "Maintain Stock Yn"
    Public Const Col1Progress As String = "Progress"
    Public Const Col1CurrentStock As String = "Current Stock"
    Public Const Col1xAmount As String = "xAmount"
    '========================================================================


    Public Const Col1PurchaseRate As String = "Purchase Rate"
    Public Const Col1PurchaseDiscountPer As String = "Purch Disc. %"
    Public Const Col1PurchaseDiscountAmount As String = "Purch Disc. Amt"
    Public Const Col1PurchaseAdditionalDiscountPer As String = "Purch Add. Disc. %"
    Public Const Col1PurchaseAdditionalDiscountAmount As String = "Purch Add. Disc. Amt"
    Public Const Col1PurchaseDeal As String = "Purch Deal"

    'For Aadhat
    Public Const Col1PurchaseSalesTaxGroup As String = "Purchase Sales Tax Group Item"
    Public Const Col1PurchaseTaxableAmount As String = "Purch Taxable Amount"
    Public Const Col1PurchaseAmount As String = "Purch Amount"


    Public Const Col1MItemCategory As String = "M Item Category"
    Public Const Col1MItemGroup As String = "M Item Group"
    Public Const Col1MItemSpecification As String = "M Item Specification"
    Public Const Col1MDimension1 As String = "M Dimension 1"
    Public Const Col1MDimension2 As String = "M Dimension 2"
    Public Const Col1MDimension3 As String = "M Dimension 3"
    Public Const Col1MDimension4 As String = "M Dimension 4"
    Public Const Col1MSize As String = "M Size"


    Public WithEvents Dgl2 As New AgControls.AgDataGrid
    Public WithEvents Dgl3 As New AgControls.AgDataGrid
    Public WithEvents Dgl4 As New AgControls.AgDataGrid
    Public WithEvents DglPurchase As New AgControls.AgDataGrid
    Public WithEvents DglItemCategorySummary As New AgControls.AgDataGrid

    Public Const Col5ItemGroup As String = "ItemGroup"
    Public Const Col5ParentSupplier As String = "Parent Supplier"
    Public Const Col5Supplier As String = "Supplier"
    Public Const Col5PlaceOfSupply As String = "Place Of Supply"
    Public Const Col5PurchInvoiceNo As String = "Purch Invoice No"
    Public Const Col5PurchInvoiceDate As String = "Purch Invoice Date"
    Public Const Col5GrossAmount As String = "Gross Amount"
    Public Const Col5TotalTax As String = "Total Tax"
    Public Const Col5OtherCharge As String = "Other Charge"
    Public Const Col5OtherCharge1 As String = "Other Charge1"
    Public Const Col5Deduction As String = "Deduction"
    Public Const Col5NetAmount As String = "Net Amount"
    Public Const Col5CommissionAmount As String = "Comm.Amt"
    Public Const Col5AdditionalCommissionAmount As String = "Add.Comm.Amt"
    Public Const Col5AmsDocNo As String = "Ams Doc No."
    Public Const Col5AmsDocDate As String = "Ams Doc Date"
    Public Const Col5AmsDocAmount As String = "Ams Doc Amount"


    Public Const Col6ItemCategory As String = "Item Category"
    Public Const Col6Qty As String = "Qty"
    Public Const Col6Amount As String = "Amount"
    Public Const Col6Select As String = "Tick"


    Public Const Col7ChargeSubocde As String = "Charge Account"
    Public Const Col7Amount As String = "Amount"
    Public Const Col7ChargeType As String = "Charge Type"
    Public WithEvents DglOtherCharges As New AgControls.AgDataGrid


    Public rowProcess As Integer = 6
    Public rowSaleToParty As Integer = 7
    Public rowSaleToPartyName As Integer = 8
    Public rowSaleToPartyMobile As Integer = 9
    Public rowBillToParty As Integer = 10
    Public rowLinkedParty As Integer = 11


    Dim rowRateType As Integer = 0
    Dim rowPartyDocNo As Integer = 1
    Dim rowPartyDocDate As Integer = 2
    Dim rowDeliveryDate As Integer = 3
    Dim rowMinDeliveryDate As Integer = 4
    Dim rowGodown As Integer = 5
    Dim rowReferenceSaleInvoiceNo As Integer = 6
    Dim rowShipToParty As Integer = 7
    Dim rowSalesTaxNo As Integer = 8
    Dim rowAadharNo As Integer = 9
    Dim rowSalesTaxGroup As Integer = 10
    Dim rowSalesRepresentative As Integer = 11
    Dim rowCatalog As Integer = 12
    Dim rowAmsDocNo As Integer = 13
    Dim rowAmsDocDate As Integer = 14
    Dim rowAmsDocNetAmount As Integer = 15
    Dim rowBtnPendingSaleOrder As Integer = 16
    Dim rowBtnPendingSaleInvoiceForOrder As Integer = 17
    Dim rowBtnAttachments As Integer = 18
    Dim rowBtnMoneyReceived As Integer = 19
    Dim rowCurrency As Integer = 20
    Dim rowCurrencyMultiplier As Integer = 21
    Dim rowSalesTaxApplicable As Integer = 22


    Public Const hcProcess As String = "Process"
    Public Const hcSaleToParty As String = "Sale To Party"
    Public Const hcSaleToPartyName As String = "Party Name"
    Public Const hcSaleToPartyMobile As String = "Party Mobile"
    Public Const hcBillToParty As String = "Bill To Party"
    Public Const hcLinkedParty As String = "Linked Party"

    Public Const hcRateType As String = "Rate Type"
    Public Const hcPartyDocNo As String = "Party Doc.No."
    Public Const hcPartyDocDate As String = "Party Doc.Date"
    Public Const hcDeliveryDate As String = "Delivery Date"
    Public Const hcMinDeliveryDate As String = "Min.Delivery Date"
    Public Const hcReferenceSaleInvoiceNo As String = "Reference No."
    Public Const hcGodown As String = "Godown"
    Public Const hcShipToParty As String = "Ship To Party"
    Public Const HcSalesTaxNo As String = "GST No"
    Public Const HcAadharNo As String = "Aadhar No"
    Public Const HcSalesTaxGroup As String = "Sales Tax Group"
    Public Const HcSalesRepresentative As String = "Sales Rep."
    Public Const HcCatalog As String = "Catalog"
    Public Const HcAmsDocNo As String = "Ams Doc No."
    Public Const HcAmsDocDate As String = "Ams Doc Date"
    Public Const HcAmsDocNetAmount As String = "Ams Doc Net Amount"
    Public Const hcBtnPendingSaleOrder As String = "Pending Orders"
    Public Const hcBtnPendingSaleInvoiceForOrder As String = "Pending Invoices For Order"
    Public Const HcBtnAttachments As String = "Attachments"
    Public Const HcTransporterDetail As String = "Transporter Detail"
    Public Const HcBtnMoneyReceived As String = "Money Received"
    Public Const HcCurrency As String = "Currency"
    Public Const HcCurrencyMultiplier As String = "Currency Multiplier"
    Public Const HcSalesTaxApplicable As String = "Sales Tax Applicable"


    Dim rowCreditDays As Integer = 0
    Dim rowAgent As Integer = 1
    Dim rowTransporter As Integer = 2
    Dim rowResponsiblePerson As Integer = 3
    Dim rowRemarks1 As Integer = 4
    Dim rowRemarks2 As Integer = 5
    Dim rowTags As Integer = 6
    Dim rowRemarks As Integer = 7
    Dim rowTermsAndConditions As Integer = 8
    Dim rowCustomerInvoiceCount As Integer = 9
    Dim rowBtnTransportDetail As Integer = 10
    Dim rowEInvoiceIRN As Integer = 11
    Dim rowEInvoiceACKNo As Integer = 12
    Dim rowEInvoiceACKDate As Integer = 13





    Public Const hcCreditDays As String = "Credit Days"
    Public Const hcAgent As String = "Agent"
    Public Const hcTransporter As String = "Transporter"
    Public Const hcResponsiblePerson As String = "Responsible Person"
    Public Const hcRemarks1 As String = "Remarks 1"
    Public Const hcRemarks2 As String = "Remarks 2"
    Public Const hcTags As String = "Tags"
    Public Const hcRemarks As String = "Remarks"
    Public Const hcBtnTransportDetail As String = "Transport Detail"
    Public Const hcTermsAndConditions As String = "Terms & Conditions"
    Public Const hcCustomerInvoiceCount As String = "Customer Invoice Count"
    Public Const hcEInvoiceIRN As String = "E-Invoice IRN"
    Public Const hcEInvoiceACKNo As String = "E-Invoice ACK No"
    Public Const hcEInvoiceACKDate As String = "E-Invoice ACK Date"

    Public Shared mFlag_Import As Boolean = False
    Public mDimensionSrl As Integer

    Dim WithEvents GridReportFrm As AgLibrary.FrmRepDisplay
    Dim mInvoiceAmountBeforeEditing As Double = 0
    Dim mPrevRowIndex As Integer = 0
    Dim UserMovedOverItemGroup As Boolean
    Dim UserMovedOverItemCategory As Boolean
    Dim Dgl As New AgControls.AgDataGrid
    Dim DtV_TypeTrnSettings As DataTable
    Dim DtItemTypeSettingsAll As DataTable
    Dim DtItemRelation As DataTable
    Dim DtEntryHeaderUISetting As DataTable
    Dim DtEntryLineUISetting As DataTable
    Dim mDtPurchaseData As DataTable

    Dim SettingFields_GeneratedEntryV_TypeForAadhat As String = ""
    Dim SettingFields_CalculateAmountOn As String = ""
    Dim SettingFields_MaximumItemLimit As Integer = 0
    Dim SettingFields_TreatRateAsAmountYn As Boolean = False
    Dim SettingFields_ShowItemCategorySummaryYn As Boolean = False
    Dim SettingFields_ShowOtherChargesAccountGridYn As Boolean = False
    Private _backgroundWorker1 As System.ComponentModel.BackgroundWorker

    Dim isInitializingGrids As Boolean


    Dim DsMainDocPrintRep As New DataSet
    Dim Report_QryArr() As String = Nothing
    Dim Report_NameArr() As String = Nothing
    Dim Report_TitleArr() As String = Nothing
    Dim Report_FormatArr() As String = Nothing

    Dim SubReport_QryArr() As String = Nothing
    Dim SubReport_NameArr() As String = Nothing
    Friend WithEvents MnuShowLedgerPosting As ToolStripMenuItem
    Friend WithEvents MnuWhatsappDocument As ToolStripMenuItem
    Friend WithEvents MnuGenerateEBill As ToolStripMenuItem
    Public WithEvents Pnl7 As Panel
    Dim SubReport_DataSetArr() As DataSet = Nothing

    Public Function FItemTypeSettings(ItemType As String) As DataRow
        Dim DrItemTypeSetting As DataRow()

        DrItemTypeSetting = DtItemTypeSettingsAll.Select("ItemType='" & ItemType & "' And Div_Code='" & TxtDivision.Tag & "'")
        If DrItemTypeSetting.Length <= 0 Then
            DrItemTypeSetting = DtItemTypeSettingsAll.Select("ItemType='" & ItemType & "'")
        End If

        FItemTypeSettings = DrItemTypeSetting(0)
    End Function

    Public Sub New(ByVal StrUPVar As String, ByVal DTUP As DataTable, ByVal strNCat As String, Optional ByVal strCustomUI As String = "")
        ' This call is required by the Windows Form Designer.
        InitializeComponent()
        ' Add any initialization after the InitializeComponent() call.
        Topctrl1.FSetParent(Me, StrUPVar, DTUP)
        Topctrl1.SetDisp(True)

        EntryNCat = strNCat
        mCustomUI = strCustomUI

        mQry = "Select H.* from SaleInvoiceSetting H  With (NoLock) Left Join Voucher_Type Vt  With (NoLock) On H.V_Type = Vt.V_Type  Where IfNull(Vt.NCat,'') In ('" & EntryNCat & "') Or H.V_Type Is Null "
        DtV_TypeSettings = AgL.FillData(mQry, AgL.GCn).Tables(0)
        If DtV_TypeSettings.Rows.Count = 0 Then
            MsgBox("Voucher Type Settings Not Found")
        End If
    End Sub

#Region "Form Designer Code"
    Private Sub InitializeComponent()
        Me.components = New System.ComponentModel.Container()
        Dim resources As System.ComponentModel.ComponentResourceManager = New System.ComponentModel.ComponentResourceManager(GetType(FrmSaleInvoiceDirect_WithDimension))
        Me.Dgl1 = New AgControls.AgDataGrid()
        Me.PnlTotals = New System.Windows.Forms.Panel()
        Me.Label8 = New System.Windows.Forms.Label()
        Me.LblCurrentStock = New System.Windows.Forms.Label()
        Me.LblTotalPcs = New System.Windows.Forms.Label()
        Me.LblTotalPcsText = New System.Windows.Forms.Label()
        Me.LblTotalBale = New System.Windows.Forms.Label()
        Me.LblTotalBaleText = New System.Windows.Forms.Label()
        Me.LblDealQty = New System.Windows.Forms.Label()
        Me.LblDealQtyText = New System.Windows.Forms.Label()
        Me.LblTotalQty = New System.Windows.Forms.Label()
        Me.LblTotalAmount = New System.Windows.Forms.Label()
        Me.LblTotalQtyText = New System.Windows.Forms.Label()
        Me.LblTotalAmountText = New System.Windows.Forms.Label()
        Me.LblBalanceLimit = New System.Windows.Forms.Label()
        Me.Pnl1 = New System.Windows.Forms.Panel()
        Me.TxtStructure = New AgControls.AgTextBox()
        Me.Label25 = New System.Windows.Forms.Label()
        Me.LblCurrency = New System.Windows.Forms.Label()
        Me.PnlCalcGrid = New System.Windows.Forms.Panel()
        Me.TxtCreditLimit = New AgControls.AgTextBox()
        Me.LblCreditLimit = New System.Windows.Forms.Label()
        Me.TxtCurrBal = New AgControls.AgTextBox()
        Me.LblCurrentBalance = New System.Windows.Forms.Label()
        Me.LblNature = New System.Windows.Forms.Label()
        Me.TxtNature = New AgControls.AgTextBox()
        Me.PnlCustomGrid = New System.Windows.Forms.Panel()
        Me.TxtCustomFields = New AgControls.AgTextBox()
        Me.GBoxImportFromExcel = New System.Windows.Forms.GroupBox()
        Me.BtnImprtFromExcel = New System.Windows.Forms.Button()
        Me.LblPurchaseRate = New System.Windows.Forms.Label()
        Me.Panel3 = New System.Windows.Forms.Panel()
        Me.LblHelp = New System.Windows.Forms.Label()
        Me.MnuOptions = New System.Windows.Forms.ContextMenuStrip(Me.components)
        Me.MnuImportFromExcel = New System.Windows.Forms.ToolStripMenuItem()
        Me.MnuImportFromDos = New System.Windows.Forms.ToolStripMenuItem()
        Me.MnuImportFromTally = New System.Windows.Forms.ToolStripMenuItem()
        Me.MnuEditSave = New System.Windows.Forms.ToolStripMenuItem()
        Me.MnuCancelEntry = New System.Windows.Forms.ToolStripMenuItem()
        Me.MnuGenerateEWayBill = New System.Windows.Forms.ToolStripMenuItem()
        Me.MnuReconcileBill = New System.Windows.Forms.ToolStripMenuItem()
        Me.MnuEMail = New System.Windows.Forms.ToolStripMenuItem()
        Me.MnuSendSms = New System.Windows.Forms.ToolStripMenuItem()
        Me.MnuWhatsappDocument = New System.Windows.Forms.ToolStripMenuItem()
        Me.MnuPrintQACopy = New System.Windows.Forms.ToolStripMenuItem()
        Me.MnuPrintBulk = New System.Windows.Forms.ToolStripMenuItem()
        Me.MnuReferenceEntries = New System.Windows.Forms.ToolStripMenuItem()
        Me.MnuHistory = New System.Windows.Forms.ToolStripMenuItem()
        Me.MnuShowLedgerPosting = New System.Windows.Forms.ToolStripMenuItem()
        Me.MnuReport = New System.Windows.Forms.ToolStripMenuItem()
        Me.MnuGenerateEBill = New System.Windows.Forms.ToolStripMenuItem()
        Me.TxtBarcode = New AgControls.AgTextBox()
        Me.LblBarcode = New System.Windows.Forms.Label()
        Me.OFDMain = New System.Windows.Forms.OpenFileDialog()
        Me.Pnl2 = New System.Windows.Forms.Panel()
        Me.Pnl3 = New System.Windows.Forms.Panel()
        Me.PnlPurchase = New System.Windows.Forms.Panel()
        Me.TxtBalanceLimit = New AgControls.AgTextBox()
        Me.LblCancelled = New System.Windows.Forms.Label()
        Me.Pnl4 = New System.Windows.Forms.Panel()
        Me.Pnl7 = New System.Windows.Forms.Panel()
        Me.PnlItemCategorySummary = New System.Windows.Forms.Panel()
        Me.GroupBox2.SuspendLayout()
        Me.GBoxMoveToLog.SuspendLayout()
        Me.GBoxApprove.SuspendLayout()
        Me.GBoxEntryType.SuspendLayout()
        Me.GrpUP.SuspendLayout()
        Me.GBoxDivision.SuspendLayout()
        Me.TabControl1.SuspendLayout()
        Me.TP1.SuspendLayout()
        CType(Me.DTMaster, System.ComponentModel.ISupportInitialize).BeginInit()
        CType(Me.Dgl1, System.ComponentModel.ISupportInitialize).BeginInit()
        Me.PnlTotals.SuspendLayout()
        Me.GBoxImportFromExcel.SuspendLayout()
        Me.MnuOptions.SuspendLayout()
        Me.SuspendLayout()
        '
        'GroupBox2
        '
        Me.GroupBox2.Location = New System.Drawing.Point(787, 690)
        Me.GroupBox2.Size = New System.Drawing.Size(148, 40)
        Me.GroupBox2.Visible = False
        '
        'TxtStatus
        '
        Me.TxtStatus.AgSelectedValue = ""
        Me.TxtStatus.Location = New System.Drawing.Point(29, 19)
        Me.TxtStatus.Tag = ""
        '
        'CmdStatus
        '
        Me.CmdStatus.Size = New System.Drawing.Size(26, 19)
        '
        'GBoxMoveToLog
        '
        Me.GBoxMoveToLog.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.GBoxMoveToLog.Controls.Add(Me.LblCancelled)
        Me.GBoxMoveToLog.Location = New System.Drawing.Point(601, 578)
        Me.GBoxMoveToLog.Size = New System.Drawing.Size(118, 39)
        Me.GBoxMoveToLog.Controls.SetChildIndex(Me.TxtMoveToLog, 0)
        Me.GBoxMoveToLog.Controls.SetChildIndex(Me.LblCancelled, 0)
        '
        'TxtMoveToLog
        '
        Me.TxtMoveToLog.Location = New System.Drawing.Point(3, 18)
        Me.TxtMoveToLog.Size = New System.Drawing.Size(112, 18)
        Me.TxtMoveToLog.Tag = ""
        '
        'GBoxApprove
        '
        Me.GBoxApprove.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.GBoxApprove.Location = New System.Drawing.Point(841, 577)
        Me.GBoxApprove.Size = New System.Drawing.Size(137, 40)
        Me.GBoxApprove.Text = "Approved By"
        '
        'TxtApproveBy
        '
        Me.TxtApproveBy.Location = New System.Drawing.Point(29, 19)
        Me.TxtApproveBy.Size = New System.Drawing.Size(79, 18)
        Me.TxtApproveBy.Tag = ""
        '
        'CmdDiscard
        '
        Me.CmdDiscard.Location = New System.Drawing.Point(108, 18)
        Me.CmdDiscard.Size = New System.Drawing.Size(26, 19)
        '
        'CmdApprove
        '
        Me.CmdApprove.Size = New System.Drawing.Size(26, 19)
        '
        'GBoxEntryType
        '
        Me.GBoxEntryType.Location = New System.Drawing.Point(168, 635)
        Me.GBoxEntryType.Size = New System.Drawing.Size(119, 40)
        '
        'TxtEntryType
        '
        Me.TxtEntryType.Location = New System.Drawing.Point(3, 19)
        Me.TxtEntryType.Tag = ""
        '
        'GrpUP
        '
        Me.GrpUP.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.GrpUP.Location = New System.Drawing.Point(481, 576)
        Me.GrpUP.Size = New System.Drawing.Size(117, 42)
        '
        'TxtEntryBy
        '
        Me.TxtEntryBy.Location = New System.Drawing.Point(3, 21)
        Me.TxtEntryBy.Size = New System.Drawing.Size(111, 18)
        Me.TxtEntryBy.Tag = ""
        Me.TxtEntryBy.Text = ""
        '
        'GroupBox1
        '
        Me.GroupBox1.Font = New System.Drawing.Font("Microsoft Sans Serif", 8.25!)
        Me.GroupBox1.Location = New System.Drawing.Point(2, 642)
        Me.GroupBox1.Size = New System.Drawing.Size(1002, 4)
        '
        'GBoxDivision
        '
        Me.GBoxDivision.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.GBoxDivision.Location = New System.Drawing.Point(721, 578)
        Me.GBoxDivision.Size = New System.Drawing.Size(119, 39)
        '
        'TxtDivision
        '
        Me.TxtDivision.AgSelectedValue = ""
        Me.TxtDivision.Location = New System.Drawing.Point(3, 18)
        Me.TxtDivision.Size = New System.Drawing.Size(113, 18)
        Me.TxtDivision.Tag = ""
        '
        'TxtDocId
        '
        Me.TxtDocId.AgSelectedValue = ""
        Me.TxtDocId.BackColor = System.Drawing.Color.White
        Me.TxtDocId.Tag = ""
        Me.TxtDocId.Text = ""
        '
        'LblDocId
        '
        Me.LblDocId.Tag = ""
        '
        'LblPrefix
        '
        Me.LblPrefix.Location = New System.Drawing.Point(336, 267)
        Me.LblPrefix.Tag = ""
        Me.LblPrefix.Visible = False
        '
        'TabControl1
        '
        Me.TabControl1.Anchor = CType(((System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Left) _
            Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.TabControl1.Font = New System.Drawing.Font("Tahoma", 8.25!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.TabControl1.Location = New System.Drawing.Point(-4, 17)
        Me.TabControl1.Size = New System.Drawing.Size(1002, 184)
        Me.TabControl1.TabIndex = 0
        '
        'TP1
        '
        Me.TP1.BackColor = System.Drawing.Color.FromArgb(CType(CType(234, Byte), Integer), CType(CType(234, Byte), Integer), CType(CType(234, Byte), Integer))
        Me.TP1.Controls.Add(Me.Pnl2)
        Me.TP1.Controls.Add(Me.LblNature)
        Me.TP1.Controls.Add(Me.TxtNature)
        Me.TP1.Controls.Add(Me.Panel3)
        Me.TP1.Controls.Add(Me.LblCurrency)
        Me.TP1.Controls.Add(Me.Label25)
        Me.TP1.Controls.Add(Me.TxtStructure)
        Me.TP1.Location = New System.Drawing.Point(4, 22)
        Me.TP1.Size = New System.Drawing.Size(994, 158)
        Me.TP1.Text = "Document Detail"
        Me.TP1.Controls.SetChildIndex(Me.LblNCatNature, 0)
        Me.TP1.Controls.SetChildIndex(Me.PnlMain, 0)
        Me.TP1.Controls.SetChildIndex(Me.TxtStructure, 0)
        Me.TP1.Controls.SetChildIndex(Me.Label25, 0)
        Me.TP1.Controls.SetChildIndex(Me.LblCurrency, 0)
        Me.TP1.Controls.SetChildIndex(Me.Panel3, 0)
        Me.TP1.Controls.SetChildIndex(Me.TxtNature, 0)
        Me.TP1.Controls.SetChildIndex(Me.LblNature, 0)
        Me.TP1.Controls.SetChildIndex(Me.LblPrefix, 0)
        Me.TP1.Controls.SetChildIndex(Me.LblV_Type, 0)
        Me.TP1.Controls.SetChildIndex(Me.LblDocId, 0)
        Me.TP1.Controls.SetChildIndex(Me.TxtDocId, 0)
        Me.TP1.Controls.SetChildIndex(Me.Pnl2, 0)
        '
        'Topctrl1
        '
        Me.Topctrl1.Size = New System.Drawing.Size(984, 41)
        Me.Topctrl1.TabIndex = 0
        '
        'PnlMain
        '
        Me.PnlMain.Location = New System.Drawing.Point(1, 1)
        Me.PnlMain.Size = New System.Drawing.Size(490, 157)
        '
        'LblV_Type
        '
        Me.LblV_Type.Font = New System.Drawing.Font("Verdana", 9.5!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.LblV_Type.Location = New System.Drawing.Point(425, 170)
        Me.LblV_Type.Size = New System.Drawing.Size(101, 16)
        Me.LblV_Type.Tag = ""
        Me.LblV_Type.Text = "Invoice Type"
        '
        'ChkTemporarilySaved
        '
        Me.ChkTemporarilySaved.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.ChkTemporarilySaved.Location = New System.Drawing.Point(487, 558)
        '
        'Dgl1
        '
        Me.Dgl1.AgAllowFind = True
        Me.Dgl1.AgLastColumn = -1
        Me.Dgl1.AgMandatoryColumn = 0
        Me.Dgl1.AgReadOnlyColumnColor = System.Drawing.Color.Ivory
        Me.Dgl1.AgSearchMethod = AgControls.AgLib.TxtSearchMethod.Simple
        Me.Dgl1.AgSkipReadOnlyColumns = False
        Me.Dgl1.CancelEditingControlValidating = False
        Me.Dgl1.GridSearchMethod = AgControls.AgLib.TxtSearchMethod.Simple
        Me.Dgl1.Location = New System.Drawing.Point(0, 0)
        Me.Dgl1.Name = "Dgl1"
        Me.Dgl1.Size = New System.Drawing.Size(240, 150)
        Me.Dgl1.TabIndex = 0
        '
        'PnlTotals
        '
        Me.PnlTotals.Anchor = CType(((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left) _
            Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.PnlTotals.BackColor = System.Drawing.Color.Cornsilk
        Me.PnlTotals.Controls.Add(Me.Label8)
        Me.PnlTotals.Controls.Add(Me.LblCurrentStock)
        Me.PnlTotals.Controls.Add(Me.LblTotalPcs)
        Me.PnlTotals.Controls.Add(Me.LblTotalPcsText)
        Me.PnlTotals.Controls.Add(Me.LblTotalBale)
        Me.PnlTotals.Controls.Add(Me.LblTotalBaleText)
        Me.PnlTotals.Controls.Add(Me.LblDealQty)
        Me.PnlTotals.Controls.Add(Me.LblDealQtyText)
        Me.PnlTotals.Controls.Add(Me.LblTotalQty)
        Me.PnlTotals.Controls.Add(Me.LblTotalAmount)
        Me.PnlTotals.Controls.Add(Me.LblTotalQtyText)
        Me.PnlTotals.Controls.Add(Me.LblTotalAmountText)
        Me.PnlTotals.Location = New System.Drawing.Point(4, 409)
        Me.PnlTotals.Name = "PnlTotals"
        Me.PnlTotals.Size = New System.Drawing.Size(978, 23)
        Me.PnlTotals.TabIndex = 694
        '
        'Label8
        '
        Me.Label8.AutoSize = True
        Me.Label8.Font = New System.Drawing.Font("Arial", 9.75!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.Label8.ForeColor = System.Drawing.Color.Maroon
        Me.Label8.Location = New System.Drawing.Point(634, 4)
        Me.Label8.Name = "Label8"
        Me.Label8.Size = New System.Drawing.Size(73, 16)
        Me.Label8.TabIndex = 721
        Me.Label8.Text = "Curr.Stock"
        '
        'LblCurrentStock
        '
        Me.LblCurrentStock.AutoSize = True
        Me.LblCurrentStock.Font = New System.Drawing.Font("Arial", 9.75!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.LblCurrentStock.ForeColor = System.Drawing.SystemColors.ControlDarkDark
        Me.LblCurrentStock.Location = New System.Drawing.Point(715, 3)
        Me.LblCurrentStock.Name = "LblCurrentStock"
        Me.LblCurrentStock.Size = New System.Drawing.Size(12, 16)
        Me.LblCurrentStock.TabIndex = 720
        Me.LblCurrentStock.Text = "."
        Me.LblCurrentStock.TextAlign = System.Drawing.ContentAlignment.MiddleLeft
        '
        'LblTotalPcs
        '
        Me.LblTotalPcs.AutoSize = True
        Me.LblTotalPcs.Font = New System.Drawing.Font("Arial", 9.75!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.LblTotalPcs.ForeColor = System.Drawing.SystemColors.ControlDarkDark
        Me.LblTotalPcs.Location = New System.Drawing.Point(423, 4)
        Me.LblTotalPcs.Name = "LblTotalPcs"
        Me.LblTotalPcs.Size = New System.Drawing.Size(12, 16)
        Me.LblTotalPcs.TabIndex = 718
        Me.LblTotalPcs.Text = "."
        Me.LblTotalPcs.TextAlign = System.Drawing.ContentAlignment.MiddleLeft
        '
        'LblTotalPcsText
        '
        Me.LblTotalPcsText.AutoSize = True
        Me.LblTotalPcsText.Font = New System.Drawing.Font("Arial", 9.75!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.LblTotalPcsText.ForeColor = System.Drawing.Color.Maroon
        Me.LblTotalPcsText.Location = New System.Drawing.Point(349, 3)
        Me.LblTotalPcsText.Name = "LblTotalPcsText"
        Me.LblTotalPcsText.Size = New System.Drawing.Size(73, 16)
        Me.LblTotalPcsText.TabIndex = 717
        Me.LblTotalPcsText.Text = "Total Pcs :"
        '
        'LblTotalBale
        '
        Me.LblTotalBale.AutoSize = True
        Me.LblTotalBale.Font = New System.Drawing.Font("Arial", 9.75!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.LblTotalBale.ForeColor = System.Drawing.SystemColors.ControlDarkDark
        Me.LblTotalBale.Location = New System.Drawing.Point(585, 4)
        Me.LblTotalBale.Name = "LblTotalBale"
        Me.LblTotalBale.Size = New System.Drawing.Size(12, 16)
        Me.LblTotalBale.TabIndex = 716
        Me.LblTotalBale.Text = "."
        Me.LblTotalBale.TextAlign = System.Drawing.ContentAlignment.MiddleLeft
        '
        'LblTotalBaleText
        '
        Me.LblTotalBaleText.AutoSize = True
        Me.LblTotalBaleText.Font = New System.Drawing.Font("Arial", 9.75!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.LblTotalBaleText.ForeColor = System.Drawing.Color.Maroon
        Me.LblTotalBaleText.Location = New System.Drawing.Point(499, 3)
        Me.LblTotalBaleText.Name = "LblTotalBaleText"
        Me.LblTotalBaleText.Size = New System.Drawing.Size(86, 16)
        Me.LblTotalBaleText.TabIndex = 715
        Me.LblTotalBaleText.Text = "Total Bales :"
        '
        'LblDealQty
        '
        Me.LblDealQty.AutoSize = True
        Me.LblDealQty.Font = New System.Drawing.Font("Arial", 9.75!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.LblDealQty.ForeColor = System.Drawing.SystemColors.ControlDarkDark
        Me.LblDealQty.Location = New System.Drawing.Point(281, 3)
        Me.LblDealQty.Name = "LblDealQty"
        Me.LblDealQty.Size = New System.Drawing.Size(12, 16)
        Me.LblDealQty.TabIndex = 666
        Me.LblDealQty.Text = "."
        Me.LblDealQty.TextAlign = System.Drawing.ContentAlignment.MiddleLeft
        '
        'LblDealQtyText
        '
        Me.LblDealQtyText.AutoSize = True
        Me.LblDealQtyText.Font = New System.Drawing.Font("Arial", 9.75!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.LblDealQtyText.ForeColor = System.Drawing.Color.Maroon
        Me.LblDealQtyText.Location = New System.Drawing.Point(170, 3)
        Me.LblDealQtyText.Name = "LblDealQtyText"
        Me.LblDealQtyText.Size = New System.Drawing.Size(105, 16)
        Me.LblDealQtyText.TabIndex = 665
        Me.LblDealQtyText.Text = "Total Deal Qty :"
        '
        'LblTotalQty
        '
        Me.LblTotalQty.Anchor = CType((((System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom) _
            Or System.Windows.Forms.AnchorStyles.Left) _
            Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.LblTotalQty.AutoSize = True
        Me.LblTotalQty.Font = New System.Drawing.Font("Arial", 9.75!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.LblTotalQty.ForeColor = System.Drawing.SystemColors.ControlDarkDark
        Me.LblTotalQty.Location = New System.Drawing.Point(97, 3)
        Me.LblTotalQty.Name = "LblTotalQty"
        Me.LblTotalQty.Size = New System.Drawing.Size(12, 16)
        Me.LblTotalQty.TabIndex = 660
        Me.LblTotalQty.Text = "."
        Me.LblTotalQty.TextAlign = System.Drawing.ContentAlignment.MiddleLeft
        '
        'LblTotalAmount
        '
        Me.LblTotalAmount.AutoSize = True
        Me.LblTotalAmount.Font = New System.Drawing.Font("Arial", 9.75!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.LblTotalAmount.ForeColor = System.Drawing.SystemColors.ControlDarkDark
        Me.LblTotalAmount.Location = New System.Drawing.Point(868, 4)
        Me.LblTotalAmount.Name = "LblTotalAmount"
        Me.LblTotalAmount.Size = New System.Drawing.Size(12, 16)
        Me.LblTotalAmount.TabIndex = 662
        Me.LblTotalAmount.Text = "."
        Me.LblTotalAmount.TextAlign = System.Drawing.ContentAlignment.MiddleLeft
        '
        'LblTotalQtyText
        '
        Me.LblTotalQtyText.Anchor = CType((((System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom) _
            Or System.Windows.Forms.AnchorStyles.Left) _
            Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.LblTotalQtyText.AutoSize = True
        Me.LblTotalQtyText.Font = New System.Drawing.Font("Arial", 9.75!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.LblTotalQtyText.ForeColor = System.Drawing.Color.Maroon
        Me.LblTotalQtyText.Location = New System.Drawing.Point(12, 3)
        Me.LblTotalQtyText.Name = "LblTotalQtyText"
        Me.LblTotalQtyText.Size = New System.Drawing.Size(72, 16)
        Me.LblTotalQtyText.TabIndex = 659
        Me.LblTotalQtyText.Text = "Total Qty :"
        '
        'LblTotalAmountText
        '
        Me.LblTotalAmountText.AutoSize = True
        Me.LblTotalAmountText.Font = New System.Drawing.Font("Arial", 9.75!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.LblTotalAmountText.ForeColor = System.Drawing.Color.Maroon
        Me.LblTotalAmountText.Location = New System.Drawing.Point(771, 3)
        Me.LblTotalAmountText.Name = "LblTotalAmountText"
        Me.LblTotalAmountText.Size = New System.Drawing.Size(100, 16)
        Me.LblTotalAmountText.TabIndex = 661
        Me.LblTotalAmountText.Text = "Total Amount :"
        '
        'LblBalanceLimit
        '
        Me.LblBalanceLimit.AutoSize = True
        Me.LblBalanceLimit.BackColor = System.Drawing.Color.Transparent
        Me.LblBalanceLimit.Font = New System.Drawing.Font("Verdana", 9.5!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.LblBalanceLimit.ForeColor = System.Drawing.Color.Maroon
        Me.LblBalanceLimit.Location = New System.Drawing.Point(762, 204)
        Me.LblBalanceLimit.Name = "LblBalanceLimit"
        Me.LblBalanceLimit.Size = New System.Drawing.Size(76, 16)
        Me.LblBalanceLimit.TabIndex = 3020
        Me.LblBalanceLimit.Text = "Bal. Limit"
        '
        'Pnl1
        '
        Me.Pnl1.Anchor = CType((((System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom) _
            Or System.Windows.Forms.AnchorStyles.Left) _
            Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.Pnl1.Location = New System.Drawing.Point(4, 226)
        Me.Pnl1.Name = "Pnl1"
        Me.Pnl1.Size = New System.Drawing.Size(978, 181)
        Me.Pnl1.TabIndex = 11
        '
        'TxtStructure
        '
        Me.TxtStructure.AgAllowUserToEnableMasterHelp = False
        Me.TxtStructure.AgLastValueTag = Nothing
        Me.TxtStructure.AgLastValueText = Nothing
        Me.TxtStructure.AgMandatory = False
        Me.TxtStructure.AgMasterHelp = False
        Me.TxtStructure.AgNumberLeftPlaces = 8
        Me.TxtStructure.AgNumberNegetiveAllow = False
        Me.TxtStructure.AgNumberRightPlaces = 2
        Me.TxtStructure.AgPickFromLastValue = False
        Me.TxtStructure.AgRowFilter = ""
        Me.TxtStructure.AgSearchMethod = AgControls.AgLib.TxtSearchMethod.Simple
        Me.TxtStructure.AgSelectedValue = Nothing
        Me.TxtStructure.AgTxtCase = AgControls.AgTextBox.TxtCase.None
        Me.TxtStructure.AgValueType = AgControls.AgTextBox.TxtValueType.Text_Value
        Me.TxtStructure.BorderStyle = System.Windows.Forms.BorderStyle.None
        Me.TxtStructure.Font = New System.Drawing.Font("Arial", 11.25!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.TxtStructure.Location = New System.Drawing.Point(641, 221)
        Me.TxtStructure.MaxLength = 20
        Me.TxtStructure.Name = "TxtStructure"
        Me.TxtStructure.Size = New System.Drawing.Size(60, 18)
        Me.TxtStructure.TabIndex = 15
        Me.TxtStructure.Visible = False
        '
        'Label25
        '
        Me.Label25.AutoSize = True
        Me.Label25.BackColor = System.Drawing.Color.Transparent
        Me.Label25.Font = New System.Drawing.Font("Arial", 9.75!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.Label25.Location = New System.Drawing.Point(569, 222)
        Me.Label25.Name = "Label25"
        Me.Label25.Size = New System.Drawing.Size(61, 16)
        Me.Label25.TabIndex = 715
        Me.Label25.Text = "Structure"
        Me.Label25.Visible = False
        '
        'LblCurrency
        '
        Me.LblCurrency.AutoSize = True
        Me.LblCurrency.BackColor = System.Drawing.Color.Transparent
        Me.LblCurrency.Font = New System.Drawing.Font("Arial", 9.75!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.LblCurrency.Location = New System.Drawing.Point(332, 219)
        Me.LblCurrency.Name = "LblCurrency"
        Me.LblCurrency.Size = New System.Drawing.Size(60, 16)
        Me.LblCurrency.TabIndex = 735
        Me.LblCurrency.Text = "Currency"
        '
        'PnlCalcGrid
        '
        Me.PnlCalcGrid.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.PnlCalcGrid.Location = New System.Drawing.Point(658, 433)
        Me.PnlCalcGrid.Name = "PnlCalcGrid"
        Me.PnlCalcGrid.Size = New System.Drawing.Size(325, 144)
        Me.PnlCalcGrid.TabIndex = 15
        '
        'TxtCreditLimit
        '
        Me.TxtCreditLimit.AgAllowUserToEnableMasterHelp = False
        Me.TxtCreditLimit.AgLastValueTag = Nothing
        Me.TxtCreditLimit.AgLastValueText = Nothing
        Me.TxtCreditLimit.AgMandatory = False
        Me.TxtCreditLimit.AgMasterHelp = False
        Me.TxtCreditLimit.AgNumberLeftPlaces = 8
        Me.TxtCreditLimit.AgNumberNegetiveAllow = False
        Me.TxtCreditLimit.AgNumberRightPlaces = 0
        Me.TxtCreditLimit.AgPickFromLastValue = False
        Me.TxtCreditLimit.AgRowFilter = ""
        Me.TxtCreditLimit.AgSearchMethod = AgControls.AgLib.TxtSearchMethod.Simple
        Me.TxtCreditLimit.AgSelectedValue = Nothing
        Me.TxtCreditLimit.AgTxtCase = AgControls.AgTextBox.TxtCase.None
        Me.TxtCreditLimit.AgValueType = AgControls.AgTextBox.TxtValueType.Number_Value
        Me.TxtCreditLimit.BackColor = System.Drawing.Color.White
        Me.TxtCreditLimit.BorderStyle = System.Windows.Forms.BorderStyle.None
        Me.TxtCreditLimit.Cursor = System.Windows.Forms.Cursors.WaitCursor
        Me.TxtCreditLimit.Font = New System.Drawing.Font("Verdana", 9.75!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.TxtCreditLimit.Location = New System.Drawing.Point(620, 204)
        Me.TxtCreditLimit.MaxLength = 20
        Me.TxtCreditLimit.Name = "TxtCreditLimit"
        Me.TxtCreditLimit.ReadOnly = True
        Me.TxtCreditLimit.Size = New System.Drawing.Size(128, 16)
        Me.TxtCreditLimit.TabIndex = 8
        Me.TxtCreditLimit.TabStop = False
        Me.TxtCreditLimit.TextAlign = System.Windows.Forms.HorizontalAlignment.Right
        Me.TxtCreditLimit.UseWaitCursor = True
        '
        'LblCreditLimit
        '
        Me.LblCreditLimit.AutoSize = True
        Me.LblCreditLimit.BackColor = System.Drawing.Color.Transparent
        Me.LblCreditLimit.Font = New System.Drawing.Font("Verdana", 9.5!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.LblCreditLimit.Location = New System.Drawing.Point(523, 204)
        Me.LblCreditLimit.Name = "LblCreditLimit"
        Me.LblCreditLimit.Size = New System.Drawing.Size(92, 16)
        Me.LblCreditLimit.TabIndex = 741
        Me.LblCreditLimit.Text = "Credit Limit"
        '
        'TxtCurrBal
        '
        Me.TxtCurrBal.AgAllowUserToEnableMasterHelp = False
        Me.TxtCurrBal.AgLastValueTag = Nothing
        Me.TxtCurrBal.AgLastValueText = Nothing
        Me.TxtCurrBal.AgMandatory = False
        Me.TxtCurrBal.AgMasterHelp = False
        Me.TxtCurrBal.AgNumberLeftPlaces = 8
        Me.TxtCurrBal.AgNumberNegetiveAllow = True
        Me.TxtCurrBal.AgNumberRightPlaces = 2
        Me.TxtCurrBal.AgPickFromLastValue = False
        Me.TxtCurrBal.AgRowFilter = ""
        Me.TxtCurrBal.AgSearchMethod = AgControls.AgLib.TxtSearchMethod.Simple
        Me.TxtCurrBal.AgSelectedValue = Nothing
        Me.TxtCurrBal.AgTxtCase = AgControls.AgTextBox.TxtCase.None
        Me.TxtCurrBal.AgValueType = AgControls.AgTextBox.TxtValueType.Number_Value
        Me.TxtCurrBal.BackColor = System.Drawing.Color.White
        Me.TxtCurrBal.BorderStyle = System.Windows.Forms.BorderStyle.None
        Me.TxtCurrBal.Cursor = System.Windows.Forms.Cursors.WaitCursor
        Me.TxtCurrBal.Font = New System.Drawing.Font("Verdana", 9.75!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.TxtCurrBal.Location = New System.Drawing.Point(400, 204)
        Me.TxtCurrBal.MaxLength = 20
        Me.TxtCurrBal.Name = "TxtCurrBal"
        Me.TxtCurrBal.ReadOnly = True
        Me.TxtCurrBal.Size = New System.Drawing.Size(120, 16)
        Me.TxtCurrBal.TabIndex = 7
        Me.TxtCurrBal.TabStop = False
        Me.TxtCurrBal.Text = "9999999999.99"
        Me.TxtCurrBal.TextAlign = System.Windows.Forms.HorizontalAlignment.Right
        Me.TxtCurrBal.UseWaitCursor = True
        '
        'LblCurrentBalance
        '
        Me.LblCurrentBalance.AutoSize = True
        Me.LblCurrentBalance.BackColor = System.Drawing.Color.Transparent
        Me.LblCurrentBalance.Font = New System.Drawing.Font("Verdana", 9.5!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.LblCurrentBalance.Location = New System.Drawing.Point(290, 204)
        Me.LblCurrentBalance.Name = "LblCurrentBalance"
        Me.LblCurrentBalance.Size = New System.Drawing.Size(106, 16)
        Me.LblCurrentBalance.TabIndex = 743
        Me.LblCurrentBalance.Text = "Curr. Balance"
        '
        'LblNature
        '
        Me.LblNature.AutoSize = True
        Me.LblNature.BackColor = System.Drawing.Color.Transparent
        Me.LblNature.Font = New System.Drawing.Font("Arial", 9.75!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.LblNature.Location = New System.Drawing.Point(622, 163)
        Me.LblNature.Name = "LblNature"
        Me.LblNature.Size = New System.Drawing.Size(46, 16)
        Me.LblNature.TabIndex = 745
        Me.LblNature.Text = "Nature"
        Me.LblNature.Visible = False
        '
        'TxtNature
        '
        Me.TxtNature.AgAllowUserToEnableMasterHelp = False
        Me.TxtNature.AgLastValueTag = Nothing
        Me.TxtNature.AgLastValueText = Nothing
        Me.TxtNature.AgMandatory = False
        Me.TxtNature.AgMasterHelp = False
        Me.TxtNature.AgNumberLeftPlaces = 8
        Me.TxtNature.AgNumberNegetiveAllow = False
        Me.TxtNature.AgNumberRightPlaces = 2
        Me.TxtNature.AgPickFromLastValue = False
        Me.TxtNature.AgRowFilter = ""
        Me.TxtNature.AgSearchMethod = AgControls.AgLib.TxtSearchMethod.Simple
        Me.TxtNature.AgSelectedValue = Nothing
        Me.TxtNature.AgTxtCase = AgControls.AgTextBox.TxtCase.None
        Me.TxtNature.AgValueType = AgControls.AgTextBox.TxtValueType.Text_Value
        Me.TxtNature.BorderStyle = System.Windows.Forms.BorderStyle.None
        Me.TxtNature.Font = New System.Drawing.Font("Arial", 11.25!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.TxtNature.Location = New System.Drawing.Point(736, 162)
        Me.TxtNature.MaxLength = 20
        Me.TxtNature.Name = "TxtNature"
        Me.TxtNature.Size = New System.Drawing.Size(95, 18)
        Me.TxtNature.TabIndex = 10
        Me.TxtNature.Visible = False
        '
        'PnlCustomGrid
        '
        Me.PnlCustomGrid.Anchor = System.Windows.Forms.AnchorStyles.Bottom
        Me.PnlCustomGrid.Location = New System.Drawing.Point(595, 565)
        Me.PnlCustomGrid.Name = "PnlCustomGrid"
        Me.PnlCustomGrid.Size = New System.Drawing.Size(19, 22)
        Me.PnlCustomGrid.TabIndex = 3
        '
        'TxtCustomFields
        '
        Me.TxtCustomFields.AgAllowUserToEnableMasterHelp = False
        Me.TxtCustomFields.AgLastValueTag = Nothing
        Me.TxtCustomFields.AgLastValueText = Nothing
        Me.TxtCustomFields.AgMandatory = False
        Me.TxtCustomFields.AgMasterHelp = False
        Me.TxtCustomFields.AgNumberLeftPlaces = 8
        Me.TxtCustomFields.AgNumberNegetiveAllow = False
        Me.TxtCustomFields.AgNumberRightPlaces = 2
        Me.TxtCustomFields.AgPickFromLastValue = False
        Me.TxtCustomFields.AgRowFilter = ""
        Me.TxtCustomFields.AgSearchMethod = AgControls.AgLib.TxtSearchMethod.Simple
        Me.TxtCustomFields.AgSelectedValue = Nothing
        Me.TxtCustomFields.AgTxtCase = AgControls.AgTextBox.TxtCase.None
        Me.TxtCustomFields.AgValueType = AgControls.AgTextBox.TxtValueType.Text_Value
        Me.TxtCustomFields.BorderStyle = System.Windows.Forms.BorderStyle.None
        Me.TxtCustomFields.Font = New System.Drawing.Font("Arial", 11.25!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.TxtCustomFields.Location = New System.Drawing.Point(486, 636)
        Me.TxtCustomFields.MaxLength = 20
        Me.TxtCustomFields.Name = "TxtCustomFields"
        Me.TxtCustomFields.Size = New System.Drawing.Size(72, 18)
        Me.TxtCustomFields.TabIndex = 1011
        Me.TxtCustomFields.Text = "AgTextBox1"
        Me.TxtCustomFields.Visible = False
        '
        'GBoxImportFromExcel
        '
        Me.GBoxImportFromExcel.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left), System.Windows.Forms.AnchorStyles)
        Me.GBoxImportFromExcel.BackColor = System.Drawing.Color.Transparent
        Me.GBoxImportFromExcel.Controls.Add(Me.BtnImprtFromExcel)
        Me.GBoxImportFromExcel.FlatStyle = System.Windows.Forms.FlatStyle.Flat
        Me.GBoxImportFromExcel.Font = New System.Drawing.Font("Courier New", 9.75!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.GBoxImportFromExcel.ForeColor = System.Drawing.Color.Maroon
        Me.GBoxImportFromExcel.Location = New System.Drawing.Point(678, 662)
        Me.GBoxImportFromExcel.Name = "GBoxImportFromExcel"
        Me.GBoxImportFromExcel.Size = New System.Drawing.Size(99, 47)
        Me.GBoxImportFromExcel.TabIndex = 1013
        Me.GBoxImportFromExcel.TabStop = False
        Me.GBoxImportFromExcel.Tag = "UP"
        Me.GBoxImportFromExcel.Text = "Import From Excel"
        Me.GBoxImportFromExcel.Visible = False
        '
        'BtnImprtFromExcel
        '
        Me.BtnImprtFromExcel.FlatStyle = System.Windows.Forms.FlatStyle.Flat
        Me.BtnImprtFromExcel.Image = CType(resources.GetObject("BtnImprtFromExcel.Image"), System.Drawing.Image)
        Me.BtnImprtFromExcel.Location = New System.Drawing.Point(58, 9)
        Me.BtnImprtFromExcel.Name = "BtnImprtFromExcel"
        Me.BtnImprtFromExcel.Size = New System.Drawing.Size(36, 34)
        Me.BtnImprtFromExcel.TabIndex = 669
        Me.BtnImprtFromExcel.TabStop = False
        Me.BtnImprtFromExcel.UseVisualStyleBackColor = True
        '
        'LblPurchaseRate
        '
        Me.LblPurchaseRate.Anchor = System.Windows.Forms.AnchorStyles.Bottom
        Me.LblPurchaseRate.AutoSize = True
        Me.LblPurchaseRate.Location = New System.Drawing.Point(589, 578)
        Me.LblPurchaseRate.Name = "LblPurchaseRate"
        Me.LblPurchaseRate.Size = New System.Drawing.Size(39, 13)
        Me.LblPurchaseRate.TabIndex = 1014
        Me.LblPurchaseRate.Text = "Label7"
        Me.LblPurchaseRate.Visible = False
        '
        'Panel3
        '
        Me.Panel3.Location = New System.Drawing.Point(4, 162)
        Me.Panel3.Name = "Panel3"
        Me.Panel3.Size = New System.Drawing.Size(973, 184)
        Me.Panel3.TabIndex = 11
        '
        'LblHelp
        '
        Me.LblHelp.AutoSize = True
        Me.LblHelp.Font = New System.Drawing.Font("Verdana", 8.25!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.LblHelp.Location = New System.Drawing.Point(480, 663)
        Me.LblHelp.Name = "LblHelp"
        Me.LblHelp.Size = New System.Drawing.Size(122, 39)
        Me.LblHelp.TabIndex = 3006
        Me.LblHelp.Text = "D - Direct Invoice" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "S - For Stock" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "R - Return" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10)
        Me.LblHelp.Visible = False
        '
        'MnuOptions
        '
        Me.MnuOptions.Items.AddRange(New System.Windows.Forms.ToolStripItem() {Me.MnuImportFromExcel, Me.MnuImportFromDos, Me.MnuImportFromTally, Me.MnuEditSave, Me.MnuCancelEntry, Me.MnuGenerateEWayBill, Me.MnuReconcileBill, Me.MnuEMail, Me.MnuSendSms, Me.MnuWhatsappDocument, Me.MnuPrintQACopy, Me.MnuPrintBulk, Me.MnuReferenceEntries, Me.MnuHistory, Me.MnuShowLedgerPosting, Me.MnuReport, Me.MnuGenerateEBill})
        Me.MnuOptions.Name = "MnuOptions"
        Me.MnuOptions.Size = New System.Drawing.Size(187, 400)
        '
        'MnuImportFromExcel
        '
        Me.MnuImportFromExcel.Name = "MnuImportFromExcel"
        Me.MnuImportFromExcel.Size = New System.Drawing.Size(186, 22)
        Me.MnuImportFromExcel.Text = "Import From Excel"
        '
        'MnuImportFromDos
        '
        Me.MnuImportFromDos.Name = "MnuImportFromDos"
        Me.MnuImportFromDos.Size = New System.Drawing.Size(186, 22)
        Me.MnuImportFromDos.Text = "Import From Dos"
        '
        'MnuImportFromTally
        '
        Me.MnuImportFromTally.Name = "MnuImportFromTally"
        Me.MnuImportFromTally.Size = New System.Drawing.Size(186, 22)
        Me.MnuImportFromTally.Text = "Import From Tally"
        '
        'MnuEditSave
        '
        Me.MnuEditSave.Name = "MnuEditSave"
        Me.MnuEditSave.Size = New System.Drawing.Size(186, 22)
        Me.MnuEditSave.Text = "Edit & Save"
        '
        'MnuCancelEntry
        '
        Me.MnuCancelEntry.Name = "MnuCancelEntry"
        Me.MnuCancelEntry.Size = New System.Drawing.Size(186, 22)
        Me.MnuCancelEntry.Text = "Cancel Entry"
        '
        'MnuGenerateEWayBill
        '
        Me.MnuGenerateEWayBill.Name = "MnuGenerateEWayBill"
        Me.MnuGenerateEWayBill.Size = New System.Drawing.Size(186, 22)
        Me.MnuGenerateEWayBill.Text = "Generate EWay Bill"
        '
        'MnuReconcileBill
        '
        Me.MnuReconcileBill.Name = "MnuReconcileBill"
        Me.MnuReconcileBill.Size = New System.Drawing.Size(186, 22)
        Me.MnuReconcileBill.Text = "Reconcile Document"
        '
        'MnuEMail
        '
        Me.MnuEMail.Name = "MnuEMail"
        Me.MnuEMail.Size = New System.Drawing.Size(186, 22)
        Me.MnuEMail.Text = "E-Mail Document"
        '
        'MnuSendSms
        '
        Me.MnuSendSms.Name = "MnuSendSms"
        Me.MnuSendSms.Size = New System.Drawing.Size(186, 22)
        Me.MnuSendSms.Text = "Send Sms"
        '
        'MnuWhatsappDocument
        '
        Me.MnuWhatsappDocument.Name = "MnuWhatsappDocument"
        Me.MnuWhatsappDocument.Size = New System.Drawing.Size(186, 22)
        Me.MnuWhatsappDocument.Text = "Whatsapp Document"
        '
        'MnuPrintQACopy
        '
        Me.MnuPrintQACopy.Name = "MnuPrintQACopy"
        Me.MnuPrintQACopy.Size = New System.Drawing.Size(186, 22)
        Me.MnuPrintQACopy.Text = "Print QA Copy"
        '
        'MnuPrintBulk
        '
        Me.MnuPrintBulk.Name = "MnuPrintBulk"
        Me.MnuPrintBulk.Size = New System.Drawing.Size(186, 22)
        Me.MnuPrintBulk.Text = "Print Bulk"
        '
        'MnuReferenceEntries
        '
        Me.MnuReferenceEntries.Name = "MnuReferenceEntries"
        Me.MnuReferenceEntries.Size = New System.Drawing.Size(186, 22)
        Me.MnuReferenceEntries.Text = "Reference Entries"
        '
        'MnuHistory
        '
        Me.MnuHistory.Name = "MnuHistory"
        Me.MnuHistory.Size = New System.Drawing.Size(186, 22)
        Me.MnuHistory.Text = "History"
        '
        'MnuShowLedgerPosting
        '
        Me.MnuShowLedgerPosting.Name = "MnuShowLedgerPosting"
        Me.MnuShowLedgerPosting.Size = New System.Drawing.Size(186, 22)
        Me.MnuShowLedgerPosting.Text = "Show Ledger Posting"
        '
        'MnuReport
        '
        Me.MnuReport.Name = "MnuReport"
        Me.MnuReport.Size = New System.Drawing.Size(186, 22)
        Me.MnuReport.Text = "Report"
        '
        'MnuGenerateEBill
        '
        Me.MnuGenerateEBill.Name = "MnuGenerateEBill"
        Me.MnuGenerateEBill.Size = New System.Drawing.Size(186, 22)
        Me.MnuGenerateEBill.Text = "Generate E Bill"
        '
        'TxtBarcode
        '
        Me.TxtBarcode.AgAllowUserToEnableMasterHelp = False
        Me.TxtBarcode.AgLastValueTag = Nothing
        Me.TxtBarcode.AgLastValueText = Nothing
        Me.TxtBarcode.AgMandatory = False
        Me.TxtBarcode.AgMasterHelp = False
        Me.TxtBarcode.AgNumberLeftPlaces = 8
        Me.TxtBarcode.AgNumberNegetiveAllow = False
        Me.TxtBarcode.AgNumberRightPlaces = 2
        Me.TxtBarcode.AgPickFromLastValue = False
        Me.TxtBarcode.AgRowFilter = ""
        Me.TxtBarcode.AgSearchMethod = AgControls.AgLib.TxtSearchMethod.Simple
        Me.TxtBarcode.AgSelectedValue = Nothing
        Me.TxtBarcode.AgTxtCase = AgControls.AgTextBox.TxtCase.None
        Me.TxtBarcode.AgValueType = AgControls.AgTextBox.TxtValueType.Text_Value
        Me.TxtBarcode.BorderStyle = System.Windows.Forms.BorderStyle.None
        Me.TxtBarcode.Font = New System.Drawing.Font("Verdana", 11.25!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.TxtBarcode.Location = New System.Drawing.Point(144, 203)
        Me.TxtBarcode.MaxLength = 20
        Me.TxtBarcode.Name = "TxtBarcode"
        Me.TxtBarcode.Size = New System.Drawing.Size(141, 19)
        Me.TxtBarcode.TabIndex = 10
        '
        'LblBarcode
        '
        Me.LblBarcode.AutoSize = True
        Me.LblBarcode.BackColor = System.Drawing.Color.Transparent
        Me.LblBarcode.Font = New System.Drawing.Font("Verdana", 9.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.LblBarcode.Location = New System.Drawing.Point(6, 205)
        Me.LblBarcode.Name = "LblBarcode"
        Me.LblBarcode.Size = New System.Drawing.Size(136, 14)
        Me.LblBarcode.TabIndex = 3004
        Me.LblBarcode.Text = "Enter Barcode Here"
        '
        'OFDMain
        '
        Me.OFDMain.FileName = "price.xls"
        Me.OFDMain.Filter = "*.xls|*.Xls"
        Me.OFDMain.InitialDirectory = "D:\"
        Me.OFDMain.ShowHelp = True
        Me.OFDMain.Title = "Select Excel File"
        '
        'Pnl2
        '
        Me.Pnl2.Location = New System.Drawing.Point(493, 1)
        Me.Pnl2.Name = "Pnl2"
        Me.Pnl2.Size = New System.Drawing.Size(490, 157)
        Me.Pnl2.TabIndex = 3004
        '
        'Pnl3
        '
        Me.Pnl3.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left), System.Windows.Forms.AnchorStyles)
        Me.Pnl3.Location = New System.Drawing.Point(4, 434)
        Me.Pnl3.Name = "Pnl3"
        Me.Pnl3.Size = New System.Drawing.Size(475, 186)
        Me.Pnl3.TabIndex = 3018
        '
        'PnlPurchase
        '
        Me.PnlPurchase.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left), System.Windows.Forms.AnchorStyles)
        Me.PnlPurchase.Location = New System.Drawing.Point(634, 563)
        Me.PnlPurchase.Name = "PnlPurchase"
        Me.PnlPurchase.Size = New System.Drawing.Size(15, 14)
        Me.PnlPurchase.TabIndex = 3022
        '
        'TxtBalanceLimit
        '
        Me.TxtBalanceLimit.AgAllowUserToEnableMasterHelp = False
        Me.TxtBalanceLimit.AgLastValueTag = Nothing
        Me.TxtBalanceLimit.AgLastValueText = Nothing
        Me.TxtBalanceLimit.AgMandatory = False
        Me.TxtBalanceLimit.AgMasterHelp = False
        Me.TxtBalanceLimit.AgNumberLeftPlaces = 8
        Me.TxtBalanceLimit.AgNumberNegetiveAllow = False
        Me.TxtBalanceLimit.AgNumberRightPlaces = 0
        Me.TxtBalanceLimit.AgPickFromLastValue = False
        Me.TxtBalanceLimit.AgRowFilter = ""
        Me.TxtBalanceLimit.AgSearchMethod = AgControls.AgLib.TxtSearchMethod.Simple
        Me.TxtBalanceLimit.AgSelectedValue = Nothing
        Me.TxtBalanceLimit.AgTxtCase = AgControls.AgTextBox.TxtCase.None
        Me.TxtBalanceLimit.AgValueType = AgControls.AgTextBox.TxtValueType.Text_Value
        Me.TxtBalanceLimit.BackColor = System.Drawing.Color.White
        Me.TxtBalanceLimit.BorderStyle = System.Windows.Forms.BorderStyle.None
        Me.TxtBalanceLimit.Cursor = System.Windows.Forms.Cursors.WaitCursor
        Me.TxtBalanceLimit.Font = New System.Drawing.Font("Verdana", 9.75!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.TxtBalanceLimit.Location = New System.Drawing.Point(847, 204)
        Me.TxtBalanceLimit.MaxLength = 20
        Me.TxtBalanceLimit.Name = "TxtBalanceLimit"
        Me.TxtBalanceLimit.ReadOnly = True
        Me.TxtBalanceLimit.Size = New System.Drawing.Size(128, 16)
        Me.TxtBalanceLimit.TabIndex = 3019
        Me.TxtBalanceLimit.TabStop = False
        Me.TxtBalanceLimit.TextAlign = System.Windows.Forms.HorizontalAlignment.Right
        Me.TxtBalanceLimit.UseWaitCursor = True
        '
        'LblCancelled
        '
        Me.LblCancelled.AutoSize = True
        Me.LblCancelled.BackColor = System.Drawing.Color.Transparent
        Me.LblCancelled.Font = New System.Drawing.Font("Verdana", 15.75!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.LblCancelled.ForeColor = System.Drawing.Color.DarkRed
        Me.LblCancelled.Location = New System.Drawing.Point(-14, 0)
        Me.LblCancelled.Name = "LblCancelled"
        Me.LblCancelled.Size = New System.Drawing.Size(20, 25)
        Me.LblCancelled.TabIndex = 3021
        Me.LblCancelled.Text = "."
        Me.LblCancelled.TextAlign = System.Drawing.ContentAlignment.MiddleCenter
        '
        'Pnl4
        '
        Me.Pnl4.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left), System.Windows.Forms.AnchorStyles)
        Me.Pnl4.Location = New System.Drawing.Point(483, 434)
        Me.Pnl4.Name = "Pnl4"
        Me.Pnl4.Size = New System.Drawing.Size(169, 123)
        Me.Pnl4.TabIndex = 3021
        '
        'Pnl7
        '
        Me.Pnl7.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left), System.Windows.Forms.AnchorStyles)
        Me.Pnl7.Location = New System.Drawing.Point(563, 475)
        Me.Pnl7.Name = "Pnl7"
        Me.Pnl7.Size = New System.Drawing.Size(26, 24)
        Me.Pnl7.TabIndex = 3022
        '
        'PnlItemCategorySummary
        '
        Me.PnlItemCategorySummary.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left), System.Windows.Forms.AnchorStyles)
        Me.PnlItemCategorySummary.Location = New System.Drawing.Point(651, 561)
        Me.PnlItemCategorySummary.Name = "PnlItemCategorySummary"
        Me.PnlItemCategorySummary.Size = New System.Drawing.Size(15, 14)
        Me.PnlItemCategorySummary.TabIndex = 3023
        '
        'FrmSaleInvoiceDirect_WithDimension
        '
        Me.AutoScaleDimensions = New System.Drawing.SizeF(6.0!, 13.0!)
        Me.BackColor = System.Drawing.SystemColors.Control
        Me.ClientSize = New System.Drawing.Size(984, 622)
        Me.ContextMenuStrip = Me.MnuOptions
        Me.Controls.Add(Me.Pnl7)
        Me.Controls.Add(Me.PnlItemCategorySummary)
        Me.Controls.Add(Me.PnlPurchase)
        Me.Controls.Add(Me.Pnl4)
        Me.Controls.Add(Me.TxtBalanceLimit)
        Me.Controls.Add(Me.LblBalanceLimit)
        Me.Controls.Add(Me.Pnl3)
        Me.Controls.Add(Me.TxtCreditLimit)
        Me.Controls.Add(Me.LblCreditLimit)
        Me.Controls.Add(Me.TxtCurrBal)
        Me.Controls.Add(Me.LblCurrentBalance)
        Me.Controls.Add(Me.LblBarcode)
        Me.Controls.Add(Me.TxtBarcode)
        Me.Controls.Add(Me.LblHelp)
        Me.Controls.Add(Me.LblPurchaseRate)
        Me.Controls.Add(Me.TxtCustomFields)
        Me.Controls.Add(Me.PnlCustomGrid)
        Me.Controls.Add(Me.PnlCalcGrid)
        Me.Controls.Add(Me.PnlTotals)
        Me.Controls.Add(Me.Pnl1)
        Me.Controls.Add(Me.GBoxImportFromExcel)
        Me.MaximizeBox = True
        Me.Name = "FrmSaleInvoiceDirect_WithDimension"
        Me.Text = "Sale Invoice"
        Me.Controls.SetChildIndex(Me.ChkTemporarilySaved, 0)
        Me.Controls.SetChildIndex(Me.GBoxImportFromExcel, 0)
        Me.Controls.SetChildIndex(Me.Pnl1, 0)
        Me.Controls.SetChildIndex(Me.PnlTotals, 0)
        Me.Controls.SetChildIndex(Me.PnlCalcGrid, 0)
        Me.Controls.SetChildIndex(Me.PnlCustomGrid, 0)
        Me.Controls.SetChildIndex(Me.TxtCustomFields, 0)
        Me.Controls.SetChildIndex(Me.LblPurchaseRate, 0)
        Me.Controls.SetChildIndex(Me.LblHelp, 0)
        Me.Controls.SetChildIndex(Me.TxtBarcode, 0)
        Me.Controls.SetChildIndex(Me.LblBarcode, 0)
        Me.Controls.SetChildIndex(Me.LblCurrentBalance, 0)
        Me.Controls.SetChildIndex(Me.TxtCurrBal, 0)
        Me.Controls.SetChildIndex(Me.LblCreditLimit, 0)
        Me.Controls.SetChildIndex(Me.TxtCreditLimit, 0)
        Me.Controls.SetChildIndex(Me.Pnl3, 0)
        Me.Controls.SetChildIndex(Me.TabControl1, 0)
        Me.Controls.SetChildIndex(Me.GroupBox1, 0)
        Me.Controls.SetChildIndex(Me.GrpUP, 0)
        Me.Controls.SetChildIndex(Me.GBoxEntryType, 0)
        Me.Controls.SetChildIndex(Me.GBoxApprove, 0)
        Me.Controls.SetChildIndex(Me.GBoxMoveToLog, 0)
        Me.Controls.SetChildIndex(Me.GroupBox2, 0)
        Me.Controls.SetChildIndex(Me.GBoxDivision, 0)
        Me.Controls.SetChildIndex(Me.Topctrl1, 0)
        Me.Controls.SetChildIndex(Me.LblBalanceLimit, 0)
        Me.Controls.SetChildIndex(Me.TxtBalanceLimit, 0)
        Me.Controls.SetChildIndex(Me.Pnl4, 0)
        Me.Controls.SetChildIndex(Me.PnlPurchase, 0)
        Me.Controls.SetChildIndex(Me.PnlItemCategorySummary, 0)
        Me.Controls.SetChildIndex(Me.Pnl7, 0)
        Me.GroupBox2.ResumeLayout(False)
        Me.GroupBox2.PerformLayout()
        Me.GBoxMoveToLog.ResumeLayout(False)
        Me.GBoxMoveToLog.PerformLayout()
        Me.GBoxApprove.ResumeLayout(False)
        Me.GBoxApprove.PerformLayout()
        Me.GBoxEntryType.ResumeLayout(False)
        Me.GBoxEntryType.PerformLayout()
        Me.GrpUP.ResumeLayout(False)
        Me.GrpUP.PerformLayout()
        Me.GBoxDivision.ResumeLayout(False)
        Me.GBoxDivision.PerformLayout()
        Me.TabControl1.ResumeLayout(False)
        Me.TP1.ResumeLayout(False)
        Me.TP1.PerformLayout()
        CType(Me.DTMaster, System.ComponentModel.ISupportInitialize).EndInit()
        CType(Me.Dgl1, System.ComponentModel.ISupportInitialize).EndInit()
        Me.PnlTotals.ResumeLayout(False)
        Me.PnlTotals.PerformLayout()
        Me.GBoxImportFromExcel.ResumeLayout(False)
        Me.MnuOptions.ResumeLayout(False)
        Me.ResumeLayout(False)
        Me.PerformLayout()

    End Sub
    Public WithEvents PnlTotals As System.Windows.Forms.Panel
    Public WithEvents LblTotalQty As System.Windows.Forms.Label
    Public WithEvents LblTotalQtyText As System.Windows.Forms.Label
    Public WithEvents Pnl1 As System.Windows.Forms.Panel
    Public WithEvents TxtStructure As AgControls.AgTextBox
    Public WithEvents Label25 As System.Windows.Forms.Label
    Public WithEvents LblTotalAmount As System.Windows.Forms.Label
    Public WithEvents LblTotalAmountText As System.Windows.Forms.Label
    Public WithEvents LblDealQty As System.Windows.Forms.Label
    Public WithEvents LblDealQtyText As System.Windows.Forms.Label
    Public WithEvents LblCurrency As System.Windows.Forms.Label
    Public WithEvents PnlCalcGrid As System.Windows.Forms.Panel
    Public WithEvents TxtCreditLimit As AgControls.AgTextBox
    Public WithEvents LblCreditLimit As System.Windows.Forms.Label
    Public WithEvents LblNature As System.Windows.Forms.Label
    Public WithEvents TxtNature As AgControls.AgTextBox
    Public WithEvents TxtCurrBal As AgControls.AgTextBox
    Public WithEvents LblCurrentBalance As System.Windows.Forms.Label
    Public WithEvents PnlCustomGrid As System.Windows.Forms.Panel
    Public WithEvents TxtCustomFields As AgControls.AgTextBox
    Public WithEvents LblTotalBale As System.Windows.Forms.Label
    Public WithEvents LblTotalBaleText As System.Windows.Forms.Label
    Public WithEvents GBoxImportFromExcel As System.Windows.Forms.GroupBox
    Public WithEvents BtnImprtFromExcel As System.Windows.Forms.Button
    Public WithEvents LblPurchaseRate As System.Windows.Forms.Label
    Public WithEvents Panel3 As System.Windows.Forms.Panel
    Public WithEvents LblHelp As System.Windows.Forms.Label
    Public WithEvents LblTotalPcs As Label
    Public WithEvents LblTotalPcsText As Label
    Friend WithEvents MnuReport As ToolStripMenuItem
    Friend WithEvents MnuReferenceEntries As ToolStripMenuItem
    Friend WithEvents MnuHistory As ToolStripMenuItem
    Friend WithEvents MnuPrintBulk As ToolStripMenuItem
    Public WithEvents LblCurrentStock As Label
    Public WithEvents LblBalanceLimit As Label
    Public WithEvents TxtBalanceLimit As AgControls.AgTextBox
    Public WithEvents Label8 As Label
    Friend WithEvents MnuCancelEntry As ToolStripMenuItem
    Public WithEvents LblCancelled As Label
    Public WithEvents Pnl4 As Panel
    Public WithEvents PnlPurchase As Panel
    Friend WithEvents MnuOptions As ContextMenuStrip
    Private components As System.ComponentModel.IContainer
    Friend WithEvents MnuImportFromExcel As ToolStripMenuItem
    Public WithEvents TxtBarcode As AgControls.AgTextBox
    Public WithEvents LblBarcode As Label
    Friend WithEvents MnuImportFromTally As ToolStripMenuItem
    Public WithEvents OFDMain As OpenFileDialog
    Friend WithEvents MnuEditSave As ToolStripMenuItem
    Friend WithEvents MnuGenerateEWayBill As ToolStripMenuItem
    Friend WithEvents MnuReconcileBill As ToolStripMenuItem
    Friend WithEvents MnuEMail As ToolStripMenuItem
    Friend WithEvents MnuSendSms As ToolStripMenuItem
    Friend WithEvents MnuImportFromDos As ToolStripMenuItem
    Friend WithEvents MnuPrintQACopy As ToolStripMenuItem
    Public WithEvents Pnl2 As Panel
    Public WithEvents Pnl3 As Panel
    Public WithEvents PnlItemCategorySummary As Panel
#End Region

    Private Sub FrmSaleInvoice_BaseEvent_ApproveDeletion_InTrans(ByVal SearchCode As String, ByVal Conn As Object, ByVal Cmd As Object) Handles Me.BaseEvent_ApproveDeletion_InTrans
        Dim DtSaleInvoice As DataTable = Nothing
        Dim I As Integer = 0

        If LblV_Type.Tag = Ncat.SaleInvoiceOverlay Then
            FDeleteGeneratedSales(SearchCode, Conn, Cmd)
        End If

        If FGetSettings(SettingFields.GeneratedEntryV_TypeForAadhat, SettingType.General) <> "" Then
            FDeleteGeneratedPurchase(SearchCode, Conn, Cmd)
        End If

        mQry = " Delete From SaleInvoiceTrnSetting Where DocId = '" & mSearchCode & "'"
        AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)

        mQry = " Delete From StockAdj Where StockOutDocId = '" & mSearchCode & "'"
        AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)

        mQry = " Delete From Stock Where DocId = '" & mSearchCode & "'"
        AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)

        mQry = " Delete From Ledger Where DocId = '" & mSearchCode & "'"
        AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)

        mQry = " Delete From SaleInvoicePayment Where DocId = '" & mSearchCode & "'"
        AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)

        mQry = " Delete From SaleInvoiceDimensionDetail Where DocId = '" & mSearchCode & "'"
        AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)

        mQry = "Delete from SaleInvoiceBarcodeLastTransactionValues where DocID='" & mSearchCode & "'"
        AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)

        mQry = "Delete from SaleInvoiceDimensionDetailSku where DocID='" & mSearchCode & "'"
        AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)

        For I = 0 To Dgl1.Rows.Count - 1
            If AgL.XNull(Dgl1.Item(Col1Barcode, I).Tag) <> "" Then
                UpdateCurrentStockAtBarcode(AgL.XNull(Dgl1.Item(Col1Barcode, I).Tag), DglMain.Item(Col1Value, rowSite_Code).Tag, Conn, Cmd)
            End If
        Next

        mQry = " Select DocId From LedgerHead With (NoLock) Where GenDocId = '" & mSearchCode & "'"
        Dim DtLedgerHead As DataTable = AgL.FillData(mQry, IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).Tables(0)
        For I = 0 To DtLedgerHead.Rows.Count - 1
            mQry = " Delete From Ledger Where DocId = '" & DtLedgerHead.Rows(I)("DocId") & "'"
            AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)
            mQry = " Delete From LedgerHeadDetailCharges Where DocId = '" & DtLedgerHead.Rows(I)("DocId") & "'"
            AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)
            mQry = " Delete From LedgerHeadDetail Where DocId = '" & DtLedgerHead.Rows(I)("DocId") & "'"
            AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)
            mQry = " Delete From LedgerHeadCharges Where DocId = '" & DtLedgerHead.Rows(I)("DocId") & "'"
            AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)
            mQry = " Delete From LedgerHead Where DocId = '" & DtLedgerHead.Rows(I)("DocId") & "'"
            AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)
        Next
    End Sub
    Private Sub FrmQuality1_BaseEvent_Form_PreLoad() Handles Me.BaseEvent_Form_PreLoad
        MainTableName = "SaleInvoice"
        LogTableName = "SaleInvoice_Log"
        MainLineTableCsv = "SaleInvoiceDetail,SaleInvoiceDetailHelpValues,SaleInvoiceTransport,SaleInvoiceDetailSku"
        LogLineTableCsv = "SaleInvoiceDetail_Log,SaleInvoiceDetailSku_Log"


        AgL.AddAgDataGrid(AgCalcGrid1, PnlCalcGrid)

        AgCalcGrid1.AgLibVar = AgL
        AgCalcGrid1.Visible = False

        AgL.AddAgDataGrid(AgCustomGrid1, PnlCustomGrid)

        AgCustomGrid1.AgLibVar = AgL
        AgCustomGrid1.SplitGrid = True
        AgCustomGrid1.MnuText = Me.Name
    End Sub

    Private Sub FrmQuality1_BaseFunction_FIniMast(ByVal BytDel As Byte, ByVal BytRefresh As Byte) Handles Me.BaseFunction_FIniMast
        Dim mCondStr$

        If mFlag_Import = True And DTMaster.Rows.Count > 0 Then Exit Sub

        mCondStr = " And Date(H.V_Date) Between " & AgL.Chk_Date(AgL.PubStartDate) & " and " & AgL.Chk_Date(AgL.PubEndDate) & " "
        mCondStr = mCondStr & " And " & AgL.PubSiteCondition("H.Site_Code", AgL.PubSiteCode) & " And H.Div_Code = '" & AgL.PubDivCode & "' "
        mCondStr = mCondStr & " And Vt.NCat In ('" & EntryNCat & "')"
        mCondStr = mCondStr & " And IfNull(Vt.CustomUI,'') = '" & mCustomUI & "'"

        mQry = "Select DocID As SearchCode 
                From SaleInvoice H  With (NoLock)
                Left Join Voucher_Type Vt  With (NoLock) On H.V_Type = Vt.V_Type  
                Where 1 = 1  " & mCondStr & "  Order By V_Date , V_No  "


        'mQry = "Select H.DocID As SearchCode 
        '        From SaleInvoice H  With (NoLock)
        '        Left Join Voucher_Type Vt  With (NoLock) On H.V_Type = Vt.V_Type  
        '        LEFT JOIN Ledger L With (NoLock) On H.DocId = L.DocId
        '        Where L.DocId Is Null  " & mCondStr & "  Order By H.V_Date , H.V_No  "
        mQry = AgL.GetBackendBasedQuery(mQry)
        Topctrl1.FIniForm(DTMaster, AgL.GCn, mQry, , , , , BytDel, BytRefresh)
    End Sub

    Private Sub FrmSaleOrder_BaseEvent_FindMain() Handles Me.BaseEvent_FindMain
        Dim mCondStr$

        'mCondStr = " " & AgL.CondStrFinancialYear("Date(H.V_Date)", AgL.PubStartDate, AgL.PubEndDate)
        mCondStr = " And Date(H.V_Date) Between " & AgL.Chk_Date(AgL.PubStartDate) & " and " & AgL.Chk_Date(AgL.PubEndDate) & " "
        mCondStr = mCondStr & " And " & AgL.PubSiteCondition("H.Site_Code", AgL.PubSiteCode) & " And H.Div_Code = '" & AgL.PubDivCode & "'"
        mCondStr = mCondStr & " And Vt.NCat In ('" & EntryNCat & "')"
        mCondStr = mCondStr & " And IfNull(Vt.CustomUI,'') = '" & mCustomUI & "'"

        AgL.PubFindQry = " SELECT H.DocID AS SearchCode, Vt.Description AS [Invoice_Type], Cast(strftime('%d/%m/%Y', H.V_Date) As nvarchar) AS Date, H.SaleToPartyName [Party Name], H.SaleToPartyMobile as Mobile, " &
                            " H.ManualRefNo AS [Manual_No], H.SalesTaxGroupParty AS [Sales_Tax_Group_Party], " &
                            " H.Remarks,  " &
                            " H.EntryBy AS [Entry_By], Cast(strftime('%d/%m/%Y', H.EntryDate) As nvarchar) AS [Entry_Date] " &
                            " FROM SaleInvoice H  With (NoLock) " &
                            " LEFT JOIN Voucher_Type Vt  With (NoLock) ON H.V_Type = Vt.V_Type " &
                            " LEFT JOIN SubGroup SGV  With (NoLock) ON SGV.SubCode  = H.SaleToParty " &
                            " Where 1=1 " & mCondStr

        AgL.PubFindQryOrdBy = "[Entry Date]"
    End Sub

    Private Sub FrmSaleOrder_BaseFunction_IniGrid() Handles Me.BaseFunction_IniGrid
        Dim I As Integer
        isInitializingGrids = True
        Dgl1.ColumnCount = 0
        With AgCL
            If DtV_TypeSettings Is Nothing Then Exit Sub
            If DtV_TypeSettings.Rows.Count = 0 Then Exit Sub


            .AddAgTextColumn(Dgl1, ColSNo, 40, 5, ColSNo, True, True, False)
            .AddAgTextColumn(Dgl1, Col1ImportStatus, 50, 0, Col1ImportStatus, False, True)
            .AddAgTextColumn(Dgl1, Col1V_Nature, 70, 0, Col1V_Nature, False, True, False)
            .AddAgTextColumn(Dgl1, Col1Barcode, 100, 0, AgL.PubCaptionBarcode, False, False)
            .AddAgTextColumn(Dgl1, Col1ItemType, 100, 0, AgL.PubCaptionItemType, False, False)
            .AddAgTextColumn(Dgl1, Col1SKU, 300, 0, Col1SKU, True, False, False)
            .AddAgTextColumn(Dgl1, Col1ItemCategory, 100, 0, AgL.PubCaptionItemCategory, False, False)
            .AddAgTextColumn(Dgl1, Col1ItemGroup, 100, 0, AgL.PubCaptionItemGroup, False, False)
            .AddAgTextColumn(Dgl1, Col1ItemCode, 100, 0, AgL.PubCaptionItem & " Code", False, False, False)
            .AddAgTextColumn(Dgl1, Col1Item, 250, 0, AgL.PubCaptionItem, True, False)
            .AddAgTextColumn(Dgl1, Col1Dimension1, 100, 0, Col1Dimension1, False, False)
            .AddAgTextColumn(Dgl1, Col1Dimension2, 100, 0, Col1Dimension2, False, False)
            .AddAgTextColumn(Dgl1, Col1Dimension3, 100, 0, Col1Dimension3, False, False)
            .AddAgTextColumn(Dgl1, Col1Dimension4, 100, 0, Col1Dimension4, False, False)
            .AddAgTextColumn(Dgl1, Col1Size, 100, 0, Col1Size, True, False)
            .AddAgTextColumn(Dgl1, Col1Specification, 130, 0, Col1Specification, False, False)
            .AddAgTextColumn(Dgl1, Col1ItemInvoiceGroup, 100, 0, Col1ItemInvoiceGroup, False, False)
            .AddAgTextColumn(Dgl1, Col1ItemState, 100, 0, Col1ItemState, False, False)
            .AddAgTextColumn(Dgl1, Col1SalesTaxGroup, 100, 0, Col1SalesTaxGroup, False, False)
            .AddAgTextColumn(Dgl1, Col1BaleNo, 60, 255, Col1BaleNo, False, False)
            .AddAgTextColumn(Dgl1, Col1LotNo, 60, 255, AgL.PubCaptionLotNo, False, False)
            .AddAgTextColumn(Dgl1, Col1QtyDecimalPlaces, 50, 0, Col1QtyDecimalPlaces, False, True, False)
            .AddAgNumberColumn(Dgl1, Col1DocQty, 70, 8, 4, True, AgL.PubCaptionDocQty, True, False, True)
            .AddAgNumberColumn(Dgl1, Col1FreeQty, 80, 8, 4, False, Col1FreeQty, False, False, True)
            .AddAgNumberColumn(Dgl1, Col1LossQty, 80, 8, 4, False, AgL.PubCaptionLossQty, False, False, True)
            .AddAgNumberColumn(Dgl1, Col1Qty, 80, 8, 4, False, AgL.PubCaptionQty, False, False, True)
            .AddAgTextColumn(Dgl1, Col1Unit, 50, 0, Col1Unit, True, True)
            .AddAgNumberColumn(Dgl1, Col1MasterSaleRate, 80, 8, 2, False, Col1MasterSaleRate, True, False, True)
            .AddAgNumberColumn(Dgl1, Col1RateDiscountPer, 80, 8, 2, False, Col1RateDiscountPer, True, False, True)
            .AddAgNumberColumn(Dgl1, Col1Rate, 80, 8, 2, True, Col1Rate, True, False, True)
            .AddAgNumberColumn(Dgl1, Col1DiscountPer, 50, 2, 2, False, AgL.PubCaptionLineDiscount & " @", False, False, True)
            .AddAgNumberColumn(Dgl1, Col1DiscountAmount, 100, 8, 2, False, AgL.PubCaptionLineDiscount, False, False, True)
            .AddAgNumberColumn(Dgl1, Col1AdditionalDiscountPer, 50, 2, 2, False, AgL.PubCaptionLineAdditionalDiscount & " @", False, False, True)
            .AddAgNumberColumn(Dgl1, Col1AdditionalDiscountAmount, 100, 8, 2, False, AgL.PubCaptionLineAdditionalDiscount, True, False, True)
            .AddAgNumberColumn(Dgl1, Col1AdditionPer, 50, 2, 3, False, AgL.PubCaptionLineAddition & " @", True, False, True)
            .AddAgNumberColumn(Dgl1, Col1AdditionAmount, 100, 8, 3, False, AgL.PubCaptionLineAddition, True, False, True)
            .AddAgNumberColumn(Dgl1, Col1Amount, 100, 8, 2, False, Col1Amount, True, True, True)
            .AddAgNumberColumn(Dgl1, Col1xAmount, 100, 8, 2, False, Col1xAmount, True, True, True)
            .AddAgNumberColumn(Dgl1, Col1Pcs, 80, 8, 4, False, AgL.PubCaptionPcs, False, False, True)
            .AddAgNumberColumn(Dgl1, Col1UnitMultiplier, 70, 8, 4, False, Col1UnitMultiplier, False, True, True)
            .AddAgNumberColumn(Dgl1, Col1DocDealQty, 70, 8, 4, True, AgL.PubCaptionDocDealQty, True, False, True)
            .AddAgNumberColumn(Dgl1, Col1FreeDealQty, 80, 8, 4, False, Col1FreeDealQty, False, False, True)
            .AddAgNumberColumn(Dgl1, Col1LossDealQtyPer, 80, 8, 4, False, AgL.PubCaptionLossDealQty + " @", False, False, True)
            .AddAgNumberColumn(Dgl1, Col1LossDealQty, 80, 8, 4, False, AgL.PubCaptionLossDealQty, False, False, True)
            .AddAgNumberColumn(Dgl1, Col1DealQty, 70, 8, 3, False, AgL.PubCaptionDealQty, False, True, True)
            .AddAgTextColumn(Dgl1, Col1DealUnit, 60, 0, Col1DealUnit, False, True)
            .AddAgTextColumn(Dgl1, Col1DealQtyDecimalPlaces, 50, 0, Col1DealQtyDecimalPlaces, False, True, False)
            .AddAgTextColumn(Dgl1, Col1Deal, 70, 255, Col1Deal, False, False)
            .AddAgNumberColumn(Dgl1, Col1DealAmount, 100, 8, 2, False, Col1DealAmount, False, False, True)
            .AddAgDateColumn(Dgl1, Col1ExpiryDate, 90, Col1ExpiryDate, False, False)
            .AddAgNumberColumn(Dgl1, Col1MRP, 100, 8, 2, False, Col1MRP, False, False, True)

            If AgL.StrCmp(AgL.PubDBName, "RVN") Then
                .AddAgTextColumn(Dgl1, Col1Remark, 150, 255, "MOTOR NO", True, False)
                .AddAgTextColumn(Dgl1, Col1Remark1, 150, 255, "CONTROLLER NO", True, False)
                .AddAgTextColumn(Dgl1, Col1Remark2, 150, 255, "CHASIS NO", True, False)
                .AddAgTextColumn(Dgl1, Col1Remark3, 150, 255, "BATTERY NO", True, False)
                .AddAgTextColumn(Dgl1, Col1Remark4, 150, 255, "CHARGER NO", True, False)
            Else
                .AddAgTextColumn(Dgl1, Col1Remark, 150, 255, Col1Remark, True, False)
                .AddAgTextColumn(Dgl1, Col1Remark1, 150, 255, Col1Remark1, True, False)
                .AddAgTextColumn(Dgl1, Col1Remark2, 150, 255, Col1Remark2, True, False)
                .AddAgTextColumn(Dgl1, Col1Remark3, 150, 255, Col1Remark3, True, False)
                .AddAgTextColumn(Dgl1, Col1Remark4, 150, 255, Col1Remark4, True, False)
            End If

            .AddAgTextColumn(Dgl1, Col1Godown, 100, 0, Col1Godown, AgL.IsFeatureApplicable_Godown, False)
            .AddAgTextColumn(Dgl1, Col1SalesRepresentative, 100, 0, Col1SalesRepresentative, False, False)
            .AddAgTextColumn(Dgl1, Col1Catalog, 100, 0, Col1Catalog, False, False)
            .AddAgTextColumn(Dgl1, Col1ReferenceNo, 100, 0, Col1ReferenceNo, LblV_Type.Tag = Ncat.SaleReturn, False)
            .AddAgDateColumn(Dgl1, Col1ReferenceDate, 100, Col1ReferenceDate, False, False, False)
            .AddAgTextColumn(Dgl1, Col1ReferenceDocId, 100, 0, Col1ReferenceDocId, False, True)
            .AddAgTextColumn(Dgl1, Col1ReferenceDocIdTSr, 40, 5, Col1ReferenceDocIdTSr, False, True, False)
            .AddAgTextColumn(Dgl1, Col1ReferenceDocIdSr, 40, 5, Col1ReferenceDocIdSr, False, True, False)
            .AddAgTextColumn(Dgl1, Col1SaleInvoice, 100, 255, Col1SaleInvoice, False, False)
            .AddAgTextColumn(Dgl1, Col1SaleInvoiceSr, 40, 5, Col1SaleInvoiceSr, False, True, False)
            .AddAgNumberColumn(Dgl1, Col1PurchaseRate, 80, 2, 3, False, Col1PurchaseRate, True, True, True)
            .AddAgTextColumn(Dgl1, Col1DefaultDiscountPer, 150, 255, Col1DefaultDiscountPer, False, False)
            .AddAgTextColumn(Dgl1, Col1DiscountCalculationPattern, 150, 255, Col1DiscountCalculationPattern, False, False)
            .AddAgTextColumn(Dgl1, Col1AdditionalDiscountCalculationPattern, 150, 255, Col1AdditionalDiscountCalculationPattern, False, False)
            .AddAgTextColumn(Dgl1, Col1AdditionCalculationPattern, 150, 255, Col1AdditionCalculationPattern, False, False)
            .AddAgTextColumn(Dgl1, Col1DefaultAdditionalDiscountPer, 150, 255, Col1DefaultAdditionalDiscountPer, False, False)
            .AddAgTextColumn(Dgl1, Col1DefaultAdditionPer, 150, 255, Col1DefaultAdditionPer, False, False)
            .AddAgTextColumn(Dgl1, Col1PersonalDiscountPer, 150, 255, Col1PersonalDiscountPer, False, False)
            .AddAgTextColumn(Dgl1, Col1PersonalAdditionalDiscountPer, 150, 255, Col1PersonalAdditionalDiscountPer, False, False)
            .AddAgTextColumn(Dgl1, Col1PersonalAdditionPer, 150, 255, Col1PersonalAdditionPer, False, False)
            .AddAgTextColumn(Dgl1, Col1BarcodeType, 100, 0, Col1BarcodeType, False, False)
            .AddAgTextColumn(Dgl1, Col1Progress, 100, 255, Col1Progress, False, True)
            .AddAgNumberColumn(Dgl1, Col1CurrentStock, 100, 8, 2, False, Col1CurrentStock, True, True, True)
            .AddAgTextColumn(Dgl1, Col1StockSr, 150, 255, Col1StockSr, False, False)
            .AddAgTextColumn(Dgl1, Col1StockInDocId, 100, 0, Col1StockInDocId, False, False)
            .AddAgNumberColumn(Dgl1, Col1StockInTSr, 100, 8, 2, False, Col1StockInTSr, True, True, True)
            .AddAgNumberColumn(Dgl1, Col1StockInSr, 100, 8, 2, False, Col1StockInSr, True, True, True)
            .AddAgTextColumn(Dgl1, Col1StockInDiv_Code, 100, 0, Col1StockInDiv_Code, True, False)
            .AddAgTextColumn(Dgl1, Col1IsRecordLocked, 150, 255, Col1IsRecordLocked, False, False)


            .AddAgNumberColumn(Dgl1, Col1PurchaseDiscountPer, 80, 2, 3, False, "Purch. " & AgL.PubCaptionLineDiscount & " @", True, True, True)
            .AddAgNumberColumn(Dgl1, Col1PurchaseDiscountAmount, 100, 8, 3, False, "Purch. " & AgL.PubCaptionLineDiscount, True, True, True)
            .AddAgNumberColumn(Dgl1, Col1PurchaseAdditionalDiscountPer, 80, 2, 3, False, "Purch. " & AgL.PubCaptionLineAdditionalDiscount & " @", True, True, True)
            .AddAgNumberColumn(Dgl1, Col1PurchaseAdditionalDiscountAmount, 100, 8, 3, False, "Purch. " & AgL.PubCaptionLineAdditionalDiscount, True, True, True)
            .AddAgTextColumn(Dgl1, Col1PurchaseDeal, 150, 255, Col1PurchaseDeal, False, False)
            .AddAgTextColumn(Dgl1, Col1MaintainStockYn, 150, 255, Col1MaintainStockYn, False, False)

            'Aadhat Columns
            .AddAgTextColumn(Dgl1, Col1PurchaseSalesTaxGroup, 100, 0, Col1PurchaseSalesTaxGroup, True, True)
            .AddAgNumberColumn(Dgl1, Col1PurchaseAmount, 100, 8, 3, False, Col1PurchaseAmount, True, True, True)
            .AddAgNumberColumn(Dgl1, Col1PurchaseTaxableAmount, 100, 8, 3, False, Col1PurchaseTaxableAmount, True, True, True)


            .AddAgTextColumn(Dgl1, Col1MItemCategory, 100, 0, Col1MItemCategory, True, False, False)
            .AddAgTextColumn(Dgl1, Col1MItemGroup, 100, 0, Col1MItemGroup, True, False, False)
            .AddAgTextColumn(Dgl1, Col1MItemSpecification, 100, 0, Col1MItemSpecification, True, False, False)
            .AddAgTextColumn(Dgl1, Col1MDimension1, 100, 0, "M " & AgL.PubCaptionDimension1, True, False, False)
            .AddAgTextColumn(Dgl1, Col1MDimension2, 100, 0, "M " & AgL.PubCaptionDimension2, True, False, False)
            .AddAgTextColumn(Dgl1, Col1MDimension3, 100, 0, "M " & AgL.PubCaptionDimension3, True, False, False)
            .AddAgTextColumn(Dgl1, Col1MDimension4, 100, 0, "M " & AgL.PubCaptionDimension4, True, False, False)
            .AddAgTextColumn(Dgl1, Col1MSize, 100, 0, Col1MSize, True, False, False)
        End With
        AgL.AddAgDataGrid(Dgl1, Pnl1)

        Dgl1.EnableHeadersVisualStyles = False
        Dgl1.ColumnHeadersHeight = 38
        AgL.GridDesign(Dgl1)
        Dgl1.AgSkipReadOnlyColumns = True
        Dgl1.AgAllowFind = False
        Dgl1.AgLastColumn = Dgl1.Columns(Col1Remark).Index
        Dgl1.AgMandatoryColumn = Dgl1.Columns(Col1Item).Index
        Dgl1.AllowUserToOrderColumns = True
        Dgl1.Name = "Dgl1"
        Dgl1.Anchor = AnchorStyles.Bottom + AnchorStyles.Left + AnchorStyles.Right + AnchorStyles.Top
        Dgl1.BackgroundColor = Me.BackColor
        AgL.FSetDimensionCaptionForHorizontalGrid(Dgl1, AgL)

        If AgL.VNull(AgL.PubDtEnviro.Rows(0)("IsAdvanceSearchOnItem")) = True Then
            Dgl1.AgSearchMethod = AgControls.AgLib.TxtSearchMethod.Comprehensive
        Else
            Dgl1.AgSearchMethod = AgControls.AgLib.TxtSearchMethod.Simple
        End If

        If LblV_Type.Tag = Ncat.SaleInvoice And
                CType(AgL.VNull(DtV_TypeSettings.Rows(0)("IsApplicable_SaleOrder")), Boolean) = True Then
            Dgl1.Columns(Col1SaleInvoice).Visible = True
            Dgl1.Columns(Col1SaleInvoice).ReadOnly = False
            Dgl1.Columns(Col1SaleInvoice).DefaultCellStyle.BackColor = Color.White
            Dgl1.Columns(Col1SaleInvoice).HeaderText = "Sale Order"
        End If

        DglMain.Columns(Col1BtnDetail).Visible = True
        DglMain.Columns(Col1Head).Width = 105
        DglMain.Rows.Add(6)
        For I = 0 To DglMain.Rows.Count - 1
            DglMain.Rows(I).Visible = False
            If I <> rowSaleToParty Then
                DglMain.Item(Col1BtnDetail, I) = New DataGridViewTextBoxCell
            End If
        Next

        DglMain.Item(Col1Head, rowProcess).Value = hcProcess
        DglMain.Item(Col1Head, rowSaleToParty).Value = hcSaleToParty
        DglMain.Item(Col1Head, rowSaleToPartyName).Value = hcSaleToPartyName
        DglMain.Item(Col1Head, rowSaleToPartyMobile).Value = hcSaleToPartyMobile
        DglMain.Item(Col1Head, rowBillToParty).Value = hcBillToParty
        DglMain.Item(Col1Head, rowLinkedParty).Value = hcLinkedParty
        DglMain.AgSkipReadOnlyColumns = True
        DglMain.BackgroundColor = Me.BackColor
        DglMain.BorderStyle = BorderStyle.None

        For I = 0 To DglMain.Rows.Count - 1
            If AgL.XNull(DglMain(Col1HeadOriginal, I).Value) = "" Then
                DglMain(Col1HeadOriginal, I).Value = DglMain(Col1Head, I).Value
            End If
        Next

        DglMain.Item(Col1Head, rowSaleToParty).Value = IIf(AgL.PubCaptionCustomer <> "", AgL.PubCaptionCustomer, hcSaleToParty)
        DglMain.Item(Col1Head, rowLinkedParty).Value = IIf(AgL.PubCaptionLinkedParty <> "", AgL.PubCaptionLinkedParty, hcLinkedParty)


        Dgl2.ColumnCount = 0
        With AgCL
            .AddAgTextColumn(Dgl2, ColSNo, 35, 5, ColSNo, False, True, False)
            .AddAgTextColumn(Dgl2, Col1Head, 150, 255, Col1Head, True, True)
            .AddAgTextColumn(Dgl2, Col1HeadOriginal, 150, 255, Col1HeadOriginal, False, True)
            .AddAgTextColumn(Dgl2, Col1Mandatory, 12, 20, Col1Mandatory, True, True)
            .AddAgTextColumn(Dgl2, Col1Value, 270, 255, Col1Value, True, False)
            .AddAgTextColumn(Dgl2, Col1LastValue, 170, 255, Col1LastValue, False, False)
            .AddAgButtonColumn(Dgl2, Col1BtnDetail, 35, Col1BtnDetail, False, True)
        End With
        AgL.AddAgDataGrid(Dgl2, Pnl2)
        AgL.GridDesign(Dgl2)
        Dgl2.EnableHeadersVisualStyles = False
        Dgl2.Columns(Col1Mandatory).DefaultCellStyle.Font = New System.Drawing.Font("Wingdings 2", 5.25, FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(2, Byte))
        Dgl2.Columns(Col1Mandatory).DefaultCellStyle.ForeColor = Color.Red
        Dgl2.ColumnHeadersHeight = 35
        Dgl2.AgSkipReadOnlyColumns = True
        Dgl2.AllowUserToAddRows = False
        Dgl2.RowHeadersVisible = False
        Dgl2.ColumnHeadersVisible = False
        Dgl2.BackgroundColor = Me.BackColor
        Dgl2.BorderStyle = BorderStyle.None

        Dgl2.Rows.Add(24)

        For I = 0 To Dgl2.Rows.Count - 1
            Dgl2.Rows(I).Visible = False
            If I <> rowPartyDocNo And I <> rowReferenceSaleInvoiceNo Then
                Dgl2.Item(Col1BtnDetail, I) = New DataGridViewTextBoxCell
            End If
        Next

        Dgl2.Item(Col1Head, rowRateType).Value = hcRateType
        Dgl2.Item(Col1Head, rowPartyDocNo).Value = hcPartyDocNo
        Dgl2.Item(Col1Head, rowPartyDocDate).Value = hcPartyDocDate
        Dgl2.Item(Col1Head, rowDeliveryDate).Value = hcDeliveryDate
        Dgl2.Item(Col1Head, rowMinDeliveryDate).Value = hcMinDeliveryDate
        Dgl2.Item(Col1Head, rowReferenceSaleInvoiceNo).Value = hcReferenceSaleInvoiceNo
        Dgl2.Item(Col1Head, rowGodown).Value = hcGodown
        Dgl2.Item(Col1Head, rowShipToParty).Value = hcShipToParty
        Dgl2.Item(Col1Head, rowSalesTaxNo).Value = HcSalesTaxNo
        Dgl2.Item(Col1Head, rowAadharNo).Value = HcAadharNo
        Dgl2.Item(Col1Head, rowSalesTaxGroup).Value = HcSalesTaxGroup
        Dgl2.Item(Col1Head, rowSalesRepresentative).Value = HcSalesRepresentative
        Dgl2.Item(Col1Head, rowCatalog).Value = HcCatalog
        Dgl2.Item(Col1Head, rowAmsDocNo).Value = HcAmsDocNo
        Dgl2.Item(Col1Head, rowAmsDocDate).Value = HcAmsDocDate
        Dgl2.Item(Col1Head, rowAmsDocNetAmount).Value = HcAmsDocNetAmount
        Dgl2.Item(Col1Head, rowBtnPendingSaleOrder).Value = hcBtnPendingSaleOrder
        Dgl2.Item(Col1Value, rowBtnPendingSaleOrder) = New DataGridViewButtonCell
        Dgl2.Item(Col1Head, rowBtnPendingSaleInvoiceForOrder).Value = hcBtnPendingSaleInvoiceForOrder
        Dgl2.Item(Col1Value, rowBtnPendingSaleInvoiceForOrder) = New DataGridViewButtonCell
        Dgl2.Item(Col1Head, rowBtnAttachments).Value = HcBtnAttachments
        Dgl2.Item(Col1Value, rowBtnAttachments) = New DataGridViewButtonCell
        Dgl2.Item(Col1Head, rowBtnMoneyReceived).Value = HcBtnMoneyReceived
        Dgl2.Item(Col1Value, rowBtnMoneyReceived) = New DataGridViewButtonCell
        Dgl2.Item(Col1Head, rowCurrency).Value = HcCurrency
        Dgl2.Item(Col1Head, rowCurrencyMultiplier).Value = HcCurrencyMultiplier
        Dgl2.Item(Col1Head, rowSalesTaxApplicable).Value = HcSalesTaxApplicable
        Dgl2.Name = "Dgl2"
        Dgl2.Tag = "VerticalGrid"

        For I = 0 To Dgl2.Rows.Count - 1
            If AgL.XNull(Dgl2(Col1HeadOriginal, I).Value) = "" Then
                Dgl2(Col1HeadOriginal, I).Value = Dgl2(Col1Head, I).Value
            End If
        Next





        Dgl3.ColumnCount = 0
        With AgCL
            .AddAgTextColumn(Dgl3, ColSNo, 35, 5, ColSNo, False, True, False)
            .AddAgTextColumn(Dgl3, Col1Head, 150, 255, Col1Head, True, True)
            .AddAgTextColumn(Dgl3, Col1HeadOriginal, 150, 255, Col1HeadOriginal, False, True)
            .AddAgTextColumn(Dgl3, Col1Mandatory, 12, 20, Col1Mandatory, True, True)
            .AddAgTextColumn(Dgl3, Col1Value, 290, 255, Col1Value, True, False)
            .AddAgTextColumn(Dgl3, Col1LastValue, 170, 255, Col1LastValue, False, False)
        End With
        AgL.AddAgDataGrid(Dgl3, Pnl3)
        AgL.GridDesign(Dgl3)
        Dgl3.EnableHeadersVisualStyles = False
        Dgl3.Columns(Col1Mandatory).DefaultCellStyle.Font = New System.Drawing.Font("Wingdings 2", 5.25, FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(2, Byte))
        Dgl3.Columns(Col1Mandatory).DefaultCellStyle.ForeColor = Color.Red
        Dgl3.ColumnHeadersHeight = 35
        Dgl3.AgSkipReadOnlyColumns = True
        Dgl3.AllowUserToAddRows = False
        Dgl3.RowHeadersVisible = False
        Dgl3.ColumnHeadersVisible = False
        Dgl3.BackgroundColor = Me.BackColor

        Dgl3.Rows.Add(14)


        Dgl3.Item(Col1Head, rowCreditDays).Value = hcCreditDays
        Dgl3.Item(Col1Head, rowAgent).Value = hcAgent
        Dgl3.Item(Col1Head, rowTransporter).Value = hcTransporter
        Dgl3.Item(Col1Head, rowResponsiblePerson).Value = hcResponsiblePerson
        Dgl3.Item(Col1Head, rowRemarks1).Value = hcRemarks1
        Dgl3.Item(Col1Head, rowRemarks2).Value = hcRemarks2
        Dgl3.Item(Col1Head, rowTags).Value = hcTags
        Dgl3.Item(Col1Head, rowRemarks).Value = hcRemarks
        Dgl3.Item(Col1Head, rowTermsAndConditions).Value = hcTermsAndConditions
        Dgl3.Item(Col1Head, rowCustomerInvoiceCount).Value = hcCustomerInvoiceCount
        Dgl3.Item(Col1Head, rowBtnTransportDetail).Value = hcBtnTransportDetail
        Dgl3.Item(Col1Value, rowBtnTransportDetail) = New DataGridViewButtonCell
        Dgl3.Item(Col1Head, rowEInvoiceIRN).Value = hcEInvoiceIRN
        Dgl3.Item(Col1Head, rowEInvoiceACKNo).Value = hcEInvoiceACKNo
        Dgl3.Item(Col1Head, rowEInvoiceACKDate).Value = hcEInvoiceACKDate



        Dgl3.Name = "Dgl3"
        Dgl3.Tag = "VerticalGrid"
        Dgl3.Anchor = AnchorStyles.Bottom + AnchorStyles.Left
        Dgl3.BorderStyle = BorderStyle.None

        For I = 0 To Dgl3.Rows.Count - 1
            If AgL.XNull(Dgl3(Col1HeadOriginal, I).Value) = "" Then
                Dgl3(Col1HeadOriginal, I).Value = Dgl3(Col1Head, I).Value
            End If
        Next



        Dgl4.ColumnCount = 0
        With AgCL
            .AddAgTextColumn(Dgl4, Col1Head, 85, 255, Col1Head, True, True)
            .AddAgTextColumn(Dgl4, Col1Value, 80, 255, Col1Value, True, False)
        End With
        AgL.AddAgDataGrid(Dgl4, Pnl4)
        AgL.GridDesign(Dgl4)
        Dgl4.EnableHeadersVisualStyles = False
        Dgl4.ColumnHeadersHeight = 45
        Dgl4.AgSkipReadOnlyColumns = True
        Dgl4.AllowUserToAddRows = False
        Dgl4.RowHeadersVisible = False
        Dgl4.ColumnHeadersVisible = False
        Dgl4.BackgroundColor = Me.BackColor
        Dgl4.BorderStyle = BorderStyle.None
        Dgl4.CellBorderStyle = DataGridViewCellBorderStyle.None
        Dgl4.Anchor = AnchorStyles.Bottom + AnchorStyles.Left

        AgL.ProcCreateLink(Dgl1, Col1ReferenceDocId)
        AgL.ProcCreateLink(Dgl1, Col1SaleInvoice)
        AgL.ProcCreateLink(Dgl1, Col1ImportStatus)

        Ini_Grid_Purchase()
        Ini_Grid_ItemCategorySummary()
        Ini_Grid_OtherCharges()

        DglOtherCharges.Visible = True

        ApplyUISetting()


        AgCalcGrid1.Ini_Grid(EntryNCat, DglMain.Item(Col1Value, rowV_Date).Value)
        AgCalcGrid1.AgLineGrid = Dgl1
        AgCalcGrid1.AgLineGridMandatoryColumn = Dgl1.Columns(Col1SKU).Index
        AgCalcGrid1.AgLineGridGrossColumn = Dgl1.Columns(Col1Amount).Index
        'If AgL.VNull(AgL.PubDtDivisionSiteSetting.Rows(0)("IsSalesTaxApplicable")) = True Then
        If CType(AgL.VNull(FGetSettings(SettingFields.SalesTaxApplicableInSales, SettingType.General)), Boolean) = True Then
            Dgl2.Item(Col1Value, rowSalesTaxApplicable).Value = "Yes"
            AgCalcGrid1.AgLineGridPostingGroupSalesTaxProd = Dgl1.Columns(Col1SalesTaxGroup).Index
        Else
            Dgl2.Item(Col1Value, rowSalesTaxApplicable).Value = "No"
            AgCalcGrid1.AgLineGridPostingGroupSalesTaxProd = -1
        End If
        AgCalcGrid1.AgPostingPartyAc = DglMain.Item(Col1Value, rowSaleToParty).Tag
        AgCalcGrid1.Anchor = AnchorStyles.Bottom + AnchorStyles.Right
        AgCalcGrid1.BackgroundColor = Me.BackColor
        AgCalcGrid1.BorderStyle = BorderStyle.None

        AgCustomGrid1.Ini_Grid(mSearchCode)
        AgCustomGrid1.SplitGrid = False




        AgCalcGrid1.Name = "AgCalcGrid1"
        AgCustomGrid1.Name = "AgCustomGrid1"



        AgCL.GridSetiingShowXml(Me.Text & Dgl1.Name & AgL.PubCompCode & AgL.PubDivCode & AgL.PubSiteCode, Dgl1, False)
        AgCL.GridSetiingShowXml(Me.Text & AgCalcGrid1.Name & AgL.PubCompCode & AgL.PubDivCode & AgL.PubSiteCode, AgCalcGrid1, False)
        AgCL.GridSetiingShowXml(Me.Text & AgCustomGrid1.Name & AgL.PubCompCode & AgL.PubDivCode & AgL.PubSiteCode, AgCustomGrid1, False)

        isInitializingGrids = False
    End Sub

    Private Sub FrmSaleOrder_BaseEvent_Save_InTrans(ByVal SearchCode As String, ByVal Conn As Object, ByVal Cmd As Object) Handles Me.BaseEvent_Save_InTrans
        Dim I As Integer, mSr As Integer
        Dim bSelectionQry$ = "", bInvoiceType$ = "", bStockSelectionQry$ = "", bHelpValuesSelectionQry$ = ""
        Dim mMultiplyWithMinus As Boolean = False


        If LblV_Type.Tag = Ncat.SaleReturn Then
            mMultiplyWithMinus = True
        End If

        mQry = " Update SaleInvoice " &
                " SET  " &
                " ManualRefNo = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowReferenceNo).Value) & ", " &
                " SaleToPartyDocNo = " & AgL.Chk_Text(Dgl2(Col1Value, rowPartyDocNo).Value) & ", " &
                " SaleToPartyDocDate = " & AgL.Chk_Date(Dgl2(Col1Value, rowPartyDocDate).Value) & ", " &
                " Currency = " & AgL.Chk_Text(Dgl2(Col1Value, rowCurrency).Value) & ", " &
                " CurrencyMultiplier = " & Val(Dgl2(Col1Value, rowCurrencyMultiplier).Value) & ", " &
                " MinDeliveryDate = " & AgL.Chk_Date(Dgl2(Col1Value, rowMinDeliveryDate).Value) & ", " &
                " DeliveryDate = " & AgL.Chk_Date(Dgl2(Col1Value, rowDeliveryDate).Value) & ", " &
                " SaleToParty = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowSaleToParty).Tag) & ", " &
                " BillToParty = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowBillToParty).Tag) & ", " &
                " LinkedParty = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowLinkedParty).Tag) & ", " &
                " ShipToParty = " & AgL.Chk_Text(Dgl2(Col1Value, rowShipToParty).Tag) & ", " &
                " Agent = " & AgL.Chk_Text(Dgl3(Col1Value, rowAgent).Tag) & ", " &
                " ResponsiblePerson = " & AgL.Chk_Text(Dgl3(Col1Value, rowResponsiblePerson).Tag) & ", " &
                " Structure = " & AgL.Chk_Text(TxtStructure.Tag) & ", " &
                " RateType = " & AgL.Chk_Text(Dgl2(Col1Value, rowRateType).Tag) & ", " &
                " Remarks = " & AgL.Chk_Text(Dgl3(Col1Value, rowRemarks).Value) & ", " &
                " ReferenceNo = " & AgL.Chk_Text(Dgl2(Col1Value, rowReferenceSaleInvoiceNo).Value) & ", " &
                " ReferenceDocID = " & AgL.Chk_Text(Dgl2(Col1Value, rowReferenceSaleInvoiceNo).Tag) & ", " &
                " Tags = " & AgL.Chk_Text(Dgl3(Col1Value, rowTags).Value) & ", " &
                " Remarks1 = " & AgL.Chk_Text(Dgl3(Col1Value, rowRemarks1).Value) & ", " &
                " Remarks2 = " & AgL.Chk_Text(Dgl3(Col1Value, rowRemarks2).Value) & ", " &
                " TermsAndConditions = " & AgL.Chk_Text(Dgl3(Col1Value, rowTermsAndConditions).Value) & ", " &
                " AmsDocNo = " & AgL.Chk_Text(Dgl2(Col1Value, rowAmsDocNo).Value) & ", " &
                " AmsDocDate = " & AgL.Chk_Date(Dgl2(Col1Value, rowAmsDocDate).Value) & ", " &
                " AmsDocNetAmount = " & Val(Dgl2(Col1Value, rowAmsDocNetAmount).Value) & ", " &
                " SalesTaxApplicable = " & IIf(AgL.XNull(Dgl2(Col1Value, rowSalesTaxApplicable).Value).ToString.ToUpper = "NO", 0, 1) & ", " &
                " EInvoiceIRN = " & AgL.Chk_Text(Dgl3(Col1Value, rowEInvoiceIRN).Value) & ", " &
                " EInvoiceACKNo = " & AgL.Chk_Text(Dgl3(Col1Value, rowEInvoiceACKNo).Value) & ", " &
                " EInvoiceACKDate = " & AgL.Chk_Date(Dgl3(Col1Value, rowEInvoiceACKDate).Value) & ", " &
                " UploadDate = Null, " &
                " CancellationDate = Null, " &
                " CancellationRemark = Null, " &
                " CancelledBy = Null, " &
                " CreditDays = " & Val(Dgl3(Col1Value, rowCreditDays).Value) & ", " &
                " CreditLimit = " & Val(TxtCreditLimit.Text) & ", " &
                " Process = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowProcess).Tag) & ", " &
                " CustomFields = " & AgL.Chk_Text(TxtCustomFields.Tag) & " " &
                " " & IIf(TxtStructure.Tag = "", "", ", ") &
                " " & AgCalcGrid1.FFooterTableUpdateStr(mMultiplyWithMinus) & " " &
                " " & AgCustomGrid1.FFooterTableUpdateStr() & " " &
                " Where DocId = '" & mSearchCode & "'"
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

        If Topctrl1.Mode.ToUpper = "ADD" Then
            mQry = "
                    Insert Into SaleInvoiceTrnSetting
                    (DocID, IsPostedInStock, IsPostedInLedger)
                    Values
                    ('" & mSearchCode & "', " & AgL.VNull(DtV_TypeSettings.Rows(0)("IsPostedInStock")) & ", " & AgL.VNull(DtV_TypeSettings.Rows(0)("IsPostedInLedger")) & ")
                   "
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
        End If

        If Topctrl1.Mode.ToUpper = "EDIT" Then
            mQry = "Delete from Ledger where docId='" & mSearchCode & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

            mQry = " Delete from SaleInvoiceDetailHelpValues Where DocID = '" & mSearchCode & "' "
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
        End If


        CType(DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag, FrmSaleInvoiceParty_WithDimension).FSave(mSearchCode, Conn, Cmd)

        If Dgl3.Item(Col1Value, rowBtnTransportDetail).Tag IsNot Nothing Then
            CType(Dgl3.Item(Col1Value, rowBtnTransportDetail).Tag, FrmSaleInvoiceTransport).FSave(mSearchCode, Conn, Cmd)
        Else
            If AgL.Dman_Execute("Select Count(*) From SaleInvoiceTransport  With (NoLock) Where DocID = '" & mSearchCode & "'", AgL.GcnRead).ExecuteScalar() > 0 Then
                mQry = "Update SaleInvoiceTransport  Set Transporter = " & AgL.Chk_Text(Dgl3(Col1Value, rowTransporter).Tag) & " 
                        Where DocID = '" & mSearchCode & "' "
                AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            Else
                If Dgl3(Col1Value, rowTransporter).Tag <> "" Then
                    mQry = "Insert Into SaleInvoiceTransport(DocID, Transporter) Values ('" & mSearchCode & "', " & AgL.Chk_Text(Dgl3(Col1Value, rowTransporter).Tag) & ")"
                    AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
                End If
            End If
        End If

        If Dgl2.Item(Col1Value, rowBtnMoneyReceived).Tag IsNot Nothing Then
            CType(Dgl2.Item(Col1Value, rowBtnMoneyReceived).Tag, FrmSaleInvoiceReceipt).FSave(mSearchCode, Conn, Cmd)
        End If


        mSr = AgL.VNull(AgL.Dman_Execute("Select Max(Sr) From SaleInvoiceDetail  With (NoLock) Where DocID = '" & mSearchCode & "'", AgL.GcnRead).ExecuteScalar)
        For I = 0 To Dgl1.RowCount - 1
            If Dgl1.Item(Col1SKU, I).Value <> "" Then

                If AgL.StrCmp(Dgl1.Item(Col1V_Nature, I).Value, "RETURN") Or LblV_Type.Tag = Ncat.SaleReturn Then
                    mMultiplyWithMinus = True
                Else
                    mMultiplyWithMinus = False
                End If

                If mMultiplyWithMinus Then
                    Dgl1.Item(Col1Qty, I).Value = -Math.Abs(Val(Dgl1.Item(Col1Qty, I).Value))
                    Dgl1.Item(Col1DocQty, I).Value = -Math.Abs(Val(Dgl1.Item(Col1DocQty, I).Value))

                    Dgl1.Item(Col1DealQty, I).Value = -Math.Abs(Val(Dgl1.Item(Col1DealQty, I).Value))
                    Dgl1.Item(Col1DocDealQty, I).Value = -Math.Abs(Val(Dgl1.Item(Col1DocDealQty, I).Value))

                    Dgl1.Item(Col1Amount, I).Value = -Math.Abs(Val(Dgl1.Item(Col1Amount, I).Value))
                End If

                If Dgl1.Item(ColSNo, I).Tag Is Nothing And Dgl1.Rows(I).Visible = True Then
                    mSr += 1

                    If Dgl1.Item(Col1SaleInvoice, I).Tag = "" Then
                        Dgl1.Item(Col1SaleInvoice, I).Tag = mSearchCode
                        Dgl1.Item(Col1SaleInvoiceSr, I).Value = mSr
                    End If

                    InsertSaleInvoiceDetail(mSearchCode, mSr, I, mMultiplyWithMinus, Conn, Cmd)
                    InsertSaleInvoiceDetailHelpValues(mSearchCode, mSr, I, Conn, Cmd)
                    InsertSaleInvoiceBarcodeLastTransactionDetail(mSearchCode, mSr, I, Conn, Cmd)
                    UpdateBarcodeSiteDetail(mSearchCode, mSr, I, Conn, Cmd)


                    If Dgl1.Item(Col1DocQty, I).Tag IsNot Nothing Then
                        CType(Dgl1.Item(Col1DocQty, I).Tag, FrmSaleInvoiceDimension_WithDimension).FSave(mSearchCode, mSr, I, Conn, Cmd, mMultiplyWithMinus)
                    Else
                        mDimensionSrl += 1
                        InsertStock(mSearchCode, mSr, mDimensionSrl, I, mMultiplyWithMinus, Conn, Cmd)
                    End If
                Else
                    If Dgl1.Rows(I).Visible = True Then
                        If Dgl1.Item(Col1SaleInvoice, I).Tag = "" Then
                            Dgl1.Item(Col1SaleInvoice, I).Tag = mSearchCode
                            Dgl1.Item(Col1SaleInvoiceSr, I).Value = Val(Dgl1.Item(ColSNo, I).Tag)
                        End If

                        UpdateSaleInvoiceDetail(mSearchCode, Val(Dgl1.Item(ColSNo, I).Tag), I, mMultiplyWithMinus, Conn, Cmd)
                        UpdateBarcodeSiteDetail(mSearchCode, mSr, I, Conn, Cmd)
                        InsertSaleInvoiceDetailHelpValues(mSearchCode, Val(Dgl1.Item(ColSNo, I).Tag), I, Conn, Cmd)

                        If Dgl1.Item(Col1DocQty, I).Tag IsNot Nothing Then
                            CType(Dgl1.Item(Col1DocQty, I).Tag, FrmSaleInvoiceDimension_WithDimension).FSave(mSearchCode, Val(Dgl1.Item(ColSNo, I).Tag), I, Conn, Cmd, mMultiplyWithMinus)
                        Else
                            UpdateStock(mSearchCode, Val(Dgl1.Item(ColSNo, I).Tag), Val(Dgl1.Item(Col1StockSr, I).Value), I, mMultiplyWithMinus, Conn, Cmd)
                        End If
                    Else
                        DeleteLineData(mSearchCode, Val(Dgl1.Item(ColSNo, I).Tag), I, Conn, Cmd)
                    End If
                End If

                UpdateItemGroupPerson(I, Conn, Cmd)
            End If
        Next


        mQry = "Delete from SaleInvoiceOtherCharges where DocId = '" & mSearchCode & "'"
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
        For I = 0 To DglOtherCharges.Rows.Count - 1
            If AgL.XNull(DglOtherCharges.Item(Col7ChargeSubocde, I).Value) <> "" Then
                mQry = "Insert Into SaleInvoiceOtherCharges (DocId, Sr, ChargeSubcode, Amount, ChargeType)
                        Values (" & AgL.Chk_Text(mSearchCode) & ", " & I & ", " & AgL.Chk_Text(DglOtherCharges.Item(Col7ChargeSubocde, I).Tag) & ", " & Val(DglOtherCharges.Item(Col7Amount, I).Value) & ", " & AgL.Chk_Text(DglOtherCharges.Item(Col7ChargeType, I).Value) & ")"
                AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            End If
        Next


        mQry = " Delete From StockAdj Where StockOutDocID = '" & mSearchCode & "'"
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

        mQry = " Select S.DocId, S.TSr, S.Sr, S.Qty_Iss, 
                L.StockInDocId, L.StockInTSr, L.StockInSr
                From (Select * From SaleInvoiceDetail With (NoLock) Where DocId = '" & mSearchCode & "') As L 
                LEFT JOIN (Select * From Stock With (NoLock) Where DocId = '" & mSearchCode & "') As S ON L.DocId = S.DocId And L.Sr = S.TSr
                Where L.DocId = '" & mSearchCode & "' And L.StockInDocId Is Not Null "
        Dim DtStockAdj As DataTable = AgL.FillData(mQry, IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).Tables(0)

        For I = 0 To DtStockAdj.Rows.Count - 1
            mQry = "INSERT INTO StockAdj (StockInDocID, StockInTSr, StockInSr, 
                    StockOutDocID, StockOutTSr, StockOutSr, AdjQty)
                    Select " & AgL.Chk_Text(AgL.XNull(DtStockAdj.Rows(I)("StockInDocId"))) & " As StockInDocID, 
                    " & Val(AgL.VNull(DtStockAdj.Rows(I)("StockInTSr"))) & " As StockInTSr, 
                    " & Val(AgL.VNull(DtStockAdj.Rows(I)("StockInSr"))) & " As StockInSr, 
                    " & AgL.Chk_Text(AgL.XNull(DtStockAdj.Rows(I)("DocId"))) & " As StockOutDocID, 
                    " & Val(AgL.VNull(DtStockAdj.Rows(I)("TSr"))) & " As StockOutTSr, 
                    " & Val(AgL.VNull(DtStockAdj.Rows(I)("Sr"))) & " As StockOutSr, 
                    " & Val(AgL.VNull(DtStockAdj.Rows(I)("Qty_Iss"))) & " As AdjQty "
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
        Next


        Dim mNarrParty As String
        Dim mNarr As String

        mNarrParty = DglMain.Item(Col1Value, rowV_Type).Value
        mNarr = DglMain.Item(Col1Value, rowV_Type).Value & " : " & DglMain.Item(Col1Value, rowSaleToPartyName).Value
        If Not ClsMain.IsScopeOfWorkContains(IndustryType.SubIndustryType.RetailModule) Then
            If DglMain.Item(Col1Value, rowSaleToPartyMobile).Value <> "" Then
                mNarr = mNarr + " (Mobile : " & DglMain.Item(Col1Value, rowSaleToPartyMobile).Value + ")"
            End If
        End If





        Dim bPartyLedgerPostingAc As String = ""
        Dim bLinkedPartyAc As String = ""
        If AgL.StrCmp(AgL.XNull(DtV_TypeSettings.Rows(0)("LedgerPostingPartyAcType")), SaleInvoiceLedgerPostingPartyAcType.SaleToParty) Then
            bPartyLedgerPostingAc = DglMain.Item(Col1Value, rowSaleToParty).Tag
            bLinkedPartyAc = DglMain.Item(Col1Value, rowLinkedParty).Tag
        Else
            bPartyLedgerPostingAc = DglMain.Item(Col1Value, rowBillToParty).Tag
            bLinkedPartyAc = DglMain.Item(Col1Value, rowLinkedParty).Tag
        End If

        Dim mIsPostInLedger As Boolean = True
        If AgL.VNull(AgL.Dman_Execute("Select IfNull(IsPostInLedger,1) From Voucher_Type With (NoLock) 
                Where V_Type = '" & DglMain.Item(Col1Value, rowV_Type).Tag & "'",
                IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar()) = 0 Then
            mIsPostInLedger = False
        End If

        If mIsPostInLedger = True Then
            Call ClsFunction.PostStructureLineToAccounts(AgCalcGrid1, mNarrParty, mNarr, mSearchCode, TxtDivision.AgSelectedValue, DglMain.Item(Col1Value, rowSite_Code).Tag, TxtDivision.AgSelectedValue,
                           DglMain.Item(Col1Value, rowV_Type).Tag, LblPrefix.Text, DglMain.Item(Col1Value, rowV_No).Value, DglMain.Item(Col1Value, rowReferenceNo).Value, bPartyLedgerPostingAc, DglMain.Item(Col1Value, rowV_Date).Value, Conn, Cmd,, mMultiplyWithMinus, bLinkedPartyAc)
        End If

        mQry = " UPDATE Ledger Set CreditDays = " & Val(Dgl3(Col1Value, rowCreditDays).Value) & " Where DocId = '" & mSearchCode & "'"
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)


        If Dgl1.Columns(Col1Barcode).Visible Then
            For I = 0 To Dgl1.Rows.Count - 1
                If Dgl1.Item(Col1Barcode, I).Value <> "" Then
                    ClsMain.UpdateCurrentStockAtBarcode(Dgl1.Item(Col1Barcode, I).Tag, DglMain.Item(Col1Value, rowSite_Code).Tag, Conn, Cmd)
                End If
            Next
        End If


        If AgL.VNull(AgL.Dman_Execute("Select Count(*) From SaleInvoicePayment With (NoLock)
                    Where DocId = '" & mSearchCode & "'", IIf(AgL.PubServerName = "", Conn, AgL.GcnRead)).ExecuteScalar()) > 0 Then
            mQry = "Delete From LedgerAdj Where Vr_DocID = '" & SearchCode & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

            mQry = "Select * From Ledger With (NoLock) Where DocId = '" & SearchCode & "' 
                And SubCode = '" & DglMain.Item(Col1Value, rowBillToParty).Tag & "'
                And IfNull(AmtDr,0) > 0 "
            Dim DtInvoice As DataTable = AgL.FillData(mQry, IIf(AgL.PubServerName = "", Conn, AgL.GcnRead)).Tables(0)

            mQry = " Select * From SaleInvoicePayment With (NoLock) Where DocId = '" & mSearchCode & "' 
                    And PaymentMode <> '" & PaymentMode.Credit & "'"
            Dim DtSaleInvoicePayment As DataTable = AgL.FillData(mQry, IIf(AgL.PubServerName = "", Conn, AgL.GcnRead)).Tables(0)

            For I = 0 To DtSaleInvoicePayment.Rows.Count - 1
                mQry = "Select * From Ledger With (NoLock) Where DocId = '" & SearchCode & "' 
                        And SubCode = '" & DtSaleInvoicePayment.Rows(I)("PostToAc") & "'
                        And IfNull(AmtDr,0) > 0 "
                Dim DtReceipt As DataTable = AgL.FillData(mQry, IIf(AgL.PubServerName = "", Conn, AgL.GcnRead)).Tables(0)
                For J As Integer = 0 To DtReceipt.Rows.Count - 1
                    mQry = "Insert Into LedgerAdj(Vr_DocID, Vr_V_SNo, Adj_DocID, Adj_V_SNo, Amount, Site_Code, Div_Code, Adj_Type,ReferenceDocID)
                            Values (" & AgL.Chk_Text(DtInvoice.Rows(0)("DocId")) & ",
                            " & AgL.Chk_Text(DtInvoice.Rows(0)("V_SNo")) & ", 
                            " & AgL.Chk_Text(DtReceipt.Rows(J)("DocId")) & ", 
                            " & AgL.Chk_Text(DtReceipt.Rows(J)("V_SNo")) & ", 
                            " & Val(DtReceipt.Rows(J)("AmtDr")) & ", 
                            " & AgL.Chk_Text(DtReceipt.Rows(J)("Site_Code")) & ", 
                            " & AgL.Chk_Text(DtReceipt.Rows(J)("DivCode")) & ", 'Adjustment', 
                            " & AgL.Chk_Text(SearchCode) & ") "
                    AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
                Next
            Next
        End If


        UpdateLastTransactionData(Conn, Cmd)

        'If Val(TxtPaidAmt.Text) <> 0 And (Not AgL.StrCmp(TxtNature.Text, "Cash")) Then
        '    Call AccountPosting(Conn, Cmd)
        'End If
        FSaveSalesTaxSummaryStr(SearchCode, Conn, Cmd)
        If LblV_Type.Tag = Ncat.SaleInvoiceOverlay Then
            FSplitSale(SearchCode, Conn, Cmd)
        End If

        If SettingFields_GeneratedEntryV_TypeForAadhat <> "" Then
            FPostPurchaseData(Conn, Cmd)
        End If

        If mFlag_Import = False Then
            If AgL.StrCmp(AgL.PubUserName, AgLibrary.ClsConstant.PubSuperUserName) Or AgL.StrCmp(AgL.PubUserName, "sa") Then
                AgCL.GridSetiingWriteXml(Me.Text & Dgl1.Name & AgL.PubCompCode & AgL.PubDivCode & AgL.PubSiteCode, Dgl1)
                AgCL.GridSetiingWriteXml(Me.Text & AgCalcGrid1.Name & AgL.PubCompCode & AgL.PubDivCode & AgL.PubSiteCode, AgCalcGrid1)
                AgCL.GridSetiingWriteXml(Me.Text & AgCustomGrid1.Name & AgL.PubCompCode & AgL.PubDivCode & AgL.PubSiteCode, AgCustomGrid1)
            End If
        End If
    End Sub
    Private Sub DeleteLineData(DocID As String, Sr As Integer, LineGridRowIndex As Integer, ByRef Conn As Object, ByRef Cmd As Object)
        Dim DtTemp As DataTable

        If Val(Dgl1.Item(ColSNo, LineGridRowIndex).Tag) > 0 Then
            mQry = "Delete From Stock Where DocId = '" & DocID & "' and TSr =" & Sr & ""
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

            If Dgl1.Item(Col1Barcode, LineGridRowIndex).Tag <> "" Then
                mQry = "Select * from SaleInvoiceBarcodeLastTransactionValues With (NoLock) Where  DocId = '" & DocID & "' and Sr =" & Sr & ""
                DtTemp = AgL.FillData(mQry, IIf(AgL.PubServerName = "", Conn, AgL.GcnRead)).Tables(0)
                If DtTemp.Rows.Count > 0 Then
                    mQry = "Update BarcodeSiteDetail set
                                            LastTrnDocID = " & AgL.Chk_Text(AgL.XNull(DtTemp.Rows(0)("LastTrnDocID"))) & ",
                                            LastTrnSr=" & AgL.Chk_Text(AgL.XNull(DtTemp.Rows(0)("LastTrnSr"))) & ",
                                            LastTrnV_Type=" & AgL.Chk_Text(AgL.XNull(DtTemp.Rows(0)("LastTrnV_Type"))) & ",
                                            LastTrnManualRefNo =" & AgL.Chk_Text(AgL.XNull(DtTemp.Rows(0)("LastTrnManualRefNo"))) & ",
                                            LastTrnSubcode=" & AgL.Chk_Text(AgL.XNull(DtTemp.Rows(0)("LastTrnSubcode"))) & ",
                                            LastTrnProcess=" & AgL.Chk_Text(AgL.XNull(DtTemp.Rows(0)("LastTrnProcess"))) & ",
                                            CurrentGodown=" & AgL.Chk_Text(AgL.XNull(DtTemp.Rows(0)("CurrentGodown"))) & ",
                                            Status =" & AgL.Chk_Text(AgL.XNull(DtTemp.Rows(0)("Status"))) & "
                                            WHERE CODE='" & Dgl1.Item(Col1Barcode, LineGridRowIndex).Tag & "' AND Div_Code='" & TxtDivision.Tag & "' And Site_code='" & DglMain.Item(Col1Value, rowSite_Code).Tag & "'                    
                                           "
                    AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
                End If

                mQry = "Delete From SaleInvoiceBarcodeLastTransactionValues Where DocId = '" & DocID & "' and Sr =" & Sr & ""
                AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            End If

            mQry = "Delete From SaleInvoiceDimensionDetail Where DocId = '" & DocID & "' and TSr =" & Sr & ""
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

            mQry = " Delete From SaleInvoiceDetailSku Where DocId = '" & mSearchCode & "' And Sr = " & Sr & "  "
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

            mQry = " Delete From SaleInvoiceDetail Where DocId = '" & DocID & "' And Sr = " & Sr & "  "
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
        End If
    End Sub

    Private Sub UpdateItemGroupPerson(LineGridRowIndex As Integer, ByRef Conn As Object, ByRef Cmd As Object)
        'We will  record personal discount in ItemGroupPerson table only if we are not providing default discount                
        'If TxtNature.Text.ToUpper <> "CASH" Then
        '    If Val(Dgl1.Item(Col1DiscountPer, LineGridRowIndex).Value) > 0 Or Val(Dgl1.Item(Col1AdditionalDiscountPer, LineGridRowIndex).Value) > 0 Or Val(Dgl1.Item(Col1AdditionPer, LineGridRowIndex).Value) > 0 Then
        '        If Val(Dgl1.Item(Col1PersonalDiscountPer, LineGridRowIndex).Value) = 0 And Val(Dgl1.Item(Col1DiscountPer, LineGridRowIndex).Value) <> Val(Dgl1.Item(Col1DefaultDiscountPer, LineGridRowIndex).Value) Then

        '            If AgL.Dman_Execute("Select Count(*) From ItemGroupPerson  With (NoLock) 
        '            Where ItemCategory = " & AgL.Chk_Text(Dgl1.Item(Col1ItemCategory, LineGridRowIndex).Tag) & "
        '            And IfNull(ItemGroup,'') = '" & Dgl1.Item(Col1ItemGroup, LineGridRowIndex).Tag & "'
        '            And Person = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowSaleToParty).Tag) & "", IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar = 0 Then


        '                'mQry = " Insert Into ItemGroupPerson
        '                '    (ItemCategory, ItemGroup, Person, DiscountCalculationPattern, DiscountPer, AdditionalDiscountCalculationPattern, AdditionalDiscountPer, AdditionCalculationPattern, AdditionPer)
        '                '    Values
        '                '    (" & AgL.Chk_Text(Dgl1.Item(Col1ItemCategory, LineGridRowIndex).Tag) & "," & AgL.Chk_Text(Dgl1.Item(Col1ItemGroup, LineGridRowIndex).Tag) & ", " & AgL.Chk_Text(DglMain.Item(Col1Value, rowSaleToParty).Tag) & ",
        '                '     " & AgL.Chk_Text(Dgl1.Item(Col1DiscountCalculationPattern, LineGridRowIndex).Tag) & "," & Val(Dgl1.Item(Col1DiscountPer, LineGridRowIndex).Value) & ", " & AgL.Chk_Text(Dgl1.Item(Col1AdditionalDiscountCalculationPattern, LineGridRowIndex).Tag) & ", " & Val(Dgl1.Item(Col1AdditionalDiscountPer, LineGridRowIndex).Value) & ", " & AgL.Chk_Text(Dgl1.Item(Col1AdditionCalculationPattern, LineGridRowIndex).Tag) & ", " & Val(Dgl1.Item(Col1AdditionPer, LineGridRowIndex).Value) & "
        '                '    )
        '                '   "

        '                mQry = " Insert Into ItemGroupPerson
        '                    (ItemCategory, ItemGroup, Person, DiscountCalculationPattern, DiscountPer, AdditionalDiscountCalculationPattern, AdditionalDiscountPer, AdditionCalculationPattern, AdditionPer)
        '                    Values
        '                    (Null," & AgL.Chk_Text(Dgl1.Item(Col1ItemGroup, LineGridRowIndex).Tag) & ", " & AgL.Chk_Text(DglMain.Item(Col1Value, rowSaleToParty).Tag) & ",
        '                     " & AgL.Chk_Text(Dgl1.Item(Col1DiscountCalculationPattern, LineGridRowIndex).Tag) & "," & Val(Dgl1.Item(Col1DiscountPer, LineGridRowIndex).Value) & ", " & AgL.Chk_Text(Dgl1.Item(Col1AdditionalDiscountCalculationPattern, LineGridRowIndex).Tag) & ", " & Val(Dgl1.Item(Col1AdditionalDiscountPer, LineGridRowIndex).Value) & ", " & AgL.Chk_Text(Dgl1.Item(Col1AdditionCalculationPattern, LineGridRowIndex).Tag) & ", " & Val(Dgl1.Item(Col1AdditionPer, LineGridRowIndex).Value) & "
        '                    )
        '                   "

        '                AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
        '            End If
        '        ElseIf Val(Dgl1.Item(Col1PersonalDiscountPer, LineGridRowIndex).Value) > 0 And Val(Dgl1.Item(Col1PersonalDiscountPer, LineGridRowIndex).Value) <> Val(Dgl1.Item(Col1DiscountPer, LineGridRowIndex).Value) Then
        '            'mQry = "
        '            '            Update ItemGroupPerson 
        '            '            Set 
        '            '            DiscountCalculationPattern = " & AgL.Chk_Text(Dgl1.Item(Col1DiscountCalculationPattern, LineGridRowIndex).Tag) & ",
        '            '            DiscountPer=" & Val(Dgl1.Item(Col1DiscountPer, LineGridRowIndex).Value) & ",
        '            '            AdditionalDiscountCalculationPattern = " & AgL.Chk_Text(Dgl1.Item(Col1AdditionalDiscountCalculationPattern, LineGridRowIndex).Tag) & ",
        '            '            AdditionalDiscountPer=" & Val(Dgl1.Item(Col1AdditionalDiscountPer, LineGridRowIndex).Value) & ",
        '            '            AdditionCalculationPattern = " & AgL.Chk_Text(Dgl1.Item(Col1AdditionCalculationPattern, LineGridRowIndex).Tag) & ",
        '            '            AdditionPer=" & Val(Dgl1.Item(Col1AdditionPer, LineGridRowIndex).Value) & "
        '            '            Where ItemCategory=" & AgL.Chk_Text(Dgl1.Item(Col1ItemCategory, LineGridRowIndex).Tag) & "
        '            '            And ItemGroup=" & AgL.Chk_Text(Dgl1.Item(Col1ItemGroup, LineGridRowIndex).Tag) & "
        '            '            And Person=" & AgL.Chk_Text(DglMain.Item(Col1Value, rowSaleToParty).Tag) & "
        '            '           "
        '            mQry = "
        '                        Update ItemGroupPerson 
        '                        Set 
        '                        DiscountCalculationPattern = " & AgL.Chk_Text(Dgl1.Item(Col1DiscountCalculationPattern, LineGridRowIndex).Tag) & ",
        '                        DiscountPer=" & Val(Dgl1.Item(Col1DiscountPer, LineGridRowIndex).Value) & ",
        '                        AdditionalDiscountCalculationPattern = " & AgL.Chk_Text(Dgl1.Item(Col1AdditionalDiscountCalculationPattern, LineGridRowIndex).Tag) & ",
        '                        AdditionalDiscountPer=" & Val(Dgl1.Item(Col1AdditionalDiscountPer, LineGridRowIndex).Value) & ",
        '                        AdditionCalculationPattern = " & AgL.Chk_Text(Dgl1.Item(Col1AdditionCalculationPattern, LineGridRowIndex).Tag) & ",
        '                        AdditionPer=" & Val(Dgl1.Item(Col1AdditionPer, LineGridRowIndex).Value) & "
        '                        Where ItemCategory Is Null
        '                        And ItemGroup=" & AgL.Chk_Text(Dgl1.Item(Col1ItemGroup, LineGridRowIndex).Tag) & "
        '                        And Person=" & AgL.Chk_Text(DglMain.Item(Col1Value, rowSaleToParty).Tag) & "
        '                       "

        '            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
        '        End If
        '    End If
        'End If


        If TxtNature.Text.ToUpper <> "CASH" Then
            If Val(Dgl1.Item(Col1DiscountPer, LineGridRowIndex).Value) > 0 Or Val(Dgl1.Item(Col1DiscountPer, LineGridRowIndex).Value) <> Val(Dgl1.Item(Col1DefaultDiscountPer, LineGridRowIndex).Value) Or Val(Dgl1.Item(Col1DiscountPer, LineGridRowIndex).Value) <> Val(Dgl1.Item(Col1PersonalDiscountPer, LineGridRowIndex).Value) Then
                mQry = "Delete From PersonDiscount  
                            Where ItemCategory Is Null
                            And IfNull(ItemGroup,'') = '" & Dgl1.Item(Col1ItemGroup, LineGridRowIndex).Tag & "'
                            And Person = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowSaleToParty).Tag) & ""
                AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
                mQry = "Insert Into PersonDiscount(Person,ItemGroup,DiscountPer)
                            Values (" & AgL.Chk_Text(DglMain.Item(Col1Value, rowSaleToParty).Tag) & ", " & AgL.Chk_Text(Dgl1.Item(Col1ItemGroup, LineGridRowIndex).Tag) & ",  " & Val(Dgl1.Item(Col1DiscountPer, LineGridRowIndex).Value) & ")"
                AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            End If


            If Val(Dgl1.Item(Col1AdditionalDiscountPer, LineGridRowIndex).Value) > 0 Or Val(Dgl1.Item(Col1AdditionalDiscountPer, LineGridRowIndex).Value) <> Val(Dgl1.Item(Col1DefaultAdditionalDiscountPer, LineGridRowIndex).Value) Or Val(Dgl1.Item(Col1AdditionalDiscountPer, LineGridRowIndex).Value) <> Val(Dgl1.Item(Col1PersonalAdditionalDiscountPer, LineGridRowIndex).Value) Then
                mQry = "Delete From PersonAdditionalDiscount                             
                            Where ItemCategory Is Null
                            And IfNull(ItemGroup,'') = '" & Dgl1.Item(Col1ItemGroup, LineGridRowIndex).Tag & "'
                            And Person = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowSaleToParty).Tag) & ""
                AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

                mQry = "Insert Into PersonAdditionalDiscount(Person,ItemGroup,AdditionalDiscountPer)
                            Values (" & AgL.Chk_Text(DglMain.Item(Col1Value, rowSaleToParty).Tag) & ", " & AgL.Chk_Text(Dgl1.Item(Col1ItemGroup, LineGridRowIndex).Tag) & ",  " & Val(Dgl1.Item(Col1AdditionalDiscountPer, LineGridRowIndex).Value) & ")"
                AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            End If


            If Val(Dgl1.Item(Col1AdditionPer, LineGridRowIndex).Value) > 0 Or Val(Dgl1.Item(Col1AdditionPer, LineGridRowIndex).Value) <> Val(Dgl1.Item(Col1DefaultAdditionPer, LineGridRowIndex).Value) Or Val(Dgl1.Item(Col1AdditionPer, LineGridRowIndex).Value) <> Val(Dgl1.Item(Col1PersonalAdditionPer, LineGridRowIndex).Value) Then
                mQry = "Delete From PersonAddition  
                            Where ItemCategory Is Null
                            And IfNull(ItemGroup,'') = '" & Dgl1.Item(Col1ItemGroup, LineGridRowIndex).Tag & "'
                            And Person = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowSaleToParty).Tag) & ""
                AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
                mQry = "Insert Into PersonAddition(Person,ItemGroup,AdditionPer)
                            Values (" & AgL.Chk_Text(DglMain.Item(Col1Value, rowSaleToParty).Tag) & ", " & AgL.Chk_Text(Dgl1.Item(Col1ItemGroup, LineGridRowIndex).Tag) & ",  " & Val(Dgl1.Item(Col1AdditionPer, LineGridRowIndex).Value) & ")"
                AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            End If
        End If
    End Sub


    Private Sub InsertSaleInvoiceDetailHelpValues(DocID As String, Sr As Integer, LineGridRowIndex As Integer, ByRef Conn As Object, ByRef Cmd As Object)
        mQry = "
                Insert Into SaleInvoiceDetailHelpValues 
                (DocID, Sr, PurchaseRate, PurchaseDiscountPer, PurchaseAdditionalDiscountPer, PurchaseDeal,
                DefaultDiscountPer, DefaultAdditionalDiscountPer, DefaultAdditionPer, 
                PersonalDiscountPer, PersonalAdditionalDiscountPer, PersonalAdditionPer,
                DiscountCalculationPattern, AdditionalDiscountCalculationPattern, AdditionCalculationPattern) 
                Values('" & DocID & "', " & Sr & ", " & Val(Dgl1.Item(Col1PurchaseRate, LineGridRowIndex).Value) & ", 
                " & Val(Dgl1.Item(Col1PurchaseDiscountPer, LineGridRowIndex).Value) & ", 
                " & Val(Dgl1.Item(Col1PurchaseAdditionalDiscountPer, LineGridRowIndex).Value) & ", 
                " & AgL.Chk_Text(Dgl1.Item(Col1PurchaseDeal, LineGridRowIndex).Value) & ", 
                " & Val(Dgl1.Item(Col1DefaultDiscountPer, LineGridRowIndex).Value) & ", 
                " & Val(Dgl1.Item(Col1DefaultAdditionalDiscountPer, LineGridRowIndex).Value) & ", 
                " & Val(Dgl1.Item(Col1DefaultAdditionPer, LineGridRowIndex).Value) & ", 
                " & Val(Dgl1.Item(Col1PersonalDiscountPer, LineGridRowIndex).Value) & ", 
                " & Val(Dgl1.Item(Col1PersonalAdditionalDiscountPer, LineGridRowIndex).Value) & ",
                " & Val(Dgl1.Item(Col1PersonalAdditionPer, LineGridRowIndex).Value) & ",
                " & AgL.Chk_Text(Dgl1.Item(Col1DiscountCalculationPattern, LineGridRowIndex).Value) & ",
                " & AgL.Chk_Text(Dgl1.Item(Col1AdditionalDiscountCalculationPattern, LineGridRowIndex).Value) & ",
                " & AgL.Chk_Text(Dgl1.Item(Col1AdditionCalculationPattern, LineGridRowIndex).Value) & "
                ) "
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
    End Sub


    Private Sub InsertStock(DocID As String, TSr As Integer, Sr As Integer, LineGridRowIndex As Integer, MultiplyWithMinus As Boolean, ByRef Conn As Object, ByRef Cmd As Object)
        Dim bSalesTaxGroupParty As String = ""
        If CType(AgL.VNull(FGetSettings(SettingFields.PostInStockYn, SettingType.General)), Boolean) = True Or FGetSettings(SettingFields.PostInStockYn, SettingType.General) = "" Then
            If DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag IsNot Nothing Then
                bSalesTaxGroupParty = DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag.Dgl1.Item(DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag.Col1Value, DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag.rowSalesTaxGroup).Value
            End If

            mQry = "Insert Into Stock(DocID, TSr, Sr, V_Type, V_Prefix, V_Date, V_No, RecID, Div_Code, Site_Code, 
                                SubCode, SalesTaxGroupParty, Godown, Barcode, Item, ItemState, SalesTaxGroupItem,  LotNo, 
                                EType_IR, Qty_Iss, Qty_Rec, Unit, Pcs_Iss, Pcs_Rec, UnitMultiplier, DealQty_Iss, DealQty_Rec, DealUnit, 
                                Rate, Amount, Landed_Value, ReferenceDocID, ReferenceTSr, ReferenceDocIDSr) 
                                Values
                                (
                                    '" & DocID & "', " & TSr & ", " & Sr & ", " & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_Type).Tag) & ", " & AgL.Chk_Text(LblPrefix.Text) & ",
                                    " & AgL.Chk_Date(DglMain.Item(Col1Value, rowV_Date).Value) & ", " & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_No).Value) & ", " & AgL.Chk_Text(DglMain.Item(Col1Value, rowReferenceNo).Value) & ",  " & AgL.Chk_Text(TxtDivision.Tag) & ", " & AgL.Chk_Text(DglMain.Item(Col1Value, rowSite_Code).Tag) & ",
                                    " & AgL.Chk_Text(DglMain.Item(Col1Value, rowSaleToParty).Tag) & ", " & AgL.Chk_Text(bSalesTaxGroupParty) & " , 
                                    " & AgL.Chk_Text(Dgl1.Item(Col1Godown, LineGridRowIndex).Tag) & ", 
                                    " & AgL.Chk_Text(Dgl1.Item(Col1Barcode, LineGridRowIndex).Tag) & ", 
                                    " & AgL.Chk_Text(Dgl1.Item(Col1SKU, LineGridRowIndex).Tag) & ", " & AgL.Chk_Text(Dgl1.Item(Col1ItemState, LineGridRowIndex).Tag) & ", " & AgL.Chk_Text(Dgl1.Item(Col1SalesTaxGroup, LineGridRowIndex).Value) & ", " & AgL.Chk_Text(Dgl1.Item(Col1LotNo, LineGridRowIndex).Value) & ",
                                    'I', " & Val(Dgl1.Item(Col1Qty, LineGridRowIndex).Value) & ",0, " & AgL.Chk_Text(Dgl1.Item(Col1Unit, LineGridRowIndex).Value) & ",
                                    " & Val(Dgl1.Item(Col1Pcs, LineGridRowIndex).Value) & ", 0, 
                                    " & Val(Dgl1.Item(Col1UnitMultiplier, LineGridRowIndex).Value) & ",
                                    " & Val(Dgl1.Item(Col1DealQty, LineGridRowIndex).Value) & ", 0,  " & AgL.Chk_Text(Dgl1.Item(Col1DealUnit, LineGridRowIndex).Value) & ", " & Val(Dgl1.Item(Col1Rate, LineGridRowIndex).Value) & ", " & Val(Dgl1.Item(Col1Amount, LineGridRowIndex).Value) & ",0,
                                    " & AgL.Chk_Text(Dgl1.Item(Col1ReferenceDocId, LineGridRowIndex).Value) & ", " & Val(Dgl1.Item(Col1ReferenceDocIdTSr, LineGridRowIndex).Value) & ", " & Val(Dgl1.Item(Col1ReferenceDocIdSr, LineGridRowIndex).Value) & "
                                )"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
        End If
    End Sub

    Private Sub UpdateStock(DocID As String, TSr As Integer, Sr As Integer, LineGridRowIndex As Integer, MultiplyWithMinus As Boolean, ByRef Conn As Object, ByRef Cmd As Object)
        Dim bSalesTaxGroupParty As String = ""
        If CType(AgL.VNull(FGetSettings(SettingFields.PostInStockYn, SettingType.General)), Boolean) = True Then
            If Dgl1.Item(Col1StockSr, LineGridRowIndex).Value <> "" Then
                If Dgl1.Item(Col1StockSr, LineGridRowIndex).Value.ToString.Contains(",") = 0 Then

                    If DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag IsNot Nothing Then
                        bSalesTaxGroupParty = DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag.Dgl1.Item(DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag.Col1Value, DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag.rowSalesTaxGroup).Value
                    End If

                    mQry = "Update Stock Set
                        V_Type = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_Type).Tag) & ", 
                        V_Prefix = " & AgL.Chk_Text(LblPrefix.Text) & ",
                        V_Date = " & AgL.Chk_Date(DglMain.Item(Col1Value, rowV_Date).Value) & ", 
                        V_No = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_No).Value) & ", 
                        RecId = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowReferenceNo).Value) & ",  
                        Div_Code = " & AgL.Chk_Text(TxtDivision.Tag) & ", 
                        Site_Code = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowSite_Code).Tag) & ",
                        Subcode = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowSaleToParty).Tag) & ", 
                        SalesTaxGroupParty = " & AgL.Chk_Text(bSalesTaxGroupParty) & ",
                        Barcode = " & AgL.Chk_Text(Dgl1.Item(Col1Barcode, LineGridRowIndex).Tag) & ", 
                        Item = " & AgL.Chk_Text(Dgl1.Item(Col1SKU, LineGridRowIndex).Tag) & ", 
                        ItemState = " & AgL.Chk_Text(Dgl1.Item(Col1ItemState, LineGridRowIndex).Tag) & ", 
                        SalesTaxGroupItem = " & AgL.Chk_Text(Dgl1.Item(Col1SalesTaxGroup, LineGridRowIndex).Value) & ", 
                        LotNo = " & AgL.Chk_Text(Dgl1.Item(Col1LotNo, LineGridRowIndex).Value) & ",
                        Godown = " & AgL.Chk_Text(Dgl1.Item(Col1Godown, LineGridRowIndex).Tag) & ",
                        EType_IR = 'I', 
                        Qty_Iss = " & Val(Dgl1.Item(Col1Qty, LineGridRowIndex).Value) & ",
                        Qty_Rec = 0, 
                        Unit = " & AgL.Chk_Text(Dgl1.Item(Col1Unit, LineGridRowIndex).Value) & ",
                        Pcs_Iss = " & Val(Dgl1.Item(Col1Pcs, LineGridRowIndex).Value) & ",
                        Pcs_Rec = 0,
                        UnitMultiplier = " & Val(Dgl1.Item(Col1UnitMultiplier, LineGridRowIndex).Value) & ",
                        DealQty_Iss = " & Val(Dgl1.Item(Col1DealQty, LineGridRowIndex).Value) & ", 
                        DealQty_Rec =0,  
                        DealUnit = " & AgL.Chk_Text(Dgl1.Item(Col1DealUnit, LineGridRowIndex).Value) & ", 
                        Rate = " & Val(Dgl1.Item(Col1Rate, LineGridRowIndex).Value) & ", 
                        Amount = " & Val(Dgl1.Item(Col1Amount, LineGridRowIndex).Value) & ",
                        Landed_Value = 0,
                        ReferenceDocId = " & AgL.Chk_Text(Dgl1.Item(Col1ReferenceDocId, LineGridRowIndex).Value) & ", 
                        ReferenceTSr = " & AgL.Chk_Text(Dgl1.Item(Col1ReferenceDocIdTSr, LineGridRowIndex).Value) & ", 
                        ReferenceDocIdSr = " & AgL.Chk_Text(Dgl1.Item(Col1ReferenceDocIdSr, LineGridRowIndex).Value) & " 
                        Where DocId = '" & DocID & "' and TSr =" & TSr & " And Sr =" & Sr & "
                    "
                    AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
                End If
            Else
                If DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag IsNot Nothing Then
                    bSalesTaxGroupParty = DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag.Dgl1.Item(DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag.Col1Value, DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag.rowSalesTaxGroup).Value
                End If
                mDimensionSrl += 1
                mQry = "Insert Into Stock(DocID, TSr, Sr, V_Type, V_Prefix, V_Date, V_No, RecID, Div_Code, Site_Code, 
                                SubCode, SalesTaxGroupParty, Barcode, Item, ItemState, SalesTaxGroupItem,  LotNo, Godown, 
                                EType_IR, Qty_Iss, Qty_Rec, Unit, Pcs_Iss, Pcs_Rec, UnitMultiplier, DealQty_Iss , DealQty_Rec, DealUnit, 
                                Rate, Amount, Landed_Value, ReferenceDocID, ReferenceTSr, ReferenceDocIDSr) 
                                Values
                                (
                                    '" & DocID & "', " & TSr & ", " & mDimensionSrl & ", " & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_Type).Tag) & ", " & AgL.Chk_Text(LblPrefix.Text) & ",
                                    " & AgL.Chk_Date(DglMain.Item(Col1Value, rowV_Date).Value) & ", " & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_No).Value) & ", " & AgL.Chk_Text(DglMain.Item(Col1Value, rowReferenceNo).Value) & ",  " & AgL.Chk_Text(TxtDivision.Tag) & ", " & AgL.Chk_Text(DglMain.Item(Col1Value, rowSite_Code).Tag) & ",
                                    " & AgL.Chk_Text(DglMain.Item(Col1Value, rowSaleToParty).Tag) & ", " & AgL.Chk_Text(bSalesTaxGroupParty) & " , " & AgL.Chk_Text(Dgl1.Item(Col1Barcode, LineGridRowIndex).Tag) & ", " & AgL.Chk_Text(Dgl1.Item(Col1SKU, LineGridRowIndex).Tag) & ", " & AgL.Chk_Text(Dgl1.Item(Col1ItemState, LineGridRowIndex).Tag) & ", " & AgL.Chk_Text(Dgl1.Item(Col1SalesTaxGroup, LineGridRowIndex).Value) & ", " & AgL.Chk_Text(Dgl1.Item(Col1LotNo, LineGridRowIndex).Value) & ", " & AgL.Chk_Text(Dgl1.Item(Col1Godown, LineGridRowIndex).Value) & ",
                                    'I', " & Val(Dgl1.Item(Col1Qty, LineGridRowIndex).Value) & ",0, " & AgL.Chk_Text(Dgl1.Item(Col1Unit, LineGridRowIndex).Value) & ",
                                    " & Val(Dgl1.Item(Col1Pcs, LineGridRowIndex).Value) & ",0, 
                                    " & Val(Dgl1.Item(Col1UnitMultiplier, LineGridRowIndex).Value) & ",
                                    " & Val(Dgl1.Item(Col1DealQty, LineGridRowIndex).Value) & ", 0,  " & AgL.Chk_Text(Dgl1.Item(Col1DealUnit, LineGridRowIndex).Value) & ", " & Val(Dgl1.Item(Col1Rate, LineGridRowIndex).Value) & ", " & Val(Dgl1.Item(Col1Amount, LineGridRowIndex).Value) & ",0,
                                    " & AgL.Chk_Text(Dgl1.Item(Col1ReferenceDocId, LineGridRowIndex).Value) & ", " & Val(Dgl1.Item(Col1ReferenceDocIdTSr, LineGridRowIndex).Value) & ", " & Val(Dgl1.Item(Col1ReferenceDocIdSr, LineGridRowIndex).Value) & "
                                )"
                AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            End If
        End If
    End Sub

    Private Sub InsertSaleInvoiceDetail(DocID As String, Sr As Integer, LineGridRowIndex As Integer, MultiplyWithMinus As Boolean, ByRef Conn As Object, ByRef Cmd As Object)
        mQry = "Insert Into SaleInvoiceDetail(DocId, Sr, Barcode, Item, Specification, ItemState, SalesTaxGroupItem, 
                           DocQty, FreeQty, LossQty, Qty, Unit, Pcs, UnitMultiplier, DealUnit, 
                           DocDealQty, FreeDealQty, LossDealQtyPer, LossDealQty, DealQty, Rate, DiscountPer, DiscountAmount, AdditionalDiscountPer, AdditionalDiscountAmount,  
                           AdditionPer, AdditionAmount, Deal, DealAmount,
                           Amount, ExpiryDate, MRP, Remark, Remarks1, Remarks2, Remarks3, Remarks4, SalesRepresentative, Catalog, BaleNo, LotNo, Godown,  
                           ReferenceNo, ReferenceDate, ReferenceDocId, ReferenceDocIDTSr, ReferenceDocIdSr, 
                           StockInDocId, StockInTSr, StockInSr, StockInDiv_Code, SaleInvoice, SaleInvoiceSr,
                           V_Nature " & IIf(TxtStructure.Tag = "", "", ",") & AgCalcGrid1.FLineTableFieldNameStr() & ") "
        mQry += " Values( " & AgL.Chk_Text(DocID) & ", " & Sr & ", " &
                                        " " & AgL.Chk_Text(Dgl1.Item(Col1Barcode, LineGridRowIndex).Tag) & ", " &
                                        " " & AgL.Chk_Text(Dgl1.Item(Col1SKU, LineGridRowIndex).Tag) & ", " &
                                        " " & AgL.Chk_Text(Dgl1.Item(Col1Specification, LineGridRowIndex).Value) & ", " &
                                        " " & AgL.Chk_Text(Dgl1.Item(Col1ItemState, LineGridRowIndex).Tag) & ", " &
                                        " " & AgL.Chk_Text(Dgl1.Item(Col1SalesTaxGroup, LineGridRowIndex).Tag) & ", " &
                                        " " & Val(Dgl1.Item(Col1DocQty, LineGridRowIndex).Value) & ", " &
                                        " " & Val(Dgl1.Item(Col1FreeQty, LineGridRowIndex).Value) & ", " &
                                        " " & Val(Dgl1.Item(Col1LossQty, LineGridRowIndex).Value) & ", " &
                                        " " & Val(Dgl1.Item(Col1Qty, LineGridRowIndex).Value) & ", " &
                                        " " & AgL.Chk_Text(Dgl1.Item(Col1Unit, LineGridRowIndex).Value) & ", " &
                                        " " & Val(Dgl1.Item(Col1Pcs, LineGridRowIndex).Value) & ", " &
                                        " " & Val(Dgl1.Item(Col1UnitMultiplier, LineGridRowIndex).Value) & ", " &
                                        " " & AgL.Chk_Text(Dgl1.Item(Col1DealUnit, LineGridRowIndex).Value) & ", " &
                                        " " & Val(Dgl1.Item(Col1DocDealQty, LineGridRowIndex).Value) & ", " &
                                        " " & Val(Dgl1.Item(Col1FreeDealQty, LineGridRowIndex).Value) & ", " &
                                        " " & Val(Dgl1.Item(Col1LossDealQtyPer, LineGridRowIndex).Value) & ", " &
                                        " " & Val(Dgl1.Item(Col1LossDealQty, LineGridRowIndex).Value) & ", " &
                                        " " & Val(Dgl1.Item(Col1DealQty, LineGridRowIndex).Value) & ", " &
                                        " " & Val(Dgl1.Item(Col1Rate, LineGridRowIndex).Value) & ", " &
                                        " " & Val(Dgl1.Item(Col1DiscountPer, LineGridRowIndex).Value) & ", " &
                                        " " & Val(Dgl1.Item(Col1DiscountAmount, LineGridRowIndex).Value) & ", " &
                                        " " & Val(Dgl1.Item(Col1AdditionalDiscountPer, LineGridRowIndex).Value) & ", " &
                                        " " & Val(Dgl1.Item(Col1AdditionalDiscountAmount, LineGridRowIndex).Value) & ", " &
                                        " " & Val(Dgl1.Item(Col1AdditionPer, LineGridRowIndex).Value) & ", " &
                                        " " & Val(Dgl1.Item(Col1AdditionAmount, LineGridRowIndex).Value) & ", " &
                                        " " & AgL.Chk_Text(Dgl1.Item(Col1Deal, LineGridRowIndex).Value) & ", " &
                                        " " & Val(Dgl1.Item(Col1DealAmount, LineGridRowIndex).Value) & ", " &
                                        " " & Val(Dgl1.Item(Col1Amount, LineGridRowIndex).Value) & ", " &
                                        " " & AgL.Chk_Date(Dgl1.Item(Col1ExpiryDate, LineGridRowIndex).Value) & ", " &
                                        " " & Val(Dgl1.Item(Col1MRP, LineGridRowIndex).Value) & ", " &
                                        " " & AgL.Chk_Text(Dgl1.Item(Col1Remark, LineGridRowIndex).Value) & ", " &
                                        " " & AgL.Chk_Text(Dgl1.Item(Col1Remark1, LineGridRowIndex).Value) & ", " &
                                        " " & AgL.Chk_Text(Dgl1.Item(Col1Remark2, LineGridRowIndex).Value) & ", " &
                                        " " & AgL.Chk_Text(Dgl1.Item(Col1Remark3, LineGridRowIndex).Value) & ", " &
                                        " " & AgL.Chk_Text(Dgl1.Item(Col1Remark4, LineGridRowIndex).Value) & ", " &
                                        " " & AgL.Chk_Text(Dgl1.Item(Col1SalesRepresentative, LineGridRowIndex).Tag) & ", " &
                                        " " & AgL.Chk_Text(Dgl1.Item(Col1Catalog, LineGridRowIndex).Tag) & ", " &
                                        " " & AgL.Chk_Text(Dgl1.Item(Col1BaleNo, LineGridRowIndex).Value) & " , " &
                                        " " & AgL.Chk_Text(Dgl1.Item(Col1LotNo, LineGridRowIndex).Value) & " , " &
                                        " " & AgL.Chk_Text(Dgl1.Item(Col1Godown, LineGridRowIndex).Tag) & " , " &
                                        " " & AgL.Chk_Text(Dgl1.Item(Col1ReferenceNo, LineGridRowIndex).Value) & ", " &
                                        " " & AgL.Chk_Date(Dgl1.Item(Col1ReferenceDate, LineGridRowIndex).Value) & ", " &
                                        " " & AgL.Chk_Text(Dgl1.Item(Col1ReferenceDocId, LineGridRowIndex).Value) & ", " &
                                        " " & AgL.Chk_Text(Dgl1.Item(Col1ReferenceDocIdTSr, LineGridRowIndex).Value) & ", " &
                                        " " & AgL.Chk_Text(Dgl1.Item(Col1ReferenceDocIdSr, LineGridRowIndex).Value) & ", " &
                                        " " & AgL.Chk_Text(Dgl1.Item(Col1StockInDocId, LineGridRowIndex).Tag) & ", " &
                                        " " & AgL.Chk_Text(Dgl1.Item(Col1StockInTSr, LineGridRowIndex).Value) & ", " &
                                        " " & AgL.Chk_Text(Dgl1.Item(Col1StockInSr, LineGridRowIndex).Value) & ", " &
                                        " " & AgL.Chk_Text(Dgl1.Item(Col1StockInDiv_Code, LineGridRowIndex).Tag) & ", " &
                                        " " & AgL.Chk_Text(Dgl1.Item(Col1SaleInvoice, LineGridRowIndex).Tag) & ", " &
                                        " " & AgL.Chk_Text(Dgl1.Item(Col1SaleInvoiceSr, LineGridRowIndex).Value) & ", " &
                                        " " & AgL.Chk_Text(Dgl1.Item(Col1V_Nature, LineGridRowIndex).Value) & IIf(TxtStructure.Tag = "", "", ",") &
                                        " " & AgCalcGrid1.FLineTableFieldValuesStr(LineGridRowIndex, MultiplyWithMinus) & " )"
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

        mQry = "Insert Into SaleInvoiceDetailSku
                (DocId, Sr, ItemCategory, ItemGroup, Item, Dimension1, 
                Dimension2, Dimension3, Dimension4, Size, ItemInvoiceGroup) "
        mQry += " Values(" & AgL.Chk_Text(mSearchCode) & ", " & Sr & ", " &
                " " & AgL.Chk_Text(Dgl1.Item(Col1ItemCategory, LineGridRowIndex).Tag) & ", " &
                " " & AgL.Chk_Text(Dgl1.Item(Col1ItemGroup, LineGridRowIndex).Tag) & ", " &
                " " & AgL.Chk_Text(Dgl1.Item(Col1Item, LineGridRowIndex).Tag) & ", " &
                " " & AgL.Chk_Text(Dgl1.Item(Col1Dimension1, LineGridRowIndex).Tag) & ", " &
                " " & AgL.Chk_Text(Dgl1.Item(Col1Dimension2, LineGridRowIndex).Tag) & ", " &
                " " & AgL.Chk_Text(Dgl1.Item(Col1Dimension3, LineGridRowIndex).Tag) & ", " &
                " " & AgL.Chk_Text(Dgl1.Item(Col1Dimension4, LineGridRowIndex).Tag) & ", " &
                " " & AgL.Chk_Text(Dgl1.Item(Col1Size, LineGridRowIndex).Tag) & ", " &
                " " & AgL.Chk_Text(Dgl1.Item(Col1ItemInvoiceGroup, LineGridRowIndex).Tag) & "
                )"
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
    End Sub

    Private Sub UpdateSaleInvoiceDetail(DocID As String, Sr As Integer, LineGridRowIndex As Integer, MultiplyWithMinus As Boolean, ByRef Conn As Object, ByRef Cmd As Object)
        If Dgl1.Rows(LineGridRowIndex).DefaultCellStyle.BackColor <> RowLockedColour Then
            mQry = " UPDATE SaleInvoiceDetail " &
                                    " Set " &
                                    " Barcode = " & AgL.Chk_Text(Dgl1.Item(Col1Barcode, LineGridRowIndex).Tag) & ", " &
                                    " Item = " & AgL.Chk_Text(Dgl1.Item(Col1SKU, LineGridRowIndex).Tag) & ", " &
                                    " Specification = " & AgL.Chk_Text(Dgl1.Item(Col1Specification, LineGridRowIndex).Value) & ", " &
                                    " ItemState = " & AgL.Chk_Text(Dgl1.Item(Col1ItemState, LineGridRowIndex).Tag) & ", " &
                                    " SalesTaxGroupItem = " & AgL.Chk_Text(Dgl1.Item(Col1SalesTaxGroup, LineGridRowIndex).Value) & ", " &
                                    " DocQty = " & Val(Dgl1.Item(Col1DocQty, LineGridRowIndex).Value) & ", " &
                                    " FreeQty = " & Val(Dgl1.Item(Col1FreeQty, LineGridRowIndex).Value) & ", " &
                                    " LossQty = " & Val(Dgl1.Item(Col1LossQty, LineGridRowIndex).Value) & ", " &
                                    " Qty = " & Val(Dgl1.Item(Col1Qty, LineGridRowIndex).Value) & ", " &
                                    " Unit = " & AgL.Chk_Text(Dgl1.Item(Col1Unit, LineGridRowIndex).Value) & ", " &
                                    " Pcs = " & Val(Dgl1.Item(Col1Pcs, LineGridRowIndex).Value) & ", " &
                                    " UnitMultiplier = " & Val(Dgl1.Item(Col1UnitMultiplier, LineGridRowIndex).Value) & ", " &
                                    " DealUnit = " & AgL.Chk_Text(Dgl1.Item(Col1DealUnit, LineGridRowIndex).Value) & ", " &
                                    " DocDealQty = " & Val(Dgl1.Item(Col1DocDealQty, LineGridRowIndex).Value) & ", " &
                                    " FreeDealQty = " & Val(Dgl1.Item(Col1FreeDealQty, LineGridRowIndex).Value) & ", " &
                                    " LossDealQtyPer = " & Val(Dgl1.Item(Col1LossDealQtyPer, LineGridRowIndex).Value) & ", " &
                                    " LossDealQty = " & Val(Dgl1.Item(Col1LossDealQty, LineGridRowIndex).Value) & ", " &
                                    " DealQty = " & Val(Dgl1.Item(Col1DealQty, LineGridRowIndex).Value) & ", " &
                                    " Rate = " & Val(Dgl1.Item(Col1Rate, LineGridRowIndex).Value) & ", " &
                                    " DiscountPer = " & Val(Dgl1.Item(Col1DiscountPer, LineGridRowIndex).Value) & ", " &
                                    " DiscountAmount = " & Val(Dgl1.Item(Col1DiscountAmount, LineGridRowIndex).Value) & ", " &
                                    " AdditionalDiscountPer = " & Val(Dgl1.Item(Col1AdditionalDiscountPer, LineGridRowIndex).Value) & ", " &
                                    " AdditionalDiscountAmount = " & Val(Dgl1.Item(Col1AdditionalDiscountAmount, LineGridRowIndex).Value) & ", " &
                                    " AdditionPer = " & Val(Dgl1.Item(Col1AdditionPer, LineGridRowIndex).Value) & ", " &
                                    " AdditionAmount = " & Val(Dgl1.Item(Col1AdditionAmount, LineGridRowIndex).Value) & ", " &
                                    " DealAmount = " & Val(Dgl1.Item(Col1DealAmount, LineGridRowIndex).Value) & ", " &
                                    " Deal = " & AgL.Chk_Text(Dgl1.Item(Col1Deal, LineGridRowIndex).Value) & ", " &
                                    " Amount = " & Val(Dgl1.Item(Col1Amount, LineGridRowIndex).Value) & ", " &
                                    " ExpiryDate = " & AgL.Chk_Date(Dgl1.Item(Col1ExpiryDate, LineGridRowIndex).Value) & ", " &
                                    " MRP = " & Val(Dgl1.Item(Col1MRP, LineGridRowIndex).Value) & ", " &
                                    " Remark = " & AgL.Chk_Text(Dgl1.Item(Col1Remark, LineGridRowIndex).Value) & ", " &
                                    " Remarks1 = " & AgL.Chk_Text(Dgl1.Item(Col1Remark1, LineGridRowIndex).Value) & ", " &
                                    " Remarks2 = " & AgL.Chk_Text(Dgl1.Item(Col1Remark2, LineGridRowIndex).Value) & ", " &
                                    " Remarks3 = " & AgL.Chk_Text(Dgl1.Item(Col1Remark3, LineGridRowIndex).Value) & ", " &
                                    " Remarks4 = " & AgL.Chk_Text(Dgl1.Item(Col1Remark4, LineGridRowIndex).Value) & ", " &
                                    " BaleNo = " & AgL.Chk_Text(Dgl1.Item(Col1BaleNo, LineGridRowIndex).Value) & ", " &
                                    " LotNo = " & AgL.Chk_Text(Dgl1.Item(Col1LotNo, LineGridRowIndex).Value) & ", " &
                                    " Godown = " & AgL.Chk_Text(Dgl1.Item(Col1Godown, LineGridRowIndex).Tag) & ", " &
                                    " SalesRepresentative = " & AgL.Chk_Text(Dgl1.Item(Col1SalesRepresentative, LineGridRowIndex).Tag) & ", " &
                                    " Catalog = " & AgL.Chk_Text(Dgl1.Item(Col1Catalog, LineGridRowIndex).Tag) & ", " &
                                    " ReferenceNo = " & AgL.Chk_Text(Dgl1.Item(Col1ReferenceNo, LineGridRowIndex).Value) & ", " &
                                    " ReferenceDate = " & AgL.Chk_Date(Dgl1.Item(Col1ReferenceDate, LineGridRowIndex).Value) & ", " &
                                    " ReferenceDocId = " & AgL.Chk_Text(Dgl1.Item(Col1ReferenceDocId, LineGridRowIndex).Value) & ", " &
                                    " ReferenceDocIdTSr = " & AgL.Chk_Text(Dgl1.Item(Col1ReferenceDocIdTSr, LineGridRowIndex).Value) & ", " &
                                    " ReferenceDocIdSr = " & AgL.Chk_Text(Dgl1.Item(Col1ReferenceDocIdSr, LineGridRowIndex).Value) & ", " &
                                    " StockInDocId = " & AgL.Chk_Text(Dgl1.Item(Col1StockInDocId, LineGridRowIndex).Tag) & ", " &
                                    " StockInTSr = " & Val(Dgl1.Item(Col1StockInTSr, LineGridRowIndex).Value) & ", " &
                                    " StockInSr = " & Val(Dgl1.Item(Col1StockInSr, LineGridRowIndex).Value) & ", " &
                                    " StockInDiv_Code = " & AgL.Chk_Text(Dgl1.Item(Col1StockInDiv_Code, LineGridRowIndex).Tag) & ", " &
                                    " SaleInvoice = " & AgL.Chk_Text(Dgl1.Item(Col1SaleInvoice, LineGridRowIndex).Tag) & ", " &
                                    " SaleInvoiceSr = " & AgL.Chk_Text(Dgl1.Item(Col1SaleInvoiceSr, LineGridRowIndex).Value) & ", " &
                                    " UploadDate = Null, " &
                                    " V_Nature = " & AgL.Chk_Text(Dgl1.Item(Col1V_Nature, LineGridRowIndex).Value) & IIf(TxtStructure.Tag = "", "", ",") &
                                    " " & AgCalcGrid1.FLineTableUpdateStr(LineGridRowIndex, MultiplyWithMinus) & " " &
                                    " Where DocId = '" & mSearchCode & "' " &
                                    " And Sr = " & Dgl1.Item(ColSNo, LineGridRowIndex).Tag & " "
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

            mQry = "Update SaleInvoiceDetailSku " &
                    " SET ItemCategory = " & AgL.Chk_Text(Dgl1.Item(Col1ItemCategory, LineGridRowIndex).Tag) & ", " &
                    " ItemGroup = " & AgL.Chk_Text(Dgl1.Item(Col1ItemGroup, LineGridRowIndex).Tag) & ", " &
                    " Item = " & AgL.Chk_Text(Dgl1.Item(Col1Item, LineGridRowIndex).Tag) & ", " &
                    " Dimension1 = " & AgL.Chk_Text(Dgl1.Item(Col1Dimension1, LineGridRowIndex).Tag) & ", " &
                    " Dimension2 = " & AgL.Chk_Text(Dgl1.Item(Col1Dimension2, LineGridRowIndex).Tag) & ", " &
                    " Dimension3 = " & AgL.Chk_Text(Dgl1.Item(Col1Dimension3, LineGridRowIndex).Tag) & ", " &
                    " Dimension4 = " & AgL.Chk_Text(Dgl1.Item(Col1Dimension4, LineGridRowIndex).Tag) & ", " &
                    " Size = " & AgL.Chk_Text(Dgl1.Item(Col1Size, LineGridRowIndex).Tag) & ", " &
                    " ItemInvoiceGroup = " & AgL.Chk_Text(Dgl1.Item(Col1ItemInvoiceGroup, LineGridRowIndex).Tag) & " " &
                    " Where DocId = '" & mSearchCode & "' " &
                    " And Sr = " & Dgl1.Item(ColSNo, LineGridRowIndex).Tag & " "
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
        End If
    End Sub

    Private Sub InsertSaleInvoiceBarcodeLastTransactionDetail(DocID As String, Sr As Integer, LineGridRowIndex As Integer, ByRef Conn As Object, ByRef Cmd As Object)
        If Dgl1.Item(Col1Barcode, LineGridRowIndex).Tag <> "" Then
            mQry = "
                        INSERT INTO SaleInvoiceBarcodeLastTransactionValues 
                        (DocID, Sr, LastTrnDiv_Code, LastTrnSite_Code, LastTrnDocID, LastTrnSr, LastTrnV_Type, LastTrnManualRefNo, LastTrnSubcode, LastTrnProcess, CurrentGodown, Status)
                        select '" & DocID & "' DocID, " & Sr & " Sr, Div_Code, Site_Code, LastTrnDocID, LastTrnSr, LastTrnV_Type, LastTrnManualRefNo, LastTrnSubcode, LastTrnProcess, CurrentGodown, Status
                        From barcodesitedetail  With (NoLock)
                        WHERE CODE='" & Dgl1.Item(Col1Barcode, LineGridRowIndex).Tag & "' AND Div_Code='" & TxtDivision.Tag & "' And Site_code='" & DglMain.Item(Col1Value, rowSite_Code).Tag & "'                    
                    "
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

        End If

    End Sub

    Private Sub UpdateBarcodeSiteDetail(DocID As String, Sr As Integer, LineGridRowIndex As Integer, ByRef Conn As Object, ByRef Cmd As Object)
        Dim mBarcodeStatus As String = ""
        If LblV_Type.Tag = Ncat.SaleInvoice Then
            mBarcodeStatus = BarcodeStatus.Issue
        ElseIf LblV_Type.Tag = Ncat.SaleInvoice Then
            mBarcodeStatus = BarcodeStatus.Receive
        End If

        If Dgl1.Item(Col1Barcode, LineGridRowIndex).Tag <> "" And mBarcodeStatus <> "" Then
            mQry = "Update BarcodeSiteDetail Set
                                LastTrnDocID = " & AgL.Chk_Text(DocID) & ",
                                LastTrnSr=" & AgL.Chk_Text(Sr) & ",
                                LastTrnV_Type=" & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_Type).Tag) & ",
                                LastTrnManualRefNo = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowReferenceNo).Value) & ",
                                LastTrnSubcode=" & AgL.Chk_Text(DglMain.Item(Col1Value, rowSaleToParty).Tag) & ",
                                LastTrnProcess=" & AgL.Chk_Text(Process.Sales) & ",
                                CurrentGodown=" & AgL.Chk_Text(Dgl1.Item(Col1Godown, LineGridRowIndex).Tag) & ",
                                Status = " & AgL.Chk_Text(mBarcodeStatus) & "
                                WHERE CODE='" & Dgl1.Item(Col1Barcode, LineGridRowIndex).Tag & "' AND Div_Code='" & TxtDivision.Tag & "' And Site_code='" & DglMain.Item(Col1Value, rowSite_Code).Tag & "'                    
                               "
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
        End If

    End Sub
    Private Sub UpdateLastTransactionData(ByRef Conn As Object, ByRef Cmd As Object)

        Dim bTransporter As String = ""
        Dim bTermsAndConditions As String = ""
        Dim DtSubgroupTypeSetting As DataTable

        'If Dgl2.Item(Col1Value, rowBtnTransportDetail).Tag <> "" Then bTransporter = CType(Dgl2.Item(Col1Value, rowBtnTransportDetail).Tag, FrmSaleInvoiceTransport).Dgl1.Item(FrmSaleInvoiceTransport.Col1Head, FrmSaleInvoiceTransport.rowTransporter).Tag
        If Dgl3.Item(Col1Value, rowBtnTransportDetail).Tag IsNot Nothing Then bTransporter = CType(Dgl3.Item(Col1Value, rowBtnTransportDetail).Tag, FrmSaleInvoiceTransport).Dgl1.Item(FrmSaleInvoiceTransport.Col1Value, FrmSaleInvoiceTransport.rowTransporter).Tag
        If bTransporter = "" Then bTransporter = Dgl3(Col1Value, rowTransporter).Tag
        If Dgl3(Col1Value, rowTermsAndConditions).Value = AgL.XNull(DtV_TypeSettings.Rows(0)("Default_TermsAndConditions")) Then bTermsAndConditions = Dgl3(Col1Value, rowTermsAndConditions).Value

        mQry = "Select * From SubgroupTypeSetting Where SubgroupType = '" & SubgroupType.Customer & "'"
        DtSubgroupTypeSetting = AgL.FillData(mQry, IIf(AgL.PubServerName = "", Conn, AgL.GcnRead)).Tables(0)
        If DtSubgroupTypeSetting.Rows.Count > 0 Then
            If AgL.VNull(DtSubgroupTypeSetting.Rows(0)("PersonCanHaveDivisionWiseRateTypeYn")) And AgL.VNull(DtSubgroupTypeSetting.Rows(0)("PersonCanHaveSiteWiseRateTypeYn")) Then
                mQry = "Update SubgroupSiteDivisionDetail Set RateType = " & AgL.Chk_Text(Dgl2(Col1Value, rowRateType).Tag) & "
                Where Subcode = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowSaleToParty).Tag) & " And Site_Code='" & DglMain.Item(Col1Value, rowSite_Code).Tag & "' And Div_Code='" & TxtDivision.Tag & "'"
                AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            ElseIf AgL.VNull(DtSubgroupTypeSetting.Rows(0)("PersonCanHaveDivisionWiseRateTypeYn")) Then
                mQry = "Update SubgroupSiteDivisionDetail Set RateType = " & AgL.Chk_Text(Dgl2(Col1Value, rowRateType).Tag) & "
                Where Subcode = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowSaleToParty).Tag) & " And Div_Code='" & TxtDivision.Tag & "' And Site_Code Is Null "
                AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            ElseIf AgL.VNull(DtSubgroupTypeSetting.Rows(0)("PersonCanHaveSiteWiseRateTypeYn")) Then
                mQry = "Update SubgroupSiteDivisionDetail Set RateType = " & AgL.Chk_Text(Dgl2(Col1Value, rowRateType).Tag) & "
                Where Subcode = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowSaleToParty).Tag) & " And Site_Code='" & DglMain.Item(Col1Value, rowSite_Code).Tag & "' And Div_Code Is Null "
                AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            End If

            If AgL.VNull(DtSubgroupTypeSetting.Rows(0)("PersonCanHaveDivisionWiseTransporterYn")) And AgL.VNull(DtSubgroupTypeSetting.Rows(0)("PersonCanHaveSiteWiseTransporterYn")) Then
                mQry = "Update SubgroupSiteDivisionDetail Set Transporter = " & AgL.Chk_Text(Dgl3(Col1Value, rowTransporter).Tag) & "
                Where Subcode = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowSaleToParty).Tag) & " And Site_Code='" & DglMain.Item(Col1Value, rowSite_Code).Tag & "' And Div_Code='" & TxtDivision.Tag & "'"
                AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            ElseIf AgL.VNull(DtSubgroupTypeSetting.Rows(0)("PersonCanHaveDivisionWiseRateTypeYn")) Then
                mQry = "Update SubgroupSiteDivisionDetail Set Transporter = " & AgL.Chk_Text(Dgl3(Col1Value, rowTransporter).Tag) & "
                Where Subcode = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowSaleToParty).Tag) & " And Div_Code='" & TxtDivision.Tag & "' And Site_Code Is Null "
                AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            ElseIf AgL.VNull(DtSubgroupTypeSetting.Rows(0)("PersonCanHaveSiteWiseRateTypeYn")) Then
                mQry = "Update SubgroupSiteDivisionDetail Set Transporter = " & AgL.Chk_Text(Dgl3(Col1Value, rowTransporter).Tag) & "
                Where Subcode = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowSaleToParty).Tag) & " And Site_Code='" & DglMain.Item(Col1Value, rowSite_Code).Tag & "' And Div_Code Is Null "
                AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            End If

            mQry = "Update SubgroupSiteDivisionDetail Set 
                TermsAndConditions = " & AgL.Chk_Text(bTermsAndConditions) & "
                Where Subcode = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowSaleToParty).Tag) & ""
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
        Else
            MsgBox("Subgroup Type Settings not found for customer type")
        End If

    End Sub
    'Private Sub ApplyUISettings(NCAT As String)
    '    Dim mQry As String
    '    Dim DtTemp As DataTable
    '    Dim I As Integer, J As Integer
    '    Dim mDgl2RowCount As Integer
    '    Dim mDgl3RowCount As Integer
    '    Dim mDglMainRowCount As Integer
    '    Try


    '        For I = 0 To Dgl2.Rows.Count - 1
    '            Dgl2.Rows(I).Visible = False
    '        Next
    '        Dgl2.Visible = False

    '        mQry = "Select H.*
    '                from EntryHeaderUISetting H                   
    '                Where EntryName= '" & Me.Name & "'  And NCat = '" & NCAT & "' And GridName ='" & Dgl2.Name & "' "
    '        DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)


    '        If DtTemp.Rows.Count > 0 Then
    '            For I = 0 To DtTemp.Rows.Count - 1
    '                For J = 0 To Dgl2.Rows.Count - 1
    '                    If AgL.XNull(DtTemp.Rows(I)("FieldName")) = Dgl2.Item(Col1Head, J).Value Then
    '                        Dgl2.Rows(J).Visible = AgL.VNull(DtTemp.Rows(I)("IsVisible"))
    '                        If AgL.VNull(DtTemp.Rows(I)("IsVisible")) Then mDgl2RowCount += 1
    '                        Dgl2.Item(Col1Mandatory, J).Value = IIf(AgL.VNull(DtTemp.Rows(I)("IsMandatory")), "Ä", "")
    '                        If AgL.XNull(DtTemp.Rows(I)("Caption")) <> "" Then
    '                            Dgl2.Item(Col1Head, J).Value = AgL.XNull(DtTemp.Rows(I)("Caption"))
    '                        End If
    '                        'MsgBox(NameOf(rowAdditionalDiscountPatternPurchase))
    '                    End If
    '                Next
    '            Next
    '        End If
    '        If mDgl2RowCount > 0 Then
    '            Dgl2.Visible = True
    '        End If


    '        mQry = "Select H.*
    '                from EntryHeaderUISetting H                   
    '                Where EntryName= '" & Me.Name & "'  And NCat = '" & NCAT & "' And GridName ='" & DglMain.Name & "' "
    '        DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)

    '        If DtTemp.Rows.Count > 0 Then
    '            For I = 0 To DtTemp.Rows.Count - 1
    '                For J = 0 To DglMain.Rows.Count - 1
    '                    If AgL.XNull(DtTemp.Rows(I)("FieldName")) = DglMain.Item(Col1Head, J).Value Then
    '                        DglMain.Rows(J).Visible = AgL.VNull(DtTemp.Rows(I)("IsVisible"))
    '                        If AgL.VNull(DtTemp.Rows(I)("IsVisible")) Then mDglMainRowCount += 1
    '                        DglMain.Item(Col1Mandatory, J).Value = IIf(AgL.VNull(DtTemp.Rows(I)("IsMandatory")), "Ä", "")
    '                        If AgL.XNull(DtTemp.Rows(I)("Caption")) <> "" Then
    '                            DglMain.Item(Col1Head, J).Value = AgL.XNull(DtTemp.Rows(I)("Caption"))
    '                        End If
    '                    End If
    '                Next
    '            Next
    '        End If
    '        If mDglMainRowCount = 0 Then DglMain.Visible = False Else DglMain.Visible = True



    '        For I = 0 To Dgl3.Rows.Count - 1
    '            Dgl3.Rows(I).Visible = False
    '        Next
    '        Dgl3.Visible = False


    '        mQry = "Select H.*
    '                from EntryHeaderUISetting H                   
    '                Where EntryName= '" & Me.Name & "'  And NCat = '" & NCAT & "' And GridName ='" & Dgl3.Name & "' "
    '        DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)


    '        If DtTemp.Rows.Count > 0 Then
    '            For I = 0 To DtTemp.Rows.Count - 1
    '                For J = 0 To Dgl3.Rows.Count - 1
    '                    If AgL.XNull(DtTemp.Rows(I)("FieldName")) = Dgl3.Item(Col1Head, J).Value Then
    '                        Dgl3.Rows(J).Visible = AgL.VNull(DtTemp.Rows(I)("IsVisible"))
    '                        If AgL.VNull(DtTemp.Rows(I)("IsVisible")) Then mDgl3RowCount += 1
    '                        Dgl3.Item(Col1Mandatory, J).Value = IIf(AgL.VNull(DtTemp.Rows(I)("IsMandatory")), "Ä", "")
    '                        If AgL.XNull(DtTemp.Rows(I)("Caption")) <> "" Then
    '                            Dgl3.Item(Col1Head, J).Value = AgL.XNull(DtTemp.Rows(I)("Caption"))
    '                        End If
    '                        'MsgBox(NameOf(rowAdditionalDiscountPatternPurchase))
    '                    End If
    '                Next
    '            Next
    '        End If
    '        If mDgl3RowCount > 0 Then
    '            Dgl3.Visible = True
    '        End If




    '        For I = 1 To Dgl1.Columns.Count - 1
    '            Dgl1.Columns(I).Visible = False
    '        Next

    '        mQry = "Select H.*
    '                from EntryLineUISetting H                    
    '                Where EntryName='" & Me.Name & "' And NCat = '" & NCAT & "' 
    '                And GridName ='" & Dgl1.Name & "' "
    '        DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)


    '        If DtTemp.Rows.Count > 0 Then
    '            For I = 0 To DtTemp.Rows.Count - 1
    '                For J = 0 To Dgl1.Columns.Count - 1
    '                    If AgL.XNull(DtTemp.Rows(I)("FieldName")) = Dgl1.Columns(J).Name Then
    '                        Dgl1.Columns(J).Visible = AgL.VNull(DtTemp.Rows(I)("IsVisible"))
    '                        If Not IsDBNull(DtTemp.Rows(I)("DisplayIndex")) Then
    '                            Dgl1.Columns(J).DisplayIndex = AgL.VNull(DtTemp.Rows(I)("DisplayIndex"))
    '                        End If
    '                        If AgL.XNull(DtTemp.Rows(I)("Caption")) <> "" Then
    '                            Dgl1.Columns(J).HeaderText = AgL.XNull(DtTemp.Rows(I)("Caption"))
    '                        End If
    '                    End If
    '                Next
    '            Next
    '        End If


    '        'mQry = "Select H.*
    '        '        from EntryLineUISetting H                    
    '        '        Where EntryName='" & Me.Name & "' And NCat = '" & NCAT & "' And GridName ='" & Dgl1.Name & "' "
    '        'DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)


    '        'If DtTemp.Rows.Count > 0 Then
    '        '    For I = 0 To DtTemp.Rows.Count - 1
    '        '        For J = 0 To Dgl1.Columns.Count - 1
    '        '            If AgL.XNull(DtTemp.Rows(I)("FieldName")) = Dgl1.Columns(J).Name Then
    '        '                Dgl1.Columns(J).Visible = AgL.VNull(DtTemp.Rows(I)("IsVisible"))
    '        '                If AgL.VNull(DtTemp.Rows(I)("IsVisible")) Then mDgl1ColumnCount += 1
    '        '                If Not IsDBNull(DtTemp.Rows(I)("DisplayIndex")) Then
    '        '                    Dgl1.Columns(J).DisplayIndex = AgL.VNull(DtTemp.Rows(I)("DisplayIndex"))
    '        '                End If
    '        '                'Dgl1.Item(Col1Mandatory, J).Value = IIf(AgL.VNull(DtTemp.Rows(I)("IsMandatory")), "Ä", "")
    '        '            End If
    '        '        Next
    '        '    Next
    '        'End If
    '        'If mDgl1ColumnCount = 0 Then Dgl1.Visible = False Else Dgl1.Visible = True

    '    Catch ex As Exception
    '        MsgBox(ex.Message & " [ApplySubgroupTypeSetting]")
    '    End Try
    'End Sub

    Private Sub ApplyUISetting()
        Me.Name = "FrmSaleInvoiceDirect"
        Dim bNCat As String = ""
        If LblV_Type.Tag <> "" Then bNCat = LblV_Type.Tag Else bNCat = EntryNCat
        GetUISetting_WithDataTables(DglMain, Me.Name, AgL.PubDivCode, AgL.PubSiteCode, bNCat, DglMain.Item(Col1Value, rowV_Type).Tag, "", DglMain.Item(Col1Value, rowSettingGroup).Tag, ClsMain.GridTypeConstants.VerticalGrid)
        GetUISetting_WithDataTables(Dgl2, Me.Name, AgL.PubDivCode, AgL.PubSiteCode, bNCat, DglMain.Item(Col1Value, rowV_Type).Tag, "", DglMain.Item(Col1Value, rowSettingGroup).Tag, ClsMain.GridTypeConstants.VerticalGrid)
        GetUISetting_WithDataTables(Dgl3, Me.Name, AgL.PubDivCode, AgL.PubSiteCode, bNCat, DglMain.Item(Col1Value, rowV_Type).Tag, "", DglMain.Item(Col1Value, rowSettingGroup).Tag, ClsMain.GridTypeConstants.VerticalGrid)
        GetUISetting_WithDataTables(Dgl1, Me.Name, AgL.PubDivCode, AgL.PubSiteCode, bNCat, DglMain.Item(Col1Value, rowV_Type).Tag, "", DglMain.Item(Col1Value, rowSettingGroup).Tag, ClsMain.GridTypeConstants.HorizontalGrid)
        GetUISetting_WithDataTables(DglPurchase, Me.Name, AgL.PubDivCode, AgL.PubSiteCode, bNCat, DglMain.Item(Col1Value, rowV_Type).Tag, "", DglMain.Item(Col1Value, rowSettingGroup).Tag, ClsMain.GridTypeConstants.HorizontalGrid)
        GetUISetting_WithDataTables(DglItemCategorySummary, Me.Name, AgL.PubDivCode, AgL.PubSiteCode, bNCat, DglMain.Item(Col1Value, rowV_Type).Tag, "", DglMain.Item(Col1Value, rowSettingGroup).Tag, ClsMain.GridTypeConstants.HorizontalGrid)

        If Dgl2.Rows(rowPartyDocNo).Visible = True Or Dgl2.Rows(rowReferenceSaleInvoiceNo).Visible = True Then
            Dgl2.Columns(Col1BtnDetail).Visible = True
        End If

        If AgL.StrCmp(AgL.PubDBName, "SHADHVINEW") Or AgL.StrCmp(AgL.PubDBName, "SHADHVIKANPURB2") Or AgL.StrCmp(AgL.PubDBName, "SHADHVIjaunpur") Or AgL.StrCmp(AgL.PubDBName, "SHADHVINANDI") Then
            Dgl1.Columns(Col1Rate).ReadOnly = True
        End If

        If AgL.StrCmp(AgL.PubDBName, "RVN") Then
            Dgl1.Columns(Col1Remark1).Visible = True
            Dgl1.Columns(Col1Remark2).Visible = True
            Dgl1.Columns(Col1Remark3).Visible = True
            Dgl1.Columns(Col1Remark4).Visible = True
        End If

        'If DglMain.Rows(rowSaleToPartyName).Visible = True And
        '    Not AgL.StrCmp(Topctrl1.Mode, "Browse") Then
        '    DglMain.Rows(rowSaleToPartyName).Visible = False
        'End If
    End Sub
    Private Sub FrmSaleOrder_BaseFunction_MoveRec(ByVal SearchCode As String) Handles Me.BaseFunction_MoveRec
        Dim I As Integer
        Dim mMultiplyWithMinus As Boolean = False
        Dim mQryStockSr As String

        Dim DsMain As DataSet
        Dim DtTemp As DataTable

        If mFlag_Import = False And DtV_TypeSettings.Rows.Count > 0 Then
            mQry = "Select * from SaleInvoiceSetting  With (NoLock)  Where V_Type = '" & DglMain.Item(Col1Value, rowV_Type).Tag & "' And Div_Code = '" & AgL.PubDivCode & "' And Site_Code='" & AgL.PubSiteCode & "' "
            DtV_TypeSettings = AgL.FillData(mQry, AgL.GCn).Tables(0)
            If DtV_TypeSettings.Rows.Count = 0 Then
                mQry = "Select * from SaleInvoiceSetting  With (NoLock)  Where V_Type = '" & DglMain.Item(Col1Value, rowV_Type).Tag & "' And Div_Code = '" & AgL.PubDivCode & "' And Site_Code Is Null "
                DtV_TypeSettings = AgL.FillData(mQry, AgL.GCn).Tables(0)
                If DtV_TypeSettings.Rows.Count = 0 Then
                    mQry = "Select * from SaleInvoiceSetting  With (NoLock)  Where V_Type = '" & DglMain.Item(Col1Value, rowV_Type).Tag & "' And Div_Code  Is Null And Site_Code='" & AgL.PubSiteCode & "' "
                    DtV_TypeSettings = AgL.FillData(mQry, AgL.GCn).Tables(0)
                    If DtV_TypeSettings.Rows.Count = 0 Then
                        mQry = "Select * from SaleInvoiceSetting  With (NoLock)  Where V_Type = '" & DglMain.Item(Col1Value, rowV_Type).Tag & "' And Div_Code  Is Null And Site_Code Is Null "
                        DtV_TypeSettings = AgL.FillData(mQry, AgL.GCn).Tables(0)
                        If DtV_TypeSettings.Rows.Count = 0 Then
                            mQry = "Select * from SaleInvoiceSetting  With (NoLock)  Where V_Type Is Null And Div_Code  Is Null And Site_Code Is Null "
                            DtV_TypeSettings = AgL.FillData(mQry, AgL.GCn).Tables(0)
                        End If
                    End If
                End If
            End If
            If DtV_TypeSettings.Rows.Count = 0 Then
                MsgBox("Voucher Type Settings Not Found.")
            End If
        End If


        LblTotalPcs.Text = 0
        LblTotalQty.Text = 0
        LblDealQty.Text = 0
        LblTotalBale.Text = 0
        LblTotalAmount.Text = 0

        If LblV_Type.Tag = Ncat.SaleReturn Then
            mMultiplyWithMinus = True
        End If


        mQry = " Select H.*, IfNull(H.SalesTaxApplicable,1) as SalesTaxApplicableYn, Sg.Name As SaleToPartyDesc, 
                BillToParty.Name As BillToPartyDesc, ShipToParty.Name as ShipToPartyDesc, LinkedParty.Name as LinkedPartyDesc,
                C1.CityName As SaleToPartyCityName, Agent.Name As AgentName, ResponsiblePerson.Name as ResponsiblePersonName, 
                P.Name As ProcessDesc, Sg.Nature, RT.Description as RateTypeName, SgWc.DispName As SaleToPartyDispName_Master
                From (Select * From SaleInvoice With (NoLock) Where DocID='" & SearchCode & "') H 
                LEFT JOIN viewHelpSubGroup Sg With (NoLock) ON H.SaleToParty = Sg.Code 
                LEFT JOIN viewHelpSubGroup BillToParty With (NoLock) On H.BillToParty = BillToParty.Code 
                LEFT JOIN viewHelpSubGroup ShipToParty With (NoLock) On H.ShipToParty = ShipToParty.Code 
                LEFT JOIN viewHelpSubGroup LinkedParty With (NoLock) On H.LinkedParty = LinkedParty.Code 
                LEFT JOIN City C1  With (NoLock) On H.SaleToPartyCity = C1.CityCode 
                LEFT JOIN City BillToPartyCity  With (NoLock) On BillToParty.CityCode = BillToPartyCity.CityCode 
                LEFT JOIN viewHelpSubGroup Agent  With (NoLock) On H.Agent = Agent.Code 
                LEFT JOIN viewHelpSubGroup ResponsiblePerson  With (NoLock) On H.ResponsiblePerson = ResponsiblePerson.Code 
                LEFT JOIN SubGroup SgWc On H.SaleToParty = SgWc.SubCode
                LEFT JOIN SubGroup P  With (NoLock) On H.Process = P.SubCode
                Left Join RateType RT  With (NoLock) On H.RateType = RT.Code
                "
        DsMain = AgL.FillData(mQry, AgL.GCn)

        With DsMain.Tables(0)
            If .Rows.Count > 0 Then
                'TxtStructure.AgSelectedValue = AgStructure.ClsMain.FGetStructureFromNCat(LblV_Type.Tag, AgL.GcnRead)
                'TxtCustomFields.AgSelectedValue = AgCustomFields.ClsMain.FGetCustomFieldFromV_Type(DglMain.Item(Col1Value, rowV_Type).Tag, AgL.GcnRead)


                TxtStructure.Tag = AgL.XNull(.Rows(0)("Structure"))

                AgCalcGrid1.FrmType = Me.FrmType
                AgCalcGrid1.AgStructure = TxtStructure.Tag

                TxtCustomFields.AgSelectedValue = AgL.XNull(.Rows(0)("CustomFields"))

                AgCustomGrid1.FrmType = Me.FrmType
                AgCustomGrid1.AgCustom = TxtCustomFields.AgSelectedValue

                DglMain.Item(Col1Value, rowProcess).Tag = AgL.XNull(.Rows(0)("Process"))
                DglMain.Item(Col1Value, rowProcess).Value = AgL.XNull(.Rows(0)("ProcessDesc"))


                IniGrid()

                DglMain.Item(Col1Value, rowReferenceNo).Value = AgL.XNull(.Rows(0)("ManualRefNo"))
                Dgl2(Col1Value, rowPartyDocNo).Value = AgL.XNull(.Rows(0)("SaleToPartyDocNo"))
                Dgl2(Col1Value, rowPartyDocDate).Value = ClsMain.FormatDate(AgL.XNull(.Rows(0)("SaleToPartyDocDate")))
                Dgl2(Col1Value, rowDeliveryDate).Value = ClsMain.FormatDate(AgL.XNull(.Rows(0)("DeliveryDate")))
                Dgl2(Col1Value, rowMinDeliveryDate).Value = ClsMain.FormatDate(AgL.XNull(.Rows(0)("MinDeliveryDate")))
                Dgl2(Col1Value, rowSalesTaxApplicable).Value = IIf(Math.Abs(AgL.VNull(.Rows(0)("SalesTaxApplicableYn"))) = 1, "Yes", "No")

                Dgl2(Col1Value, rowReferenceSaleInvoiceNo).Tag = AgL.XNull(.Rows(0)("ReferenceDocId"))
                Dgl2(Col1Value, rowReferenceSaleInvoiceNo).Value = AgL.XNull(AgL.XNull(.Rows(0)("ReferenceNo")))

                DglMain.Item(Col1Value, rowSaleToParty).Tag = AgL.XNull(.Rows(0)("SaleToParty"))
                DglMain.Item(Col1Value, rowSaleToParty).Value = AgL.XNull(.Rows(0)("SaleToPartyDesc"))

                DglMain.Item(Col1Value, rowSaleToPartyName).Value = AgL.XNull(.Rows(0)("SaleToPartyName"))

                'If DglMain.Rows(rowSaleToPartyName).Visible = True Then
                '    If AgL.XNull(.Rows(0)("SaleToPartyDispName_Master")) <> AgL.XNull(.Rows(0)("SaleToPartyName")) And
                '            AgL.XNull(.Rows(0)("SaleToPartyName")) <> "" Then
                '        DglMain.Item(Col1Value, rowSaleToPartyName).Value = AgL.XNull(.Rows(0)("SaleToPartyName"))
                '        DglMain.Rows(rowSaleToPartyName).Visible = True
                '    Else
                '        DglMain.Rows(rowSaleToPartyName).Visible = False
                '    End If
                'End If


                DglMain.Item(Col1Value, rowSaleToPartyMobile).Value = AgL.XNull(.Rows(0)("SaleToPartyMobile"))
                DglMain.Item(Col1Value, rowBillToParty).Tag = AgL.XNull(.Rows(0)("BillToParty"))
                DglMain.Item(Col1Value, rowBillToParty).Value = AgL.XNull(.Rows(0)("BillToPartyDesc"))

                DglMain.Item(Col1Value, rowLinkedParty).Tag = AgL.XNull(.Rows(0)("LinkedParty"))
                DglMain.Item(Col1Value, rowLinkedParty).Value = AgL.XNull(.Rows(0)("LinkedPartyDesc"))


                Dgl2(Col1Value, rowShipToParty).Tag = AgL.XNull(.Rows(0)("ShipToParty"))
                Dgl2(Col1Value, rowShipToParty).Value = AgL.XNull(.Rows(0)("ShipToPartyDesc"))

                Dgl2(Col1Value, rowSalesTaxGroup).Tag = AgL.XNull(.Rows(0)("SalesTaxGroupParty"))
                Dgl2(Col1Value, rowSalesTaxGroup).Value = AgL.XNull(.Rows(0)("SalesTaxGroupParty"))

                Dgl2(Col1Value, rowAmsDocNo).Value = AgL.XNull(.Rows(0)("AmsDocNo"))
                Dgl2(Col1Value, rowAmsDocDate).Value = ClsMain.FormatDate(AgL.XNull(.Rows(0)("AmsDocDate")))
                Dgl2(Col1Value, rowAmsDocNetAmount).Value = AgL.VNull(.Rows(0)("AmsDocNetAmount"))


                Dgl2(Col1Value, rowCurrency).Value = AgL.XNull(.Rows(0)("Currency"))
                Dgl2(Col1Value, rowCurrencyMultiplier).Value = AgL.XNull(.Rows(0)("CurrencyMultiplier"))
                Dgl3(Col1Value, rowAgent).Tag = AgL.XNull(.Rows(0)("Agent"))
                Dgl3(Col1Value, rowAgent).Value = AgL.XNull(.Rows(0)("AgentName"))
                Dgl3(Col1Value, rowResponsiblePerson).Tag = AgL.XNull(.Rows(0)("ResponsiblePerson"))
                Dgl3(Col1Value, rowResponsiblePerson).Value = AgL.XNull(.Rows(0)("ResponsiblePersonName"))

                TxtNature.Text = AgL.XNull(.Rows(0)("Nature"))

                mQry = " SELECT Max(CASE WHEN Sgr.RegistrationType = 'Sales Tax No' THEN Sgr.RegistrationNo ELSE NULL END) AS SalesTaxNo,
                        Max(CASE WHEN Sgr.RegistrationType = 'AADHAR NO' THEN Sgr.RegistrationNo ELSE NULL END) AS AadharNo
                        FROM SubgroupRegistration Sgr
                        WHERE Sgr.Subcode = '" & DglMain.Item(Col1Value, rowSaleToParty).Tag & "'
                        GROUP BY Sgr.Subcode"
                Dim DtRegistration As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)
                If DtRegistration.Rows.Count > 0 Then
                    Dgl2.Item(Col1Value, rowSalesTaxNo).Value = DtRegistration.Rows(0)("SalesTaxNo")
                    Dgl2.Item(Col1Value, rowAadharNo).Value = DtRegistration.Rows(0)("AadharNo")
                End If


                If LblV_Type.Tag = Ncat.SaleReturn Then
                    mQry = "Select Count(*) 
                            From SaleInvoice H With (NoLock) 
                            Left Join Voucher_Type VT With (NoLock) On H.V_Type = VT.V_Type
                            Where VT.NCat = '" & Ncat.SaleInvoice & "' 
                            And H.SaleToParty = '" & DglMain.Item(Col1Value, rowSaleToParty).Tag & "'
                            And H.V_Date <= " & AgL.Chk_Date(DglMain.Item(Col1Value, rowV_Date).Value) & " 
                           "
                    Dgl3.Item(Col1Value, rowCustomerInvoiceCount).Value = AgL.Dman_Execute(mQry, AgL.GCn).ExecuteScalar()
                End If




                mQry = "Select H.Transporter, T.Name as TransporterName 
                        From SaleInvoiceTransport H  With (NoLock)
                        Left Join viewHelpSubgroup T  With (NoLock) On H.Transporter = T.Code Where DocID ='" & SearchCode & "'"
                DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)
                If DtTemp.Rows.Count > 0 Then
                    Dgl3(Col1Value, rowTransporter).Tag = AgL.XNull(DtTemp.Rows(0)("Transporter"))
                    Dgl3(Col1Value, rowTransporter).Value = AgL.XNull(DtTemp.Rows(0)("TransporterName"))
                End If
                If Dgl3(Col1Value, rowTransporter).Tag = "" Then
                    mQry = "Select H.Transporter, T.Name as TransporterName 
                        From SubgroupSiteDivisionDetail H  With (NoLock)
                        Left Join viewHelpSubgroup T  With (NoLock) On H.Transporter = T.Code Where Subcode ='" & DglMain.Item(Col1Value, rowSaleToParty).Tag & "'"
                    DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)
                    If DtTemp.Rows.Count > 0 Then
                        Dgl3(Col1Value, rowTransporter).Tag = AgL.XNull(DtTemp.Rows(0)("Transporter"))
                        Dgl3(Col1Value, rowTransporter).Value = AgL.XNull(DtTemp.Rows(0)("TransporterName"))
                    End If
                End If



                If mFlag_Import = False Then Call FGetCurrBal(DglMain.Item(Col1Value, rowSaleToParty).Tag)

                Dgl2(Col1Value, rowRateType).Tag = AgL.XNull(.Rows(0)("RateType"))
                Dgl2(Col1Value, rowRateType).Value = AgL.XNull(.Rows(0)("RateTypeName"))



                Dgl3(Col1Value, rowRemarks).Value = AgL.XNull(.Rows(0)("Remarks"))
                Dgl3(Col1Value, rowRemarks1).Value = AgL.XNull(.Rows(0)("Remarks1"))
                Dgl3(Col1Value, rowRemarks2).Value = AgL.XNull(.Rows(0)("Remarks2"))
                Dgl3(Col1Value, rowTermsAndConditions).Value = AgL.XNull(.Rows(0)("TermsAndConditions"))
                Dgl3(Col1Value, rowCreditDays).Value = AgL.VNull(.Rows(0)("CreditDays"))
                TxtCreditLimit.Text = Format(AgL.VNull(.Rows(0)("CreditLimit")), "0.00")
                TxtBalanceLimit.Text = Val(TxtCreditLimit.Text) - Val(TxtCurrBal.Text)

                Dgl3(Col1Value, rowEInvoiceIRN).Value = AgL.XNull(.Rows(0)("EInvoiceIRN"))
                Dgl3(Col1Value, rowEInvoiceACKNo).Value = AgL.XNull(.Rows(0)("EInvoiceACKNo"))
                Dgl3(Col1Value, rowEInvoiceACKDate).Value = ClsMain.FormatDate(AgL.XNull(.Rows(0)("EInvoiceACKDate")))


                Dgl3(Col1Value, rowTags).Value = AgL.XNull(.Rows(0)("Tags"))


                LblCancelled.Text = IIf(AgL.XNull(.Rows(0)("CancellationDate")) <> "", "CANCELLED", "")




                'Dim FrmObj As New FrmSaleInvoicePartyDetail
                'FrmObj.TxtSaleToPartyMobile.Text = AgL.XNull(.Rows(0)("SaleToPartyMobile"))
                'FrmObj.TxtSaleToPartyName.Text = AgL.XNull(.Rows(0)("SaleToPartyName"))
                'FrmObj.TxtSaleToPartyAdd1.Text = AgL.XNull(.Rows(0)("SaleToPartyAddress"))
                'FrmObj.TxtSaleToPartyCity.Tag = AgL.XNull(.Rows(0)("SaleToPartyCity"))
                'FrmObj.TxtSaleToPartyCity.Text = AgL.XNull(.Rows(0)("SaleToPartyCityName"))

                'DglMain.Item(Col1BtnDetail,rowSaleToParty).Tag = FrmObj

                'AgCustomGrid1.MoveRec_TransFooter(SearchCode)

                AgCalcGrid1.FMoveRecFooterTable(DsMain.Tables(0), EntryNCat, DglMain.Item(Col1Value, rowV_Date).Value, mMultiplyWithMinus)

                AgCustomGrid1.FMoveRecFooterTable(DsMain.Tables(0))




                If AgL.PubServerName = "" Then
                    mQryStockSr = "Select  group_concat(Sr ,',') || ','  from Stock  With (NoLock) Where DocID = L.DocID And TSr = L.Sr"
                Else
                    mQryStockSr = "Select  Cast(Sr as Varchar) + ',' from Stock  With (NoLock) Where DocID = L.DocID And TSr = L.Sr for xml path('')"
                End If
                '-------------------------------------------------------------
                'Line Records are showing in Grid
                '-------------------------------------------------------------

                'mQry = "Select L.*, SalesRep.Name as SalesRepresentativeName, Barcode.Description as BarcodeName, 
                '        I.Description As ItemDesc, I.ManualCode, I.MaintainStockYn,
                '        Case When Vt.NCat = '" & Ncat.SaleOrder & "' Then Si.V_Type || '-' || Si.ManualRefNo Else Null End As SaleInvoiceNo, 
                '        Stock.V_Type || '-' || Stock.RecID As PurchaseNo, U.DecimalPlaces, U.DecimalPlaces As QtyDecimalPlaces, 
                '        U.ShowDimensionDetailInSales, MU.DecimalPlaces As DealQtyDecimalPlaces, 
                '        (Stock.Landed_Value/(Stock.Qty_Rec+Stock.Qty_Iss)) + (Stock.Landed_Value/(Stock.Qty_Rec+Stock.Qty_Iss))*1/100 As PurchaseRate, 
                '        IG.Description As ItemGroupName, I.ItemCategory, I.ItemGroup, IC.Description As ItemCategoryName,
                '        I.ItemType, IT.Name as ItemTypeName, Godown.Name as GodownName, ISt.Description as ItemStateName,   HV.*,
                '        (" & mQryStockSr & ") as StockSr
                '        From (Select * From SaleInvoiceDetail  With (NoLock)  Where DocId = '" & SearchCode & "') As L 
                '        Left Join SaleInvoiceDetailHelpValues HV  With (NoLock) On L.DocID = HV.DocId And L.Sr = HV.Sr
                '        LEFT JOIN Item I  With (NoLock) On L.Item = I.Code 
                '        Left Join Item IC  With (NoLock) On I.ItemCategory = IC.Code 
                '        Left Join Item IG  With (NoLock) On I.ItemGroup = IG.Code 
                '        Left Join ItemType IT  With (NoLock) On I.ItemType = IT.Code 
                '        Left Join Item ISt  With (NoLock) On L.ItemState = ISt.Code 
                '        Left Join viewHelpSubgroup SalesRep On L.SalesRepresentative = SalesRep.Code
                '        LEFT JOIN Stock  With (NoLock) On L.ReferenceDocId = Stock.docid And l.ReferenceDocIdSr = Stock.Sr  
                '        LEFT JOIN SaleInvoice Si  With (NoLock) On L.SaleInvoice = Si.DocId 
                '        LEFT JOIN Voucher_Type Vt With (NoLock) On Si.V_Type = Vt.V_Type
                '        Left Join Barcode  With (NoLock) On L.Barcode = Barcode.Code
                '        Left Join Unit U  With (NoLock) On L.Unit = U.Code 
                '        Left Join Unit MU  With (NoLock) On L.DealUnit = MU.Code 
                '        Left Join Subgroup Godown On L.Godown = Godown.Subcode
                '        Order By L.Sr "

                mQry = "Select L.*, SalesRep.Name as SalesRepresentativeName, Barcode.Description as BarcodeName, 
                        Stock.V_Type || '-' || Stock.RecID As PurchaseNo, IfNull(I.MaintainStockYn,Ic.MaintainStockYn) As MaintainStockYn,
                        Case When Vt.NCat = '" & Ncat.SaleOrder & "' Then Si.V_Type || '-' || Si.ManualRefNo Else Null End As SaleInvoiceNo,                         
                        I.Description As ItemDesc, I.ManualCode, I.Specification As ItemSpecification,
                        Case When IfNull(U.ShowDimensionDetailInSales,0) = 1 Or IfNull(Ic.ShowDimensionDetailInSales,0) = 1 Then 1
                            Else 0 End As ShowDimensionDetailInSales, 
                        U.DecimalPlaces, U.DecimalPlaces As QtyDecimalPlaces, U.ShowDimensionDetailInPurchase,
                        MU.DecimalPlaces As DealQtyDecimalPlaces,
                        Sku.Code As SkuCode, Sku.Description As SkuDescription, 
                        It.Code As ItemType, It.Name As ItemTypeDesc,
                        IG.Description As ItemGroupDesc, IC.Description As ItemCategoryDesc, 
                        Sids.Item As ItemCode, Sids.ItemCategory, Sids.ItemGroup, 
                        Sids.Dimension1, Sids.Dimension2, 
                        Sids.Dimension3, Sids.Dimension4, Sids.Size, Sids.ItemInvoiceGroup,
                        D1.Description as Dimension1Desc, D2.Description as Dimension2Desc,
                        D3.Description as Dimension3Desc, D4.Description as Dimension4Desc, 
                        D1.Specification as Dimension1Specification, D2.Specification as Dimension2Specification,
                        D3.Specification as Dimension3Specification, D4.Specification as Dimension4Specification, 
                        Size.Description as SizeDesc, IIG.Description as ItemInvoiceGroupDesc,
                        I.ItemCategory as MItemCategory, I.ItemGroup as MItemGroup, I.Specification as MItemSpecification, 
                        I.Dimension1 as MDimension1,  I.Dimension2 as MDimension2,  I.Dimension3 as MDimension3,  I.Dimension4 as MDimension4,  I.Size as MSize, 
                        Godown.Name as GodownName, C.Description As CatalogDesc, ISt.Description as ItemStateName, 
                        D.Div_Name As StockInDiv_Name, HV.*,
                        (" & mQryStockSr & ") as StockSr
                        From (Select * From SaleInvoiceDetail  With (NoLock)  Where DocId = '" & SearchCode & "') As L 
                        LEFT JOIN SaleInvoiceDetailSku Sids With (NoLock) On L.DocId = Sids.DocId And L.Sr = Sids.Sr
                        Left Join SaleInvoiceDetailHelpValues HV  With (NoLock) On L.DocID = HV.DocId And L.Sr = HV.Sr
                        LEFT JOIN Item Sku ON Sku.Code = L.Item
                        LEFT JOIN ItemType It On Sku.ItemType = It.Code
                        Left Join Item IC On Sids.ItemCategory = IC.Code
                        Left Join Item IG On Sids.ItemGroup = IG.Code
                        LEFT JOIN Item I ON Sids.Item = I.Code
                        LEFT JOIN Item D1 ON Sids.Dimension1 = D1.Code
                        LEFT JOIN Item D2 ON Sids.Dimension2 = D2.Code
                        LEFT JOIN Item D3 ON Sids.Dimension3 = D3.Code
                        LEFT JOIN Item D4 ON Sids.Dimension4 = D4.Code
                        LEFT JOIN Item Size ON Sids.Size = Size.Code
                        LEFT JOIN Item IIG ON Sids.ItemInvoiceGroup = IIG.Code
                        Left Join Item ISt  With (NoLock) On L.ItemState = ISt.Code 
                        Left Join viewHelpSubgroup SalesRep On L.SalesRepresentative = SalesRep.Code
                        LEFT JOIN Catalog C On L.Catalog = C.Code
                        LEFT JOIN Stock  With (NoLock) On L.ReferenceDocId = Stock.docid And l.ReferenceDocIdSr = Stock.Sr  
                        LEFT JOIN SaleInvoice Si  With (NoLock) On L.SaleInvoice = Si.DocId 
                        LEFT JOIN Voucher_Type Vt With (NoLock) On Si.V_Type = Vt.V_Type
                        Left Join Barcode  With (NoLock) On L.Barcode = Barcode.Code
                        Left Join Unit U  With (NoLock) On L.Unit = U.Code 
                        Left Join Unit MU  With (NoLock) On L.DealUnit = MU.Code 
                        Left Join Subgroup Godown On L.Godown = Godown.Subcode
                        LEFT JOIN Division D On L.StockInDiv_Code = D.Div_Code
                        Order By L.Sr "

                DsMain = AgL.FillData(mQry, AgL.GCn)
                With DsMain.Tables(0)
                    Dgl1.RowCount = 1
                    Dgl1.Rows.Clear()
                    If .Rows.Count > 0 Then
                        For I = 0 To DsMain.Tables(0).Rows.Count - 1
                            Dgl1.Rows.Add()
                            Dgl1.Item(ColSNo, I).Value = Dgl1.Rows.Count - 1
                            Dgl1.Item(ColSNo, I).Tag = AgL.XNull(.Rows(I)("Sr"))

                            Dgl1.Item(Col1StockSr, I).Value = AgL.XNull(.Rows(I)("StockSr"))
                            If Dgl1.Item(Col1StockSr, I).Value <> "" Then
                                If Dgl1.Item(Col1StockSr, I).Value.ToString.Substring(Dgl1.Item(Col1StockSr, I).Value.ToString.Length - 1, 1) = "," Then
                                    Dgl1.Item(Col1StockSr, I).Value = Dgl1.Item(Col1StockSr, I).Value.ToString.Substring(0, Dgl1.Item(Col1StockSr, I).Value.ToString.Length - 1)
                                End If
                            End If

                            Dgl1.Item(Col1Godown, I).Tag = AgL.XNull(.Rows(I)("Godown"))
                            Dgl1.Item(Col1Godown, I).Value = AgL.XNull(.Rows(I)("GodownName"))



                            Dgl1.Item(Col1Barcode, I).Tag = AgL.XNull(.Rows(I)("Barcode"))
                            Dgl1.Item(Col1Barcode, I).Value = AgL.XNull(.Rows(I)("BarcodeName"))
                            Dgl2.Item(Col1Value, rowGodown).Tag = AgL.XNull(.Rows(I)("Godown"))
                            Dgl2.Item(Col1Value, rowGodown).Value = AgL.XNull(.Rows(I)("GodownName"))


                            If Dgl1.Item(Col1Barcode, I).Tag <> "" Then
                                Dim DtBarcodeSiteDetail As DataTable
                                mQry = "Select Bs.* 
                                        From Barcode B With (NoLock)
                                        LEFT JOIN BarcodeSiteDetail Bs With (NoLock) On B.Code = Bs.Code
                                        Where Bs.Code='" & Dgl1.Item(Col1Barcode, I).Tag & "' 
                                        And Bs.Div_Code = '" & TxtDivision.Tag & "' 
                                        And Bs.Site_Code = '" & DglMain.Item(Col1Value, rowSite_Code).Tag & "' 
                                        And B.BarcodeType = '" & BarcodeType.UniquePerPcs & "'"
                                DtBarcodeSiteDetail = AgL.FillData(mQry, AgL.GCn).Tables(0)
                                If DtBarcodeSiteDetail.Rows.Count > 0 Then
                                    If AgL.XNull(DtBarcodeSiteDetail.Rows(0)("LastTrnDocId")) = SearchCode And
                                   AgL.VNull(DtBarcodeSiteDetail.Rows(0)("LastTrnSr")) = Val(Dgl1.Item(ColSNo, I).Tag) Then
                                    Else
                                        Dgl1.Item(Col1IsRecordLocked, I).Value = 1
                                    End If
                                End If
                            End If
                            Dgl1.Item(Col1SKU, I).Tag = AgL.XNull(.Rows(I)("SkuCode"))
                            Dgl1.Item(Col1SKU, I).Value = AgL.XNull(.Rows(I)("SkuDescription"))


                            Dgl1.Item(Col1ItemType, I).Tag = AgL.XNull(.Rows(I)("ItemType"))
                            Dgl1.Item(Col1ItemType, I).Value = AgL.XNull(.Rows(I)("ItemTypeDesc"))


                            Dgl1.Item(Col1ItemCategory, I).Tag = AgL.XNull(.Rows(I)("ItemCategory"))
                            Dgl1.Item(Col1ItemCategory, I).Value = AgL.XNull(.Rows(I)("ItemCategoryDesc"))

                            Dgl1.Item(Col1ItemGroup, I).Tag = AgL.XNull(.Rows(I)("ItemGroup"))
                            Dgl1.Item(Col1ItemGroup, I).Value = AgL.XNull(.Rows(I)("ItemGroupDesc"))

                            Dgl1.Item(Col1ItemCode, I).Tag = AgL.XNull(.Rows(I)("ItemCode"))
                            Dgl1.Item(Col1ItemCode, I).Value = AgL.XNull(.Rows(I)("ManualCode"))

                            Dgl1.Item(Col1Item, I).Tag = AgL.XNull(.Rows(I)("ItemCode"))
                            Dgl1.Item(Col1Item, I).Value = AgL.XNull(.Rows(I)("ItemDesc"))

                            Dgl1.Item(Col1Dimension1, I).Tag = AgL.XNull(.Rows(I)("Dimension1"))
                            Dgl1.Item(Col1Dimension1, I).Value = AgL.XNull(.Rows(I)("Dimension1Desc"))

                            Dgl1.Item(Col1Dimension2, I).Tag = AgL.XNull(.Rows(I)("Dimension2"))
                            Dgl1.Item(Col1Dimension2, I).Value = AgL.XNull(.Rows(I)("Dimension2Desc"))

                            Dgl1.Item(Col1Dimension3, I).Tag = AgL.XNull(.Rows(I)("Dimension3"))
                            Dgl1.Item(Col1Dimension3, I).Value = AgL.XNull(.Rows(I)("Dimension3Desc"))

                            Dgl1.Item(Col1Dimension4, I).Tag = AgL.XNull(.Rows(I)("Dimension4"))
                            Dgl1.Item(Col1Dimension4, I).Value = AgL.XNull(.Rows(I)("Dimension4Desc"))

                            Dgl1.Item(Col1Size, I).Tag = AgL.XNull(.Rows(I)("Size"))
                            Dgl1.Item(Col1Size, I).Value = AgL.XNull(.Rows(I)("SizeDesc"))

                            Dgl1.Item(Col1ItemInvoiceGroup, I).Tag = AgL.XNull(.Rows(I)("ItemInvoiceGroup"))
                            Dgl1.Item(Col1ItemInvoiceGroup, I).Value = AgL.XNull(.Rows(I)("ItemInvoiceGroupDesc"))


                            Dgl1.Item(Col1ItemState, I).Tag = AgL.XNull(.Rows(I)("ItemState"))
                            Dgl1.Item(Col1ItemState, I).Value = AgL.XNull(.Rows(I)("ItemStateName"))


                            Dgl1.Item(Col1Specification, I).Value = AgL.XNull(.Rows(I)("Specification"))
                            Dgl1.Item(Col1MaintainStockYn, I).Value = AgL.VNull(.Rows(I)("MaintainStockYn"))

                            Dgl1.Item(Col1SalesTaxGroup, I).Tag = AgL.XNull(.Rows(I)("SalesTaxGroupItem"))
                            Dgl1.Item(Col1SalesTaxGroup, I).Value = AgL.XNull(.Rows(I)("SalesTaxGroupItem"))

                            Dgl1.Item(Col1QtyDecimalPlaces, I).Value = AgL.VNull(.Rows(I)("QtyDecimalPlaces"))

                            If mMultiplyWithMinus Then
                                Dgl1.Item(Col1DocQty, I).Value = Format(Math.Abs(AgL.VNull(.Rows(I)("DocQty"))), "0.".PadRight(AgL.VNull(.Rows(I)("QtyDecimalPlaces")) + 2, "0"))
                                Dgl1.Item(Col1Qty, I).Value = Format(Math.Abs(AgL.VNull(.Rows(I)("Qty"))), "0.".PadRight(AgL.VNull(.Rows(I)("QtyDecimalPlaces")) + 2, "0"))
                            Else
                                Dgl1.Item(Col1DocQty, I).Value = Format((AgL.VNull(.Rows(I)("DocQty"))), "0.".PadRight(AgL.VNull(.Rows(I)("QtyDecimalPlaces")) + 2, "0"))
                                Dgl1.Item(Col1Qty, I).Value = Format((AgL.VNull(.Rows(I)("Qty"))), "0.".PadRight(AgL.VNull(.Rows(I)("QtyDecimalPlaces")) + 2, "0"))
                            End If
                            Dgl1.Item(Col1FreeQty, I).Value = Format(AgL.VNull(.Rows(I)("FreeQty")), "0.".PadRight(AgL.VNull(.Rows(I)("QtyDecimalPlaces")) + 2, "0"))
                            Dgl1.Item(Col1LossQty, I).Value = Format(Math.Abs(AgL.VNull(.Rows(I)("LossQty"))), "0.".PadRight(AgL.VNull(.Rows(I)("QtyDecimalPlaces")) + 2, "0"))

                            Dgl1.Item(Col1Unit, I).Value = AgL.XNull(.Rows(I)("Unit"))
                            Dgl1.Item(Col1Pcs, I).Value = AgL.VNull(.Rows(I)("Pcs"))

                            Dgl1.Item(Col1DealQtyDecimalPlaces, I).Value = AgL.VNull(.Rows(I)("DealQtyDecimalPlaces"))
                            Dgl1.Item(Col1UnitMultiplier, I).Value = Format(AgL.VNull(.Rows(I)("UnitMultiplier")), "0.".PadRight(AgL.VNull(.Rows(I)("DealQtyDecimalPlaces")) + 2, "0"))
                            Dgl1.Item(Col1DealUnit, I).Value = AgL.XNull(.Rows(I)("DealUnit"))

                            If mMultiplyWithMinus Then
                                Dgl1.Item(Col1DocDealQty, I).Value = Format(Math.Abs(AgL.VNull(.Rows(I)("DocDealQty"))), "0.".PadRight(AgL.VNull(.Rows(I)("DealQtyDecimalPlaces")) + 2, "0"))
                                Dgl1.Item(Col1DealQty, I).Value = Format(Math.Abs(AgL.VNull(.Rows(I)("DealQty"))), "0.".PadRight(AgL.VNull(.Rows(I)("DealQtyDecimalPlaces")) + 2, "0"))
                            Else
                                Dgl1.Item(Col1DocDealQty, I).Value = Format((AgL.VNull(.Rows(I)("DocDealQty"))), "0.".PadRight(AgL.VNull(.Rows(I)("DealQtyDecimalPlaces")) + 2, "0"))
                                Dgl1.Item(Col1DealQty, I).Value = Format((AgL.VNull(.Rows(I)("DealQty"))), "0.".PadRight(AgL.VNull(.Rows(I)("DealQtyDecimalPlaces")) + 2, "0"))
                            End If
                            Dgl1.Item(Col1FreeDealQty, I).Value = Format(AgL.VNull(.Rows(I)("FreeDealQty")), "0.".PadRight(AgL.VNull(.Rows(I)("DealQtyDecimalPlaces")) + 2, "0"))
                            Dgl1.Item(Col1LossDealQtyPer, I).Value = AgL.VNull(.Rows(I)("LossDealQtyPEr"))
                            Dgl1.Item(Col1LossDealQty, I).Value = Format(Math.Abs(AgL.VNull(.Rows(I)("LossDealQty"))), "0.".PadRight(AgL.VNull(.Rows(I)("DealQtyDecimalPlaces")) + 2, "0"))




                            Dgl1.Item(Col1Rate, I).Value = AgL.VNull(.Rows(I)("Rate"))
                            If mMultiplyWithMinus Then
                                Dgl1.Item(Col1Amount, I).Value = Format(Math.Abs(AgL.VNull(.Rows(I)("Amount"))), "0.00")
                                Dgl1.Item(Col1xAmount, I).Value = Format(Math.Abs(AgL.VNull(.Rows(I)("Amount"))), "0.00")
                            Else
                                Dgl1.Item(Col1Amount, I).Value = Format((AgL.VNull(.Rows(I)("Amount"))), "0.00")
                                Dgl1.Item(Col1xAmount, I).Value = Format((AgL.VNull(.Rows(I)("Amount"))), "0.00")
                            End If
                            Dgl1.Item(Col1DiscountPer, I).Value = AgL.VNull(.Rows(I)("DiscountPer"))
                            Dgl1.Item(Col1DiscountAmount, I).Value = AgL.VNull(.Rows(I)("DiscountAmount"))
                            Dgl1.Item(Col1AdditionalDiscountPer, I).Value = AgL.VNull(.Rows(I)("AdditionalDiscountPer"))
                            Dgl1.Item(Col1AdditionalDiscountAmount, I).Value = AgL.VNull(.Rows(I)("AdditionalDiscountAmount"))
                            Dgl1.Item(Col1AdditionPer, I).Value = AgL.VNull(.Rows(I)("AdditionPer"))
                            Dgl1.Item(Col1AdditionAmount, I).Value = AgL.VNull(.Rows(I)("AdditionAmount"))
                            Dgl1.Item(Col1Deal, I).Value = AgL.XNull(.Rows(I)("Deal"))
                            Dgl1.Item(Col1DealAmount, I).Value = AgL.VNull(.Rows(I)("DealAmount"))
                            Dgl1.Item(Col1PurchaseRate, I).Value = Format(AgL.VNull(.Rows(I)("PurchaseRate")), "0.00")
                            Dgl1.Item(Col1PurchaseDiscountPer, I).Value = Format(AgL.VNull(.Rows(I)("PurchaseDiscountPer")), "0.00")
                            Dgl1.Item(Col1PurchaseAdditionalDiscountPer, I).Value = Format(AgL.VNull(.Rows(I)("PurchaseAdditionalDiscountPer")), "0.00")
                            Dgl1.Item(Col1PurchaseDeal, I).Value = AgL.XNull(.Rows(I)("PurchaseDeal"))


                            Dgl1.Item(Col1ExpiryDate, I).Value = ClsMain.FormatDate(AgL.XNull(.Rows(I)("ExpiryDate")))
                            Dgl1.Item(Col1MRP, I).Value = AgL.VNull(.Rows(I)("MRP"))
                            Dgl1.Item(Col1Remark, I).Value = AgL.XNull(.Rows(I)("Remark"))
                            Dgl1.Item(Col1Remark1, I).Value = AgL.XNull(.Rows(I)("Remarks1"))
                            Dgl1.Item(Col1Remark2, I).Value = AgL.XNull(.Rows(I)("Remarks2"))
                            Dgl1.Item(Col1Remark3, I).Value = AgL.XNull(.Rows(I)("Remarks3"))
                            Dgl1.Item(Col1Remark4, I).Value = AgL.XNull(.Rows(I)("Remarks4"))
                            Dgl1.Item(Col1BaleNo, I).Value = AgL.XNull(.Rows(I)("BaleNo"))
                            Dgl1.Item(Col1LotNo, I).Value = AgL.XNull(.Rows(I)("LotNo"))
                            Dgl1.Item(Col1ReferenceNo, I).Value = AgL.XNull(.Rows(I)("ReferenceNo"))
                            Dgl1.Item(Col1ReferenceDate, I).Value = ClsMain.FormatDate(AgL.XNull(.Rows(I)("ReferenceDate")))
                            Dgl1.Item(Col1ReferenceDocId, I).Value = AgL.XNull(.Rows(I)("ReferenceDocId"))
                            Dgl1.Item(Col1ReferenceDocIdTSr, I).Value = AgL.VNull(.Rows(I)("ReferenceDocIdTSr"))
                            Dgl1.Item(Col1ReferenceDocIdSr, I).Value = AgL.VNull(.Rows(I)("ReferenceDocIdSr"))
                            Dgl1.Item(Col1SaleInvoice, I).Tag = AgL.XNull(.Rows(I)("SaleInvoice"))
                            Dgl1.Item(Col1SaleInvoice, I).Value = AgL.XNull(.Rows(I)("SaleInvoiceNo"))
                            Dgl1.Item(Col1SaleInvoiceSr, I).Value = AgL.VNull(.Rows(I)("SaleInvoiceSr"))
                            Dgl1.Item(Col1DefaultDiscountPer, I).Value = AgL.VNull(.Rows(I)("DefaultDiscountPer"))
                            Dgl1.Item(Col1DefaultAdditionalDiscountPer, I).Value = AgL.VNull(.Rows(I)("DefaultAdditionalDiscountPer"))
                            Dgl1.Item(Col1DefaultAdditionPer, I).Value = AgL.VNull(.Rows(I)("DefaultAdditionPer"))
                            Dgl1.Item(Col1PersonalDiscountPer, I).Value = AgL.VNull(.Rows(I)("PersonalDiscountPer"))
                            Dgl1.Item(Col1PersonalAdditionalDiscountPer, I).Value = AgL.VNull(.Rows(I)("PersonalAdditionalDiscountPer"))
                            Dgl1.Item(Col1PersonalAdditionPer, I).Value = AgL.VNull(.Rows(I)("PersonalAdditionPer"))
                            Dgl1.Item(Col1DiscountCalculationPattern, I).Value = AgL.XNull(.Rows(I)("DiscountCalculationPattern"))
                            Dgl1.Item(Col1AdditionalDiscountCalculationPattern, I).Value = AgL.XNull(.Rows(I)("AdditionalDiscountCalculationPattern"))
                            Dgl1.Item(Col1AdditionCalculationPattern, I).Value = AgL.XNull(.Rows(I)("AdditionCalculationPattern"))
                            Dgl1.Item(Col1V_Nature, I).Value = AgL.XNull(.Rows(I)("V_Nature"))
                            ''Dgl1.Item(Col1DiscountCalculationPattern, I).Value = ""
                            ''Dgl1.Item(Col1AdditionalDiscountCalculationPattern, I).Value = ""
                            ''Dgl1.Item(Col1AdditionCalculationPattern, I).Value = ""

                            'If Dgl2.Rows(rowSalesRepresentative).Visible = True Then
                            Dgl2(Col1Value, rowSalesRepresentative).Tag = AgL.XNull(.Rows(I)("SalesRepresentative"))
                            Dgl2(Col1Value, rowSalesRepresentative).Value = AgL.XNull(.Rows(I)("SalesRepresentativeName"))
                            'End If


                            '
                            Dgl1.Item(Col1SalesRepresentative, I).Tag = AgL.XNull(.Rows(I)("SalesRepresentative"))
                            Dgl1.Item(Col1SalesRepresentative, I).Value = AgL.XNull(.Rows(I)("SalesRepresentativeName"))

                            Dgl1.Item(Col1Catalog, I).Tag = AgL.XNull(.Rows(I)("Catalog"))
                            Dgl1.Item(Col1Catalog, I).Value = AgL.XNull(.Rows(I)("CatalogDesc"))

                            If I = 0 Then
                                Dgl2(Col1Value, rowCatalog).Tag = AgL.XNull(.Rows(I)("Catalog"))
                                Dgl2(Col1Value, rowCatalog).Value = AgL.XNull(.Rows(I)("CatalogDesc"))
                            End If

                            If FDivisionNameForCustomization(13) = "JAIN BROTHERS" Or FDivisionNameForCustomization(11) = "BOOK SHOPEE" Then
                                If Dgl1.Item(Col1ItemState, I).Tag = "OOStock" Then
                                    Dgl1.Rows(I).DefaultCellStyle.BackColor = Color.Aqua
                                End If
                            End If


                            If AgL.StrCmp(LblV_Type.Tag, Ncat.SaleReturn) Then
                                If Dgl1.Item(Col1ReferenceDocId, I).Value = "" And Dgl1.Item(Col1ReferenceDocIdTSr, I).Value = 0 And Dgl1.Item(Col1ReferenceDocIdSr, I).Value = 0 Then
                                    Dgl1.Item(Col1Unit, I).Tag = AgL.VNull(.Rows(I)("ShowDimensionDetailInSales"))
                                    If AgL.VNull(Dgl1.Item(Col1Unit, I).Tag) Then
                                        Dgl1.Item(Col1DocQty, I).Style.ForeColor = Color.Blue
                                        ShowSaleInvoiceDimensionDetail(I, False)
                                    End If
                                End If
                            ElseIf AgL.StrCmp(LblV_Type.Tag, Ncat.SaleOrder) = False Then
                                Dgl1.Item(Col1Unit, I).Tag = AgL.VNull(.Rows(I)("ShowDimensionDetailInSales"))
                                If AgL.VNull(Dgl1.Item(Col1Unit, I).Tag) Then
                                    Dgl1.Item(Col1DocQty, I).Style.ForeColor = Color.Blue
                                    ShowSaleInvoiceDimensionDetail(I, False)
                                End If
                            End If

                            Dgl1.Item(Col1StockInDiv_Code, I).Tag = AgL.XNull(.Rows(I)("StockInDiv_Code"))
                            Dgl1.Item(Col1StockInDiv_Code, I).Value = AgL.XNull(.Rows(I)("StockInDiv_Name"))
                            Dgl1.Item(Col1StockInDocId, I).Tag = AgL.XNull(.Rows(I)("StockInDocId"))
                            Dgl1.Item(Col1StockInTSr, I).Value = AgL.XNull(.Rows(I)("StockInTSr"))
                            Dgl1.Item(Col1StockInSr, I).Value = AgL.XNull(.Rows(I)("StockInSr"))

                            If AgL.XNull(Dgl1.Item(Col1StockInDocId, I).Tag) <> "" Then
                                Dgl1.Item(Col1StockInDocId, I).Value = AgL.Dman_Execute("Select V_Type + '-' + RecId 
                                                From Stock 
                                                Where DocId = '" & AgL.XNull(Dgl1.Item(Col1StockInDocId, I).Tag) & "'", AgL.GCn).ExecuteScalar()
                            End If



                            If LblV_Type.Tag = Ncat.SaleOrder Then
                                mQry = "Select IfNull(Sum(L.Amount),0) as ProgressAmount From SaleInvoice H Left Join SaleInvoiceDetail L On H.DocID = L.DocID Where L.SaleInvoice<>L.DocID And L.SaleInvoice || Cast(L.SaleInvoiceSr As NVARCHAR) = '" & SearchCode & "' || '" & Val(AgL.VNull(.Rows(I)("Sr"))) & "' Group By H.DocID,H.ManualRefNo "
                                DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)
                                If DtTemp.Rows.Count > 0 Then
                                    Dgl1.Item(Col1Progress, I).Value = Math.Round((AgL.VNull(DtTemp.Rows(0)("ProgressAmount")) / AgL.VNull(Dgl1.Item(Col1Amount, I).Value)) * 100, 2).ToString + "%"
                                End If
                            End If

                            Dgl1.Item(Col1MItemCategory, I).Tag = AgL.XNull(.Rows(I)("MItemCategory"))
                            Dgl1.Item(Col1MItemGroup, I).Tag = AgL.XNull(.Rows(I)("MItemGroup"))
                            Dgl1.Item(Col1MItemSpecification, I).Value = AgL.XNull(.Rows(I)("MItemSpecification"))
                            Dgl1.Item(Col1MDimension1, I).Tag = AgL.XNull(.Rows(I)("MDimension1"))
                            Dgl1.Item(Col1MDimension2, I).Tag = AgL.XNull(.Rows(I)("MDimension2"))
                            Dgl1.Item(Col1MDimension3, I).Tag = AgL.XNull(.Rows(I)("MDimension3"))
                            Dgl1.Item(Col1MDimension4, I).Tag = AgL.XNull(.Rows(I)("MDimension4"))
                            Dgl1.Item(Col1MSize, I).Tag = AgL.XNull(.Rows(I)("MSize"))

                            If LblV_Type.Tag = Ncat.SaleReturn Then
                                If I > 0 Then
                                    If Dgl1.Item(Col1ReferenceDocId, I).Value = Dgl1.Item(Col1ReferenceDocId, I - 1).Value Then
                                        Dgl2.Item(Col1Value, rowPartyDocNo).Tag = Dgl1.Item(Col1ReferenceDocId, I).Value
                                    Else
                                        Dgl2.Item(Col1Value, rowPartyDocNo).Tag = ""
                                    End If
                                End If
                            End If




                            FFormatRateCells(I)
                            If Val(Dgl1.Item(Col1IsRecordLocked, I).Value) > 0 Then
                                Dgl1.Rows(I).DefaultCellStyle.BackColor = AgTemplate.ClsMain.Colours.GridRow_Locked : Dgl1.Rows(I).ReadOnly = True
                            End If


                            Call AgCalcGrid1.FMoveRecLineTable(DsMain.Tables(0), I, mMultiplyWithMinus)


                            LblTotalPcs.Text = Val(LblTotalPcs.Text) + Val(Dgl1.Item(Col1Pcs, I).Value)
                            LblTotalQty.Text = Val(LblTotalQty.Text) + Val(Dgl1.Item(Col1Qty, I).Value)
                            LblTotalAmount.Text = Val(LblTotalAmount.Text) + Val(Dgl1.Item(Col1Amount, I).Value)
                            LblTotalBale.Text += 1

                            FormatRowColourDgl1(I)
                        Next I
                    End If
                End With
                If AgCustomGrid1.Rows.Count = 0 Then AgCustomGrid1.Visible = False

                mInvoiceAmountBeforeEditing = Val(AgCalcGrid1.AgChargesValue(AgTemplate.ClsMain.Charges.NETAMOUNT, AgStructure.AgCalcGrid.AgCalcGridColumn.Col_Amount))
                '-------------------------------------------------------------


                Dgl1.Columns(Col1ImportStatus).Visible = False

            End If
        End With



        mQry = "Select H.*, PM.Description as PaymentModeDescription
                    From SaleInvoicePayment H  With (NoLock)
                    Left Join PaymentMode PM  With (NoLock) on H.PaymentMode = PM.Code
                    Where H.DocID = '" & SearchCode & "' 
                    Order By H.Sr "
        DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)
        With DtTemp
            If DtTemp.Rows.Count > 0 Then
                For I = 0 To DtTemp.Rows.Count - 1
                    Dgl4.Rows.Add()
                    Dgl4.Item(Col1Head, I).Value = AgL.XNull(DtTemp.Rows(I)("PaymentModeDescription"))
                    Dgl4.Item(Col1Value, I).Value = AgL.XNull(DtTemp.Rows(I)("Amount"))
                Next


                mQry = " Select H.AmtDr-IfNull(Adj.AdjAmt,0) as Bal_Amount
                        from Ledger H
                        Left Join (Select Adj_DocID as DocID, Adj_V_Sno as V_SNo, 
                                   abs(Sum(Amount)) as AdjAmt 
                                   From LedgerAdj LA
                                   Left Join Ledger L1 On L1.DocId = LA.Vr_DocID And L1.V_SNo = LA.Vr_V_Sno
                                   Group By Adj_DocID, Adj_V_Sno
                                   Union All 
                                   Select Vr_DocID as DocID, Vr_V_Sno as V_SNo, 
                                   abs(Sum(Amount)) as AdjAmt 
                                   From LedgerAdj LA
                                   Left Join Ledger L1 On L1.DocId = LA.Vr_DocID And L1.V_SNo = LA.Vr_V_Sno
                                   Group By Vr_DocID, Vr_V_Sno                    
                                  ) as Adj On H.DocID = Adj.DocID And H.V_Sno = Adj.V_Sno                
                        LEFT JOIN SubGroup Sg On H.SubCode = Sg.SubCode
                        LEFT JOIN SaleInvoice Si On H.DocId = Si.DocId
                        where H.DocId = '" & mSearchCode & "'   
                        And H.SubCode = '" & DglMain.Item(Col1Value, rowBillToParty).Tag & "'
                        And IfNull(H.AmtDr,0) > 0 "
                Dim DtInvoiceBalance As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)
                If DtInvoiceBalance.Rows.Count > 0 Then
                    Dgl4.Columns(Col1Value).DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight
                    Dgl4.Rows.Add()
                    If AgL.VNull(DtInvoiceBalance.Rows(0)("Bal_Amount")) > 0 Then
                        Dgl4.Item(Col1Head, I).Value = "Bal."
                        Dgl4.Item(Col1Value, I).Value = AgL.VNull(DtInvoiceBalance.Rows(0)("Bal_Amount"))
                        Dgl4.Item(Col1Head, I).Style.Font = New Font(Dgl1.DefaultCellStyle.Font.FontFamily, 14, FontStyle.Bold)
                        Dgl4.Item(Col1Value, I).Style.Font = New Font(Dgl1.DefaultCellStyle.Font.FontFamily, 14, FontStyle.Bold)
                        Dgl4.Item(Col1Head, I).Style.ForeColor = Color.DarkRed
                        Dgl4.Item(Col1Value, I).Style.ForeColor = Color.DarkRed
                    ElseIf AgL.VNull(DtInvoiceBalance.Rows(0)("Bal_Amount")) = 0 Then
                        Dgl4.Item(Col1Head, I).Value = "Paid"
                        Dgl4.Item(Col1Head, I).Style.Font = New Font(Dgl1.DefaultCellStyle.Font.FontFamily, 14, FontStyle.Bold)
                        Dgl4.Item(Col1Head, I).Style.ForeColor = Color.DarkBlue
                    End If
                End If
            Else
                Dgl4.Visible = False
            End If
        End With

        If FGetSettings(SettingFields.GeneratedEntryV_TypeForAadhat, SettingType.General) <> "" Then
            FMovRecPurchaseData()
        Else
            DglPurchase.Visible = False
        End If

        FMovRecItemCategorySummary()
        FMovRecOtherCharges()

        'ApplyUISettings(LblV_Type.Tag)
        SetAttachmentCaption()
        Dgl1.ReadOnly = True
    End Sub
    Private Sub FrmSaleOrder_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
        Topctrl1.ChangeAgGridState(Dgl1, False)
        AgCalcGrid1.FrmType = Me.FrmType
        AgCustomGrid1.FrmType = Me.FrmType
    End Sub

    Private Sub Txt_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs)
        Dim DrTemp As DataRow() = Nothing
        Dim DtTemp As DataTable = Nothing
        'Dim FrmObj As New FrmSaleInvoicePartyDetail


        Try
            Select Case sender.NAME
                'Case TxtV_Type.Name
                'If DglMain.Item(Col1Value, rowV_Type).Tag = "" Then Exit Sub

                'mQry = "Select * from SaleInvoiceSetting  With (NoLock)  Where V_Type = '" & DglMain.Item(Col1Value, rowV_Type).Tag & "' And Div_Code = '" & AgL.PubDivCode & "' And Site_Code='" & AgL.PubSiteCode & "' "
                'DtV_TypeSettings = AgL.FillData(mQry, AgL.GCn).Tables(0)
                'If DtV_TypeSettings.Rows.Count = 0 Then
                '    mQry = "Select * from SaleInvoiceSetting  With (NoLock) Where V_Type = '" & DglMain.Item(Col1Value, rowV_Type).Tag & "' And Div_Code = '" & AgL.PubDivCode & "' And Site_Code Is Null "
                '    DtV_TypeSettings = AgL.FillData(mQry, AgL.GCn).Tables(0)
                '    If DtV_TypeSettings.Rows.Count = 0 Then
                '        mQry = "Select * from SaleInvoiceSetting  With (NoLock) Where V_Type = '" & DglMain.Item(Col1Value, rowV_Type).Tag & "' And Div_Code  Is Null And Site_Code='" & AgL.PubSiteCode & "' "
                '        DtV_TypeSettings = AgL.FillData(mQry, AgL.GCn).Tables(0)
                '        If DtV_TypeSettings.Rows.Count = 0 Then
                '            mQry = "Select * from SaleInvoiceSetting  With (NoLock) Where V_Type = '" & DglMain.Item(Col1Value, rowV_Type).Tag & "' And Div_Code  Is Null And Site_Code Is Null "
                '            DtV_TypeSettings = AgL.FillData(mQry, AgL.GCn).Tables(0)
                '            If DtV_TypeSettings.Rows.Count = 0 Then
                '                mQry = "Select * from SaleInvoiceSetting  With (NoLock) Where V_Type Is Null And Div_Code  Is Null And Site_Code Is Null "
                '                DtV_TypeSettings = AgL.FillData(mQry, AgL.GCn).Tables(0)
                '            End If
                '        End If
                '    End If
                'End If
                'If DtV_TypeSettings.Rows.Count = 0 Then
                '    MsgBox("Voucher Type Settings Not Found, Can not continue.")
                '    Topctrl1.FButtonClick(14, True)
                '    Exit Sub
                'End If


                'Dgl2(Col1Value, rowRateType).Tag = AgL.XNull(DtV_TypeSettings.Rows(0)("Default_RateType"))
                'If Dgl2(Col1Value, rowRateType).Tag <> "" Then
                '    Dgl2(Col1Value, rowRateType).Value = AgL.Dman_Execute("Select Description from RateType  With (NoLock) Where Code ='" & Dgl2(Col1Value, rowRateType).Tag & "'", AgL.GCn).ExecuteScalar
                'End If


                'TxtStructure.AgSelectedValue = AgL.Dman_Execute("Select IfNull(Max(Structure),'') From Voucher_Type  With (NoLock) Where V_Type = '" & DglMain.Item(Col1Value, rowV_Type).Tag & "'", AgL.GcnRead).ExecuteScalar
                'AgCalcGrid1.AgStructure = TxtStructure.AgSelectedValue

                'TxtCustomFields.AgSelectedValue = AgCustomFields.ClsMain.FGetCustomFieldFromV_Type(DglMain.Item(Col1Value, rowV_Type).Tag, AgL.GcnRead)
                'AgCustomGrid1.AgCustom = TxtCustomFields.AgSelectedValue


                'IniGrid()
                ''ApplyUISettings(LblV_Type.Tag)
                'DglMain.Item(Col1Value, rowReferenceNo).Value = AgTemplate.ClsMain.FGetManualRefNo("ManualRefNo", "SaleInvoice", DglMain.Item(Col1Value, rowV_Type).Tag, DglMain.Item(Col1Value, rowV_Date).Value, TxtDivision.AgSelectedValue, DglMain.Item(Col1Value, rowSite_Code).Tag, AgTemplate.ClsMain.ManualRefType.Max)


                'LblBarcode.Visible = CType(AgL.VNull(DtV_TypeSettings.Rows(0)("IsVisible_BarcodeGunTextbox")), Boolean)
                'TxtBarcode.Visible = CType(AgL.VNull(DtV_TypeSettings.Rows(0)("IsVisible_BarcodeGunTextbox")), Boolean)


                'If AgL.XNull(DtV_TypeSettings.Rows(0)("SaleInvoicePattern")) = SaleInvoicePattern.PointOfSale Then
                '    If AgL.XNull(DtV_TypeSettings.Rows(0)("Default_RevenuePoint")) <> "" Then
                '        DglMain.Item(Col1Value, rowSaleToParty).Tag = AgL.XNull(DtV_TypeSettings.Rows(0)("Default_RevenuePoint"))
                '        DglMain.Item(Col1Value, rowSaleToParty).Value = AgL.Dman_Execute("Select Name From viewHelpSubgroup  With (NoLock) Where Code = '" & DglMain.Item(Col1Value, rowSaleToParty).Tag & "'", AgL.GCn).ExecuteScalar
                '        Validating_SaleToParty(DglMain.Item(Col1Value, rowSaleToParty).Tag, False)
                '        If TxtBarcode.Visible = True And TxtBarcode.Enabled = True Then
                '            TxtBarcode.Focus()
                '        Else
                '            Dgl1.Focus()
                '        End If
                '    End If
                'End If

                'Case TxtSaleToParty.Name
                'If DglMain.Item(Col1Value, rowV_Date).Value <> "" And DglMain.Item(Col1Value, rowSaleToParty).Value <> "" Then
                '    If TxtSaleToParty.AgLastValueTag <> DglMain.Item(Col1Value, rowSaleToParty).Tag Then
                '        DrTemp = sender.AgHelpDataSet.Tables(0).Select("Code = " & AgL.Chk_Text(sender.AgSelectedValue) & "")

                '        TxtCreditDays.Text = AgL.VNull(DrTemp(0)("CreditDays"))
                '        TxtCreditLimit.Text = AgL.VNull(DrTemp(0)("CreditLimit"))
                '        TxtNature.Text = AgL.XNull(DrTemp(0)("Nature"))


                '        mQry = "Select H.*, RT.Description as RateTypeName 
                '                From SubgroupSiteDivisionDetail H
                '                Left Join RateType RT on H.RateType = RT.Code
                '                Where Subcode = '" & DglMain.Item(Col1Value, rowSaleToParty).Tag & "'"
                '        DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)
                '        If DtTemp.Rows.Count > 0 Then
                '            TxtRateType.Tag = AgL.XNull(DtTemp.Rows(0)("RateType"))
                '            TxtRateType.Text = AgL.XNull(DtTemp.Rows(0)("RateTypeName"))
                '            TxtTermsAndConditions.Text = AgL.XNull(DtTemp.Rows(0)("TermsAndConditions"))
                '        Else
                '            TxtRateType.Tag = AgL.XNull(DtV_TypeSettings.Rows(0)("Default_RateType"))
                '            If TxtRateType.Tag <> "" Then
                '                TxtRateType.Text = AgL.Dman_Execute("Select Description from RateType Where Code ='" & TxtRateType.Tag & "'", AgL.GCn).ExecuteScalar
                '            End If
                '            TxtTermsAndConditions.Text = AgL.XNull(DtV_TypeSettings.Rows(0)("Default_TermsAndConditions"))
                '        End If



                '        FGetCurrBal(DglMain.Item(Col1Value, rowSaleToParty).Tag)


                '        DglMain.Item(Col1BtnDetail,rowSaleToParty).Tag = Nothing
                '        ShowSaleInvoiceParty("", DglMain.Item(Col1Value, rowSaleToParty).Tag, TxtNature.Text, True)
                '        DglMain.Item(Col1Value, rowBillToParty).Tag = DglMain.Item(Col1Value, rowSaleToParty).Tag
                '        DglMain.Item(Col1Value, rowBillToParty).Value = DglMain.Item(Col1Value, rowSaleToParty).Value
                '    End If
                'End If
                'If AgL.XNull(DtV_TypeSettings.Rows(0)("SaleInvoicePattern")) = SaleInvoicePattern.PointOfSale Then
                '        Validating_SaleToParty(DglMain.Item(Col1Value, rowSaleToParty).Tag, False)
                '    Else
                '        Validating_SaleToParty(DglMain.Item(Col1Value, rowSaleToParty).Tag)
                '    End If



                'Case TxtReferenceNo.Name
                '    'e.Cancel = Not AgTemplate.ClsMain.FCheckDuplicateRefNo("ManualRefNo", "SaleInvoice",
                '    '                DglMain.Item(Col1Value, rowV_Type).Tag, DglMain.Item(Col1Value, rowV_Date).Value, TxtDivision.AgSelectedValue,
                '    '                DglMain.Item(Col1Value, rowSite_Code).Tag, Topctrl1.Mode,
                '    '                DglMain.Item(Col1Value, rowReferenceNo).Value, mSearchCode)
                '    AgTemplate.ClsMain.FCheckDuplicateRefNo("ManualRefNo", "SaleInvoice",
                '    DglMain.Item(Col1Value, rowV_Type).Tag, DglMain.Item(Col1Value, rowV_Date).Value, TxtDivision.AgSelectedValue,
                '    DglMain.Item(Col1Value, rowSite_Code).Tag, Topctrl1.Mode,
                '    DglMain.Item(Col1Value, rowReferenceNo).Value, mSearchCode)


                'Case TxtBillToParty.Name
                '    If DglMain.Item(Col1Value, rowBillToParty).Value <> "" Then
                '        If TxtBillToParty.AgHelpDataSet IsNot Nothing Then
                '            DrTemp = sender.AgHelpDataSet.Tables(0).Select("Code = " & AgL.Chk_Text(sender.AgSelectedValue) & "")
                '            TxtNature.Text = AgL.XNull(DrTemp(0)("Nature"))
                '        End If
                '    End If


            End Select
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub
    Private Sub FrmPurchPlanEntry_BaseEvent_DglMainEditingControlValidating(sender As Object, e As CancelEventArgs) Handles Me.BaseEvent_DglMainEditingControlValidating
        Dim mRow As Integer
        Dim mColumn As Integer

        Dim DrTemp As DataRow() = Nothing
        Dim DtTemp As DataTable = Nothing


        mRow = DglMain.CurrentCell.RowIndex
        mColumn = DglMain.CurrentCell.ColumnIndex

        Select Case mRow
            Case rowV_Type
                Validating_Voucher_Type()

            Case rowSettingGroup
                If AgL.StrCmp(Topctrl1.Mode, "Add") Then
                    IniGrid()
                    If DglMain(Col1Value, rowSaleToParty).Visible = True Then
                        DglMain.CurrentCell = DglMain(Col1Value, rowSaleToParty)
                        DglMain.Focus() : MakeGridCurrentCellNothing(DglMain.Name)
                    End If
                    FGetSettingVariableValuesForAddAndEdit()
                Else
                    e.Cancel = True
                End If

            Case rowSaleToParty
                If LblV_Type.Tag = Ncat.SaleReturn Then
                    If Dgl1.Rows.Count >= 1 Then
                        If AgL.XNull(Dgl1.Item(Col1ItemCategory, 0).Value) <> "" Then
                            If AgL.XNull(DglMain.Item(Col1LastValue, rowSaleToParty).Tag) <> AgL.XNull(DglMain.Item(Col1Value, rowSaleToParty).Tag) Then
                                MsgBox("Change of party name is not allowed after feeding items...!", MsgBoxStyle.Information)
                                DglMain.Item(Col1Value, rowSaleToParty).Tag = DglMain.Item(Col1LastValue, rowSaleToParty).Tag
                                DglMain.Item(Col1Value, rowSaleToParty).Value = DglMain.Item(Col1LastValue, rowSaleToParty).Value
                                e.Cancel = True
                                Exit Sub
                            End If
                        End If
                    End If
                ElseIf LblV_Type.Tag = Ncat.SaleInvoice Then
                    If Dgl1.Rows.Count >= 1 Then
                        If AgL.XNull(Dgl1.Item(Col1ReferenceDocId, 0).Tag) <> "" And AgL.XNull(Dgl1.Item(Col1ReferenceDocId, 0).Tag) <> mSearchCode Then
                            If AgL.XNull(DglMain.Item(Col1LastValue, rowSaleToParty).Tag) <> AgL.XNull(DglMain.Item(Col1Value, rowSaleToParty).Tag) Then
                                MsgBox("Change of party name is not allowed after feeding items...!", MsgBoxStyle.Information)
                                DglMain.Item(Col1Value, rowSaleToParty).Tag = DglMain.Item(Col1LastValue, rowSaleToParty).Tag
                                DglMain.Item(Col1Value, rowSaleToParty).Value = DglMain.Item(Col1LastValue, rowSaleToParty).Value
                                e.Cancel = True
                                Exit Sub
                            End If
                        End If
                    End If
                End If

                If AgL.XNull(DtV_TypeSettings.Rows(0)("SaleInvoicePattern")) = SaleInvoicePattern.PointOfSale Then
                    Validating_SaleToParty(DglMain.Item(Col1Value, rowSaleToParty).Tag, False)
                Else
                    Validating_SaleToParty(DglMain.Item(Col1Value, rowSaleToParty).Tag)
                End If

            Case rowReferenceNo
                e.Cancel = Not AgTemplate.ClsMain.FCheckDuplicateRefNo("ManualRefNo", "SaleInvoice",
                    DglMain.Item(Col1Value, rowV_Type).Tag, DglMain.Item(Col1Value, rowV_Date).Value, TxtDivision.AgSelectedValue,
                    DglMain.Item(Col1Value, rowSite_Code).Tag, Topctrl1.Mode,
                    DglMain.Item(Col1Value, rowReferenceNo).Value, mSearchCode)




            Case rowBillToParty
                If DglMain.Item(Col1Value, rowBillToParty).Value <> "" Then
                    TxtNature.Text = AgL.XNull(AgL.Dman_Execute(" Select Nature From SubGroup Where SubCode = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowBillToParty).Tag) & "", AgL.GCn).ExecuteScalar())
                End If

            Case rowSaleToPartyName
                If DglMain.Rows(rowSaleToParty).Visible = False Then
                    DglMain.Item(Col1Value, rowSaleToParty).Tag = "Customer"
                    DglMain.Item(Col1Value, rowSaleToParty).Value = "Customer"
                    If DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag Is Nothing Then
                        Validating_SaleToParty(DglMain.Item(Col1Value, rowSaleToParty).Tag, False)
                    End If
                    If DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag IsNot Nothing Then
                        CType(DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag, FrmSaleInvoiceParty_WithDimension).Dgl1.Item(FrmSaleInvoiceParty_WithDimension.Col1Value, FrmSaleInvoiceParty_WithDimension.rowPartyName).Value = DglMain.Item(Col1Value, rowSaleToPartyName).Value
                    End If
                End If

            Case rowSaleToPartyMobile
                If DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag IsNot Nothing Then
                    CType(DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag, FrmSaleInvoiceParty_WithDimension).Dgl1.Item(FrmSaleInvoiceParty_WithDimension.Col1Value, FrmSaleInvoiceParty_WithDimension.rowMobile).Value = DglMain.Item(Col1Value, rowSaleToPartyMobile).Value
                End If
        End Select
    End Sub
    Private Sub Validating_Voucher_Type()
        If DglMain.Item(Col1Value, rowV_Type).Tag = "" Then Exit Sub
        mQry = "Select * from SaleInvoiceSetting  With (NoLock)  Where V_Type = '" & DglMain.Item(Col1Value, rowV_Type).Tag & "' And Div_Code = '" & AgL.PubDivCode & "' And Site_Code='" & AgL.PubSiteCode & "' "
        DtV_TypeSettings = AgL.FillData(mQry, AgL.GCn).Tables(0)
        If DtV_TypeSettings.Rows.Count = 0 Then
            mQry = "Select * from SaleInvoiceSetting  With (NoLock) Where V_Type = '" & DglMain.Item(Col1Value, rowV_Type).Tag & "' And Div_Code = '" & AgL.PubDivCode & "' And Site_Code Is Null "
            DtV_TypeSettings = AgL.FillData(mQry, AgL.GCn).Tables(0)
            If DtV_TypeSettings.Rows.Count = 0 Then
                mQry = "Select * from SaleInvoiceSetting  With (NoLock) Where V_Type = '" & DglMain.Item(Col1Value, rowV_Type).Tag & "' And Div_Code  Is Null And Site_Code='" & AgL.PubSiteCode & "' "
                DtV_TypeSettings = AgL.FillData(mQry, AgL.GCn).Tables(0)
                If DtV_TypeSettings.Rows.Count = 0 Then
                    mQry = "Select * from SaleInvoiceSetting  With (NoLock) Where V_Type = '" & DglMain.Item(Col1Value, rowV_Type).Tag & "' And Div_Code  Is Null And Site_Code Is Null "
                    DtV_TypeSettings = AgL.FillData(mQry, AgL.GCn).Tables(0)
                    If DtV_TypeSettings.Rows.Count = 0 Then
                        mQry = "Select * from SaleInvoiceSetting  With (NoLock) Where V_Type Is Null And Div_Code  Is Null And Site_Code Is Null "
                        DtV_TypeSettings = AgL.FillData(mQry, AgL.GCn).Tables(0)
                    End If
                End If
            End If
        End If
        If DtV_TypeSettings.Rows.Count = 0 Then
            MsgBox("Voucher Type Settings Not Found, Can not continue.")
            Topctrl1.FButtonClick(14, True)
            Exit Sub
        End If


        Dgl2(Col1Value, rowRateType).Tag = AgL.XNull(DtV_TypeSettings.Rows(0)("Default_RateType"))
        If Dgl2(Col1Value, rowRateType).Tag <> "" Then
            Dgl2(Col1Value, rowRateType).Value = AgL.Dman_Execute("Select Description from RateType  With (NoLock) Where Code ='" & Dgl2(Col1Value, rowRateType).Tag & "'", AgL.GCn).ExecuteScalar
        End If


        TxtStructure.AgSelectedValue = AgL.Dman_Execute("Select IfNull(Max(Structure),'') From Voucher_Type  With (NoLock) Where V_Type = '" & DglMain.Item(Col1Value, rowV_Type).Tag & "'", AgL.GcnRead).ExecuteScalar
        AgCalcGrid1.AgStructure = TxtStructure.AgSelectedValue

        TxtCustomFields.AgSelectedValue = AgCustomFields.ClsMain.FGetCustomFieldFromV_Type(DglMain.Item(Col1Value, rowV_Type).Tag, AgL.GcnRead)
        AgCustomGrid1.AgCustom = TxtCustomFields.AgSelectedValue


        IniGrid()
        DglMain.Item(Col1Value, rowReferenceNo).Value = AgTemplate.ClsMain.FGetManualRefNo("ManualRefNo", "SaleInvoice", DglMain.Item(Col1Value, rowV_Type).Tag, DglMain.Item(Col1Value, rowV_Date).Value, TxtDivision.AgSelectedValue, DglMain.Item(Col1Value, rowSite_Code).Tag, AgTemplate.ClsMain.ManualRefType.Max)


        LblBarcode.Visible = CType(AgL.VNull(DtV_TypeSettings.Rows(0)("IsVisible_BarcodeGunTextbox")), Boolean)
        TxtBarcode.Visible = CType(AgL.VNull(DtV_TypeSettings.Rows(0)("IsVisible_BarcodeGunTextbox")), Boolean)


        'If AgL.XNull(DtV_TypeSettings.Rows(0)("SaleInvoicePattern")) = SaleInvoicePattern.PointOfSale Then
        If AgL.XNull(DtV_TypeSettings.Rows(0)("Default_RevenuePoint")) <> "" Then
            DglMain.Item(Col1Value, rowSaleToParty).Tag = AgL.XNull(DtV_TypeSettings.Rows(0)("Default_RevenuePoint"))
            DglMain.Item(Col1Value, rowSaleToParty).Value = AgL.Dman_Execute("Select Name From viewHelpSubgroup  With (NoLock) Where Code = '" & DglMain.Item(Col1Value, rowSaleToParty).Tag & "'", AgL.GCn).ExecuteScalar
            Validating_SaleToParty(DglMain.Item(Col1Value, rowSaleToParty).Tag, False)
            If Dgl2.Visible = False Then
                If TxtBarcode.Visible = True And TxtBarcode.Enabled = True Then
                    TxtBarcode.Focus()
                Else
                    Dgl1.Focus() : MakeGridCurrentCellNothing(Dgl1.Name)
                End If
            End If
        End If
        'Else
        '    DglMain.CurrentCell = DglMain.Item(Col1Value, rowSaleToParty)
        '    DglMain.Focus()
        'End If
        FGetSettingVariableValuesForAddAndEdit()
    End Sub
    Private Sub Validating_SaleToParty(Subcode As String, Optional ShowDialogForCashParty As Boolean = True)
        Dim DtTemp As DataTable
        If DglMain.Item(Col1Value, rowV_Date).Value <> "" And DglMain.Item(Col1Value, rowSaleToParty).Value <> "" Then
            'If TxtSaleToParty.AgLastValueTag <> DglMain.Item(Col1Value, rowSaleToParty).Tag Or Topctrl1.Mode = "Add" Then


            If ClsMain.IsPartyBlocked(Subcode, LblV_Type.Tag) Then
                MsgBox("Party is blocked for " & DglMain.Item(Col1Value, rowV_Type).Value & ". Record will not be saved")
            End If

            mQry = "Select * From Subgroup  With (NoLock) Where Subcode = '" & Subcode & "'"
            DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)
            If DtTemp.Rows.Count > 0 Then
                Dgl3(Col1Value, rowCreditDays).Value = AgL.VNull(DtTemp.Rows(0)("CreditDays"))
                TxtCreditLimit.Text = Format(AgL.VNull(DtTemp.Rows(0)("CreditLimit")), "0.00")
                TxtNature.Text = AgL.XNull(DtTemp.Rows(0)("Nature"))
            End If




            Dim TemporaryLimit As Double = AgL.VNull(AgL.Dman_Execute("SELECT L.Amount As TemporaryCreditLimit  
                    FROM SubgroupTemporaryCreditLimit L With (NoLock)
                    WHERE L.Subcode = '" & Subcode & "' 
                    AND Date(L.FromDate) <= " & AgL.Chk_Date(CDate(DglMain.Item(Col1Value, rowV_Date).Value).ToString("s")) & "
                    AND Date(L.ToDate) >= " & AgL.Chk_Date(CDate(DglMain.Item(Col1Value, rowV_Date).Value).ToString("s")) & "
                    ", AgL.GCn).ExecuteScalar())
            If TemporaryLimit > 0 Then
                TxtCreditLimit.Text = TemporaryLimit
                LblCreditLimit.Tag = TemporaryLimit
            End If


            FGetCurrBal(Subcode)

            If Val(Dgl3(Col1Value, rowCreditDays).Value) > 0 And LblV_Type.Tag = Ncat.SaleInvoice Then
                If Val(LblCreditLimit.Tag) <= 0 Then
                    If FGetSettings(SettingFields.ActionIfCreditDaysExceed, SettingType.General) <> ActionIfCreditLimitExceeds.DoNothing And FGetSettings(SettingFields.ActionIfCreditDaysExceed, SettingType.General) <> "" Then
                        If TxtCurrBal.Tag IsNot Nothing Then
                            If DateDiff(DateInterval.Day, CType(TxtCurrBal.Tag, List(Of OutstandingBill)).Last.DocDate, CDate(AgL.PubLoginDate)) > Val(Dgl3(Col1Value, rowCreditDays).Value) Then
                                MsgBox("Credit Days Exceeding, Can not create Invoice")
                            End If
                        End If
                    End If
                End If
            End If

            mQry = "Select H.*, RT.Description as RateTypeName, Agent.Name as AgentName, Transporter.Name as TransporterName, SalesRep.Name as SalesRepName 
                                    From SubgroupSiteDivisionDetail H  With (NoLock)
                                    Left Join RateType RT With (NoLock) on H.RateType = RT.Code
                                    Left Join viewHelpSubgroup agent With (NoLock) On H.Agent = Agent.Code
                                    Left Join viewHelpSubgroup Transporter With (NoLock) On H.Transporter = Transporter.Code
                                    Left Join viewHelpSubgroup SalesRep With (NoLock) On H.SalesRepresentative = SalesRep.Code
                                    Where H.Subcode = '" & Subcode & "' And H.Site_Code='" & DglMain.Item(Col1Value, rowSite_Code).Tag & "' And H.Div_Code='" & TxtDivision.Tag & "'"
                DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)
                If DtTemp.Rows.Count > 0 Then

                    Dgl2(Col1Value, rowSalesRepresentative).Tag = AgL.XNull(DtTemp.Rows(0)("SalesRepresentative"))
                    Dgl2(Col1Value, rowSalesRepresentative).Value = AgL.XNull(DtTemp.Rows(0)("SalesRepName"))
                    Dgl2(Col1Value, rowRateType).Tag = AgL.XNull(DtTemp.Rows(0)("RateType"))
                    Dgl2(Col1Value, rowRateType).Value = AgL.XNull(DtTemp.Rows(0)("RateTypeName"))
                    Dgl3(Col1Value, rowAgent).Tag = AgL.XNull(DtTemp.Rows(0)("Agent"))
                    Dgl3(Col1Value, rowAgent).Value = AgL.XNull(DtTemp.Rows(0)("AgentName"))
                    Dgl3(Col1Value, rowTransporter).Tag = AgL.XNull(DtTemp.Rows(0)("Transporter"))
                    Dgl3(Col1Value, rowTransporter).Value = AgL.XNull(DtTemp.Rows(0)("TransporterName"))





                    If AgL.XNull(DtTemp.Rows(0)("TermsAndConditions")) <> "" Then
                        If TxtNature.Text.ToUpper = "CASH" Then
                            Dgl3(Col1Value, rowTermsAndConditions).Value = AgL.XNull(DtV_TypeSettings.Rows(0)("Default_TermsAndConditionsCash"))
                        Else
                            Dgl3(Col1Value, rowTermsAndConditions).Value = AgL.XNull(DtTemp.Rows(0)("TermsAndConditions"))
                        End If
                    Else
                        If TxtNature.Text.ToUpper = "CASH" Then
                            Dgl3(Col1Value, rowTermsAndConditions).Value = AgL.XNull(DtV_TypeSettings.Rows(0)("Default_TermsAndConditionsCash"))
                        Else
                            Dgl3(Col1Value, rowTermsAndConditions).Value = AgL.XNull(DtV_TypeSettings.Rows(0)("Default_TermsAndConditions"))
                        End If
                    End If
                Else
                    'TxtRateType.Tag = AgL.XNull(DtV_TypeSettings.Rows(0)("Default_RateType"))
                    'If TxtRateType.Tag <> "" Then
                    '    TxtRateType.Text = AgL.Dman_Execute("Select Description from RateType Where Code ='" & TxtRateType.Tag & "'", AgL.GCn).ExecuteScalar
                    'End If
                    If TxtNature.Text.ToUpper = "CASH" Then
                        Dgl3(Col1Value, rowTermsAndConditions).Value = AgL.XNull(DtV_TypeSettings.Rows(0)("Default_TermsAndConditionsCash"))
                    Else
                        Dgl3(Col1Value, rowTermsAndConditions).Value = AgL.XNull(DtV_TypeSettings.Rows(0)("Default_TermsAndConditions"))
                    End If

                End If






                DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag = Nothing
                ShowSaleInvoiceParty("", Subcode, TxtNature.Text, ShowDialogForCashParty)
                DglMain.Item(Col1Value, rowBillToParty).Tag = DglMain.Item(Col1Value, rowSaleToParty).Tag
                DglMain.Item(Col1Value, rowBillToParty).Value = DglMain.Item(Col1Value, rowSaleToParty).Value
                DglMain(Col1Head, rowBillToParty).Tag = Nothing

            If FDivisionNameForCustomization(20) = "SHYAMA SHYAM FABRICS" Or FDivisionNameForCustomization(22) = "W SHYAMA SHYAM FABRICS" Or ClsMain.FDivisionNameForCustomization(25) = "SHYAMA SHYAM VENTURES LLP" Or ClsMain.FDivisionNameForCustomization(27) = "W SHYAMA SHYAM VENTURES LLP" Then
                mQry = "Select Par.Code, Par.Name
                            From SubGroup Sg
                            LEFT JOIN ViewHelpSubGroup Par On Sg.Parent = Par.Code
                            Where Sg.SubCode = '" & DglMain.Item(Col1Value, rowSaleToParty).Tag & "'"
                Dim DtBillToParty As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)
                If DtBillToParty.Rows.Count > 0 Then
                    DglMain.Item(Col1Value, rowBillToParty).Tag = AgL.XNull(DtBillToParty.Rows(0)("Code"))
                    DglMain.Item(Col1Value, rowBillToParty).Value = AgL.XNull(DtBillToParty.Rows(0)("Name"))
                End If
                Dim DtTemp1 As DataTable
                mQry = "Select H.*, RT.Description as RateTypeName, Agent.Name as AgentName, Transporter.Name as TransporterName 
                                    From SubgroupSiteDivisionDetail H  With (NoLock)
                                    Left Join RateType RT With (NoLock) on H.RateType = RT.Code
                                    Left Join viewHelpSubgroup agent With (NoLock) On H.Agent = Agent.Code
                                    Left Join viewHelpSubgroup Transporter With (NoLock) On H.Transporter = Transporter.Code
                                    Where H.Subcode = '" & DglMain.Item(Col1Value, rowBillToParty).Tag & "' And H.Site_Code='" & DglMain.Item(Col1Value, rowSite_Code).Tag & "' And H.Div_Code='" & TxtDivision.Tag & "'"
                DtTemp1 = AgL.FillData(mQry, AgL.GCn).Tables(0)
                If DtTemp1.Rows.Count > 0 Then
                    Dgl2(Col1Value, rowRateType).Tag = AgL.XNull(DtTemp1.Rows(0)("RateType"))
                    Dgl2(Col1Value, rowRateType).Value = AgL.XNull(DtTemp1.Rows(0)("RateTypeName"))
                    Dgl3(Col1Value, rowAgent).Tag = AgL.XNull(DtTemp1.Rows(0)("Agent"))
                    Dgl3(Col1Value, rowAgent).Value = AgL.XNull(DtTemp1.Rows(0)("AgentName"))
                    Dgl3(Col1Value, rowTransporter).Tag = AgL.XNull(DtTemp1.Rows(0)("Transporter"))
                    Dgl3(Col1Value, rowTransporter).Value = AgL.XNull(DtTemp1.Rows(0)("TransporterName"))
                End If
            End If



            If DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag IsNot Nothing Then
                    Dgl2.Item(Col1Value, rowSalesTaxNo).Value = CType(DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag, FrmSaleInvoiceParty_WithDimension).Dgl1.Item(FrmSaleInvoiceParty_WithDimension.Col1Value, FrmSaleInvoiceParty_WithDimension.rowSalesTaxNo).Value
                    Dgl2.Item(Col1Value, rowAadharNo).Value = CType(DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag, FrmSaleInvoiceParty_WithDimension).Dgl1.Item(FrmSaleInvoiceParty_WithDimension.Col1Value, FrmSaleInvoiceParty_WithDimension.rowAadharNo).Value
                End If



                If DglMain.Item(Col1Value, rowSaleToParty).Tag IsNot Nothing And DglMain.Item(Col1Value, rowSaleToParty).Value <> "" Then
                    If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_AcTreeNodeType")).ToString.Contains(TreeNodeType.Leaf) Then
                        mQry = "Select Par.Code, Par.Name
                            From SubGroup Sg
                            LEFT JOIN ViewHelpSubGroup Par On Sg.Parent = Par.Code
                            Where Sg.SubCode = '" & DglMain.Item(Col1Value, rowSaleToParty).Tag & "'"
                        Dim DtBillToParty As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)
                        If DtBillToParty.Rows.Count > 0 Then
                            DglMain.Item(Col1Value, rowBillToParty).Tag = AgL.XNull(DtBillToParty.Rows(0)("Code"))
                            DglMain.Item(Col1Value, rowBillToParty).Value = AgL.XNull(DtBillToParty.Rows(0)("Name"))
                        End If
                    End If
                End If


                If LblV_Type.Tag = Ncat.SaleReturn Then
                    mQry = "Select Count(*) 
                            From SaleInvoice H With (NoLock) 
                            Left Join Voucher_Type VT With (NoLock) On H.V_Type = VT.V_Type
                            Where VT.NCat = '" & Ncat.SaleInvoice & "' 
                            And H.SaleToParty = '" & DglMain.Item(Col1Value, rowSaleToParty).Tag & "'
                            And H.V_Date <= " & AgL.Chk_Date(DglMain.Item(Col1Value, rowV_Date).Value) & " 
                           "
                    Dgl3.Item(Col1Value, rowCustomerInvoiceCount).Value = AgL.Dman_Execute(mQry, AgL.GCn).ExecuteScalar()
                End If

            End If
        'End If
    End Sub
    Private Sub FGetCurrBal(ByVal Party As String)
        mQry = " Select IfNull(Sum(AmtDr),0) - IfNull(Sum(AmtCr),0) As CurrBal From Ledger  With (NoLock) Where SubCode = '" & Party & "'"
        TxtCurrBal.Text = Format(AgL.VNull(AgL.Dman_Execute(mQry, AgL.GCn).ExecuteScalar), "0.00")

        If Val(TxtCurrBal.Text) < 0 Then
            TxtCurrBal.ForeColor = Color.Red
            TxtCurrBal.Text = TxtCurrBal.Text & " Cr."
        ElseIf Val(TxtCurrBal.Text) < 0 Then
            TxtCurrBal.ForeColor = Color.ForestGreen
            TxtCurrBal.Text = TxtCurrBal.Text & " Dr."
        Else
            TxtCurrBal.ForeColor = Color.Black
        End If

        If FGetSettings(SettingFields.ActionIfCreditDaysExceed, SettingType.General) <> ActionIfCreditLimitExceeds.DoNothing Then
            TxtCurrBal.Tag = GetOutstandingBillsFifoList(Party, CDate(ClsMain.FormatDate(AgL.PubLoginDate)))
        End If
    End Sub
    Class OutstandingBill
        Public DocNo As String
        Public DocDate As Date
        Public Narration As String
        Public DocAmount As Double
        Public BalAmount As Double
        Public DrCr As String
    End Class

    Function GetOutstandingBillsFifoList(strSubcode As String, strUptoDate As String) As List(Of OutstandingBill)
        Dim DtMain As DataTable
        Dim mBalance As Double
        Dim mRemainingBalance As Double
        Dim i As Integer
        Dim OutstandingBills As New List(Of OutstandingBill)
        Dim objOutstandingBill As OutstandingBill


        'mQry = "Select IfNull(Sum(IfNull(L.AmtDr,0))- Sum(IfNull(L.AmtCr,0)),0) From Ledger L  With (NoLock) Where L.DivCode='" & TxtDivision.Tag & "' And L.Site_Code = '" & TxtSite_Code.Tag & "' And L.Subcode = '" & strSubcode & "' And L.V_Date <= '" & CDate(strUptoDate).ToString("s") & "'"
        mQry = "Select IfNull(Sum(IfNull(L.AmtDr,0))- Sum(IfNull(L.AmtCr,0)),0) From Ledger L  With (NoLock) Where L.DivCode='" & TxtDivision.Tag & "' And L.Site_Code = '" & DglMain.Item(Col1Value, rowSite_Code).Tag & "' And L.Subcode = '" & strSubcode & "'"
        mBalance = AgL.Dman_Execute(mQry, AgL.GCn).ExecuteScalar
        mRemainingBalance = Math.Abs(mBalance)
        If mBalance > 0 Then
            mQry = "Select L.DocID, L.DivCode, L.Site_Code, L.V_Type, Vt.Description as V_TypeDesc, L.RecId, IfNull(L.EffectiveDate,L.V_Date) as V_Date, L.Narration, L.AmtDr as Amount,
                    L.DivCode || L.Site_Code || '-' || L.V_Type || '-' || L.RecId as DocNo
                    From Ledger L  With (NoLock)
                    Left Join Voucher_Type Vt  With (NoLock) On L.V_Type = Vt.V_Type
                    Where L.DivCode='" & TxtDivision.Tag & "' And L.Site_Code = '" & DglMain.Item(Col1Value, rowSite_Code).Tag & "' 
                    And L.Subcode = '" & strSubcode & "'  And L.AmtDr > 0 
                    Order By IfNull(L.EffectiveDate,L.V_Date) Desc, L.RecId desc"

        Else
            mQry = "Select L.DocID, L.DivCode, L.Site_Code, L.V_Type, Vt.Description as V_TypeDesc, L.RecId, IfNull(L.EffectiveDate,L.V_Date) V_Date, L.Narration, L.AmtCr as Amount,
                    L.DivCode || L.Site_Code || '-' || L.V_Type || '-' || L.RecId as DocNo
                    From Ledger L  With (NoLock)
                    Left Join Voucher_Type Vt On L.V_Type = Vt.V_Type
                    Where L.DivCode='" & TxtDivision.Tag & "' And L.Site_Code = '" & DglMain.Item(Col1Value, rowSite_Code).Tag & "' 
                    And L.Subcode = '" & strSubcode & "'  And L.AmtCr > 0 
                    Order By IfNull(L.EffectiveDate,L.V_Date) Desc, L.RecId desc"

        End If
        DtMain = AgL.FillData(mQry, AgL.GCn).tables(0)
        'Dgl2.Rows.Clear()
        If DtMain.Rows.Count > 0 Then
            For i = 0 To DtMain.Rows.Count - 1
                If mRemainingBalance > 0 Then

                    objOutstandingBill = New OutstandingBill
                    objOutstandingBill.DocNo = AgL.XNull(DtMain.Rows(i)("DocNo"))
                    objOutstandingBill.DocDate = AgL.XNull(DtMain.Rows(i)("V_Date"))
                    objOutstandingBill.Narration = IIf(AgL.XNull(DtMain.Rows(i)("Narration")) = "", AgL.XNull(DtMain.Rows(i)("V_TypeDesc")), AgL.XNull(DtMain.Rows(i)("Narration")))
                    objOutstandingBill.DocAmount = AgL.VNull(DtMain.Rows(i)("Amount"))
                    If mRemainingBalance > AgL.VNull(DtMain.Rows(i)("Amount")) Then
                        objOutstandingBill.BalAmount = Format(AgL.VNull(DtMain.Rows(i)("Amount")), "0.00")
                        mRemainingBalance = mRemainingBalance - AgL.VNull(DtMain.Rows(i)("Amount"))
                    Else
                        objOutstandingBill.BalAmount = Format(mRemainingBalance, "0.00")
                        mRemainingBalance = mRemainingBalance - mRemainingBalance
                    End If
                    objOutstandingBill.DrCr = IIf(mBalance > 0, "Dr", "Cr")

                    OutstandingBills.Add(objOutstandingBill)


                End If
            Next
        End If
        GetOutstandingBillsFifoList = OutstandingBills
    End Function


    Private Sub FrmSaleOrder_BaseEvent_Topctrl_tbAdd() Handles Me.BaseEvent_Topctrl_tbAdd
        mQry = "Select * from SaleInvoiceSetting  With (NoLock)  Where V_Type = '" & DglMain.Item(Col1Value, rowV_Type).Tag & "' And Div_Code = '" & AgL.PubDivCode & "' And Site_Code='" & AgL.PubSiteCode & "' "
        DtV_TypeSettings = AgL.FillData(mQry, AgL.GCn).Tables(0)
        If DtV_TypeSettings.Rows.Count = 0 Then
            mQry = "Select * from SaleInvoiceSetting  With (NoLock)  Where V_Type = '" & DglMain.Item(Col1Value, rowV_Type).Tag & "' And Div_Code = '" & AgL.PubDivCode & "' And Site_Code Is Null "
            DtV_TypeSettings = AgL.FillData(mQry, AgL.GCn).Tables(0)
            If DtV_TypeSettings.Rows.Count = 0 Then
                mQry = "Select * from SaleInvoiceSetting With (NoLock) Where V_Type = '" & DglMain.Item(Col1Value, rowV_Type).Tag & "' And Div_Code  Is Null And Site_Code='" & AgL.PubSiteCode & "' "
                DtV_TypeSettings = AgL.FillData(mQry, AgL.GCn).Tables(0)
                If DtV_TypeSettings.Rows.Count = 0 Then
                    mQry = "Select * from SaleInvoiceSetting  With (NoLock) Where V_Type = '" & DglMain.Item(Col1Value, rowV_Type).Tag & "' And Div_Code  Is Null And Site_Code Is Null "
                    DtV_TypeSettings = AgL.FillData(mQry, AgL.GCn).Tables(0)
                    If DtV_TypeSettings.Rows.Count = 0 Then
                        mQry = "Select * from SaleInvoiceSetting  With (NoLock) Where V_Type Is Null And Div_Code  Is Null And Site_Code Is Null "
                        DtV_TypeSettings = AgL.FillData(mQry, AgL.GCn).Tables(0)
                    End If
                End If
            End If
        End If
        If DtV_TypeSettings.Rows.Count = 0 Then
            MsgBox("Voucher Type Settings Not Found, Can not continue.")
            Topctrl1.FButtonClick(14, True)
            Exit Sub
        End If


        TxtStructure.AgSelectedValue = AgL.Dman_Execute("Select IfNull(Max(Structure),'') From Voucher_Type  With (NoLock) Where V_Type = '" & DglMain.Item(Col1Value, rowV_Type).Tag & "'", AgL.GcnRead).ExecuteScalar 'AgStructure.ClsMain.FGetStructureFromNCat(LblV_Type.Tag, AgL.GcnRead)
        AgCalcGrid1.AgStructure = TxtStructure.AgSelectedValue
        AgCalcGrid1.AgNCat = EntryNCat

        TxtCustomFields.AgSelectedValue = AgCustomFields.ClsMain.FGetCustomFieldFromV_Type(DglMain.Item(Col1Value, rowV_Type).Tag, AgL.GCn)
        AgCustomGrid1.AgCustom = TxtCustomFields.AgSelectedValue

        DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag = Nothing

        DglMain.Item(Col1Value, rowSettingGroup).Tag = AgL.XNull(FGetSettings(SettingFields.DefaultSettingGroup, SettingType.General))
        DglMain.Item(Col1Value, rowSettingGroup).Value = AgL.XNull(AgL.Dman_Execute(" Select Name 
                        From SettingGroup 
                        Where Code = '" & DglMain.Item(Col1Value, rowSettingGroup).Tag & "'", AgL.GCn).ExecuteScalar())


        IniGrid()
        TabControl1.SelectedTab = TP1
        DglMain.Item(Col1Value, rowReferenceNo).Value = AgTemplate.ClsMain.FGetManualRefNo("ManualRefNo", "SaleInvoice", DglMain.Item(Col1Value, rowV_Type).Tag, DglMain.Item(Col1Value, rowV_Date).Value, TxtDivision.AgSelectedValue, DglMain.Item(Col1Value, rowSite_Code).Tag, AgTemplate.ClsMain.ManualRefType.Max)


        mDimensionSrl = 0
        Dgl1.ReadOnly = False



        SetAttachmentCaption()
        LblCancelled.Text = ""

        LblBarcode.Visible = CType(AgL.VNull(DtV_TypeSettings.Rows(0)("IsVisible_BarcodeGunTextbox")), Boolean)
        TxtBarcode.Visible = CType(AgL.VNull(DtV_TypeSettings.Rows(0)("IsVisible_BarcodeGunTextbox")), Boolean)

        Dgl2(Col1Value, rowRateType).Tag = AgL.XNull(DtV_TypeSettings.Rows(0)("Default_RateType"))
        If Dgl2(Col1Value, rowRateType).Tag <> "" Then
            Dgl2(Col1Value, rowRateType).Value = AgL.Dman_Execute("Select Description from RateType  With (NoLock) Where Code ='" & Dgl2(Col1Value, rowRateType).Tag & "'", AgL.GCn).ExecuteScalar
        End If


        If DtVoucher_TypeHelpDataSet.Tables(0).Rows.Count > 1 Then
            mQry = "SELECT " & IIf(AgL.PubServerName <> "", "TOP 1", "") & "  H.V_Type, Vt.Description AS V_TypeDesc  
                FROM SaleInvoice H
                LEFT JOIN Voucher_Type Vt ON H.V_Type = Vt.V_Type
                WHERE H.EntryBy = '" & AgL.PubUserName & "' 
                And Vt.NCat In ('" & EntryNCat & "')
                And IfNull(Vt.CustomUi,'') = '" & mCustomUI & "' 
                ORDER BY H.EntryDate DESC " & IIf(AgL.PubServerName <> "", "", "Limit 1") & ""
            Dim DtLastVoucher_Type As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)

            If DtLastVoucher_Type.Rows.Count > 0 Then
                DglMain.Item(Col1Value, rowV_Type).Tag = AgL.XNull(DtLastVoucher_Type.Rows(0)("V_Type"))
                DglMain.Item(Col1Value, rowV_Type).Value = AgL.XNull(DtLastVoucher_Type.Rows(0)("V_TypeDesc"))
                Validating_Voucher_Type()
            End If
        End If

        If Not ClsMain.IsScopeOfWorkContains(IndustryType.SubIndustryType.RetailModule) Then
            Dgl4.Visible = False
        End If

        mDtPurchaseData = Nothing

        If DglMain.Visible Then
            Try
                DglMain.CurrentCell = DglMain.FirstDisplayedCell
                DglMain.Focus()
            Catch ex As Exception
            End Try
        End If
        If Dgl1.Visible Then
            Try
                Dgl1.CurrentCell = Dgl1.FirstDisplayedCell
                Dgl1.Focus()
            Catch ex As Exception
            End Try
        End If
        If Dgl2.Visible Then
            Try
                Dgl2.CurrentCell = Dgl2.FirstDisplayedCell
                Dgl2.Focus()
            Catch ex As Exception
            End Try
        End If
        If Dgl3.Visible Then
            Try
                Dgl3.CurrentCell = Dgl3.FirstDisplayedCell
                Dgl3.Focus()
            Catch ex As Exception
            End Try
        End If
        If DglPurchase.Visible Then
            Try
                DglPurchase.CurrentCell = DglPurchase.FirstDisplayedCell
                DglPurchase.Focus()
            Catch ex As Exception
            End Try
        End If
        If AgCalcGrid1.Visible Then
            Try
                AgCalcGrid1.CurrentCell = AgCalcGrid1.FirstDisplayedCell
                AgCalcGrid1.Focus()
            Catch ex As Exception
            End Try
        End If


        'If AgL.XNull(DtV_TypeSettings.Rows(0)("SaleInvoicePattern")) = SaleInvoicePattern.PointOfSale Then
        If AgL.XNull(DtV_TypeSettings.Rows(0)("Default_RevenuePoint")) <> "" Then
            DglMain.Item(Col1Value, rowSaleToParty).Tag = AgL.XNull(DtV_TypeSettings.Rows(0)("Default_RevenuePoint"))
            DglMain.Item(Col1Value, rowSaleToParty).Value = AgL.Dman_Execute("Select Name From viewHelpSubgroup  With (NoLock) Where Code = '" & DglMain.Item(Col1Value, rowSaleToParty).Tag & "'", AgL.GCn).ExecuteScalar
            Validating_SaleToParty(DglMain.Item(Col1Value, rowSaleToParty).Tag, False)
            If Dgl2.Visible = False Then
                If TxtBarcode.Visible = True And TxtBarcode.Enabled = True Then
                    TxtBarcode.Focus()
                Else
                    Dgl1.Focus() : MakeGridCurrentCellNothing(Dgl1.Name)
                End If
            Else
                Dgl2.CurrentCell = Dgl2.Item(Col1Value, Dgl2.FirstDisplayedCell.RowIndex)
                Dgl2.Focus() : MakeGridCurrentCellNothing(Dgl2.Name)
            End If
        End If
        'End If


        If DglMain.Visible = True And AgL.XNull(DtV_TypeSettings.Rows(0)("SaleInvoicePattern")) <> SaleInvoicePattern.PointOfSale Then
            If DglMain.FirstDisplayedCell IsNot Nothing Then
                If DglMain(Col1Value, rowSettingGroup).Visible = True Then
                    DglMain.CurrentCell = DglMain(Col1Value, rowSettingGroup)
                ElseIf DtVoucher_TypeHelpDataSet.Tables(0).Rows.Count > 1 Then
                    DglMain.CurrentCell = DglMain(Col1Value, rowV_Type)
                ElseIf DglMain(Col1Value, rowSaleToParty).Visible = True Then
                    If FDivisionNameForCustomization(12) = "MAA KI KRIPA" Or
                        FDivisionNameForCustomization(16) = "KAMAKHYA TRADERS" Or
                        FDivisionNameForCustomization(22) = "W SHYAMA SHYAM FABRICS" Or ClsMain.FDivisionNameForCustomization(27) = "W SHYAMA SHYAM VENTURES LLP" Then
                        DglMain.CurrentCell = DglMain(Col1Value, rowV_Date)
                    Else
                        DglMain.CurrentCell = DglMain(Col1Value, rowSaleToParty)
                    End If
                Else
                    DglMain.CurrentCell = DglMain(Col1Value, DglMain.FirstDisplayedCell.RowIndex)
                End If
                DglMain.Focus() : MakeGridCurrentCellNothing(DglMain.Name)
            End If
            If DglMain(Col1Value, rowSaleToParty).Value <> "" Then
                If Dgl2.Visible Then
                    Dgl2.CurrentCell = Dgl2.FirstDisplayedCell
                    Dgl2.Focus() : MakeGridCurrentCellNothing(Dgl2.Name)
                Else
                    TxtBarcode.Focus() : MakeGridCurrentCellNothing("")
                End If
            End If
        Else
            If Dgl2.Visible Then
                Dgl2.CurrentCell = Dgl2.FirstDisplayedCell
                Dgl2.Focus() : MakeGridCurrentCellNothing(Dgl2.Name)
            Else
                TxtBarcode.Focus() : MakeGridCurrentCellNothing("")
            End If
            'Application.DoEvents()
        End If

        FGetSettingVariableValuesForAddAndEdit()

        If SettingFields_MaximumItemLimit = 1 Then
            Dgl1.AllowUserToAddRows = False
            Dgl1.Rows.Clear()
            Dgl1.Rows.Add(1)
        End If

        If EntryNCat = Ncat.WorkInvoice Then
            DglMain.Item(Col1Value, rowSaleToParty).Tag = "CUSTOMER"
            DglMain.Item(Col1Value, rowSaleToParty).Value = "CUSTOMER"
            Validating_SaleToParty(DglMain.Item(Col1Value, rowSaleToParty).Tag, False)
        End If
    End Sub
    Private Sub Topctrl1_tbAdd() Handles Topctrl1.tbAdd

    End Sub
    Private Sub Validating_ItemCode(ItemCode As String, ByVal mColumn As Integer, ByVal mRow As Integer)
        Dim DrTemp As DataRow() = Nothing
        Dim DtItem As DataTable = Nothing
        Dim DtTemp As DataTable = Nothing

        Dim StrReturnTicked As String = ""
        Dim dtInvoices As DataTable = Nothing
        Try
            mQry = "Select I.Code, I.Description, I.ManualCode, I.Unit, I.DealUnit, IfNull(I.SalesTaxPostingGroup, IC.SalesTaxPostingGroup) as SalesTaxPostingGroup, I.MaintainStockYn, 
                    I.ItemCategory, I.ItemGroup,I.V_Type, IC.Description as ItemCategoryName, I.ItemType, IT.Name as ItemTypeName, IG.Description as ItemGroupName,
                    IG.ItemInvoiceGroup, IIG.Description as ItemInvoiceGroupName, 
                    Case When IfNull(U.ShowDimensionDetailInSales,0) = 1 Or IfNull(Ic.ShowDimensionDetailInSales,0) = 1 Then 1
                         Else 0 End As ShowDimensionDetailInSales, 
                    U.DecimalPlaces as QtyDecimalPlaces, DU.DecimalPlaces as DealQtyDecimalPlaces, 
                    IG.Default_DiscountPerSale ,
                    IG.Default_AdditionalDiscountPerSale, IG.Default_AdditionPerSale, I.PurchaseRate,
                    IG.Default_DiscountPerPurchase, IG.Default_AdditionalDiscountPerPurchase,
                    I.Div_Code As ItemDiv_Code, D.Div_Name As ItemDiv_Name
                    From Item I  With (NoLock)
                    Left Join Unit U  With (NoLock) On I.Unit = U.Code 
                    Left Join Unit DU  With (NoLock) On I.DealUnit = DU.Code 
                    Left Join Item IC  With (NoLock) On I.ItemCategory = IC.Code
                    Left Join Item IG  With (NoLock) On I.ItemGroup = IG.Code
                    Left Join ItemType IT With (NoLock) On I.ItemType = IT.Code                                
                    Left Join Item IIG On IG.ItemInvoiceGroup = IIG.Code
                    LEFT JOIN Division D On I.Div_Code = D.Div_Code
                    Where I.Code ='" & ItemCode & "'"
            DtItem = AgL.FillData(mQry, AgL.GCn).Tables(0)
            If DtItem.Rows.Count > 0 Then
                Dgl1.Item(Col1Item, mRow).Tag = AgL.XNull(DtItem.Rows(0)("Code"))
                Dgl1.Item(Col1Item, mRow).Value = AgL.XNull(DtItem.Rows(0)("Description"))
                Call FCheckDuplicate(mRow)
                Dgl1.Item(Col1ItemType, mRow).Tag = AgL.XNull(DtItem.Rows(0)("ItemType"))
                Dgl1.Item(Col1ItemType, mRow).Value = AgL.XNull(DtItem.Rows(0)("ItemTypeName"))
                If AgL.XNull(DtItem.Rows(0)("V_Type")) = ItemV_Type.ItemCategory Then
                    Dgl1.Item(Col1ItemCategory, mRow).Tag = AgL.XNull(DtItem.Rows(0)("Code"))
                    Dgl1.Item(Col1ItemCategory, mRow).Value = AgL.XNull(DtItem.Rows(0)("Description"))
                Else
                    Dgl1.Item(Col1ItemCategory, mRow).Tag = AgL.XNull(DtItem.Rows(0)("ItemCategory"))
                    Dgl1.Item(Col1ItemCategory, mRow).Value = AgL.XNull(DtItem.Rows(0)("ItemCategoryName"))
                End If

                If AgL.StrCmp(AgL.XNull(DtItem.Rows(0)("ItemGroupName")), "UNMAPPED") Then
                Else
                    If AgL.XNull(DtItem.Rows(0)("ItemGroup")) <> "" Then
                        Dgl1.Item(Col1ItemGroup, mRow).Tag = AgL.XNull(DtItem.Rows(0)("ItemGroup"))
                        Dgl1.Item(Col1ItemGroup, mRow).Value = AgL.XNull(DtItem.Rows(0)("ItemGroupName"))
                    End If
                End If

                Dgl1.Item(Col1ItemInvoiceGroup, mRow).Tag = AgL.XNull(DtItem.Rows(0)("ItemInvoiceGroup"))
                Dgl1.Item(Col1ItemInvoiceGroup, mRow).Value = AgL.XNull(DtItem.Rows(0)("ItemInvoiceGroupName"))

                Dgl1.Item(Col1ItemCode, mRow).Tag = AgL.XNull(DtItem.Rows(0)("Code"))
                Dgl1.Item(Col1ItemCode, mRow).Value = AgL.XNull(DtItem.Rows(0)("ManualCode"))
                Dgl1.Item(Col1Unit, mRow).Value = AgL.XNull(DtItem.Rows(0)("Unit"))
                Dgl1.Item(Col1DealUnit, mRow).Value = AgL.XNull(DtItem.Rows(0)("DealUnit"))
                Dgl1.Item(Col1MaintainStockYn, mRow).Value = AgL.VNull(DtItem.Rows(0)("MaintainStockYn"))

                If FDivisionNameForCustomization(13) = "JAIN BROTHERS" Or FDivisionNameForCustomization(11) = "BOOK SHOPEE" Then
                    Dgl1.Item(Col1StockInDiv_Code, mRow).Tag = AgL.XNull(DtItem.Rows(0)("ItemDiv_Code"))
                    Dgl1.Item(Col1StockInDiv_Code, mRow).Value = AgL.XNull(DtItem.Rows(0)("ItemDiv_Name"))
                End If

                Dgl1.Item(Col1PurchaseRate, mRow).Value = AgL.VNull(DtItem.Rows(0)("PurchaseRate"))
                Dgl1.Item(Col1PurchaseDiscountPer, mRow).Value = AgL.VNull(DtItem.Rows(0)("Default_DiscountPerPurchase"))
                Dgl1.Item(Col1PurchaseAdditionalDiscountPer, mRow).Value = AgL.VNull(DtItem.Rows(0)("Default_AdditionalDiscountPerPurchase"))

                Dgl1.Item(Col1SalesTaxGroup, mRow).Tag = AgL.XNull(DtItem.Rows(0)("SalesTaxPostingGroup"))
                Dgl1.Item(Col1SalesTaxGroup, mRow).Value = AgL.XNull(DtItem.Rows(0)("SalesTaxPostingGroup"))
                If Dgl1.Item(Col1SalesTaxGroup, mRow).Tag = "" Then
                    Dgl1.Item(Col1SalesTaxGroup, mRow).Tag = AgL.XNull(AgL.PubDtEnviro.Rows(0)("Default_SalesTaxGroupItem"))
                    Dgl1.Item(Col1SalesTaxGroup, mRow).Value = AgL.XNull(AgL.PubDtEnviro.Rows(0)("Default_SalesTaxGroupItem"))
                End If
                Dgl1.Item(Col1QtyDecimalPlaces, mRow).Value = AgL.VNull(DtItem.Rows(0)("QtyDecimalPlaces"))
                Dgl1.Item(Col1DealQtyDecimalPlaces, mRow).Value = AgL.VNull(DtItem.Rows(0)("DealQtyDecimalPlaces"))

                If Dgl2(Col1Value, rowRateType).Value <> "" Then
                    mQry = "Select IfNull(Max(DiscountPer),0) As Default_DiscountPerSale,
                            IfNull(Max(AdditionalDiscountPer),0) As Default_AdditionalDiscountPerSale,
                            IfNull(Max(AdditionPer),0) As Default_AdditionPerSale
                            From ItemGroupRateType H  With (NoLock) 
                            Where Code = '" & Dgl1.Item(Col1ItemGroup, mRow).Tag & "' 
                            And RateType = '" & Dgl2(Col1Value, rowRateType).Tag & "' "
                    Dim DTDiscounts As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)
                    If DTDiscounts.Rows.Count > 0 Then
                        Dgl1.Item(Col1DefaultDiscountPer, mRow).Value = AgL.VNull(DTDiscounts.Rows(0)("Default_DiscountPerSale"))
                        Dgl1.Item(Col1DefaultAdditionalDiscountPer, mRow).Value = AgL.VNull(DTDiscounts.Rows(0)("Default_AdditionalDiscountPerSale"))
                        Dgl1.Item(Col1DefaultAdditionPer, mRow).Value = AgL.VNull(DTDiscounts.Rows(0)("Default_AdditionPerSale"))
                    End If

                    'Dgl1.Item(Col1DefaultDiscountPer, mRow).Value = AgL.Dman_Execute("Select IfNull(Max(Discount),0) From ItemGroupRateType H  With (NoLock) Where Code = '" & Dgl1.Item(Col1ItemGroup, mRow).Tag & "' And RateType = '" & Dgl2(Col1Value, rowRateType).Tag & "' ", AgL.GCn).ExecuteScalar
                Else
                    Dgl1.Item(Col1DefaultDiscountPer, mRow).Value = AgL.VNull(DtItem.Rows(0)("Default_DiscountPerSale"))
                    Dgl1.Item(Col1DefaultAdditionalDiscountPer, mRow).Value = AgL.VNull(DtItem.Rows(0)("Default_AdditionalDiscountPerSale"))
                    Dgl1.Item(Col1DefaultAdditionPer, mRow).Value = AgL.VNull(DtItem.Rows(0)("Default_AdditionPerSale"))
                End If
                Dim DrItemTypeSetting As DataRow
                DrItemTypeSetting = FItemTypeSettings(Dgl1(Col1ItemType, mRow).Tag)
                Dgl1(Col1DiscountCalculationPattern, mRow).Value = AgL.XNull(DrItemTypeSetting("DiscountCalculationPatternSale"))
                Dgl1(Col1AdditionalDiscountCalculationPattern, mRow).Value = AgL.XNull(DrItemTypeSetting("AdditionalDiscountCalculationPatternSale"))
                Dgl1(Col1AdditionCalculationPattern, mRow).Value = AgL.XNull(DrItemTypeSetting("AdditionCalculationPatternSale"))

                If AgL.XNull(DtItem.Rows(0)("ItemGroup")) = "" Then
                    mQry = " Select Default_DiscountPerPurchase, Default_AdditionalDiscountPerPurchase
                            From Item Ig 
                            Where Ig.Code = '" & Dgl1(Col1ItemGroup, mRow).Tag & "'"
                    Dim DtItemGroupDetail As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)
                    If DtItemGroupDetail.Rows.Count > 0 Then
                        Dgl1.Item(Col1PurchaseDiscountPer, mRow).Value = AgL.VNull(DtItemGroupDetail.Rows(0)("Default_DiscountPerPurchase"))
                        Dgl1.Item(Col1PurchaseAdditionalDiscountPer, mRow).Value = AgL.VNull(DtItemGroupDetail.Rows(0)("Default_AdditionalDiscountPerPurchase"))
                    End If
                End If


                StrReturnTicked = ""
                If LblV_Type.Tag = Ncat.SaleReturn Then
                    If CType(AgL.VNull(FGetSettings(SettingFields.LinkInvoiceWithReturnYn, SettingType.General)), Boolean) = True Then
                        StrReturnTicked = FSaleInvoiceSelectionWindowForReturn(mRow, Col1Item)
                    End If
                End If

                If StrReturnTicked = "" Then
                    Dgl1.Item(Col1Unit, mRow).Tag = AgL.VNull(DtItem.Rows(0)("ShowDimensionDetailInSales"))
                    FOpenDimensionWindow(mRow, Col1Item)

                    If Dgl2(Col1Value, rowRateType).Value <> "" Then
                        mQry = "select Rate from RateListDetail  With (NoLock) where Item ='" & Dgl1.Item(Col1Item, mRow).Tag & "' and RateType='" & Dgl2(Col1Value, rowRateType).Tag & "'"
                        DtItem = AgL.FillData(mQry, AgL.GCn).Tables(0)
                        If DtItem.Rows.Count > 0 Then
                            Dgl1.Item(Col1Rate, mRow).Value = AgL.VNull(DtItem.Rows(0)("Rate"))
                        End If
                    Else
                        If (FDivisionNameForCustomization(13) = "JAIN BROTHERS" Or FDivisionNameForCustomization(11) = "BOOK SHOPEE") Then
                            If AgL.XNull(Dgl2(Col1Value, rowCatalog).Value) <> "" Then
                                mQry = "select Max(Rate) as Rate from CatalogDetail  With (NoLock) where Item ='" & Dgl1.Item(Col1Item, mRow).Tag & "' "
                                DtItem = AgL.FillData(mQry, AgL.GCn).Tables(0)
                                If DtItem.Rows.Count > 0 Then
                                    Dgl1.Item(Col1Rate, mRow).Value = AgL.VNull(DtItem.Rows(0)("Rate"))
                                End If
                            Else
                                mQry = "select Rate from Item  With (NoLock) where code ='" & Dgl1.Item(Col1Item, mRow).Tag & "'"
                                DtItem = AgL.FillData(mQry, AgL.GCn).Tables(0)
                                If DtItem.Rows.Count > 0 Then
                                    Dgl1.Item(Col1Rate, mRow).Value = AgL.VNull(DtItem.Rows(0)("Rate"))
                                End If
                            End If
                        Else
                            mQry = "select Rate from RateListDetail  With (NoLock) where Item ='" & Dgl1.Item(Col1Item, mRow).Tag & "' and RateType Is Null"
                            DtItem = AgL.FillData(mQry, AgL.GCn).Tables(0)
                            If DtItem.Rows.Count > 0 Then
                                Dgl1.Item(Col1Rate, mRow).Value = AgL.VNull(DtItem.Rows(0)("Rate"))
                            End If
                        End If
                    End If

                    FSetSalesTaxGroupItemBasedOnRate(mRow)
                    FSetPersonalDiscount(mRow)

                End If


                If LblV_Type.Tag = Ncat.SaleInvoice Or LblV_Type.Tag = Ncat.SaleInvoiceOverlay Then
                    If CType(AgL.VNull(DtV_TypeSettings.Rows(0)("IsApplicable_SaleOrder")), Boolean) = True Then
                        If Dgl1.AgDataRow IsNot Nothing Then
                            If Dgl1.AgDataRow.Cells.Contains(Dgl1.AgDataRow.Cells("SaleInvoiceSr")) Then
                                Dgl1.Item(Col1SaleInvoiceSr, mRow).Value = AgL.XNull(Dgl1.AgDataRow.Cells("SaleInvoiceSr").Value)
                            Else
                                Dgl1.Item(Col1SaleInvoiceSr, mRow).Value = 1
                            End If
                        Else
                            Dgl1.Item(Col1SaleInvoiceSr, mRow).Value = 1
                        End If
                    End If

                    If ClsMain.IsScopeOfWorkContains(IndustryType.MedicalIndustry) Then
                        FOpenStockIn(mRow)
                    End If
                End If


                FShowTransactionHistory(ItemCode, mRow)

                Dgl1.Item(Col1CurrentStock, mRow).Value = ClsMain.FGetCurrentStock(ItemCode, Dgl1.Item(Col1Godown, mRow).Tag, DglMain.Item(Col1Value, rowV_Date).Value)
                LblCurrentStock.Text = Val(Dgl1.Item(Col1CurrentStock, mRow).Value)
            End If
        Catch ex As Exception
            MsgBox(ex.Message & " On Validating_Item Function ")
        End Try
    End Sub

    Private Sub Validating_Dimension1(ByVal mColumn As Integer, ByVal mRow As Integer)
        Dim DtTemp As DataTable = Nothing
        Dim DtItem As DataTable = Nothing
        Dim StrReturnTicked As String = ""
        Try
            If LblV_Type.Tag = Ncat.SaleReturn Then
                StrReturnTicked = FSaleInvoiceSelectionWindowForReturn(mRow, Col1Dimension1)
            End If

            If StrReturnTicked = "" Then
                FOpenDimensionWindow(mRow, Col1Dimension1)

                If Dgl2(Col1Value, rowRateType).Value <> "" Then
                    mQry = "select Rate from RateListDetail  With (NoLock) where Item ='" & Dgl1.Item(Col1Dimension1, mRow).Tag & "' and RateType='" & Dgl2(Col1Value, rowRateType).Tag & "'"
                    DtItem = AgL.FillData(mQry, AgL.GCn).Tables(0)
                    If DtItem.Rows.Count > 0 Then
                        Dgl1.Item(Col1Rate, mRow).Value = AgL.VNull(DtItem.Rows(0)("Rate"))
                    End If
                Else
                    mQry = "select Rate from RateListDetail  With (NoLock) where Item ='" & Dgl1.Item(Col1Dimension1, mRow).Tag & "' and RateType Is Null"
                    DtItem = AgL.FillData(mQry, AgL.GCn).Tables(0)
                    If DtItem.Rows.Count > 0 Then
                        Dgl1.Item(Col1Rate, mRow).Value = AgL.VNull(DtItem.Rows(0)("Rate"))
                    End If
                End If

                FSetSalesTaxGroupItemBasedOnRate(mRow)
                FSetPersonalDiscount(mRow)
                FGetRateConsideringAllDimensions(mRow)
            End If
        Catch ex As Exception
            MsgBox(ex.Message & " On Validating_Dimension1 Function ")
        End Try
    End Sub

    Private Sub Validating_Dimension2(ByVal mColumn As Integer, ByVal mRow As Integer)
        Dim DtTemp As DataTable = Nothing
        Dim DtItem As DataTable = Nothing
        Dim StrReturnTicked As String = ""
        Try
            If LblV_Type.Tag = Ncat.SaleReturn Then
                StrReturnTicked = FSaleInvoiceSelectionWindowForReturn(mRow, Col1Dimension2)
            End If

            If StrReturnTicked = "" Then
                FOpenDimensionWindow(mRow, Col1Dimension2)

                If Dgl2(Col1Value, rowRateType).Value <> "" Then
                    mQry = "select Rate from RateListDetail  With (NoLock) where Item ='" & Dgl1.Item(Col1Dimension2, mRow).Tag & "' and RateType='" & Dgl2(Col1Value, rowRateType).Tag & "'"
                    DtItem = AgL.FillData(mQry, AgL.GCn).Tables(0)
                    If DtItem.Rows.Count > 0 Then
                        Dgl1.Item(Col1Rate, mRow).Value = AgL.VNull(DtItem.Rows(0)("Rate"))
                    End If
                Else
                    mQry = "select Rate from RateListDetail  With (NoLock) where Item ='" & Dgl1.Item(Col1Dimension2, mRow).Tag & "' and RateType Is Null"
                    DtItem = AgL.FillData(mQry, AgL.GCn).Tables(0)
                    If DtItem.Rows.Count > 0 Then
                        Dgl1.Item(Col1Rate, mRow).Value = AgL.VNull(DtItem.Rows(0)("Rate"))
                    End If
                End If

                FSetSalesTaxGroupItemBasedOnRate(mRow)
                FSetPersonalDiscount(mRow)
                FGetRateConsideringAllDimensions(mRow)
            End If
        Catch ex As Exception
            MsgBox(ex.Message & " On Validating_DImension2 Function ")
        End Try
    End Sub
    Private Sub Validating_Dimension3(ByVal mColumn As Integer, ByVal mRow As Integer)
        Dim DtTemp As DataTable = Nothing
        Dim DtItem As DataTable = Nothing
        Dim StrReturnTicked As String = ""
        Try
            If LblV_Type.Tag = Ncat.SaleReturn Then
                StrReturnTicked = FSaleInvoiceSelectionWindowForReturn(mRow, Col1Dimension3)
            End If

            If StrReturnTicked = "" Then
                FOpenDimensionWindow(mRow, Col1Dimension3)

                If Dgl2(Col1Value, rowRateType).Value <> "" Then
                    mQry = "select Rate from RateListDetail  With (NoLock) where Item ='" & Dgl1.Item(Col1Dimension3, mRow).Tag & "' and RateType='" & Dgl2(Col1Value, rowRateType).Tag & "'"
                    DtItem = AgL.FillData(mQry, AgL.GCn).Tables(0)
                    If DtItem.Rows.Count > 0 Then
                        Dgl1.Item(Col1Rate, mRow).Value = AgL.VNull(DtItem.Rows(0)("Rate"))
                    End If
                Else
                    mQry = "select Rate from RateListDetail  With (NoLock) where Item ='" & Dgl1.Item(Col1Dimension3, mRow).Tag & "' and RateType Is Null"
                    DtItem = AgL.FillData(mQry, AgL.GCn).Tables(0)
                    If DtItem.Rows.Count > 0 Then
                        Dgl1.Item(Col1Rate, mRow).Value = AgL.VNull(DtItem.Rows(0)("Rate"))
                    End If
                End If

                FSetSalesTaxGroupItemBasedOnRate(mRow)
                FSetPersonalDiscount(mRow)
                FGetRateConsideringAllDimensions(mRow)
            End If


            If FDivisionNameForCustomization(15) = "AGARWAL UNIFORM" Then
                mQry = "Select Top 1 L.AdditionPer 
                        From SaleInvoice H With (NoLock)
                        Left Join SaleInvoiceDetail L With (NoLock) On H.DocID = L.DocId
                        Left Join Item SKU With (NoLock) On L.Item = SKU.Code
                        Where Sku.Dimension3 = '" & Dgl1.Item(Col1Dimension3, mRow).Tag & "' 
                        Order By H.V_Date Desc "
                DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)
                If DtTemp.Rows.Count > 0 Then
                    Dgl1.Item(Col1AdditionPer, mRow).Value = AgL.VNull(DtTemp.Rows(0)(0))
                End If
            End If

        Catch ex As Exception
            MsgBox(ex.Message & " On Validating_DImension3 Function ")
        End Try
    End Sub
    Private Sub Validating_Dimension4(ByVal mColumn As Integer, ByVal mRow As Integer)
        Dim DtTemp As DataTable = Nothing
        Dim DtItem As DataTable = Nothing
        Dim StrReturnTicked As String = ""
        Try
            If LblV_Type.Tag = Ncat.SaleReturn Then
                StrReturnTicked = FSaleInvoiceSelectionWindowForReturn(mRow, Col1Dimension4)
            End If

            If StrReturnTicked = "" Then
                FOpenDimensionWindow(mRow, Col1Dimension4)

                If Dgl2(Col1Value, rowRateType).Value <> "" Then
                    mQry = "select Rate from RateListDetail  With (NoLock) where Item ='" & Dgl1.Item(Col1Dimension4, mRow).Tag & "' and RateType='" & Dgl2(Col1Value, rowRateType).Tag & "'"
                    DtItem = AgL.FillData(mQry, AgL.GCn).Tables(0)
                    If DtItem.Rows.Count > 0 Then
                        Dgl1.Item(Col1Rate, mRow).Value = AgL.VNull(DtItem.Rows(0)("Rate"))
                    End If
                Else
                    mQry = "select Rate from RateListDetail  With (NoLock) where Item ='" & Dgl1.Item(Col1Dimension4, mRow).Tag & "' and RateType Is Null"
                    DtItem = AgL.FillData(mQry, AgL.GCn).Tables(0)
                    If DtItem.Rows.Count > 0 Then
                        Dgl1.Item(Col1Rate, mRow).Value = AgL.VNull(DtItem.Rows(0)("Rate"))
                    End If
                End If

                FSetSalesTaxGroupItemBasedOnRate(mRow)
                FSetPersonalDiscount(mRow)
                FGetRateConsideringAllDimensions(mRow)
            End If
        Catch ex As Exception
            MsgBox(ex.Message & " On Validating_DImension4 Function ")
        End Try
    End Sub
    Private Sub Validating_Size(ByVal mColumn As Integer, ByVal mRow As Integer)
        Dim DtTemp As DataTable = Nothing
        Dim DtItem As DataTable = Nothing
        Dim StrReturnTicked As String = ""
        Try
            If LblV_Type.Tag = Ncat.SaleReturn Then
                StrReturnTicked = FSaleInvoiceSelectionWindowForReturn(mRow, Col1Size)
            End If

            If StrReturnTicked = "" Then
                FOpenDimensionWindow(mRow, Col1Size)

                If Dgl2(Col1Value, rowRateType).Value <> "" Then
                    mQry = "select Rate from RateListDetail  With (NoLock) where Item ='" & Dgl1.Item(Col1Size, mRow).Tag & "' and RateType='" & Dgl2(Col1Value, rowRateType).Tag & "'"
                    DtItem = AgL.FillData(mQry, AgL.GCn).Tables(0)
                    If DtItem.Rows.Count > 0 Then
                        Dgl1.Item(Col1Rate, mRow).Value = AgL.VNull(DtItem.Rows(0)("Rate"))
                    End If
                Else
                    mQry = "select Rate from RateListDetail  With (NoLock) where Item ='" & Dgl1.Item(Col1Size, mRow).Tag & "' and RateType Is Null"
                    DtItem = AgL.FillData(mQry, AgL.GCn).Tables(0)
                    If DtItem.Rows.Count > 0 Then
                        Dgl1.Item(Col1Rate, mRow).Value = AgL.VNull(DtItem.Rows(0)("Rate"))
                    End If
                End If

                FSetSalesTaxGroupItemBasedOnRate(mRow)
                FSetPersonalDiscount(mRow)
                FGetRateConsideringAllDimensions(mRow)
            End If

            If FDivisionNameForCustomization(15) = "AGARWAL UNIFORM" Then
                mQry = "Select IfNull(Length,0) From ItemSize With (NoLock) Where Code = '" & Dgl1.Item(Col1Size, mRow).Tag & "' "
                Dgl1.Item(Col1UnitMultiplier, mRow).Value = AgL.Dman_Execute(mQry, AgL.GCn).ExecuteScalar()
            End If

        Catch ex As Exception
            MsgBox(ex.Message & " On Validating_Size Function ")
        End Try
    End Sub

    Private Function FSaleInvoiceSelectionWindowForReturn(mRow As Integer, mColumnName As String) As String
        Dim DtBarcodeSiteDetail As DataTable = Nothing
        Dim StrRtn As String = ""
        If AgL.XNull(Dgl1.Item(Col1Barcode, mRow).Tag) <> "" Then
            mQry = "Select B.LastTrnDocID, B.LastTrnSr, 
                    '" & IIf(AgL.PubPrintDivisionShortNameOnDocumentsYn, AgL.PubDivShortName, "") & IIf(AgL.PubPrintSiteShortNameOnDocumentsYn, AgL.PubSiteShortName, "") & "' || (Case When VT.Short_Name Is Not Null Then VT.Short_Name Else '' End) || H.ManualRefNo as ReferenceNo,
                    H.V_Date As ReferenceDate,
                    L.DocQty, L.Qty, L.Rate, L.DiscountPer, L.DiscountAmount, L.AdditionalDiscountPer, L.AdditionalDiscountAmount,
                    L.DocId As SaleInvoice, L.Sr As SaleInvoiceSr                                                
                    From BarcodeSiteDetail B  With (NoLock) 
                    Left Join SaleInvoiceDetail L  With (NoLock) On B.LastTrnDocID = L.DocID And B.LastTrnSr = L.Sr
                    Left Join SaleInvoice H On L.DocID = H.DocID
                    Left Join Voucher_Type VT On H.V_Type = Vt.V_Type
                    Where B.Code = '" & Dgl1.Item(Col1Barcode, mRow).Tag & "' 
                    And B.Div_Code = '" & TxtDivision.Tag & "' And B.Site_Code = '" & DglMain.Item(Col1Value, rowSite_Code).Tag & "' "
            DtBarcodeSiteDetail = AgL.FillData(mQry, AgL.GCn).Tables(0)
            If DtBarcodeSiteDetail.Rows.Count > 0 Then
                Dgl1.Item(Col1ReferenceDocId, mRow).Value = AgL.XNull(DtBarcodeSiteDetail.Rows(0)("LastTrnDocID"))
                Dgl1.Item(Col1ReferenceDocIdSr, mRow).Value = AgL.XNull(DtBarcodeSiteDetail.Rows(0)("LastTrnSr"))
                Dgl1.Item(Col1ReferenceNo, mRow).Value = AgL.XNull(DtBarcodeSiteDetail.Rows(0)("ReferenceNo"))
                Dgl1.Item(Col1ReferenceDate, mRow).Value = ClsMain.FormatDate(AgL.XNull(DtBarcodeSiteDetail.Rows(0)("ReferenceDate")))
                Dgl1.Item(Col1SaleInvoice, mRow).Tag = AgL.XNull(DtBarcodeSiteDetail.Rows(0)("SaleInvoice"))
                Dgl1.Item(Col1SaleInvoiceSr, mRow).Value = AgL.XNull(DtBarcodeSiteDetail.Rows(0)("SaleInvoiceSr"))
                Dgl1.Item(Col1DocQty, mRow).Value = AgL.VNull(DtBarcodeSiteDetail.Rows(0)("DocQty"))
                Dgl1.Item(Col1Qty, mRow).Value = AgL.VNull(DtBarcodeSiteDetail.Rows(0)("Qty"))
                Dgl1.Item(Col1Rate, mRow).Value = AgL.VNull(DtBarcodeSiteDetail.Rows(0)("Rate"))
                Dgl1.Item(Col1DiscountPer, mRow).Value = AgL.VNull(DtBarcodeSiteDetail.Rows(0)("DiscountPer"))
                Dgl1.Item(Col1DiscountAmount, mRow).Value = AgL.VNull(DtBarcodeSiteDetail.Rows(0)("DiscountAmount"))
                Dgl1.Item(Col1AdditionalDiscountPer, mRow).Value = AgL.VNull(DtBarcodeSiteDetail.Rows(0)("AdditionalDiscountPer"))
                Dgl1.Item(Col1AdditionalDiscountAmount, mRow).Value = AgL.VNull(DtBarcodeSiteDetail.Rows(0)("AdditionalDiscountAmount"))
            End If
        Else
            Dim bContraWindowBaseField As String = AgL.XNull(ClsMain.FGetSettings(SettingFields.ContraWindowBaseField, SettingType.Item,
                                TxtDivision.Tag, DglMain.Item(Col1Value, rowSite_Code).Tag,
                                "", Dgl1.Item(Col1ItemType, mRow).Tag, "", "", ""))

            If bContraWindowBaseField = "None" Or bContraWindowBaseField = "" Then
                bContraWindowBaseField = Col1Item
            End If

            If bContraWindowBaseField = Dgl1.Columns(mColumnName).Name Then
                StrRtn = FHPGD_PendingSaleChallan(mRow)
                If StrRtn <> "" Then
                    FillGridForSaleReturn(StrRtn, True)
                Else
                    If MsgBox("No Invoice found to return for selected customer. Do you want to continue without invoice references?", vbYesNo) = MsgBoxResult.No Then
                        Dgl1.Rows(Dgl1.CurrentCell.RowIndex).Visible = False
                        StrRtn = "."
                        Dgl1.Rows.Add()
                    Else
                        If FDivisionNameForCustomization(4) = "X DEVI" Then
                            Dgl1.Item(Col1Rate, mRow).Value = FGetLastSaleRate(mRow)
                        End If
                    End If
                End If
            End If
        End If
        FSaleInvoiceSelectionWindowForReturn = StrRtn
    End Function


    Private Function FSaleInvoiceSelectionWindowForReturnOneInvoice() As String
        Dim DtBarcodeSiteDetail As DataTable = Nothing
        Dim StrRtn As String = ""

        If AgL.XNull(Dgl2.Item(Col1Value, rowPartyDocNo).Tag) = "" Then Exit Function

        StrRtn = FHPGD_PendingSaleChallanForOneInvoice(Dgl2.Item(Col1Value, rowPartyDocNo).Tag)
        If StrRtn <> "" Then
            FillGridForSaleReturn(StrRtn, True)
            'Else
            '    If MsgBox("No Invoice found to return for selected customer. Do you want to continue without invoice references?", vbYesNo) = MsgBoxResult.No Then
            '        Dgl1.Rows(Dgl1.CurrentCell.RowIndex).Visible = False
            '        StrRtn = "."
            '        Dgl1.Rows.Add()
            '    End If
        End If

        FSaleInvoiceSelectionWindowForReturnOneInvoice = StrRtn
    End Function

    Private Sub FOpenDimensionWindow(mRow As Integer, mColumnName As String)
        If ClsMain.IsScopeOfWorkContains(IndustryType.KiranaIndustry) Then Exit Sub
        Dim bDimensionWindowBaseField As String = AgL.XNull(ClsMain.FGetSettings(SettingFields.DimensionWindowBaseField, SettingType.Item,
                TxtDivision.Tag, DglMain.Item(Col1Value, rowSite_Code).Tag,
                "", Dgl1.Item(Col1ItemType, mRow).Tag, "", "", ""))

        If bDimensionWindowBaseField = "None" Or bDimensionWindowBaseField = "" Then
            bDimensionWindowBaseField = Col1Item
        End If

        If bDimensionWindowBaseField = mColumnName Then
            Dgl1.Item(Col1DocQty, mRow).Tag = Nothing
            If (Dgl1.Item(Col1Unit, mRow).Tag) Then
                Dgl1.Item(Col1DocQty, mRow).Style.ForeColor = Color.Blue
                ShowSaleInvoiceDimensionDetail(mRow)
            End If
        End If
    End Sub
    Private Sub FSetPersonalDiscount(mRow As Integer)
        Dim DtItem As DataTable
        Dim DtPersonDiscount As DataTable


        'If TxtNature.Text.ToUpper <> "CASH" Then
        '    mQry = "Select * 
        '                from ItemGroupPerson With (NoLock) 
        '                Where ItemCategory Is Null
        '                And ItemGroup Is Null
        '                And Person  = '" & DglMain.Item(Col1Value, rowSaleToParty).Tag & "' "
        '    DtPersonDiscount = AgL.FillData(mQry, AgL.GCn).tables(0)
        '    If DtPersonDiscount.Rows.Count > 0 Then
        '        Dgl1.Item(Col1PersonalDiscountPer, mRow).Value = AgL.VNull(DtPersonDiscount.Rows(0)("DiscountPer"))
        '    End If

        '    mQry = "Select * 
        '                from ItemGroupPerson With (NoLock) 
        '                Where (ItemCategory = '" & Dgl1.Item(Col1ItemCategory, mRow).Tag & "' Or ItemCategory Is Null)
        '                And ItemGroup  = '" & Dgl1.Item(Col1ItemGroup, mRow).Tag & "'
        '                And Person  = '" & DglMain.Item(Col1Value, rowSaleToParty).Tag & "'
        '               "
        '    DtItem = AgL.FillData(mQry, AgL.GCn).tables(0)
        '    If DtItem.Rows.Count > 0 Then
        '        If AgL.VNull(DtItem.Rows(0)("DiscountPer")) > 0 Then
        '            If Dgl1(Col1DiscountCalculationPattern, mRow).Value.ToString.ToUpper() = AgL.XNull(DtItem.Rows(0)("DiscountCalculationPattern")).toupper() Or Dgl1(Col1DiscountCalculationPattern, mRow).Value.ToString.ToUpper() = "" Then
        '                Dgl1.Item(Col1PersonalDiscountPer, mRow).Value = AgL.VNull(DtItem.Rows(0)("DiscountPer"))
        '            Else
        '                MsgBox("Discount Calculation Pattern is changes since last invoice.")
        '            End If
        '        End If

        '        If AgL.VNull(DtItem.Rows(0)("AdditionalDiscountPer")) > 0 Then
        '            If Dgl1(Col1AdditionalDiscountCalculationPattern, mRow).Value.ToString.ToUpper() = AgL.XNull(DtItem.Rows(0)("AdditionalDiscountCalculationPattern")).toupper() Or Dgl1(Col1AdditionalDiscountCalculationPattern, mRow).Value.ToString.ToUpper() = "" Then
        '                Dgl1.Item(Col1PersonalAdditionalDiscountPer, mRow).Value = AgL.VNull(DtItem.Rows(0)("AdditionalDiscountPer"))
        '            Else
        '                MsgBox("Additional Discount Calculation Pattern is changes since last invoice.")
        '            End If
        '        End If

        '        If AgL.VNull(DtItem.Rows(0)("AdditionPer")) > 0 Then
        '            If Dgl1(Col1AdditionCalculationPattern, mRow).Value.ToString.ToUpper() = AgL.XNull(DtItem.Rows(0)("AdditionCalculationPattern")).toupper() Or Dgl1(Col1AdditionCalculationPattern, mRow).Value.ToString.ToUpper() = "" Then
        '                Dgl1.Item(Col1PersonalAdditionPer, mRow).Value = AgL.VNull(DtItem.Rows(0)("AdditionPer"))
        '            Else
        '                MsgBox("Additional Discount Calculation Pattern is changes since last invoice.")
        '            End If
        '        End If
        '    End If


        'End If

        If TxtNature.Text.ToUpper <> "CASH" Then



            mQry = "Select * From PersonDiscount 
                    Where ItemGroup  = '" & Dgl1.Item(Col1ItemGroup, mRow).Tag & "'
                    And Person  = '" & DglMain.Item(Col1Value, rowSaleToParty).Tag & "'"
            DtPersonDiscount = AgL.FillData(mQry, AgL.GCn).tables(0)
            If DtPersonDiscount.Rows.Count > 0 Then
                Dgl1.Item(Col1PersonalDiscountPer, mRow).Value = AgL.VNull(DtPersonDiscount.Rows(0)("DiscountPer"))
            Else
                Dgl1.Item(Col1PersonalDiscountPer, mRow).Value = "0"
            End If

            If Dgl1.Item(Col1PersonalDiscountPer, mRow).Value = 0 Then
                mQry = "Select * 
                    from PersonDiscount With (NoLock) 
                    Where ItemCategory Is Null
                    And ItemGroup Is Null
                    And Person  = '" & DglMain.Item(Col1Value, rowSaleToParty).Tag & "' "
                DtPersonDiscount = AgL.FillData(mQry, AgL.GCn).tables(0)
                If DtPersonDiscount.Rows.Count > 0 Then
                    Dgl1.Item(Col1PersonalDiscountPer, mRow).Value = AgL.VNull(DtPersonDiscount.Rows(0)("DiscountPer"))
                End If
            End If

            mQry = "Select * From PersonAdditionalDiscount 
                    Where ItemGroup  = '" & Dgl1.Item(Col1ItemGroup, mRow).Tag & "'
                    And Person  = '" & DglMain.Item(Col1Value, rowSaleToParty).Tag & "'"
            DtPersonDiscount = AgL.FillData(mQry, AgL.GCn).tables(0)
            If DtPersonDiscount.Rows.Count > 0 Then
                Dgl1.Item(Col1PersonalAdditionalDiscountPer, mRow).Value = AgL.VNull(DtPersonDiscount.Rows(0)("AdditionalDiscountPer"))
            Else
                Dgl1.Item(Col1PersonalAdditionalDiscountPer, mRow).Value = "0"
            End If


            mQry = "Select * From PersonAddition
                    Where ItemGroup  = '" & Dgl1.Item(Col1ItemGroup, mRow).Tag & "'
                    And Person  = '" & DglMain.Item(Col1Value, rowSaleToParty).Tag & "'"
            DtPersonDiscount = AgL.FillData(mQry, AgL.GCn).tables(0)
            If DtPersonDiscount.Rows.Count > 0 Then
                Dgl1.Item(Col1PersonalAdditionPer, mRow).Value = AgL.VNull(DtPersonDiscount.Rows(0)("AdditionPer"))
            Else
                Dgl1.Item(Col1PersonalAdditionPer, mRow).Value = "0"
            End If
        End If



        If AgL.XNull(DtV_TypeSettings.Rows(0)("DiscountSuggestionPattern")).ToUpper() = DiscountSuggestPattern.FillAutomatically.ToUpper Then
            If Val(Dgl1.Item(Col1PersonalDiscountPer, mRow).Value) <> 0 Then
                Dgl1.Item(Col1DiscountPer, mRow).Value = Format(Val(Dgl1.Item(Col1PersonalDiscountPer, mRow).Value), "0.000")
            Else
                Dgl1.Item(Col1DiscountPer, mRow).Value = Format(Val(Dgl1.Item(Col1DefaultDiscountPer, mRow).Value), "0.000")
            End If
            If Val(Dgl1.Item(Col1PersonalAdditionalDiscountPer, mRow).Value) <> 0 Then
                Dgl1.Item(Col1AdditionalDiscountPer, mRow).Value = Format(Val(Dgl1.Item(Col1PersonalAdditionalDiscountPer, mRow).Value), "0.000")
            Else
                Dgl1.Item(Col1AdditionalDiscountPer, mRow).Value = Format(Val(Dgl1.Item(Col1DefaultAdditionalDiscountPer, mRow).Value), "0.000")
            End If
            If Val(Dgl1.Item(Col1PersonalAdditionPer, mRow).Value) <> 0 Then
                Dgl1.Item(Col1AdditionPer, mRow).Value = Format(Val(Dgl1.Item(Col1PersonalAdditionPer, mRow).Value), "0.000")
            Else
                Dgl1.Item(Col1AdditionPer, mRow).Value = Format(Val(Dgl1.Item(Col1DefaultAdditionPer, mRow).Value), "0.000")
            End If


        End If
    End Sub

    Private Sub FSetSalesTaxGroupItemBasedOnRate(mRowIndex As Integer)
        Dim DtMain As DataTable
        If Dgl1.Item(Col1ItemCategory, mRowIndex).Tag <> "" And Val(Dgl1.Item(Col1Rate, mRowIndex).Value) > 0 Then
            If AgL.PubServerName = "" Then
                mQry = "Select SalesTaxGroupItem From ItemCategorySalesTax  With (NoLock)
                Where Code='" & Dgl1.Item(Col1ItemCategory, mRowIndex).Tag & "' 
                And RateGreaterThan < " & Val(Dgl1.Item(Col1Rate, mRowIndex).Value) & " 
                And WEF <= " & AgL.Chk_Date(CDate(DglMain.Item(Col1Value, rowV_Date).Value).ToString("s")) & " 
                Order By WEF Desc, RateGreaterThan Desc Limit 1"
            Else
                mQry = "Select Top 1 SalesTaxGroupItem From ItemCategorySalesTax  With (NoLock)
                Where Code='" & Dgl1.Item(Col1ItemCategory, mRowIndex).Tag & "' 
                And RateGreaterThan < " & Val(Dgl1.Item(Col1Rate, mRowIndex).Value) & " 
                And WEF <= " & AgL.Chk_Date(CDate(DglMain.Item(Col1Value, rowV_Date).Value).ToString("s")) & " 
                Order By WEF Desc, RateGreaterThan Desc"
            End If
            DtMain = AgL.FillData(mQry, AgL.GCn).Tables(0)
            If DtMain.Rows.Count > 0 Then
                Dgl1.Item(Col1SalesTaxGroup, mRowIndex).Value = AgL.XNull(DtMain.Rows(0)("SalesTaxGroupItem"))
                Dgl1.Item(Col1SalesTaxGroup, mRowIndex).Tag = AgL.XNull(DtMain.Rows(0)("SalesTaxGroupItem"))
            End If
        End If
    End Sub


    Private Sub Validating_ItemCategory(ByVal mColumn As Integer, ByVal mRow As Integer)
        Dim DtTemp As DataTable = Nothing
        Try
            Dgl1.Item(Col1ItemGroup, mRow).Value = ""
            Dgl1.Item(Col1ItemGroup, mRow).Tag = ""
            Dgl1.Item(Col1Item, mRow).Value = ""
            Dgl1.Item(Col1Item, mRow).Tag = ""
            Dgl1.Item(Col1Unit, mRow).Value = ""
            Dgl1.Item(Col1Dimension1, mRow).Value = ""
            Dgl1.Item(Col1Dimension1, mRow).Tag = ""
            Dgl1.Item(Col1Dimension2, mRow).Value = ""
            Dgl1.Item(Col1Dimension2, mRow).Tag = ""

            Dgl1.AgHelpDataSet(Col1ItemGroup) = Nothing
            Dgl1.AgHelpDataSet(Col1Item) = Nothing

            Dgl1.AgHelpDataSet(Col1Dimension1) = Nothing
            Dgl1.AgHelpDataSet(Col1Dimension2) = Nothing
            Dgl1.AgHelpDataSet(Col1Dimension3) = Nothing
            Dgl1.AgHelpDataSet(Col1Dimension4) = Nothing
            Dgl1.AgHelpDataSet(Col1Size) = Nothing
            Dgl1.AgHelpDataSet(Col1ItemInvoiceGroup) = Nothing


            mQry = " Select Ic.Unit, Ic.ItemType, It.Name As ItemTypeName, 
                    Case When IfNull(U.ShowDimensionDetailInSales,0) = 1 Or IfNull(Ic.ShowDimensionDetailInSales,0) = 1 Then 1
                         Else 0 End As ShowDimensionDetailInSales, 
                    U.DecimalPlaces as QtyDecimalPlaces, DU.DecimalPlaces as DealQtyDecimalPlaces, Ic.* 
                    From ItemCategory Ic 
                    LEFT JOIN ItemType It On Ic.ItemType = It.Code
                    Left Join Unit U  With (NoLock) On Ic.Unit = U.Code 
                    LEFT JOIN Unit Du With (NoLock) On Ic.DealUnit = Du.Code 
                    Where Ic.Code = '" & Dgl1.Item(Col1ItemCategory, mRow).Tag & "'"
            Dim DtItemCategory As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)
            If DtItemCategory.Rows.Count > 0 Then
                Dgl1.Item(Col1Unit, mRow).Value = AgL.XNull(DtItemCategory.Rows(0)("Unit"))
                Dgl1.Item(Col1Unit, mRow).Tag = AgL.VNull(DtItemCategory.Rows(0)("ShowDimensionDetailInSales"))
                Dgl1.Item(Col1ItemType, mRow).Tag = AgL.XNull(DtItemCategory.Rows(0)("ItemType"))
                Dgl1.Item(Col1ItemType, mRow).Value = AgL.XNull(DtItemCategory.Rows(0)("ItemTypeName"))
                Dgl1.Item(Col1SalesTaxGroup, mRow).Tag = AgL.XNull(DtItemCategory.Rows(0)("SalesTaxGroup"))
                Dgl1.Item(Col1SalesTaxGroup, mRow).Value = AgL.XNull(DtItemCategory.Rows(0)("SalesTaxGroup"))
                Dgl1.Item(Col1QtyDecimalPlaces, mRow).Value = AgL.VNull(DtItemCategory.Rows(0)("QtyDecimalPlaces"))
                Dgl1.Item(Col1MaintainStockYn, mRow).Value = AgL.VNull(DtItemCategory.Rows(0)("MaintainStockYn"))
                Dgl1.Item(Col1DealUnit, mRow).Value = AgL.XNull(DtItemCategory.Rows(0)("DealUnit"))
                Dgl1.Item(Col1DealQtyDecimalPlaces, mRow).Value = AgL.VNull(DtItemCategory.Rows(0)("DealQtyDecimalPlaces"))
            End If

            Dim DrItemTypeSetting As DataRow
            DrItemTypeSetting = FItemTypeSettings(Dgl1(Col1ItemType, mRow).Tag)
            Dgl1(Col1DiscountCalculationPattern, mRow).Value = AgL.XNull(DrItemTypeSetting("DiscountCalculationPatternSale"))
            Dgl1(Col1AdditionalDiscountCalculationPattern, mRow).Value = AgL.XNull(DrItemTypeSetting("AdditionalDiscountCalculationPatternSale"))
            Dgl1(Col1AdditionCalculationPattern, mRow).Value = AgL.XNull(DrItemTypeSetting("AdditionCalculationPatternSale"))

        Catch ex As Exception
            MsgBox(ex.Message & " On Validating_ItemCategory Function ")
        End Try
    End Sub
    Private Sub Validating_ItemGroup(ByVal mColumn As Integer, ByVal mRow As Integer)
        Dim DtTemp As DataTable = Nothing
        Try
            Dgl1.Item(Col1Item, mRow).Value = ""
            Dgl1.Item(Col1Item, mRow).Tag = ""
            Dgl1.Item(Col1Unit, mRow).Value = ""
            Dgl1.Item(Col1Dimension1, mRow).Value = ""
            Dgl1.Item(Col1Dimension1, mRow).Tag = ""
            Dgl1.Item(Col1Dimension2, mRow).Value = ""
            Dgl1.Item(Col1Dimension2, mRow).Tag = ""

            Dgl1.AgHelpDataSet(Col1Item) = Nothing
            Dgl1.AgHelpDataSet(Col1Dimension1) = Nothing
            Dgl1.AgHelpDataSet(Col1Dimension2) = Nothing
            Dgl1.AgHelpDataSet(Col1Dimension3) = Nothing
            Dgl1.AgHelpDataSet(Col1Dimension4) = Nothing
            Dgl1.AgHelpDataSet(Col1Size) = Nothing
            Dgl1.AgHelpDataSet(Col1ItemInvoiceGroup) = Nothing

            mQry = "Select IG.ItemInvoiceGroup, I.Description 
                   From Item IG 
                   Left Join Item I On IG.ItemInvoiceGroup = I.Code 
                   where IG.Code = '" & Dgl1.Item(mColumn, mRow).Tag & "' "
            DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)
            If DtTemp.Rows.Count > 0 Then
                Dgl1.Item(Col1ItemInvoiceGroup, mRow).Tag = AgL.XNull(DtTemp.Rows(0)("ItemInvoiceGroup"))
                Dgl1.Item(Col1ItemInvoiceGroup, mRow).Value = AgL.XNull(DtTemp.Rows(0)("Description"))

                If mRow > 0 Then
                    If AgL.XNull(Dgl1.Item(Col1ItemInvoiceGroup, mRow).Tag) <> AgL.XNull(Dgl1.Item(Col1ItemInvoiceGroup, mRow - 1).Tag) And
                            AgL.XNull(Dgl1.Item(Col1ItemInvoiceGroup, mRow).Tag) <> "" And AgL.XNull(Dgl1.Item(Col1ItemInvoiceGroup, mRow - 1).Tag) <> "" Then
                        MsgBox("Invoice group At Row No " & Dgl1.Item(ColSNo, mRow).Value & " does not match with " & Dgl1.Item(ColSNo, mRow - 1).Value, MsgBoxStyle.Information)
                        Dgl1.CurrentCell = Dgl1.Item(Col1ItemGroup, mRow) : Dgl1.Focus() : MakeGridCurrentCellNothing(Dgl1.Name)
                    End If
                End If
            End If

        Catch ex As Exception
            MsgBox(ex.Message & " On Validating_ItemGroup Function ")
        End Try
    End Sub
    Private Sub Dgl1_EditingControl_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles Dgl1.EditingControl_Validating
        If Topctrl1.Mode = "Browse" Then Exit Sub
        Dim mRowIndex As Integer, mColumnIndex As Integer
        Dim DrTemp As DataRow() = Nothing
        Try
            mRowIndex = Dgl1.CurrentCell.RowIndex
            mColumnIndex = Dgl1.CurrentCell.ColumnIndex
            If Dgl1.Item(mColumnIndex, mRowIndex).Value Is Nothing Then Dgl1.Item(mColumnIndex, mRowIndex).Value = ""
            Select Case Dgl1.Columns(Dgl1.CurrentCell.ColumnIndex).Name

                Case Col1Item, Col1ItemCode
                    If AgL.XNull(Dgl1.Item(Col1ItemCode, mRowIndex).Value) <> "" Then
                        mQry = " Select Code From Item Where ManualCode = '" & Dgl1.Item(Col1ItemCode, mRowIndex).Value & "'"
                        Dgl1.Item(Col1ItemCode, mRowIndex).Tag = AgL.XNull(AgL.Dman_Execute(mQry, AgL.GCn).ExecuteScalar())
                    End If
                    Validating_ItemCode(Dgl1.Item(mColumnIndex, mRowIndex).Tag, mColumnIndex, mRowIndex)
                Case Col1ItemCategory
                    Validating_ItemCategory(mColumnIndex, mRowIndex)
                    If Dgl1.Item(Col1Unit, mRowIndex).Tag Then ShowSaleInvoiceDimensionDetail(Dgl1.CurrentCell.RowIndex, False)
                Case Col1ItemGroup
                    Validating_ItemGroup(mColumnIndex, mRowIndex)
                Case Col1Dimension1
                    Validating_Dimension1(mColumnIndex, mRowIndex)
                    If Dgl1.Item(Col1Unit, mRowIndex).Tag Then ShowSaleInvoiceDimensionDetail(Dgl1.CurrentCell.RowIndex, False)
                Case Col1Dimension2
                    Validating_Dimension2(mColumnIndex, mRowIndex)
                    If Dgl1.Item(Col1Unit, mRowIndex).Tag Then ShowSaleInvoiceDimensionDetail(Dgl1.CurrentCell.RowIndex, False)
                Case Col1Dimension3
                    Validating_Dimension3(mColumnIndex, mRowIndex)
                    If Dgl1.Item(Col1Unit, mRowIndex).Tag Then ShowSaleInvoiceDimensionDetail(Dgl1.CurrentCell.RowIndex, False)
                    If FDivisionNameForCustomization(14) = "PRATHAM APPARE" Or
            FDivisionNameForCustomization(15) = "AGARWAL UNIFORM" Then
                        If Dgl1.Item(Col1Dimension1, mRowIndex).Tag = "" Then
                            FCreateHelpDimension1(mRowIndex)
                            If Dgl1.AgHelpDataSet(Col1Dimension1).Tables(0).Rows.Count = 1 Then
                                Dgl1.Item(Col1Dimension1, mRowIndex).Tag = AgL.XNull(Dgl1.AgHelpDataSet(Col1Dimension1).Tables(0).Rows(0)("Code"))
                                Dgl1.Item(Col1Dimension1, mRowIndex).Value = AgL.XNull(Dgl1.AgHelpDataSet(Col1Dimension1).Tables(0).Rows(0)("Description"))
                            End If
                        End If
                        If Dgl1.Item(Col1Dimension2, mRowIndex).Tag = "" Then
                            FCreateHelpDimension2(mRowIndex)
                            If Dgl1.AgHelpDataSet(Col1Dimension2).Tables(0).Rows.Count = 1 Then
                                Dgl1.Item(Col1Dimension2, mRowIndex).Tag = AgL.XNull(Dgl1.AgHelpDataSet(Col1Dimension2).Tables(0).Rows(0)("Code"))
                                Dgl1.Item(Col1Dimension2, mRowIndex).Value = AgL.XNull(Dgl1.AgHelpDataSet(Col1Dimension2).Tables(0).Rows(0)("Description"))
                                FOpenMultiLineUI(mRowIndex)
                            End If
                        End If
                    End If
                Case Col1Dimension4
                    Validating_Dimension4(mColumnIndex, mRowIndex)
                    If Dgl1.Item(Col1Unit, mRowIndex).Tag Then ShowSaleInvoiceDimensionDetail(Dgl1.CurrentCell.RowIndex, False)
                Case Col1Size
                    Validating_Size(mColumnIndex, mRowIndex)
                    If Dgl1.Item(Col1Unit, mRowIndex).Tag Then ShowSaleInvoiceDimensionDetail(Dgl1.CurrentCell.RowIndex, False)
                Case Col1Rate
                    FSetSalesTaxGroupItemBasedOnRate(mRowIndex)
                Case Col1ReferenceNo
                    If Dgl1.Item(Col1ReferenceNo, mRowIndex).Tag <> "" Then
                        Dgl1.Item(Col1ReferenceDocId, mRowIndex).Value = Dgl1.Item(Col1ReferenceNo, mRowIndex).Tag
                        Dgl1.Item(Col1ReferenceDate, mRowIndex).Value = ClsMain.FormatDate(AgL.Dman_Execute("Select V_Date From SaleInvoice Where DocID = '" & Dgl1.Item(Col1ReferenceNo, mRowIndex).Tag & "' ", AgL.GCn).ExecuteScalar())
                    End If

            End Select
            Call Calculation()
            Call Calculation()


            If Val(TxtCreditLimit.Text) > 0 And LblV_Type.Tag = Ncat.SaleInvoice Then
                If Val(AgCalcGrid1.AgChargesValue(AgTemplate.ClsMain.Charges.NETAMOUNT, AgStructure.AgCalcGrid.AgCalcGridColumn.Col_Amount)) + IIf(Topctrl1.Mode = "Add", Val(TxtCurrBal.Text), 0) > Val(TxtCreditLimit.Text) Then
                    If AgL.PubUserName.ToUpper = "SA" Or AgL.PubUserName.ToUpper = "SUPER" Then
                        If Val(TxtCreditLimit.Tag) = 0 Then
                            If MsgBox("Total Balance Of " & DglMain.Item(Col1Value, rowSaleToParty).Value & " Is Exceeding Its Credit Limit " & TxtCreditLimit.Text & "., Do you want to continue?", vbYesNo) = MsgBoxResult.Yes Then
                                TxtCreditLimit.Tag = 1
                            End If
                        End If
                    Else
                        If AgL.XNull(AgL.PubDtEnviro.Rows(0)("ActionIfCreditLimitExceeds")) = ActionIfCreditLimitExceeds.AlertAndStopTransaction Then
                            MsgBox("Total Balance Of " & DglMain.Item(Col1Value, rowSaleToParty).Value & " Is Exceeding Its Credit Limit " & TxtCreditLimit.Text & ".")
                        ElseIf AgL.XNull(AgL.PubDtEnviro.Rows(0)("ActionIfCreditLimitExceeds")) = ActionIfCreditLimitExceeds.AlertAndAskToContinue Then
                            If Val(TxtCreditLimit.Tag) = 0 Then
                                If MsgBox("Total Balance Of " & DglMain.Item(Col1Value, rowSaleToParty).Value & " Is Exceeding Its Credit Limit " & TxtCreditLimit.Text & "., Do you want to continue?", vbYesNo) = MsgBoxResult.Yes Then
                                    TxtCreditLimit.Tag = 1
                                End If
                            End If
                        Else
                            MsgBox("Total Balance Of " & DglMain.Item(Col1Value, rowSaleToParty).Value & " Is Exceeding Its Credit Limit " & TxtCreditLimit.Text & ".")
                        End If
                    End If
                End If
            End If

            'Only For opening Multi Line UI window
            Select Case Dgl1.Columns(Dgl1.CurrentCell.ColumnIndex).Name
                Case Col1ItemCategory, Col1ItemGroup, Col1Item, Col1Dimension1, Col1Dimension2, Col1Dimension3, Col1Dimension4
                    If Dgl1.Columns(mColumnIndex).Name = AgL.XNull(ClsMain.FGetSettings(SettingFields.MultiLineUIWindowBaseField, SettingType.Item,
                                                TxtDivision.Tag, DglMain.Item(Col1Value, rowSite_Code).Tag,
                                                "", Dgl1.Item(Col1ItemType, mRowIndex).Tag, "", "", "")) Then
                        Select Case LblV_Type.Tag
                            Case Ncat.SaleInvoice
                                FOpenMultiLineUI(mRowIndex)
                            Case Ncat.SaleOrder
                                FOpenMultiLineUI(mRowIndex)
                        End Select
                    End If

                    If Dgl1.Columns(mColumnIndex).Name = AgL.XNull(ClsMain.FGetSettings(SettingFields.ContraWindowBaseField, SettingType.Item,
                                                TxtDivision.Tag, DglMain.Item(Col1Value, rowSite_Code).Tag,
                                                "", Dgl1.Item(Col1ItemType, mRowIndex).Tag, "", "", "")) Then
                        Select Case LblNCatNature.Tag
                            Case NCatNature.Invoice
                                If Dgl2.Rows(rowBtnPendingSaleOrder).Visible = True Then
                                    If ClsMain.IsScopeOfWorkContains(IndustryType.SubIndustryType.FallPico) Then
                                        FOpenSaleOrderForSaleInvoice_FallPico(-1)
                                    Else
                                        FOpenSaleOrderForSaleInvoice(mRowIndex)
                                    End If

                                    If ClsMain.IsScopeOfWorkContains(IndustryType.KiranaIndustry) Then
                                        FOpenStockGroupWise(mRowIndex)
                                    End If
                                End If
                        End Select
                    End If

                    If ClsMain.IsScopeOfWorkContains(IndustryType.KiranaIndustry) And
                            AgL.StrCmp(LblV_Type.Tag, Ncat.SaleOrder) = False Then
                        If (Dgl1.Item(Col1Unit, mRowIndex).Tag) Then
                            Dgl1.Item(Col1DocQty, mRowIndex).Style.ForeColor = Color.Blue
                            ShowSaleInvoiceDimensionDetail(mRowIndex)
                        End If
                    End If
            End Select
            FGeterateSkuName(mRowIndex)
            Call Calculation()
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub

    Private Sub DGL1_RowsAdded(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewRowsAddedEventArgs) Handles Dgl1.RowsAdded, Dgl1.RowsAdded
        sender(ColSNo, sender.Rows.Count - 1).Value = Trim(sender.Rows.Count)
    End Sub

    Private Sub FrmSaleOrder_BaseFunction_Calculation(ByVal ForceCall As Boolean) Handles Me.BaseFunction_Calculation
        mSW.Start()
        Dim I As Integer
        If Topctrl1.Mode = "Browse" Then Exit Sub
        Dim DEALARR() As String = Nothing
        Dim DEALRATE As Double
        Dim mRow As Integer

        mRow = -1
        If Dgl1.CurrentCell IsNot Nothing Then
            mRow = Dgl1.CurrentCell.RowIndex
        End If

        'On Editing Transaction Time settings should be used instead of Current Settings

        If AgL.XNull(Dgl2.Item(Col1Value, rowSalesTaxApplicable).Value).ToString.ToUpper = "NO" Then
            AgCalcGrid1.AgLineGridPostingGroupSalesTaxProd = -1
        Else
            AgCalcGrid1.AgLineGridPostingGroupSalesTaxProd = Dgl1.Columns(Col1SalesTaxGroup).Index
        End If



        LblTotalPcs.Text = 0
        LblTotalQty.Text = 0
        LblDealQty.Text = 0
        LblTotalBale.Text = 0
        LblTotalAmount.Text = 0


        For I = 0 To Dgl1.RowCount - 1
            If Dgl1(Col1DiscountCalculationPattern, I).Value Is Nothing Then Dgl1(Col1DiscountCalculationPattern, I).Value = ""
            If Dgl1(Col1AdditionalDiscountCalculationPattern, I).Value Is Nothing Then Dgl1(Col1AdditionalDiscountCalculationPattern, I).Value = ""
            If Dgl1(Col1AdditionCalculationPattern, I).Value Is Nothing Then Dgl1(Col1AdditionCalculationPattern, I).Value = ""

            If Dgl1.Item(Col1SKU, I).Value <> "" And Dgl1.Rows(I).Visible Then
                Dgl1.Item(Col1Qty, I).Value = Val(Dgl1.Item(Col1DocQty, I).Value) - Val(Dgl1.Item(Col1LossQty, I).Value) + Val(Dgl1.Item(Col1FreeQty, I).Value)

                If Val(Dgl1.Item(Col1UnitMultiplier, I).Value) <> 0 Then
                    Dgl1.Item(Col1DocDealQty, I).Value = Format(Val(Dgl1.Item(Col1DocQty, I).Value) * Val(Dgl1.Item(Col1UnitMultiplier, I).Value), "0.".PadRight(Val(Dgl1.Item(Col1DealQtyDecimalPlaces, I).Value) + 2, "0"))
                    Dgl1.Item(Col1FreeDealQty, I).Value = Format(Val(Dgl1.Item(Col1FreeQty, I).Value) * Val(Dgl1.Item(Col1UnitMultiplier, I).Value), "0.".PadRight(Val(Dgl1.Item(Col1DealQtyDecimalPlaces, I).Value) + 2, "0"))
                    Dgl1.Item(Col1LossDealQty, I).Value = Format(Val(Dgl1.Item(Col1LossDealQty, I).Value) * Val(Dgl1.Item(Col1UnitMultiplier, I).Value), "0.".PadRight(Val(Dgl1.Item(Col1DealQtyDecimalPlaces, I).Value) + 2, "0"))
                    Dgl1.Item(Col1DealQty, I).Value = Format(Val(Dgl1.Item(Col1DocQty, I).Value) * Val(Dgl1.Item(Col1UnitMultiplier, I).Value), "0.".PadRight(Val(Dgl1.Item(Col1DealQtyDecimalPlaces, I).Value) + 2, "0"))
                Else
                    If ClsMain.IsScopeOfWorkContains(IndustryType.KiranaIndustry) Then
                        Dgl1.Item(Col1LossDealQty, I).Value = Format(Val(Dgl1.Item(Col1Qty, I).Value) * Val(Dgl1.Item(Col1LossDealQtyPer, I).Value), "0.".PadRight(Val(Dgl1.Item(Col1DealQtyDecimalPlaces, I).Value) + 2, "0"))
                    End If
                    Dgl1.Item(Col1DealQty, I).Value = Format(Val(Dgl1.Item(Col1DocDealQty, I).Value) - Val(Dgl1.Item(Col1LossDealQty, I).Value) + Val(Dgl1.Item(Col1FreeDealQty, I).Value), "0.".PadRight(Val(Dgl1.Item(Col1DealQtyDecimalPlaces, I).Value) + 2, "0"))
                End If


                If SettingFields_TreatRateAsAmountYn = True Then
                    Dgl1.Item(Col1Amount, I).Value = Format(1 * Val(Dgl1.Item(Col1Rate, I).Value), "0.".PadRight(CType(Dgl1.Columns(Col1Amount), AgControls.AgTextColumn).AgNumberRightPlaces + 2, "0"))
                Else
                    If Val(Dgl1.Item(Col1DealQty, I).Value) <> 0 Then
                        If AgL.StrCmp(SettingFields_CalculateAmountOn, "Qty") Then
                            Dgl1.Item(Col1Amount, I).Value = Format(Val(Dgl1.Item(Col1DealQty, I).Value) * Val(Dgl1.Item(Col1Rate, I).Value), "0.".PadRight(CType(Dgl1.Columns(Col1Amount), AgControls.AgTextColumn).AgNumberRightPlaces + 2, "0"))
                        Else
                            Dgl1.Item(Col1Amount, I).Value = Format(Val(Dgl1.Item(Col1DocDealQty, I).Value) * Val(Dgl1.Item(Col1Rate, I).Value), "0.".PadRight(CType(Dgl1.Columns(Col1Amount), AgControls.AgTextColumn).AgNumberRightPlaces + 2, "0"))
                        End If
                    Else
                        If AgL.StrCmp(SettingFields_CalculateAmountOn, "Qty") Then
                            Dgl1.Item(Col1Amount, I).Value = Format(Val(Dgl1.Item(Col1Qty, I).Value) * Val(Dgl1.Item(Col1Rate, I).Value), "0.".PadRight(CType(Dgl1.Columns(Col1Amount), AgControls.AgTextColumn).AgNumberRightPlaces + 2, "0"))
                        Else
                            If Val(Dgl2.Item(Col1Value, rowCurrencyMultiplier).Value) > 0 Then
                                Dgl1.Item(Col1Amount, I).Value = Format(Val(Dgl1.Item(Col1DocQty, I).Value) * Val(Dgl1.Item(Col1Rate, I).Value) * Val(Dgl2.Item(Col1Value, rowCurrencyMultiplier).Value), "0.".PadRight(CType(Dgl1.Columns(Col1Amount), AgControls.AgTextColumn).AgNumberRightPlaces + 2, "0"))
                            Else
                                Dgl1.Item(Col1Amount, I).Value = Format(Val(Dgl1.Item(Col1DocQty, I).Value) * Val(Dgl1.Item(Col1Rate, I).Value), "0.".PadRight(CType(Dgl1.Columns(Col1Amount), AgControls.AgTextColumn).AgNumberRightPlaces + 2, "0"))
                            End If
                        End If
                    End If
                End If


                If Val(Dgl1.Item(Col1DiscountPer, I).Value) > 0 Or Dgl1.Columns(Col1DiscountAmount).ReadOnly = True Or Dgl1.Columns(Col1DiscountAmount).Visible = False Then
                    If Dgl1(Col1DiscountCalculationPattern, I).Value.ToUpper = DiscountCalculationPattern.RatePerQty.ToUpper Then
                        Dgl1.Item(Col1DiscountAmount, I).Value = Format(Val(Dgl1.Item(Col1DocQty, I).Value) * Val(Dgl1.Item(Col1DiscountPer, I).Value), "0.00")
                    Else
                        Dgl1.Item(Col1DiscountAmount, I).Value = Format(Val(Dgl1.Item(Col1Amount, I).Value) * Val(Dgl1.Item(Col1DiscountPer, I).Value) / 100, "0.00")
                    End If
                End If


                If Val(Dgl1.Item(Col1AdditionalDiscountPer, I).Value) > 0 Or Dgl1.Columns(Col1AdditionalDiscountAmount).ReadOnly = True Or Dgl1.Columns(Col1AdditionalDiscountAmount).Visible = False Then
                    If Dgl1(Col1AdditionalDiscountCalculationPattern, I).Value.ToUpper = DiscountCalculationPattern.RatePerQty.ToUpper Then
                        Dgl1.Item(Col1AdditionalDiscountAmount, I).Value = Format(Val(Dgl1.Item(Col1DocQty, I).Value) * Val(Dgl1.Item(Col1AdditionalDiscountPer, I).Value), "0.00")
                    ElseIf Dgl1(Col1AdditionalDiscountCalculationPattern, I).Value.ToUpper = DiscountCalculationPattern.Percentage.ToUpper Then
                        Dgl1.Item(Col1AdditionalDiscountAmount, I).Value = Format(Val(Dgl1.Item(Col1Amount, I).Value) * Val(Dgl1.Item(Col1AdditionalDiscountPer, I).Value) / 100, "0.00")
                    Else
                        Dgl1.Item(Col1AdditionalDiscountAmount, I).Value = Format((Val(Dgl1.Item(Col1Amount, I).Value) - Val(Dgl1.Item(Col1DiscountAmount, I).Value)) * Val(Dgl1.Item(Col1AdditionalDiscountPer, I).Value) / 100, "0.00")
                    End If
                End If


                If Val(Dgl1.Item(Col1AdditionPer, I).Value) > 0 Or Dgl1.Columns(Col1AdditionAmount).ReadOnly = True Or Dgl1.Columns(Col1AdditionAmount).Visible = False Then
                    If Dgl1(Col1AdditionCalculationPattern, I).Value.ToUpper = DiscountCalculationPattern.RatePerQty.ToUpper Then
                        Dgl1.Item(Col1AdditionAmount, I).Value = Format(Val(Dgl1.Item(Col1DocQty, I).Value) * Val(Dgl1.Item(Col1AdditionPer, I).Value), "0.00")
                    ElseIf Dgl1(Col1AdditionCalculationPattern, I).Value.ToUpper = DiscountCalculationPattern.Percentage.ToUpper Then
                        Dgl1.Item(Col1AdditionAmount, I).Value = Format(Val(Dgl1.Item(Col1Amount, I).Value) * Val(Dgl1.Item(Col1AdditionPer, I).Value) / 100, "0.00")
                    Else
                        Dgl1.Item(Col1AdditionAmount, I).Value = Format((Val(Dgl1.Item(Col1Amount, I).Value) - Val(Dgl1.Item(Col1DiscountAmount, I).Value) - Val(Dgl1.Item(Col1AdditionalDiscountAmount, I).Value)) * Val(Dgl1.Item(Col1AdditionPer, I).Value) / 100, "0.00")
                    End If
                End If


                Dgl1.Item(Col1Amount, I).Value = Val(Dgl1.Item(Col1Amount, I).Value) - Val(Dgl1.Item(Col1DiscountAmount, I).Value) - Val(Dgl1.Item(Col1AdditionalDiscountAmount, I).Value) + Val(Dgl1.Item(Col1AdditionAmount, I).Value)


                DEALRATE = 0
                If Dgl1.Item(Col1Deal, I).Value <> "" Then
                    DEALARR = Split(Dgl1.Item(Col1Deal, I).Value.ToString, "+", 2)
                    If DEALARR.Length = 2 Then
                        'DEALRATE = Format((Val(Dgl1.Item(Col1Rate, I).Value) * Val(DEALARR(0))) / (Val(DEALARR(0)) + Val(DEALARR(1))), "0.00")
                        'Dgl1.Item(Col1DealAmount, I).Value = Math.Round(Dgl1.Item(Col1Qty, I).Value * (Val(Dgl1.Item(Col1Rate, I).Value) - DEALRATE), 2)
                        Dgl1.Item(Col1DealAmount, I).Value = Format(Val(Dgl1.Item(Col1Amount, I).Value) - (Val(Dgl1.Item(Col1Amount, I).Value) * Val(DEALARR(0))) / (Val(DEALARR(0)) + Val(DEALARR(1))), "0.00")
                    Else
                        Dgl1.Item(Col1DealAmount, I).Value = 0
                    End If
                Else
                    Dgl1.Item(Col1DealAmount, I).Value = 0
                End If

                Dgl1.Item(Col1Amount, I).Value = Format(Val(Dgl1.Item(Col1Amount, I).Value) - Val(Dgl1.Item(Col1DealAmount, I).Value), "0.00")


                If AgL.StrCmp(Dgl1.Item(Col1V_Nature, I).Value, "RETURN") Then
                    Dgl1.Item(Col1Amount, I).Value = -Val(Dgl1.Item(Col1Amount, I).Value)
                End If


                'Footer Calculation
                Dim bQty As Double = 0
                If AgL.StrCmp(Dgl1.Item(Col1V_Nature, I).Value, "RETURN") Then
                    bQty = Val(Dgl1.Item(Col1Qty, I).Value)
                Else
                    bQty = -Val(Dgl1.Item(Col1Qty, I).Value)
                End If


                If Dgl1.Item(Col1MaintainStockYn, I).Value Is Nothing Then Dgl1.Item(Col1MaintainStockYn, I).Value = 1

                If Dgl1.Columns(Col1Pcs).Visible = False Then
                    If Math.Abs(Val(Dgl1.Item(Col1MaintainStockYn, I).Value)) = 0 Then
                        Dgl1.Item(Col1Pcs, I).Value = 0
                    ElseIf AgL.XNull(Dgl1.Item(Col1Unit, I).Value).ToString.ToUpper = "PCS" Then
                        Dgl1.Item(Col1Pcs, I).Value = Dgl1.Item(Col1Qty, I).Value
                    ElseIf Val(Dgl1.Item(Col1Pcs, I).Value) = 0 And Val(Dgl1.Item(Col1Qty, I).Value) > 0 Then
                        Dgl1.Item(Col1Pcs, I).Value = 1
                    End If
                End If

                If AgL.XNull(Dgl1.Item(Col1ItemType, I).Tag) <> ItemTypeCode.ServiceProduct Then
                    LblTotalPcs.Text = Val(LblTotalPcs.Text) + Val(Dgl1.Item(Col1Pcs, I).Value)
                    LblTotalQty.Text = Val(LblTotalQty.Text) + bQty
                    LblDealQty.Text = Val(LblDealQty.Text) + Val(Dgl1.Item(Col1DealQty, I).Value)
                End If
                LblTotalAmount.Text = Val(LblTotalAmount.Text) + Val(Dgl1.Item(Col1Amount, I).Value)
                LblTotalBale.Text += 1

                FFormatRateCells(I)

                If SettingFields_GeneratedEntryV_TypeForAadhat <> "" Then
                    FCalculationForPurchase(I)
                End If

                FormatRowColourDgl1(I)

            End If
        Next

        If DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag IsNot Nothing Then
            AgCalcGrid1.AgPostingGroupSalesTaxParty = DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag.Dgl1.Item(DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag.Col1Value, DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag.rowSalesTaxGroup).Value
            AgCalcGrid1.AgPlaceOfSupply = DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag.Dgl1.Item(DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag.Col1Value, DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag.rowPlaceOfSupply).Value
        End If

        AgCalcGrid1.AgVoucherCategory = "SALES"

        If DglOtherCharges.Visible = True Then
            Dim mOtherCharges As Double = 0
            Dim mOtherDeductions As Double = 0
            For I = 0 To DglOtherCharges.Rows.Count - 1
                If AgL.XNull(DglOtherCharges.Item(Col7ChargeSubocde, I).Value) <> "" Then
                    If AgL.VNull(DglOtherCharges.Item(Col7Amount, I).Value) <> 0 Then
                        If AgL.XNull(DglOtherCharges.Item(Col7ChargeSubocde, I).Value).ToString.ToUpper = "DEDUCTION" Then
                            mOtherDeductions = mOtherDeductions + AgL.VNull(DglOtherCharges.Item(Col7Amount, I).Value)
                        Else
                            mOtherCharges = mOtherCharges + AgL.VNull(DglOtherCharges.Item(Col7Amount, I).Value)
                        End If
                    End If
                End If
            Next
            AgCalcGrid1.AgChargesValue(AgTemplate.ClsMain.Charges.OTHERCHARGES, AgStructure.AgCalcGrid.AgCalcGridColumn.Col_Amount) = mOtherCharges * IIf(Val(Dgl2.Item(Col1Value, rowCurrencyMultiplier).Value) = 0, 1.0, Val(Dgl2.Item(Col1Value, rowCurrencyMultiplier).Value))
            AgCalcGrid1.AgChargesValue("DED", AgStructure.AgCalcGrid.AgCalcGridColumn.Col_Amount) = mOtherDeductions * IIf(Val(Dgl2.Item(Col1Value, rowCurrencyMultiplier).Value) = 0, 1.0, Val(Dgl2.Item(Col1Value, rowCurrencyMultiplier).Value))
        End If


        If ForceCall = True Then
            AgCalcGrid1.Calculation()
        ElseIf mRow > -1 Then
            If Val(Dgl1.Item(Col1Amount, mRow).Value) <> Val(Dgl1.Item(Col1xAmount, mRow).Value) Then
                AgCalcGrid1.Calculation()
            End If
        Else
            AgCalcGrid1.Calculation()
        End If

        If Val(AgCalcGrid1.AgChargesValue(AgTemplate.ClsMain.Charges.NETAMOUNT, AgStructure.AgCalcGrid.AgCalcGridColumn.Col_Amount)) <> Math.Round(Val(AgCalcGrid1.AgChargesValue(AgTemplate.ClsMain.Charges.NETAMOUNT, AgStructure.AgCalcGrid.AgCalcGridColumn.Col_Amount)), 0) Then
            AgCalcGrid1.Calculation()
        End If


        If mRow >= 0 Then
            Dgl1.Item(Col1xAmount, mRow).Value = Val(Dgl1.Item(Col1Amount, mRow).Value)
        End If

        If SettingFields_GeneratedEntryV_TypeForAadhat <> "" Then
            FLoadPurchaseDataFromSaleInvoice()
        End If

        FLoadItemCategorySummary()


        LblTotalQty.Text = Val(LblTotalQty.Text)
        LblDealQty.Text = Val(LblDealQty.Text)
        LblTotalAmount.Text = Val(LblTotalAmount.Text)

        If AgL.StrCmp(Topctrl1.Mode, "Add") Then
            TxtBalanceLimit.Text = Val(TxtCreditLimit.Text) - (Val(TxtCurrBal.Text) + Val(AgCalcGrid1.AgChargesValue(AgTemplate.ClsMain.Charges.NETAMOUNT, AgStructure.AgCalcGrid.AgCalcGridColumn.Col_Amount)))
        ElseIf AgL.StrCmp(Topctrl1.Mode, "Edit") Then
            TxtBalanceLimit.Text = Val(TxtCreditLimit.Text) - (Val(TxtCurrBal.Text) + Val(AgCalcGrid1.AgChargesValue(AgTemplate.ClsMain.Charges.NETAMOUNT, AgStructure.AgCalcGrid.AgCalcGridColumn.Col_Amount)) - mInvoiceAmountBeforeEditing)
        End If

        If DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag IsNot Nothing Then
            CType(DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag, FrmSaleInvoiceParty_WithDimension).InvoiceAmount = Val(AgCalcGrid1.AgChargesValue(AgTemplate.ClsMain.Charges.NETAMOUNT, AgStructure.AgCalcGrid.AgCalcGridColumn.Col_Amount))
        End If

        mSW.Stop()
    End Sub
    Sub FormatRowColourDgl1(rowIndex As Integer)
        If Val(Dgl1.Item(Col1Qty, rowIndex).Value) = 0 Then
            Dgl1.Rows(rowIndex).DefaultCellStyle.BackColor = Color.Tan
        Else
            Dgl1.Rows(rowIndex).DefaultCellStyle.BackColor = Color.White
        End If
        If Val(Dgl1.Item(Col1Rate, rowIndex).Value) = 0 Then
            Dgl1.Rows(rowIndex).DefaultCellStyle.BackColor = Color.LightSalmon
        Else
            Dgl1.Rows(rowIndex).DefaultCellStyle.BackColor = Color.White
        End If

    End Sub
    Private Sub FrmSaleOrder_BaseEvent_Data_Validation(ByRef passed As Boolean) Handles Me.BaseEvent_Data_Validation
        If mFlag_Import = True Then Exit Sub
        Dim I As Integer = 0
        Dim bQcPassedQty As Double = 0, bInvoicedQty As Double = 0
        Dim bOrderQty As Double = 0, bInvoiceQty As Double = 0
        Dim CheckDuplicateRef As Boolean

        Dgl1.EndEdit()
        Dgl2.EndEdit()
        Dgl3.EndEdit()

        'If AgL.RequiredField(TxtSaleToParty, LblBuyer.Text) Then passed = False : Exit Sub

        If DglMain.Visible = True Then
            For I = 0 To DglMain.Rows.Count - 1
                If DglMain.Rows(I).Visible = True Then
                    If DglMain.Item(Col1Mandatory, I).Value <> "" Then
                        If (DglMain.Item(Col1Value, I).Value = "" Or DglMain.Item(Col1Value, I).Value Is Nothing) Then
                            MsgBox(DglMain.Item(Col1Head, I).Value & " is blank...!", MsgBoxStyle.Information)
                            DglMain.CurrentCell = DglMain.Item(Col1Value, I) : DglMain.Focus() : MakeGridCurrentCellNothing(DglMain.Name)
                            passed = False : Exit Sub
                        End If
                    End If
                End If
            Next
        End If


        If ClsMain.IsPartyBlocked(DglMain.Item(Col1Value, rowSaleToParty).Tag, LblV_Type.Tag) Then
            MsgBox("Party is blocked for " & DglMain.Item(Col1Value, rowV_Type).Value & ". Can not continue.")
            passed = False : Exit Sub
        End If


        'If AgL.StrCmp(AgL.PubDBName, "SHADHVINANDI") Then
        '    Dim DiscountedItem As Integer = 0
        '    For I = 0 To Dgl1.Rows.Count - 1
        '        If AgL.XNull(Dgl1(Col1Item, I).Value) <> "" Then
        '            If Val(Dgl1(Col1Rate, I).Value) < 100 Then
        '                DiscountedItem = DiscountedItem + Val(Dgl1(Col1Qty, I).Value)
        '            End If
        '        End If
        '    Next

        '    If DiscountedItem > 1 Then
        '        MsgBox("Only 1 Item should have Rate less than 100.")
        '        passed = False : Exit Sub
        '    End If

        '    If DiscountedItem > 0 Then
        '        If (CType(DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag, FrmSaleInvoiceParty_WithDimension).Dgl1.Item(FrmSaleInvoiceParty_WithDimension.Col1Value, FrmSaleInvoiceParty_WithDimension.rowAadharNo).Value) Is Nothing Then
        '            MsgBox("Party Aadhar No. Mandatory")
        '            passed = False : Exit Sub
        '            End
        '        ElseIf (CType(DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag, FrmSaleInvoiceParty_WithDimension).Dgl1.Item(FrmSaleInvoiceParty_WithDimension.Col1Value, FrmSaleInvoiceParty_WithDimension.rowAadharNo).Value) IsNot Nothing Then
        '            If (CType(DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag, FrmSaleInvoiceParty_WithDimension).Dgl1.Item(FrmSaleInvoiceParty_WithDimension.Col1Value, FrmSaleInvoiceParty_WithDimension.rowAadharNo).Value).ToString.Trim = "" Then
        '                MsgBox("Party Aadhar No. Mandatory")
        '                passed = False : Exit Sub
        '            End If
        '        End If
        '    End If

        '    If DiscountedItem > 0 Then
        '        If (CType(DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag, FrmSaleInvoiceParty_WithDimension).Dgl1.Item(FrmSaleInvoiceParty_WithDimension.Col1Value, FrmSaleInvoiceParty_WithDimension.rowAadharNo).Value) IsNot Nothing Then
        '            If (CType(DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag, FrmSaleInvoiceParty_WithDimension).Dgl1.Item(FrmSaleInvoiceParty_WithDimension.Col1Value, FrmSaleInvoiceParty_WithDimension.rowAadharNo).Value).ToString.Trim <> "" Then

        '                mQry = "Select Count(*) From SaleInvoice With (NoLock)  Where DocId <> '" & mSearchCode & "' AND SaleToPartyAadharNo = '" & CType(DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag, FrmSaleInvoiceParty_WithDimension).Dgl1.Item(FrmSaleInvoiceParty_WithDimension.Col1Value, FrmSaleInvoiceParty_WithDimension.rowAadharNo).Value & "' "

        '                If AgL.VNull(AgL.Dman_Execute(mQry, AgL.GcnRead).ExecuteScalar()) > 0 Then
        '                    MsgBox("Party Aadhar No. Is Already Used")
        '                    passed = False : Exit Sub
        '                End If
        '            End If
        '        End If
        '    End If

        'End If

        Dim bCntItemCount As Integer = 0
        If SettingFields_MaximumItemLimit > 0 Then
            For I = 0 To Dgl1.Rows.Count - 1
                If Dgl1.Rows(I).Visible = True And
                    Dgl1.Item(Col1SKU, I).Value <> "" And
                    Dgl1.Item(Col1ItemType, I).Tag <> ItemTypeCode.ServiceProduct Then
                    bCntItemCount += 1
                End If
            Next
            If SettingFields_MaximumItemLimit < bCntItemCount Then
                If AgL.StrCmp(Topctrl1.Mode, "Add") Then
                    MsgBox("Maximum item limit is " & SettingFields_MaximumItemLimit.ToString & ". Can not continue.", MsgBoxStyle.Information)
                    passed = False : Exit Sub
                ElseIf AgL.StrCmp(Topctrl1.Mode, "Edit") Then
                    Dim bExistingItemCount As Integer = AgL.VNull(AgL.Dman_Execute("Select Count(*) 
                            From SaleInvoiceDetail L 
                            Where L.DocId = '" & mSearchCode & "' ", AgL.GCn).ExecuteScalar())
                    If bCntItemCount > bExistingItemCount Then
                        MsgBox("Maximum item limit is " & SettingFields_MaximumItemLimit.ToString & ". Can not continue.", MsgBoxStyle.Information)
                        passed = False : Exit Sub
                    End If
                End If
            End If
        End If

        If FGetSettings(SettingFields.GeneratedEntryV_TypeForAadhat, SettingType.General) <> "" Then
            For I = 0 To DglPurchase.Rows.Count - 1
                If DglPurchase.Item(Col5PurchInvoiceNo, I).Value = "" Then
                    MsgBox("Purchase Invoice No is blank at row number " & (I + 1).ToString, MsgBoxStyle.Information)
                    DglPurchase.Focus() : MakeGridCurrentCellNothing(DglPurchase.Name)
                    DglPurchase.CurrentCell = DglPurchase.Item(Col5PurchInvoiceNo, I)
                    Try
                        Dgl1.CurrentCell = Dgl1.Item(ColSNo, Dgl1.Rows.Count - 1)
                    Catch ex As Exception
                    End Try
                    passed = False : Exit Sub
                End If

                If DglPurchase.Item(Col5PurchInvoiceDate, I).Value = "" Then
                    MsgBox("Purchase Invoice Date is blank at row number " & (I + 1).ToString, MsgBoxStyle.Information)
                    DglPurchase.Focus() : MakeGridCurrentCellNothing(DglPurchase.Name)
                    DglPurchase.CurrentCell = DglPurchase.Item(Col5PurchInvoiceDate, I)
                    Try
                        Dgl1.CurrentCell = Dgl1.Item(ColSNo, Dgl1.Rows.Count - 1)
                    Catch ex As Exception
                    End Try
                    passed = False : Exit Sub
                End If
            Next
        End If


        'If AgCL.AgIsBlankGrid(Dgl1, Dgl1.Columns(Col1Item).Index) Then passed = False : Exit Sub

        If Val(TxtCreditLimit.Text) > 0 And LblV_Type.Tag = Ncat.SaleInvoice Then
            If Val(TxtCreditLimit.Tag) = 0 Then
                If Val(AgCalcGrid1.AgChargesValue(AgTemplate.ClsMain.Charges.NETAMOUNT, AgStructure.AgCalcGrid.AgCalcGridColumn.Col_Amount)) + IIf(Topctrl1.Mode = "Add", Val(TxtCurrBal.Text), 0) > Val(TxtCreditLimit.Text) Then
                    If AgL.PubUserName.ToUpper = "SA" Or AgL.PubUserName.ToUpper = "SUPER" Then
                        If MsgBox("Total Balance Of " & DglMain.Item(Col1Value, rowSaleToParty).Value & " Is Exceeding Its Credit Limit " & TxtCreditLimit.Text & ". Do you want to continue?", MsgBoxStyle.YesNo) = MsgBoxResult.No Then
                            passed = False : Exit Sub
                        End If
                    Else
                        MsgBox("Total Balance Of " & DglMain.Item(Col1Value, rowSaleToParty).Value & " Is Exceeding Its Credit Limit " & TxtCreditLimit.Text & ".")
                        passed = False : Exit Sub
                    End If
                End If
            End If
        End If

        If Val(LblCreditLimit.Tag) <= 0 Then
            If Val(Dgl3(Col1Value, rowCreditDays).Value) > 0 And LblV_Type.Tag = Ncat.SaleInvoice Then
                If FGetSettings(SettingFields.ActionIfCreditDaysExceed, SettingType.General) <> ActionIfCreditLimitExceeds.DoNothing And FGetSettings(SettingFields.ActionIfCreditDaysExceed, SettingType.General) <> "" Then
                    If TxtCurrBal.Tag IsNot Nothing Then
                        If DateDiff(DateInterval.Day, CType(TxtCurrBal.Tag, List(Of OutstandingBill)).Last.DocDate, CDate(AgL.PubLoginDate)) > Val(Dgl3(Col1Value, rowCreditDays).Value) Then
                            If FGetSettings(SettingFields.ActionIfCreditDaysExceed, SettingType.General) <> ActionIfCreditLimitExceeds.AlertAndAskToContinue Or AgL.PubUserName.ToUpper = "SA" Or AgL.PubUserName.ToUpper = "SUPER" Then
                                If MsgBox("Credit Days exceeding, Do you want to continue?", vbYesNo) = vbNo Then
                                    passed = False : Exit Sub
                                End If
                            Else
                                MsgBox("Credit Days Exceeding, Can not create Invoice")
                                passed = False : Exit Sub
                            End If
                        End If
                    End If
                End If
            End If
        End If





        Dim bTableName_Invoice As String = "[" + Guid.NewGuid().ToString() + "]"
        If LblV_Type.Tag = Ncat.SaleReturn Then
            If AgL.IsTableExist(bTableName_Invoice.Replace("[", "").Replace("]", ""), AgL.GCn) Then
                mQry = "Drop Table " + bTableName_Invoice
                AgL.Dman_ExecuteNonQry(mQry, AgL.GCn)
            End If

            mQry = " CREATE TABLE " & bTableName_Invoice & "(HSN nvarchar(21), Qty Float, Amount Float, RowIndex Int) "
            AgL.Dman_ExecuteNonQry(mQry, AgL.GCn)
        End If

        Dim bItemCount As Integer = 0
        With Dgl1
            For I = 0 To .Rows.Count - 1
                If Dgl1.Rows(I).Visible Then
                    If .Item(Col1SKU, I).Value <> "" Then
                        bItemCount = bItemCount + 1
                        If LblV_Type.Tag = Ncat.SaleReturn Then
                            mQry = " INSERT INTO " & bTableName_Invoice & "(HSN, Qty, Amount, RowIndex)"
                            mQry += " Select IsNull(I.HSN, Ic.HSN) AS HSN, 
                                        " & Val(Dgl1.Item(Col1Qty, I).Value) & " As Qty,
                                        " & Val(Dgl1.Item(Col1Amount, I).Value) & " As Amount,
                                        " & I & " As RowIndex 
                                        From Item I 
                                        LEFT JOIN ItemCategory Ic ON I.ItemCategory = Ic.Code 
                                        Where I.Code = '" & Dgl1.Item(Col1Item, I).Tag & "'"
                            AgL.Dman_ExecuteNonQry(mQry, AgL.GCn)


                            If AgL.XNull(Dgl1.Item(Col1ReferenceNo, I).Value) = "" Or AgL.XNull(Dgl1.Item(Col1ReferenceNo, I).Value) = AgL.XNull(Dgl2.Item(Col1Value, rowPartyDocNo).Value) Then
                                Dgl1.Item(Col1ReferenceNo, I).Value = AgL.XNull(Dgl2.Item(Col1Value, rowPartyDocNo).Value)
                                Dgl1.Item(Col1ReferenceDate, I).Value = AgL.XNull(Dgl2.Item(Col1Value, rowPartyDocDate).Value)
                            End If

                            If AgL.XNull(Dgl1.Item(Col1ReferenceDocId, I).Value) = "" Then
                                Dgl1.Item(Col1ReferenceDocId, I).Value = AgL.XNull(Dgl2.Item(Col1Value, rowPartyDocNo).Tag)
                            End If
                        End If

                        If FDivisionNameForCustomization(4) = "X DEVI" Then
                            If I > 0 Then
                                If Dgl1.Item(Col1ItemInvoiceGroup, I).Value <> Dgl1.Item(Col1ItemInvoiceGroup, I - 1).Value And
                                    Dgl1.Item(Col1ItemInvoiceGroup, I).Value <> "" And Dgl1.Item(Col1ItemInvoiceGroup, I - 1).Value <> "" Then
                                    MsgBox("Invoice group At Row No " & Dgl1.Item(ColSNo, I).Value & " does not match with " & Dgl1.Item(ColSNo, I - 1).Value)
                                    .CurrentCell = .Item(Col1ItemGroup, I) : Dgl1.Focus() : MakeGridCurrentCellNothing(Dgl1.Name)
                                    passed = False : Exit Sub
                                End If
                            End If
                        End If


                        'If Val(Dgl1(ColSNo, I).Tag) > 0 Then
                        '    If Dgl1(Col1Item, I).Value = "" Then
                        '        MsgBox("Item is blank at Row No " & Dgl1.Item(ColSNo, I).Value & "")
                        '        .CurrentCell = .Item(Col1Item, I) : Dgl1.Focus()
                        '        passed = False : Exit Sub
                        '    End If
                        'End If

                        If CType(AgL.VNull(FGetSettings(SettingFields.AllowZeroQtyYn, SettingType.General)), Boolean) = False Then
                            If Val(.Item(Col1DocQty, I).Value) = 0 Then
                                MsgBox("Qty Is 0 At Row No " & Dgl1.Item(ColSNo, I).Value & "")
                                .CurrentCell = .Item(Col1DocQty, I) : Dgl1.Focus() : MakeGridCurrentCellNothing(Dgl1.Name)
                                passed = False : Exit Sub
                            End If
                        End If

                        If Val(.Item(Col1Rate, I).Value) = 0 Then
                            If AgL.VNull(DtV_TypeSettings.Rows(0)("IsAllowedZeroRate")) = False Then
                                MsgBox("Rate Is 0 At Row No " & Dgl1.Item(ColSNo, I).Value & "")
                                .CurrentCell = .Item(Col1Rate, I) : Dgl1.Focus() : MakeGridCurrentCellNothing(Dgl1.Name)
                                passed = False : Exit Sub
                            End If
                        End If

                        If Dgl1.Item(Col1MaintainStockYn, I).Value Is Nothing Then Dgl1.Item(Col1MaintainStockYn, I).Value = 1

                        If Math.Abs(Val(Dgl1.Item(Col1MaintainStockYn, I).Value)) = 0 Then
                            Dgl1.Item(Col1Pcs, I).Value = 0
                        ElseIf Dgl1.Item(Col1Unit, I).Value.ToString.ToUpper = "PCS" Then
                            Dgl1.Item(Col1Pcs, I).Value = Dgl1.Item(Col1Qty, I).Value
                        ElseIf Val(Dgl1.Item(Col1Pcs, I).Value) = 0 And Val(Dgl1.Item(Col1Qty, I).Value) > 0 Then
                            Dgl1.Item(Col1Pcs, I).Value = 1
                        End If

                        If LblV_Type.Tag = Ncat.SaleInvoiceOverlay Then
                            If AgL.XNull(.Item(Col1StockInDiv_Code, I).Value) = "" Then
                                MsgBox("Stock In Division is blank at row number " & Dgl1.Item(ColSNo, I).Value & " . Can not continue.", MsgBoxStyle.Information)
                                .CurrentCell = .Item(Col1StockInDiv_Code, I) : Dgl1.Focus() : MakeGridCurrentCellNothing(Dgl1.Name)
                                passed = False : Exit Sub
                            End If
                        End If



                        If LblV_Type.Tag = Ncat.SaleReturn Then
                            If CType(AgL.VNull(FGetSettings(SettingFields.LinkInvoiceWithReturnYn, SettingType.General)), Boolean) = True Then
                                If AgL.XNull(.Item(Col1ReferenceNo, I).Value) = "" Then
                                    MsgBox("Against Inv. No. is blank  at Row No " & Dgl1.Item(ColSNo, I).Value & "")
                                    .CurrentCell = .Item(Col1ReferenceNo, I) : Dgl1.Focus() : MakeGridCurrentCellNothing(Dgl1.Name)
                                    passed = False : Exit Sub
                                End If

                                If AgL.XNull(.Item(Col1ReferenceDate, I).Value) = "" Then
                                    If AgL.XNull(Dgl2.Item(Col1Value, rowPartyDocNo).Value) = "" Then
                                        MsgBox("Against Inv. Date is blank  at Row No " & Dgl1.Item(ColSNo, I).Value & ". Can not Continue")
                                        .CurrentCell = .Item(Col1ReferenceDate, I) : Dgl1.Focus() : MakeGridCurrentCellNothing(Dgl1.Name)
                                    Else
                                        MsgBox("Against Inv. Date is blank. Can not continue.")
                                        Dgl2.CurrentCell = Dgl2.Item(Col1Value, rowPartyDocDate) : Dgl2.Focus() : MakeGridCurrentCellNothing(Dgl2.Name)
                                    End If
                                    passed = False : Exit Sub
                                End If
                            End If
                        End If

                        If .Item(Col1SalesTaxGroup, I).Value = "" Or .Item(Col1SalesTaxGroup, I).Value = Nothing Then
                            MsgBox("Sales Tax Group is not defined for item " & Dgl1.Item(Col1Item, I).Value & ".Define it in master.", MsgBoxStyle.Information)
                            .CurrentCell = .Item(Col1Item, I) : Dgl1.Focus() : MakeGridCurrentCellNothing(Dgl1.Name)
                            passed = False : Exit Sub
                        End If

                        If AgL.StrCmp(Dgl1.Item(Col1V_Nature, I).Value, "STOCK") Then
                            mQry = " Select IfNull(Sum(Qty_Rec), 0) - IfNull(Sum(Qty_Iss), 0) " &
                                          " FROM Stock  With (NoLock) " &
                                          " WHERE Item = '" & Dgl1.Item(Col1Item, I).Tag & "' " &
                                          " AND  ReferenceDocID = '" & Dgl1.Item(Col1ReferenceDocId, I).Tag & "' " &
                                          " And ReferenceDocIdSr = " & Val(Dgl1.Item(Col1ReferenceDocIdSr, I).Value) & "" &
                                          " And DocId <> '" & mSearchCode & "'"
                            If AgL.VNull(AgL.Dman_Execute(mQry, AgL.GCn).ExecuteScalar) < Val(Dgl1.Item(Col1Qty, I).Value) Then
                                MsgBox(" Balance Stock Of Item " & Dgl1.Item(Col1Item, I).Value & " In Purchase No " & Dgl1.Item(Col1ReferenceDocId, I).Value & " Is Less Then " & Dgl1.Item(Col1Qty, I).Value & "", MsgBoxStyle.Information)
                                .CurrentCell = .Item(Col1DocQty, I) : Dgl1.Focus() : MakeGridCurrentCellNothing(Dgl1.Name)
                                passed = False : Exit Sub
                            End If
                        End If

                        If AgL.StrCmp(Dgl1.Item(Col1V_Nature, I).Value, "RETURN") Then
                            mQry = " Select IfNull(Sum(Qty), 0)  " &
                                    " FROM SaleInvoiceDetail L  With (NoLock) " &
                                    " WHERE L.Item = '" & Dgl1.Item(Col1Item, I).Tag & "' " &
                                    " AND L.SaleInvoice = '" & Dgl1.Item(Col1SaleInvoice, I).Tag & "' " &
                                    " AND L.SaleInvoiceSr = " & Val(Dgl1.Item(Col1SaleInvoiceSr, I).Value) & "" &
                                    " And DocId <> '" & mSearchCode & "'"
                            If AgL.VNull(AgL.Dman_Execute(mQry, AgL.GCn).ExecuteScalar) < Val(Dgl1.Item(Col1Qty, I).Value) Then
                                MsgBox(" Balance Stock Of Item " & Dgl1.Item(Col1Item, I).Value & " In Sale No " & Dgl1.Item(Col1SaleInvoice, I).Value & " Is Less Then " & Dgl1.Item(Col1Qty, I).Value & "", MsgBoxStyle.Information)
                                .CurrentCell = .Item(Col1Qty, I) : Dgl1.Focus() : MakeGridCurrentCellNothing(Dgl1.Name)
                                passed = False : Exit Sub
                            End If
                        End If

                        If CType(AgL.VNull(ClsMain.FGetSettings(SettingFields.SkuManagementApplicableYN, SettingType.General, AgL.PubDivCode, AgL.PubSiteCode, Dgl1.Item(Col1ItemType, I).Tag, "", ItemV_Type.SKU, "", "")), Boolean) = True Then
                            If AgL.XNull(Dgl1.Item(Col1ItemCategory, I).Value) <> "" _
                                        Or AgL.XNull(Dgl1.Item(Col1ItemGroup, I).Value) <> "" _
                                        Or AgL.XNull(Dgl1.Item(Col1Item, I).Value) <> "" _
                                        Or AgL.XNull(Dgl1.Item(Col1Dimension1, I).Value) <> "" _
                                        Or AgL.XNull(Dgl1.Item(Col1Dimension2, I).Value) <> "" _
                                        Or AgL.XNull(Dgl1.Item(Col1Dimension3, I).Value) <> "" _
                                        Or AgL.XNull(Dgl1.Item(Col1Dimension4, I).Value) <> "" _
                                        Or AgL.XNull(Dgl1.Item(Col1Size, I).Value) <> "" _
                                Then
                                Dgl1.Item(Col1SKU, I).Tag = ClsMain.FGetSKUCode(Dgl1.Item(ColSNo, I).Value, Dgl1.Item(Col1ItemType, I).Tag, Dgl1.Item(Col1ItemCategory, I).Tag, Dgl1.Item(Col1ItemCategory, I).Value _
                                                           , Dgl1.Item(Col1ItemGroup, I).Tag, Dgl1.Item(Col1ItemGroup, I).Value _
                                                           , Dgl1.Item(Col1Item, I).Tag, Dgl1.Item(Col1Item, I).Value _
                                                           , Dgl1.Item(Col1Dimension1, I).Tag, Dgl1.Item(Col1Dimension1, I).Value _
                                                           , Dgl1.Item(Col1Dimension2, I).Tag, Dgl1.Item(Col1Dimension2, I).Value _
                                                           , Dgl1.Item(Col1Dimension3, I).Tag, Dgl1.Item(Col1Dimension3, I).Value _
                                                           , Dgl1.Item(Col1Dimension4, I).Tag, Dgl1.Item(Col1Dimension4, I).Value _
                                                           , Dgl1.Item(Col1Size, I).Tag, Dgl1.Item(Col1Size, I).Value _
                                                           , Dgl1.Item(Col1MItemCategory, I).Tag _
                                                           , Dgl1.Item(Col1MItemGroup, I).Tag _
                                                           , Dgl1.Item(Col1MItemSpecification, I).Tag _
                                                           , Dgl1.Item(Col1MDimension1, I).Tag _
                                                           , Dgl1.Item(Col1MDimension2, I).Tag _
                                                           , Dgl1.Item(Col1MDimension3, I).Tag _
                                                           , Dgl1.Item(Col1MDimension4, I).Tag _
                                                           , Dgl1.Item(Col1MSize, I).Tag
                                                           )
                                If Dgl1.Item(Col1SKU, I).Tag = "" Then
                                    passed = False
                                    Exit Sub
                                End If

                                If Dgl1.Item(Col1DocQty, I).Tag IsNot Nothing Then
                                    'For J As Integer = 0 To CType(Dgl1.Item(Col1DocQty, I).Tag, FrmSaleInvoiceDimension).Dgl1.Rows.Count - 1
                                    '    CType(Dgl1.Item(Col1DocQty, I).Tag, FrmSaleInvoiceDimension).Dgl1.Item(FrmSaleInvoiceDimension.Col1ItemType, J).Tag = Dgl1.Item(Col1ItemType, I).Tag
                                    'Next

                                    If CType(Dgl1.Item(Col1DocQty, I).Tag, FrmSaleInvoiceDimension_WithDimension).FData_Validation() = False Then
                                        passed = False
                                        Exit Sub
                                    End If
                                End If
                            End If
                        Else
                            Dgl1.Item(Col1SKU, I).Tag = Dgl1.Item(Col1Item, I).Tag
                        End If
                    End If
                End If
            Next
        End With

        If bItemCount = 0 Then
            MsgBox("There is no data in line.", MsgBoxStyle.Information)
            passed = False
            Exit Sub
        End If


        If LblV_Type.Tag = Ncat.SaleReturn Then
            If FDivisionNameForCustomization(4) = "X DEVI" Then
                If AgL.FillData(" Select * From " & bTableName_Invoice & "", AgL.GCn).Tables(0).Rows.Count > 0 Then
                    mQry = " Select Temp.HSN, Temp.RowIndex, Temp.Qty, Temp.Amount, 
                            VInvoice.Qty As BalanceQty, VInvoice.Amount As BalanceAmount
                            From (
                                SELECT IfNull(L.HSN,'') As HSN, 
                                Max(L.RowIndex) As RowIndex,
                                IsNull(Sum(L.Qty),0) AS Qty,
                                IsNull(Sum(L.Amount),0) AS Amount
                                FROM " & bTableName_Invoice & " L 
                                GROUP BY L.HSN) As Temp
                            LEFT JOIN (
                                SELECT IsNull(I.HSN, Ic.HSN) AS HSN, Sum(L.Qty) AS Qty, Sum(L.Amount) AS Amount
                                FROM SaleInvoice H 
                                LEFT JOIN SaleInvoiceDetail L ON H.DocID = L.DocID
                                LEFT JOIN Voucher_Type Vt ON H.V_Type = Vt.V_Type
                                LEFT JOIN Item I ON L.Item = I.Code
                                LEFT JOIN ItemCategory Ic ON I.ItemCategory = Ic.Code
                                WHERE L.SaleInvoice = '" & Dgl2.Item(Col1Value, rowPartyDocNo).Tag & "'
                                And L.DocId <> '" & mSearchCode & "'
                                AND Vt.NCat IN ('" & Ncat.SaleInvoice & "','" & Ncat.SaleReturn & "')
                                GROUP BY IsNull(I.HSN, Ic.HSN)
                            ) As VInvoice On Temp.HSN = VInvoice.HSN
                            Where IfNull(Temp.Qty,0) > IfNull(VInvoice.Qty,0) 
                            Or IfNull(Temp.Amount,0) > IfNull(VInvoice.Amount,0)"
                    Dim DtInvoiceBalance As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)

                    If DtInvoiceBalance.Rows.Count > 0 Then
                        If AgL.VNull(DtInvoiceBalance.Rows(0)("Qty")) > AgL.VNull(DtInvoiceBalance.Rows(0)("BalanceQty")) Then
                            MsgBox("Qty entered is greater then balance invoice qty for HSN " & DtInvoiceBalance.Rows(0)("HSN") & "...!", MsgBoxStyle.Information)
                            passed = False
                            Exit Sub
                        End If

                        If AgL.VNull(DtInvoiceBalance.Rows(0)("Amount")) > AgL.VNull(DtInvoiceBalance.Rows(0)("BalanceAmount")) Then
                            MsgBox("Amount entered is greater then balance invoice Amount at for HSN " & DtInvoiceBalance.Rows(0)("HSN") & "...!", MsgBoxStyle.Information)
                            passed = False
                            Exit Sub
                        End If
                    End If
                End If
            End If

            If AgL.IsTableExist(bTableName_Invoice.Replace("[", "").Replace("]", ""), AgL.GCn) Then
                mQry = "Drop Table " + bTableName_Invoice
                AgL.Dman_ExecuteNonQry(mQry, AgL.GCn)
            End If
        End If



        If Dgl3.Item(Col1Value, rowBtnTransportDetail).Tag IsNot Nothing Then
            If CType(Dgl3.Item(Col1Value, rowBtnTransportDetail).Tag, FrmSaleInvoiceTransport).DataValidation() = False Then
                ShowSaleInvoiceHeader()
                passed = False : Exit Sub
            End If
        Else
            If FrmSaleInvoiceTransport.DataValidationForMainInvoice(mSearchCode, LblV_Type.Tag) = False Then
                ShowSaleInvoiceHeader()
                passed = False : Exit Sub
            End If
        End If



        If ValidateData_Barcode() = False Then passed = False : Exit Sub

        CheckDuplicateRef = AgTemplate.ClsMain.FCheckDuplicateRefNo("ManualRefNo", "SaleInvoice",
                                    DglMain.Item(Col1Value, rowV_Type).Tag, DglMain.Item(Col1Value, rowV_Date).Value, TxtDivision.AgSelectedValue,
                                    DglMain.Item(Col1Value, rowSite_Code).Tag, Topctrl1.Mode,
                                    DglMain.Item(Col1Value, rowReferenceNo).Value, mSearchCode)

        If Not CheckDuplicateRef Then
            DglMain.Item(Col1Value, rowReferenceNo).Value = AgTemplate.ClsMain.FGetManualRefNo("ManualRefNo", "SaleInvoice", DglMain.Item(Col1Value, rowV_Type).Tag, DglMain.Item(Col1Value, rowV_Date).Value, TxtDivision.AgSelectedValue, DglMain.Item(Col1Value, rowSite_Code).Tag, AgTemplate.ClsMain.ManualRefType.Max)
            CheckDuplicateRef = True
        End If

        passed = CheckDuplicateRef

        If (CType(DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag, FrmSaleInvoiceParty_WithDimension).Dgl1.Item(FrmSaleInvoiceParty_WithDimension.Col1Value, FrmSaleInvoiceParty_WithDimension.rowPanNo).Value) IsNot Nothing Then
            If (CType(DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag, FrmSaleInvoiceParty_WithDimension).Dgl1.Item(FrmSaleInvoiceParty_WithDimension.Col1Value, FrmSaleInvoiceParty_WithDimension.rowPanNo).Value).ToString.Trim <> "" Then
                If (CType(DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag, FrmSaleInvoiceParty_WithDimension).Dgl1.Item(FrmSaleInvoiceParty_WithDimension.Col1Value, FrmSaleInvoiceParty_WithDimension.rowPanNo).Value).ToString.Length <> 10 Then
                    MsgBox("Pan No. should be of 10 characters")
                    passed = False : Exit Sub
                End If
            End If
        End If


        If (CType(DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag, FrmSaleInvoiceParty_WithDimension).Dgl1.Item(FrmSaleInvoiceParty_WithDimension.Col1Value, FrmSaleInvoiceParty_WithDimension.rowAadharNo).Value) IsNot Nothing Then
            If (CType(DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag, FrmSaleInvoiceParty_WithDimension).Dgl1.Item(FrmSaleInvoiceParty_WithDimension.Col1Value, FrmSaleInvoiceParty_WithDimension.rowAadharNo).Value).ToString.Trim <> "" Then
                If (CType(DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag, FrmSaleInvoiceParty_WithDimension).Dgl1.Item(FrmSaleInvoiceParty_WithDimension.Col1Value, FrmSaleInvoiceParty_WithDimension.rowAadharNo).Value).ToString.Length <> 12 Then
                    MsgBox("Aadhar No. should be of 12 characters")
                    passed = False : Exit Sub
                End If
            End If
        End If

        If (CType(DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag, FrmSaleInvoiceParty_WithDimension).Dgl1.Item(FrmSaleInvoiceParty_WithDimension.Col1Value, FrmSaleInvoiceParty_WithDimension.rowSalesTaxNo).Value) IsNot Nothing Then
            If (CType(DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag, FrmSaleInvoiceParty_WithDimension).Dgl1.Item(FrmSaleInvoiceParty_WithDimension.Col1Value, FrmSaleInvoiceParty_WithDimension.rowSalesTaxNo).Value).ToString.Trim <> "" Then
                If (CType(DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag, FrmSaleInvoiceParty_WithDimension).Dgl1.Item(FrmSaleInvoiceParty_WithDimension.Col1Value, FrmSaleInvoiceParty_WithDimension.rowSalesTaxNo).Value).ToString.Length <> 15 Then
                    MsgBox("GST No. should be of 15 characters")
                    passed = False : Exit Sub
                End If
            End If
        End If

        If AgL.XNull(DtV_TypeSettings.Rows(0)("SaleInvoicePattern")) = SaleInvoicePattern.PointOfSale And (LblV_Type.Tag = Ncat.SaleInvoice Or LblV_Type.Tag = Ncat.SaleInvoiceOverlay) Then
            If TxtNature.Text <> "CASH" And TxtNature.Text <> "BANK" Then
                If Val(CType(DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag, FrmSaleInvoiceParty_WithDimension).LblBalanceToReceipt.Text) <> 0 Then
                    ShowSaleInvoiceParty(mSearchCode, DglMain.Item(Col1Value, rowSaleToParty).Tag, TxtNature.Text, True)
                    If Val(CType(DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag, FrmSaleInvoiceParty_WithDimension).LblBalanceToReceipt.Text) <> 0 Then
                        MsgBox("Complete Amount is Not settled")
                        passed = False
                        Exit Sub
                    End If
                End If
            End If
        End If

        If Dgl1.Columns(Col1Godown).Visible = False Then
            If Dgl2.Rows(rowGodown).Visible = True Then
                If AgL.XNull(Dgl2(Col1Value, rowGodown).Value) <> "" Then
                    For I = 0 To Dgl1.Rows.Count - 1
                        If AgL.XNull(Dgl1(Col1Item, I).Value) <> "" Then
                            Dgl1(Col1Godown, I).Value = Dgl2(Col1Value, rowGodown).Value
                            Dgl1(Col1Godown, I).Tag = Dgl2(Col1Value, rowGodown).Tag
                        End If
                    Next
                End If
            End If
        End If

        'If Dgl1.Columns(Col1SalesRepresentative).Visible = False Then
        If Dgl2.Rows(rowSalesRepresentative).Visible = True Then
            If AgL.XNull(Dgl2(Col1Value, rowSalesRepresentative).Value) <> "" Then
                For I = 0 To Dgl1.Rows.Count - 1
                    If AgL.XNull(Dgl1(Col1Item, I).Value) <> "" Then
                        If AgL.XNull(Dgl1(Col1SalesRepresentative, I).Value) = "" Then
                            Dgl1(Col1SalesRepresentative, I).Value = Dgl2(Col1Value, rowSalesRepresentative).Value
                            Dgl1(Col1SalesRepresentative, I).Tag = Dgl2(Col1Value, rowSalesRepresentative).Tag
                        End If
                    End If
                Next
            End If
        End If
        'End If

        If Dgl2.Rows(rowSalesRepresentative).Visible = True And Dgl1.Columns(Col1SalesRepresentative).Visible = False Then
            For I = 0 To Dgl1.Rows.Count - 1
                If AgL.XNull(Dgl1(Col1Item, I).Value) <> "" Then
                    Dgl1(Col1SalesRepresentative, I).Value = Dgl2(Col1Value, rowSalesRepresentative).Value
                    Dgl1(Col1SalesRepresentative, I).Tag = Dgl2(Col1Value, rowSalesRepresentative).Tag
                End If
            Next
        End If



        If Val(AgCalcGrid1.AgChargesValue(AgTemplate.ClsMain.Charges.NETAMOUNT, AgStructure.AgCalcGrid.AgCalcGridColumn.Col_Amount)) < 0 Then
            MsgBox("Invoice value can not be in negetive")
            passed = False
            Exit Sub
        End If


        If Math.Round(Val(AgCalcGrid1.AgChargesValue(AgTemplate.ClsMain.Charges.NETAMOUNT, AgStructure.AgCalcGrid.AgCalcGridColumn.Col_Amount)), 0) <> Val(AgCalcGrid1.AgChargesValue(AgTemplate.ClsMain.Charges.NETAMOUNT, AgStructure.AgCalcGrid.AgCalcGridColumn.Col_Amount)) Then
            Calculation()
            Calculation()
        End If

    End Sub

    Private Function ValidateData_Barcode() As Boolean
        Dim passed As Boolean = True
        Dim I As Integer
        Dim DtBarcodeLastValues As DataTable

        With Dgl1
            For I = 0 To .Rows.Count - 1
                If Dgl1.Rows(I).Visible Then
                    If .Item(Col1SKU, I).Value <> "" Then
                        If Dgl1.Item(Col1Barcode, I).Tag <> "" Then
                            If Val(Dgl1.Item(ColSNo, I).Tag) = 0 Then
                                mQry = "Select BSD.*, B.BarcodeType From BarcodeSiteDetail BSD With (NoLock) Left Join Barcode B With (NoLock) On BSD.Code = B.Code Where BSD.Code = '" & Dgl1.Item(Col1Barcode, I).Tag & "' And BSD.Div_Code = '" & TxtDivision.Tag & "' And BSD.Site_Code = '" & DglMain.Item(Col1Value, rowSite_Code).Tag & "'"
                                DtBarcodeLastValues = AgL.FillData(mQry, AgL.GCn).Tables(0)
                                If DtBarcodeLastValues.Rows.Count > 0 Then
                                    If LblV_Type.Tag = Ncat.SaleInvoice Then
                                        If AgL.XNull(DtBarcodeLastValues.Rows(0)("BarcodeType")) = BarcodeType.UniquePerPcs Then
                                            If Not AgL.XNull(DtBarcodeLastValues.Rows(0)("Status")) = BarcodeStatus.Receive Then
                                                MsgBox("Barcode " & Dgl1.Item(Col1Barcode, I).Value & " Status Is Not Receive. Can't Issue It.")
                                                passed = False : Exit Function
                                            End If
                                        End If
                                    ElseIf LblV_Type.Tag = Ncat.SaleReturn Then
                                        If AgL.XNull(DtBarcodeLastValues.Rows(0)("BarcodeType")) = BarcodeType.UniquePerPcs Then
                                            If Not AgL.XNull(DtBarcodeLastValues.Rows(0)("Status")) = BarcodeStatus.Issue Then
                                                MsgBox("Barcode " & Dgl1.Item(Col1Barcode, I).Value & " Status Is Not Issue. Can't Receive It.")
                                                passed = False : Exit Function
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            Next
        End With

        ValidateData_Barcode = True
    End Function


    Private Function Validate_Barcode(BarcodeDescription As String) As Boolean
        Dim DtBarcodeLastValues As DataTable


        mQry = "Select H.Qty, L.* From BarcodeSiteDetail L  With (NoLock) 
                Left Join Barcode H  With (NoLock) On L.Code = H.Code 
                Where H.Description = '" & BarcodeDescription & "' 
                And L.Div_Code = '" & TxtDivision.Tag & "' 
                And L.Site_Code = '" & DglMain.Item(Col1Value, rowSite_Code).Tag & "'
                And H.BarcodeType In ('" & BarcodeType.UniquePerPcs & "')"
        DtBarcodeLastValues = AgL.FillData(mQry, AgL.GCn).Tables(0)
        If DtBarcodeLastValues.Rows.Count > 0 Then
            If LblV_Type.Tag = Ncat.SaleInvoice Then
                If AgL.VNull(DtBarcodeLastValues.Rows(0)("CurrentStock")) <= 0 Then
                    MsgBox("Barcode " & BarcodeDescription & " Is Not In Stock. Can't Issue It.")
                    Exit Function
                End If
                'If Not AgL.XNull(DtBarcodeLastValues.Rows(0)("Status")) = BarcodeStatus.Receive Then
                '    MsgBox("Barcode " & BarcodeDescription & " Status Is Not Receive. Can't Issue It.")
                '    Exit Function
                'End If
            ElseIf LblV_Type.Tag = Ncat.SaleReturn Then
                If AgL.VNull(DtBarcodeLastValues.Rows(0)("CurrentStock")) > 0 And AgL.VNull(DtBarcodeLastValues.Rows(0)("CurrentStock")) <> AgL.VNull(DtBarcodeLastValues.Rows(0)("Qty")) Then
                    MsgBox("Barcode " & BarcodeDescription & " Is Already In Our Stock. Can't Receive It.")
                    Exit Function
                End If
                'If Not AgL.XNull(DtBarcodeLastValues.Rows(0)("Status")) = BarcodeStatus.Issue Then
                '        MsgBox("Barcode " & BarcodeDescription & " Status Is Not Issue. Can't Receive It.")
                '        Exit Function
                '    End If
            End If
        End If

        Validate_Barcode = True
    End Function


    Private Sub TxtBuyer_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs)
        Try
            If e.KeyCode = Keys.Enter Then Exit Sub
            Select Case sender.name
                'Case TxtSaleToParty.Name
                '    If e.KeyCode <> Keys.Enter Then
                '        If sender.AgHelpDataset Is Nothing Then
                '            FCreateHelpSubgroup()
                '        End If
                '    End If

                'Case TxtBillToParty.Name
                '    If CType(sender, AgControls.AgTextBox).AgHelpDataSet Is Nothing Then
                '        If e.KeyCode <> Keys.Enter Then
                '            FCreateHelpBillToParty()
                '            'TxtBillToParty.AgHelpDataSet(6, TabControl1.Top + TP1.Top, TabControl1.Left + TP1.Left) = TxtSaleToParty.AgHelpDataSet
                '        End If
                '    End If

            End Select
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub
    Private Sub FrmStockHeadEntry_BaseEvent_DglMainEditingControlKeyDown(sender As Object, e As KeyEventArgs) Handles Me.BaseEvent_DglMainEditingControlKeyDown
        Try
            Dim mRow As Integer
            Dim mColumn As Integer
            mRow = DglMain.CurrentCell.RowIndex
            mColumn = DglMain.CurrentCell.ColumnIndex
            Select Case mRow
                Case rowSaleToParty
                    If e.KeyCode = Keys.Insert Then

                    ElseIf e.KeyCode <> Keys.Enter Then
                        If DglMain.Item(Col1Head, DglMain.CurrentCell.RowIndex).Tag Is Nothing Then
                            DglMain.Item(Col1Head, DglMain.CurrentCell.RowIndex).Tag = FCreateHelpSubgroup()
                        End If

                        If DglMain.AgHelpDataSet(Col1Value) Is Nothing Then
                            DglMain.AgHelpDataSet(Col1Value, 6, TabControl1.Top + TP1.Top, TabControl1.Left + TP1.Left) = DglMain.Item(Col1Head, DglMain.CurrentCell.RowIndex).Tag
                        End If
                    End If

                Case rowBillToParty
                    If e.KeyCode <> Keys.Enter Then
                        If DglMain.Item(Col1Head, DglMain.CurrentCell.RowIndex).Tag Is Nothing Then
                            DglMain.Item(Col1Head, DglMain.CurrentCell.RowIndex).Tag = FCreateHelpBillToParty()
                        End If

                        If DglMain.AgHelpDataSet(Col1Value) Is Nothing Then
                            DglMain.AgHelpDataSet(Col1Value, 6, TabControl1.Top + TP1.Top, TabControl1.Left + TP1.Left) = DglMain.Item(Col1Head, DglMain.CurrentCell.RowIndex).Tag
                        End If
                    End If

                Case rowLinkedParty
                    If e.KeyCode <> Keys.Enter Then
                        If DglMain.Item(Col1Head, DglMain.CurrentCell.RowIndex).Tag Is Nothing Then
                            DglMain.Item(Col1Head, DglMain.CurrentCell.RowIndex).Tag = FCreateHelpLinkedParty()
                        End If

                        If DglMain.AgHelpDataSet(Col1Value) Is Nothing Then
                            DglMain.AgHelpDataSet(Col1Value, 6, TabControl1.Top + TP1.Top, TabControl1.Left + TP1.Left) = DglMain.Item(Col1Head, DglMain.CurrentCell.RowIndex).Tag
                        End If
                    End If

                Case rowProcess
                    If e.KeyCode <> Keys.Enter Then
                        If DglMain.Item(Col1Head, DglMain.CurrentCell.RowIndex).Tag Is Nothing Then
                            DglMain.Item(Col1Head, DglMain.CurrentCell.RowIndex).Tag = FCreateHelpProcess()
                        End If

                        If DglMain.AgHelpDataSet(Col1Value) Is Nothing Then
                            DglMain.AgHelpDataSet(Col1Value, 0, TabControl1.Top + TP1.Top, TabControl1.Left + TP1.Left) = DglMain.Item(Col1Head, DglMain.CurrentCell.RowIndex).Tag
                        End If
                    End If
            End Select

            If e.KeyCode = Keys.Enter Then
                Dim LastCell As DataGridViewCell = ClsMain.LastDisplayedCell(DglMain)
                If DglMain.CurrentCell.RowIndex = LastCell.RowIndex And DglMain.CurrentCell.ColumnIndex = LastCell.ColumnIndex Then
                    If Dgl2.Visible Then
                        Dgl2.CurrentCell = Dgl2.FirstDisplayedCell
                        Dgl2.Focus() : MakeGridCurrentCellNothing(Dgl2.Name)
                    End If
                End If
            End If
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub

    Private Sub FrmSaleOrder_BaseFunction_BlankText() Handles Me.BaseFunction_BlankText
        If mFlag_Import = True Then
            Dgl1.Rows.Clear()
        Else
            Dgl1.RowCount = 1 : Dgl1.Rows.Clear()
        End If

        DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag = Nothing
        Dgl3.Item(Col1Value, rowBtnTransportDetail).Tag = Nothing
        DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag = Nothing

        UserMovedOverItemCategory = False
        UserMovedOverItemGroup = False
    End Sub

    Private Sub Dgl1_CellEnter(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles Dgl1.CellEnter
        If AgL.VNull(AgL.PubDtEnviro.Rows(0)("IsAdvanceSearchOnItem")) = True Then
            Dgl1.AgSearchMethod = AgControls.AgLib.TxtSearchMethod.Comprehensive
        Else
            Dgl1.AgSearchMethod = AgControls.AgLib.TxtSearchMethod.Simple
        End If
        Try
            'If AgL.StrCmp(Topctrl1.Mode, "Browse") Then Exit Sub
            If Dgl1.CurrentCell Is Nothing Or isInitializingGrids Then Exit Sub
            MakeGridCurrentCellNothing(sender.Name)
            Debug.Print(Me.Name & " - " & sender.Name & "  Cell Enter Column Index " & sender.CurrentCell.ColumnIndex.ToString & ", Row Index " & sender.CurrentCell.RowIndex.ToString & " : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString)
            Select Case Dgl1.Columns(Dgl1.CurrentCell.ColumnIndex).Name
                Case Col1Item
                    If AgL.VNull(Dgl1.Item(Col1Unit, Dgl1.CurrentCell.RowIndex).Tag) And AgL.VNull(Dgl1.Item(Col1DocQty, Dgl1.CurrentCell.RowIndex).Value) <> 0 Then
                        Dgl1.CurrentCell.ReadOnly = True
                    Else
                        Dgl1.CurrentCell.ReadOnly = False
                    End If
                Case Col1ItemCategory
                    UserMovedOverItemCategory = True
                    Try
                        If Not AgL.StrCmp(Topctrl1.Mode, "Browse") Then
                            If Dgl1.Item(Dgl1.CurrentCell.ColumnIndex, Dgl1.CurrentCell.RowIndex).Value = "" Then
                                If Dgl1.Item(Dgl1.CurrentCell.ColumnIndex, Dgl1.CurrentCell.RowIndex - 1).Value IsNot Nothing Then
                                    Dgl1.Item(Dgl1.CurrentCell.ColumnIndex, Dgl1.CurrentCell.RowIndex).Tag = Dgl1.Item(Dgl1.CurrentCell.ColumnIndex, Dgl1.CurrentCell.RowIndex - 1).Tag
                                    Dgl1.Item(Dgl1.CurrentCell.ColumnIndex, Dgl1.CurrentCell.RowIndex).Value = Dgl1.Item(Dgl1.CurrentCell.ColumnIndex, Dgl1.CurrentCell.RowIndex - 1).Value
                                    Validating_ItemCategory(Dgl1.CurrentCell.ColumnIndex, Dgl1.CurrentCell.RowIndex)
                                End If
                            End If
                        End If
                    Catch ex As Exception
                    End Try

                Case Col1ItemGroup
                    UserMovedOverItemGroup = True
                    Try
                        If Not AgL.StrCmp(Topctrl1.Mode, "Browse") Then
                            If Dgl1.Item(Dgl1.CurrentCell.ColumnIndex, Dgl1.CurrentCell.RowIndex).Value = "" Then
                                If Dgl1.Item(Dgl1.CurrentCell.ColumnIndex, Dgl1.CurrentCell.RowIndex - 1).Value IsNot Nothing Then
                                    Dgl1.Item(Dgl1.CurrentCell.ColumnIndex, Dgl1.CurrentCell.RowIndex).Tag = Dgl1.Item(Dgl1.CurrentCell.ColumnIndex, Dgl1.CurrentCell.RowIndex - 1).Tag
                                    Dgl1.Item(Dgl1.CurrentCell.ColumnIndex, Dgl1.CurrentCell.RowIndex).Value = Dgl1.Item(Dgl1.CurrentCell.ColumnIndex, Dgl1.CurrentCell.RowIndex - 1).Value
                                End If
                            End If
                        End If
                    Catch ex As Exception
                    End Try
                Case Col1Qty
                    CType(Dgl1.Columns(Dgl1.CurrentCell.ColumnIndex), AgControls.AgTextColumn).AgNumberRightPlaces = Val(Dgl1.Item(Col1QtyDecimalPlaces, Dgl1.CurrentCell.RowIndex).Value)
                    LblHelp.Visible = False
                Case Col1DocQty
                    CType(Dgl1.Columns(Dgl1.CurrentCell.ColumnIndex), AgControls.AgTextColumn).AgNumberRightPlaces = Val(Dgl1.Item(Col1QtyDecimalPlaces, Dgl1.CurrentCell.RowIndex).Value)
                    LblHelp.Visible = False
                    If AgL.StrCmp(LblV_Type.Tag, Ncat.SaleOrder) = False Then
                        If AgL.XNull(Dgl1.Item(Col1Unit, Dgl1.CurrentCell.RowIndex).Tag) <> "" Then
                            Dgl1.CurrentCell.ReadOnly = Dgl1.Item(Col1Unit, Dgl1.CurrentCell.RowIndex).Tag
                        End If
                    End If


                Case Col1UnitMultiplier, Col1DocDealQty
                    CType(Dgl1.Columns(Dgl1.CurrentCell.ColumnIndex), AgControls.AgTextColumn).AgNumberRightPlaces = Val(Dgl1.Item(Col1DealQtyDecimalPlaces, Dgl1.CurrentCell.RowIndex).Value)
                    LblHelp.Visible = False
                    If AgL.StrCmp(LblV_Type.Tag, Ncat.SaleOrder) = False Then
                        If AgL.XNull(Dgl1.Item(Col1Unit, Dgl1.CurrentCell.RowIndex).Tag) <> "" Then
                            Dgl1.CurrentCell.ReadOnly = Dgl1.Item(Col1Unit, Dgl1.CurrentCell.RowIndex).Tag
                        End If
                    End If

                Case Col1Item
                    Try
                        If e.RowIndex > 0 Then
                            If Dgl1.Item(Col1V_Nature, e.RowIndex).Value = "" Then Dgl1.Item(Col1V_Nature, e.RowIndex).Value = Dgl1.Item(Col1V_Nature, e.RowIndex - 1).Value
                        Else
                            If Dgl1.Item(Col1V_Nature, e.RowIndex).Value = "" Then Dgl1.Item(Col1V_Nature, e.RowIndex).Value = AgL.XNull(DtV_TypeSettings.Rows(0)("Default_V_Nature"))
                        End If
                        'FRotateV_Nature(e.RowIndex)
                        'FRotateOptionButtons(e.RowIndex)
                        If Dgl1.AgHelpDataSet(Col1Item) IsNot Nothing Then Dgl1.AgHelpDataSet(Col1Item) = Nothing
                        LblHelp.Visible = False
                    Catch ex As Exception
                    End Try

                Case Col1Dimension1
                    If Dgl1.AgHelpDataSet(Col1Dimension1) IsNot Nothing Then Dgl1.AgHelpDataSet(Col1Dimension1) = Nothing
                Case Col1Dimension2
                    If Dgl1.AgHelpDataSet(Col1Dimension2) IsNot Nothing Then Dgl1.AgHelpDataSet(Col1Dimension2) = Nothing
                Case Col1Dimension3
                    If Dgl1.AgHelpDataSet(Col1Dimension3) IsNot Nothing Then Dgl1.AgHelpDataSet(Col1Dimension3) = Nothing
                Case Col1Dimension4
                    If Dgl1.AgHelpDataSet(Col1Dimension4) IsNot Nothing Then Dgl1.AgHelpDataSet(Col1Dimension4) = Nothing
                Case Col1Size
                    If Dgl1.AgHelpDataSet(Col1Size) IsNot Nothing Then Dgl1.AgHelpDataSet(Col1Size) = Nothing
                Case Col1ItemInvoiceGroup
                    If Dgl1.AgHelpDataSet(Col1ItemInvoiceGroup) IsNot Nothing Then Dgl1.AgHelpDataSet(Col1ItemInvoiceGroup) = Nothing
                Case Col1StockInDiv_Code
                    If AgL.XNull(Dgl1.Item(Col1StockInDocId, Dgl1.CurrentCell.RowIndex).Value) <> "" Then
                        Dgl1.Item(Col1StockInDiv_Code, Dgl1.CurrentCell.RowIndex).ReadOnly = True
                    Else
                        Dgl1.Item(Col1StockInDiv_Code, Dgl1.CurrentCell.RowIndex).ReadOnly = False
                    End If
                Case Col1V_Nature
                    LblHelp.Visible = True

                Case Else
                    LblHelp.Visible = False
            End Select

        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub

    Private Sub TempSaleInvoice_BaseFunction_DispText() Handles Me.BaseFunction_DispText
    End Sub

    Private Sub DGL1_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles Dgl1.KeyDown
        If Topctrl1.Mode = "Browse" Then
            Select Case e.KeyCode
                Case Keys.Right, Keys.Up, Keys.Left, Keys.Down, Keys.Enter
                Case Keys.I And e.Control
                    If Dgl1.CurrentCell IsNot Nothing Then
                        If Dgl1.Item(Col1Item, Dgl1.CurrentCell.RowIndex).Tag <> "" Then
                            Dim FrmObj As New FrmItemView
                            FrmObj.TxtItem.Tag = Dgl1.Item(Col1Item, Dgl1.CurrentCell.RowIndex).Tag
                            FrmObj.TxtItem.Text = Dgl1.Item(Col1Item, Dgl1.CurrentCell.RowIndex).Value
                            FrmObj.TxtItem.Focus()
                            FrmObj.Dgl1.CurrentCell = Nothing
                            FrmObj.ShowDialog()
                        End If
                    End If
                Case Else
                    e.Handled = True
            End Select
            Exit Sub
        End If

        If e.KeyCode = Keys.Enter Then
            If Dgl1.Columns(Dgl1.CurrentCell.ColumnIndex).Name = Col1DocQty Then
                If Val(Dgl1.Item(Col1DocQty, Dgl1.CurrentCell.RowIndex).Value) = 0 Then
                    If Dgl3.Visible Then
                        Dgl3.CurrentCell = Dgl3.Item(Col1Value, Dgl3.FirstDisplayedCell.RowIndex)
                        Dgl3.Focus() : MakeGridCurrentCellNothing(Dgl3.Name)
                    End If
                End If
            End If
        End If

        If e.Control And (e.KeyCode = Keys.D0 Or e.KeyCode = Keys.NumPad0) Then
            Dgl1.Item(Col1DocQty, Dgl1.CurrentCell.RowIndex).Value = 0
            e.Handled = True
            Calculation()
        End If


        If CType(AgL.VNull(FGetSettings(SettingFields.AllowLineRowDeletionYn, SettingType.General)), Boolean) = True Or FGetSettings(SettingFields.AllowLineRowDeletionYn, SettingType.General) = "" Then
            If e.Control And e.KeyCode = Keys.D Then
                If Val(Dgl1.Item(Col1IsRecordLocked, Dgl1.CurrentCell.RowIndex).Value) = 0 Then
                    sender.CurrentRow.visible = False
                    Calculation()
                End If
            End If
        End If

        If e.Control Or e.Shift Or e.Alt Then Exit Sub

        If Dgl1.CurrentCell IsNot Nothing Then
            Select Case Dgl1.Columns(Dgl1.CurrentCell.ColumnIndex).Name
                Case Col1Item
                    If e.KeyCode = Keys.Insert Then
                        FOpenItemMaster(Dgl1.Columns(Col1Item).Index, Dgl1.CurrentCell.RowIndex)
                    End If
            End Select
        End If

        If Dgl1.CurrentCell IsNot Nothing Then
            If Dgl1.Columns(Dgl1.CurrentCell.ColumnIndex).Name = Col1V_Nature Then
                If Dgl1.Item(Col1Item, Dgl1.CurrentCell.RowIndex).Value = "" Then
                    Select Case e.KeyCode
                        Case Keys.D
                            Dgl1.Item(Col1V_Nature, Dgl1.CurrentCell.RowIndex).Value = "SALE"
                        Case Keys.S
                            Dgl1.Item(Col1V_Nature, Dgl1.CurrentCell.RowIndex).Value = "STOCK"
                        Case Keys.R
                            Dgl1.Item(Col1V_Nature, Dgl1.CurrentCell.RowIndex).Value = "RETURN"
                    End Select
                    Dgl1.Item(Col1Item, Dgl1.CurrentCell.RowIndex).Tag = ""
                    Dgl1.Item(Col1Item, Dgl1.CurrentCell.RowIndex).Value = ""
                    Dgl1.AgHelpDataSet(Col1Item) = Nothing
                Else
                    If e.KeyCode = Keys.D Or e.KeyCode = Keys.O Or e.KeyCode = Keys.C Or e.KeyCode = Keys.S Or e.KeyCode = Keys.R Then
                        MsgBox("Can't Change Nature.First Remove Item From Line.", MsgBoxStyle.Information)
                    End If
                End If
            End If
        End If
    End Sub
    Private Sub ShowSaleInvoiceDimensionDetail(mRow As Integer, Optional IsShowFrm As Boolean = True)
        If mRow >= 0 Then
            If Dgl1.Item(Col1DocQty, mRow).Tag IsNot Nothing Then
                CType(Dgl1.Item(Col1DocQty, mRow).Tag, FrmSaleInvoiceDimension_WithDimension).EntryMode = Topctrl1.Mode
                CType(Dgl1.Item(Col1DocQty, mRow).Tag, FrmSaleInvoiceDimension_WithDimension).objFrmSaleInvoice = Me
                CType(Dgl1.Item(Col1DocQty, mRow).Tag, FrmSaleInvoiceDimension_WithDimension).DglRow = Dgl1.Rows(mRow)
                CType(Dgl1.Item(Col1DocQty, mRow).Tag, FrmSaleInvoiceDimension_WithDimension).FReInitializeDimensionColumns()
                CType(Dgl1.Item(Col1DocQty, mRow).Tag, FrmSaleInvoiceDimension_WithDimension).Unit = Dgl1.Item(Col1Unit, mRow).Value
                CType(Dgl1.Item(Col1DocQty, mRow).Tag, FrmSaleInvoiceDimension_WithDimension).UnitDecimalPlace = Val(Dgl1.Item(Col1QtyDecimalPlaces, mRow).Value)

                If IsShowFrm = True Then
                    Dgl1.Item(Col1DocQty, mRow).Tag.ShowDialog()
                    Dgl1.Item(Col1DocQty, mRow).Value = Format(CType(Dgl1.Item(Col1DocQty, mRow).Tag, FrmSaleInvoiceDimension_WithDimension).GetTotalQty, "0.".PadRight(Val(Dgl1.Item(Col1QtyDecimalPlaces, mRow).Value) + 2, "0"))
                    Dgl1.Item(Col1Qty, mRow).Value = Format(CType(Dgl1.Item(Col1DocQty, mRow).Tag, FrmSaleInvoiceDimension_WithDimension).GetTotalQty, "0.".PadRight(Val(Dgl1.Item(Col1QtyDecimalPlaces, mRow).Value) + 2, "0"))
                    Dgl1.Item(Col1Pcs, mRow).Value = Val(CType(Dgl1.Item(Col1DocQty, mRow).Tag, FrmSaleInvoiceDimension_WithDimension).GetTotalPcs)

                    Dgl1.Item(Col1DocDealQty, mRow).Value = Format(CType(Dgl1.Item(Col1DocQty, mRow).Tag, FrmSaleInvoiceDimension_WithDimension).GetTotalDealQty, "0.".PadRight(Val(Dgl1.Item(Col1DealQtyDecimalPlaces, mRow).Value) + 2, "0"))
                    Dgl1.Item(Col1DealQty, mRow).Value = Format(CType(Dgl1.Item(Col1DocQty, mRow).Tag, FrmSaleInvoiceDimension_WithDimension).GetTotalDealQty, "0.".PadRight(Val(Dgl1.Item(Col1DealQtyDecimalPlaces, mRow).Value) + 2, "0"))
                End If
            Else
                If Dgl1.Item(Col1Unit, mRow).Tag Then
                    Dim FrmObj As FrmSaleInvoiceDimension_WithDimension
                    FrmObj = New FrmSaleInvoiceDimension_WithDimension
                    FrmObj.ItemName = Dgl1.Item(Col1Item, mRow).Value
                    FrmObj.Unit = Dgl1.Item(Col1Unit, mRow).Value
                    FrmObj.UnitDecimalPlace = Val(Dgl1.Item(Col1QtyDecimalPlaces, mRow).Value)
                    FrmObj.DealUnit = Dgl1.Item(Col1DealUnit, mRow).Value
                    FrmObj.DealUnitDecimalPlace = Val(Dgl1.Item(Col1DealQtyDecimalPlaces, mRow).Value)
                    FrmObj.DglRow = Dgl1.Rows(mRow)
                    FrmObj.objFrmSaleInvoice = Me
                    FrmObj.DtV_TypeSettings = DtV_TypeSettings
                    FrmObj.EntryMode = Topctrl1.Mode
                    FrmObj.IniGrid(mSearchCode, Val(Dgl1.Item(ColSNo, mRow).Tag))
                    FrmObj.FReInitializeDimensionColumns()
                    Dgl1.Item(Col1DocQty, mRow).Tag = FrmObj

                    If IsShowFrm = True Then
                        Dgl1.Item(Col1DocQty, mRow).Tag.ShowDialog()
                        Dgl1.Item(Col1DocQty, mRow).Value = Format(CType(Dgl1.Item(Col1DocQty, mRow).Tag, FrmSaleInvoiceDimension_WithDimension).GetTotalQty, "0.".PadRight(Val(Dgl1.Item(Col1QtyDecimalPlaces, mRow).Value) + 2, "0"))
                        Dgl1.Item(Col1Qty, mRow).Value = Format(CType(Dgl1.Item(Col1DocQty, mRow).Tag, FrmSaleInvoiceDimension_WithDimension).GetTotalQty, "0.".PadRight(Val(Dgl1.Item(Col1QtyDecimalPlaces, mRow).Value) + 2, "0"))
                        Dgl1.Item(Col1Pcs, mRow).Value = Val(CType(Dgl1.Item(Col1DocQty, mRow).Tag, FrmSaleInvoiceDimension_WithDimension).GetTotalPcs)
                        Dgl1.Item(Col1DocDealQty, mRow).Value = Format(CType(Dgl1.Item(Col1DocQty, mRow).Tag, FrmSaleInvoiceDimension_WithDimension).GetTotalDealQty, "0.".PadRight(Val(Dgl1.Item(Col1DealQtyDecimalPlaces, mRow).Value) + 2, "0"))
                        Dgl1.Item(Col1DealQty, mRow).Value = Format(CType(Dgl1.Item(Col1DocQty, mRow).Tag, FrmSaleInvoiceDimension_WithDimension).GetTotalDealQty, "0.".PadRight(Val(Dgl1.Item(Col1DealQtyDecimalPlaces, mRow).Value) + 2, "0"))
                    End If
                End If
            End If
            Calculation()
        End If
    End Sub

    Private Sub FOpenItemMaster(ByVal ColumnIndex As Integer, ByVal RowIndex As Integer)
        Dim DrTemp As DataRow() = Nothing
        Dim bItemCode$ = ""
        Dim objMdi As New MDIMain
        Dim StrUserPermission As String
        Dim DTUP As DataTable

        StrUserPermission = AgIniVar.FunGetUserPermission(ClsMain.ModuleName, objMdi.MnuItemMaster.Name, objMdi.MnuItemMaster.Text, DTUP)

        Dim frmObj As FrmItemMaster

        frmObj = New FrmItemMaster(StrUserPermission, DTUP, ItemV_Type.Item)
        frmObj.EntryPointIniMode = AgTemplate.ClsMain.EntryPointIniMode.Insertion
        frmObj.StartPosition = FormStartPosition.CenterParent
        frmObj.IniGrid()
        frmObj.Dgl1(FrmItemMaster.Col1LastValue, FrmItemMaster.rowItemCategory).Value = Dgl1.Item(Col1ItemCategory, RowIndex).Value
        frmObj.Dgl1(FrmItemMaster.Col1LastValue, FrmItemMaster.rowItemCategory).Tag = Dgl1.Item(Col1ItemCategory, RowIndex).Tag
        frmObj.Dgl1(FrmItemMaster.Col1LastValue, FrmItemMaster.rowItemGroup).Value = Dgl1.Item(Col1ItemGroup, RowIndex).Value
        frmObj.Dgl1(FrmItemMaster.Col1LastValue, FrmItemMaster.rowItemGroup).Tag = Dgl1.Item(Col1ItemGroup, RowIndex).Tag
        frmObj.FillRateTypeForItemGroup(frmObj.Dgl1(FrmItemMaster.Col1LastValue, FrmItemMaster.rowItemGroup).Tag)
        frmObj.ShowDialog()
        bItemCode = frmObj.mSearchCode
        frmObj = Nothing


        Dgl1.Item(ColumnIndex, RowIndex).Value = ""
        Dgl1.Item(ColumnIndex, RowIndex).Tag = ""
        Dgl1.CurrentCell = Dgl1.Item(Col1DocQty, RowIndex)

        FCreateHelpItem(RowIndex)
        DrTemp = Dgl1.AgHelpDataSet(ColumnIndex).Tables(0).Select("Code = '" & bItemCode & "'")
        Dgl1.Item(ColumnIndex, RowIndex).Tag = bItemCode
        Dgl1.Item(ColumnIndex, RowIndex).Value = AgL.XNull(AgL.Dman_Execute("Select Description From Item Where Code = '" & Dgl1.Item(ColumnIndex, Dgl1.CurrentCell.RowIndex).Tag & "'", AgL.GCn).ExecuteScalar)
        Validating_ItemCode(bItemCode, ColumnIndex, RowIndex)
        Dgl1.CurrentCell = Dgl1.Item(Col1Item, RowIndex)
        SendKeys.Send("{Enter}")
    End Sub

    Private Sub FOpenItemCategoryMaster(ByVal ColumnIndex As Integer, ByVal RowIndex As Integer)
        Dim DrTemp As DataRow() = Nothing
        Dim bItemCode$ = ""
        bItemCode = AgTemplate.ClsMain.FOpenMaster(Me, "Item Category Master", DglMain.Item(Col1Value, rowV_Type).Tag)
        Dgl1.Item(ColumnIndex, RowIndex).Value = ""
        Dgl1.Item(ColumnIndex, RowIndex).Tag = ""
        Dgl1.CurrentCell = Dgl1.Item(Col1ItemGroup, RowIndex)
        'FCreateHelpItem(Dgl1.Columns(ColumnIndex).Name)
        FCreateHelpItemCategory()
        DrTemp = Dgl1.AgHelpDataSet(ColumnIndex).Tables(0).Select("Code = '" & bItemCode & "'")
        Dgl1.Item(ColumnIndex, RowIndex).Tag = bItemCode
        Dgl1.Item(ColumnIndex, RowIndex).Value = AgL.XNull(AgL.Dman_Execute("Select Description From ItemCategory  With (NoLock) Where Code = '" & Dgl1.Item(ColumnIndex, Dgl1.CurrentCell.RowIndex).Tag & "'", AgL.GCn).ExecuteScalar)
        Validating_ItemCategory(ColumnIndex, RowIndex)
        Dgl1.CurrentCell = Dgl1.Item(Col1ItemCategory, RowIndex)
        SendKeys.Send("{Enter}")
    End Sub

    Private Sub FOpenItemGroupMaster(ByVal ColumnIndex As Integer, ByVal RowIndex As Integer)
        Dim DrTemp As DataRow() = Nothing
        Dim bItemCode$ = ""
        bItemCode = AgTemplate.ClsMain.FOpenMaster(Me, "Item Group Master", DglMain.Item(Col1Value, rowV_Type).Tag)
        Dgl1.Item(ColumnIndex, RowIndex).Value = ""
        Dgl1.Item(ColumnIndex, RowIndex).Tag = ""
        Dgl1.CurrentCell = Dgl1.Item(Col1ItemGroup, RowIndex)
        'FCreateHelpItem(Dgl1.Columns(ColumnIndex).Name)
        FCreateHelpItemGroup(RowIndex)
        DrTemp = Dgl1.AgHelpDataSet(ColumnIndex).Tables(0).Select("Code = '" & bItemCode & "'")
        Dgl1.Item(ColumnIndex, RowIndex).Tag = bItemCode
        Dgl1.Item(ColumnIndex, RowIndex).Value = AgL.XNull(AgL.Dman_Execute("Select Description From ItemGroup  With (NoLock) Where Code = '" & Dgl1.Item(ColumnIndex, Dgl1.CurrentCell.RowIndex).Tag & "'", AgL.GCn).ExecuteScalar)
        Validating_ItemGroup(ColumnIndex, RowIndex)
        Dgl1.CurrentCell = Dgl1.Item(Col1ItemGroup, RowIndex)
        SendKeys.Send("{Enter}")
    End Sub

    Private Sub FrmCarpetMaterialPlan_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
        If FDivisionNameForCustomization(4) = "X DEVI" Then
            MnuCancelEntry.Visible = True
        End If

        If Not AgL.StrCmp(AgL.PubUserName, AgLibrary.ClsConstant.PubSuperUserName) Then
            MnuImportFromDos.Visible = False
            MnuImportFromExcel.Visible = False
            MnuImportFromTally.Visible = False
            MnuEditSave.Visible = False
        End If

        If LblV_Type.Tag <> Ncat.SaleInvoice Then
            MnuGenerateEWayBill.Visible = False
            MnuCancelEntry.Visible = False
        End If



        'AgL.WinSetting(Me, 654, 990, 0, 0)
        'Me.WindowState = FormWindowState.Maximized
    End Sub

    Private Sub Form_Paint(ByVal sender As Object, ByVal e As System.Windows.Forms.PaintEventArgs) Handles Me.Paint
        AgL.FPaintForm(Me, e, Topctrl1.Height)
    End Sub

    Private Sub RbtInvoiceDirect_Click(ByVal sender As Object, ByVal e As System.EventArgs)
        Try
            If Dgl1.CurrentCell IsNot Nothing Then
                Select Case sender.Name

                End Select
            End If

            If Dgl1.AgHelpDataSet(Col1Item) IsNot Nothing Then Dgl1.AgHelpDataSet(Col1Item) = Nothing
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub

    Private Sub FrmSaleInvoice_BaseEvent_Topctrl_tbRef() Handles Me.BaseEvent_Topctrl_tbRef
        Dim i As Integer



        If Dgl1.AgHelpDataSet(Col1Item) IsNot Nothing Then Dgl1.AgHelpDataSet(Col1Item).Dispose() : Dgl1.AgHelpDataSet(Col1Item) = Nothing
        If PubDtSaleInvoiceItemHelp IsNot Nothing Then PubDtSaleInvoiceItemHelp = Nothing
        If Dgl1.AgHelpDataSet(Col1ItemGroup) IsNot Nothing Then Dgl1.AgHelpDataSet(Col1ItemGroup).Dispose() : Dgl1.AgHelpDataSet(Col1ItemGroup) = Nothing
        If Dgl1.AgHelpDataSet(Col1ItemCategory) IsNot Nothing Then Dgl1.AgHelpDataSet(Col1ItemCategory).Dispose() : Dgl1.AgHelpDataSet(Col1ItemCategory) = Nothing

        If Dgl1.AgHelpDataSet(Col1Dimension1) IsNot Nothing Then Dgl1.AgHelpDataSet(Col1Dimension1).Dispose() : Dgl1.AgHelpDataSet(Col1Dimension1) = Nothing
        If Dgl1.AgHelpDataSet(Col1Dimension2) IsNot Nothing Then Dgl1.AgHelpDataSet(Col1Dimension2).Dispose() : Dgl1.AgHelpDataSet(Col1Dimension2) = Nothing
        If Dgl1.AgHelpDataSet(Col1Dimension3) IsNot Nothing Then Dgl1.AgHelpDataSet(Col1Dimension3).Dispose() : Dgl1.AgHelpDataSet(Col1Dimension3) = Nothing
        If Dgl1.AgHelpDataSet(Col1Dimension4) IsNot Nothing Then Dgl1.AgHelpDataSet(Col1Dimension4).Dispose() : Dgl1.AgHelpDataSet(Col1Dimension4) = Nothing
        If Dgl1.AgHelpDataSet(Col1Size) IsNot Nothing Then Dgl1.AgHelpDataSet(Col1Size).Dispose() : Dgl1.AgHelpDataSet(Col1Size) = Nothing
        If Dgl1.AgHelpDataSet(Col1ItemInvoiceGroup) IsNot Nothing Then Dgl1.AgHelpDataSet(Col1ItemInvoiceGroup).Dispose() : Dgl1.AgHelpDataSet(Col1ItemInvoiceGroup) = Nothing


        'If TxtSaleToParty.AgHelpDataSet IsNot Nothing Then TxtSaleToParty.AgHelpDataSet.Dispose() : TxtSaleToParty.AgHelpDataSet = Nothing
        'If TxtBillToParty.AgHelpDataSet IsNot Nothing Then TxtBillToParty.AgHelpDataSet.Dispose() : TxtBillToParty.AgHelpDataSet = Nothing

        If Dgl1.AgHelpDataSet(Col1SaleInvoice) IsNot Nothing Then Dgl1.AgHelpDataSet(Col1SaleInvoice).Dispose() : Dgl1.AgHelpDataSet(Col1SaleInvoice) = Nothing

        For i = 0 To DglMain.Rows.Count - 1
            DglMain(Col1Head, i).Tag = Nothing
        Next

        For i = 0 To Dgl2.Rows.Count - 1
            Dgl2(Col1Head, i).Tag = Nothing
        Next

        For i = 0 To Dgl3.Rows.Count - 1
            Dgl3(Col1Head, i).Tag = Nothing
        Next


        If AgL.XNull(DglMain.Item(Col1Value, rowSaleToParty).Tag) <> "" Then
            mQry = "Select * From Subgroup  With (NoLock) Where Subcode = '" & DglMain.Item(Col1Value, rowSaleToParty).Tag & "'"
            Dim DtTemp As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)
            If DtTemp.Rows.Count > 0 Then
                Dgl3(Col1Value, rowCreditDays).Value = AgL.VNull(DtTemp.Rows(0)("CreditDays"))
                TxtCreditLimit.Text = Format(AgL.VNull(DtTemp.Rows(0)("CreditLimit")), "0.00")
            End If
        End If

        Dim TemporaryCreditLimit As Double = AgL.VNull(AgL.Dman_Execute("SELECT IfNull(L.Amount,0) As TotalCreditLimit
                    FROM SubgroupTemporaryCreditLimit L With (NoLock)
                    WHERE L.Subcode = '" & DglMain.Item(Col1Value, rowSaleToParty).Tag & "' 
                    AND Date(L.FromDate) <= " & AgL.Chk_Date(CDate(DglMain.Item(Col1Value, rowV_Date).Value).ToString("s")) & "
                    AND Date(L.ToDate) >= " & AgL.Chk_Date(CDate(DglMain.Item(Col1Value, rowV_Date).Value).ToString("s")) & "
                    ", AgL.GCn).ExecuteScalar())
        If TemporaryCreditLimit > 0 Then
            'Dim CreditLimit As Double = AgL.VNull(AgL.Dman_Execute("SELECT IfNull(Sg.CreditLimit,0) As CreditLimit
            '        FROM SubGroup Sg 
            '        WHERE Sg.Subcode = '" & DglMain.Item(Col1Value, rowSaleToParty).Tag & "'", AgL.GCn).ExecuteScalar())
            'TxtCreditLimit.Text = CreditLimit + TemporaryCreditLimit
            TxtCreditLimit.Text = TemporaryCreditLimit
            LblCreditLimit.Tag = TemporaryCreditLimit
            If AgL.StrCmp(Topctrl1.Mode, "Add") Then
                TxtBalanceLimit.Text = Val(TxtCreditLimit.Text) - (Val(TxtCurrBal.Text) + Val(AgCalcGrid1.AgChargesValue(AgTemplate.ClsMain.Charges.NETAMOUNT, AgStructure.AgCalcGrid.AgCalcGridColumn.Col_Amount)))
            ElseIf AgL.StrCmp(Topctrl1.Mode, "Edit") Then
                TxtBalanceLimit.Text = Val(TxtCreditLimit.Text) - (Val(TxtCurrBal.Text) + Val(AgCalcGrid1.AgChargesValue(AgTemplate.ClsMain.Charges.NETAMOUNT, AgStructure.AgCalcGrid.AgCalcGridColumn.Col_Amount)) - mInvoiceAmountBeforeEditing)
            End If
        End If


        ClsMain.FCreateItemDataTable()


    End Sub

    Private Sub BtnFillPartyDetail_Click(ByVal sender As Object, ByVal e As System.EventArgs)
        If Topctrl1.Mode = "Add" Then
            ShowSaleInvoiceParty("", DglMain.Item(Col1Value, rowSaleToParty).Tag, TxtNature.Text, True)
        Else
            ShowSaleInvoiceParty(mSearchCode, "", TxtNature.Text, True)
        End If
    End Sub

    'Private Sub FOpenPartyDetail()
    '    Dim FrmObj As FrmSaleInvoicePartyDetail
    '    Try
    '        If DglMain.Item(Col1BtnDetail,rowSaleToParty).Tag Is Nothing Then
    '            FrmObj = New FrmSaleInvoicePartyDetail
    '            FrmObj.TxtSaleToPartyName.Text = "CASH"
    '        Else
    '            FrmObj = DglMain.Item(Col1BtnDetail,rowSaleToParty).Tag
    '        End If
    '        FrmObj.DispText(IIf(Topctrl1.Mode = "Browse", False, True))
    '        FrmObj.ShowDialog()
    '        If FrmObj.mOkButtonPressed Then DglMain.Item(Col1BtnDetail,rowSaleToParty).Tag = FrmObj
    '    Catch ex As Exception
    '        MsgBox(ex.Message)
    '    End Try
    'End Sub

    Private Sub FGetUnitMultiplier(ByVal mRow As Integer)
        Dim DtTemp As DataTable = Nothing
        Dim I As Integer = 0
        Try
            If Dgl1.Item(Col1Unit, mRow).Value <> "" And Dgl1.Item(Col1DealUnit, mRow).Value <> "" And Val(Dgl1.Item(Col1UnitMultiplier, mRow).Value) <> 0 Then
                mQry = " SELECT Multiplier, Rounding FROM UnitConversion  With (NoLock) WHERE FromUnit = '" & Dgl1.Item(Col1Unit, mRow).Value & "' AND ToUnit =  '" & Dgl1.Item(Col1DealUnit, mRow).Value & "' "
                DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)
                With DtTemp
                    If .Rows.Count > 0 Then
                        Dgl1.Item(Col1UnitMultiplier, mRow).Value = AgL.VNull(.Rows(0)("Multiplier"))
                    End If
                End With
            End If
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub

    Private Sub FGetBaleStr(ByVal SearchCode As String)
        Dim I As Integer
        Dim mBale As String = ""
        Dim tBale As Integer = 0
        Dim fBale As Integer = 0

        Dim DsTemp As DataSet

        mQry = "Select Distinct Convert(INT,BaleNo) as BaleNo From SaleInvoiceDetail  With (NoLock)  Where DocId = '" & SearchCode & "' And IsNumeric(BaleNo) = 1 Order By  Convert(INT,BaleNo) "
        DsTemp = AgL.FillData(mQry, AgL.GcnRead)
        With DsTemp.Tables(0)

            If .Rows.Count > 0 Then
                For I = 0 To DsTemp.Tables(0).Rows.Count - 1
                    If fBale = 0 Then
                        fBale = AgL.VNull(.Rows(I)("BaleNo"))
                        mBale = AgL.XNull(.Rows(I)("BaleNo"))
                    ElseIf fBale + 1 <> AgL.VNull(.Rows(I)("BaleNo")) Then
                        mBale = mBale & "-" & AgL.XNull(.Rows(I - 1)("BaleNo")) & ", " & AgL.XNull(.Rows(I)("BaleNo"))
                        fBale = AgL.VNull(.Rows(I)("BaleNo"))
                    Else
                        fBale = AgL.VNull(.Rows(I)("BaleNo"))
                    End If

                    If I = DsTemp.Tables(0).Rows.Count - 1 Then
                        If fBale <> AgL.VNull(.Rows(I)("BaleNo")) Then
                            mBale = mBale & ", " & AgL.XNull(.Rows(I)("BaleNo")) & ""
                        Else
                            mBale = mBale & "-" & AgL.XNull(.Rows(I)("BaleNo")) & ""
                        End If
                    End If
                Next I
            End If
        End With


        mQry = "Select Distinct BaleNo From SaleInvoiceDetail  With (NoLock)  Where DocId = '" & SearchCode & "' And IsNumeric(BaleNo) = 0 "
        DsTemp = AgL.FillData(mQry, AgL.GcnRead)
        With DsTemp.Tables(0)
            If .Rows.Count > 0 Then
                For I = 0 To DsTemp.Tables(0).Rows.Count - 1
                    If Dgl1.Item(Col1BaleNo, I).Value IsNot Nothing Then
                        If mBale = "" Then
                            mBale += Dgl1.Item(Col1BaleNo, I).Value.ToString
                        Else
                            mBale += "," & Dgl1.Item(Col1BaleNo, I).Value.ToString
                        End If
                    End If
                Next I
            End If
        End With
    End Sub

    Private Sub Dgl1_CellContentClick(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles Dgl1.CellContentClick
        Dim Mdi As MDIMain = New MDIMain
        Dim DtTemp As DataTable
        Try
            Select Case Dgl1.Columns(e.ColumnIndex).Name
                'Case Col1SaleInvoice
                '    Call ClsMain.ProcOpenLinkForm(Mdi.MnuQCRequestEntry, Dgl1.Item(Col1SaleQCReq, e.RowIndex).Tag, Me.MdiParent)

                Case Col1ImportStatus
                    MsgBox(Dgl1.Item(Col1ImportStatus, e.RowIndex).ToolTipText, MsgBoxStyle.Information)

                Case Col1Progress
                    If AgL.PubServerName = "" Then
                        mQry = "Select group_concat(H.ManualRefNo,',') as ProgressNo From SaleInvoice H Left Join SaleInvoiceDetail L On H.DocID = L.DocID Where  L.SaleInvoice<>L.DocID And L.SaleInvoice || L.SaleInvoiceSr = '" & mSearchCode & "' || '" & Val(AgL.VNull(Dgl1.Item(ColSNo, Dgl1.CurrentCell.RowIndex).Tag)) & "' Group By H.DocID "
                        DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)
                        If DtTemp.Rows.Count > 0 Then
                            MsgBox(" Invoice No. : " & AgL.XNull(DtTemp.Rows(0)("ProgressNo")))
                        End If
                    Else
                        mQry = "Select H.ManualRefNo + ',' as ProgressNo From SaleInvoice H With (NoLock) Left Join SaleInvoiceDetail L With (NoLock) On H.DocID = L.DocID Where L.SaleInvoice<> L.DocID And L.SaleInvoice = '" & mSearchCode & "' And L.SaleInvoiceSr = " & Val(AgL.VNull(Dgl1.Item(ColSNo, Dgl1.CurrentCell.RowIndex).Tag)) & " Group By H.DocID,H.ManualRefNo  FOR XML path('')"
                        DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)
                        If DtTemp.Rows.Count > 0 Then
                            MsgBox(" Invoice No. : " & AgL.XNull(DtTemp.Rows(0)("ProgressNo")))
                        End If
                    End If
            End Select
        Catch ex As Exception

        End Try
    End Sub

    Private Sub Dgl1_EditingControl_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles Dgl1.EditingControl_KeyDown
        Try
            If Dgl1.CurrentCell Is Nothing Then Exit Sub
            Select Case Dgl1.Columns(Dgl1.CurrentCell.ColumnIndex).Name
                Case Col1Item
                    If e.KeyCode = Keys.Insert Then
                        Call FOpenItemMaster(Dgl1.Columns(Col1Item).Index, Dgl1.CurrentCell.RowIndex)
                    ElseIf e.KeyCode <> Keys.Enter Then
                        If Dgl1.AgHelpDataSet(Col1Item) Is Nothing Then
                            If LblV_Type.Tag = Ncat.SaleInvoice And
                                    CType(AgL.VNull(DtV_TypeSettings.Rows(0)("IsItemHelpFromSaleOrder")), Boolean) = True Then
                                FCreateHelpItemFromSaleOrder(Dgl1.CurrentCell.RowIndex)
                            Else
                                If CType(AgL.VNull(FGetSettings(SettingFields.UseGlobalItemHelpYn, SettingType.General)), Boolean) = True And PubDtSaleInvoiceItemHelp IsNot Nothing Then
                                    Dgl1.AgHelpDataSet(Col1Item) = PubDtSaleInvoiceItemHelp
                                Else
                                    FCreateHelpItem(Dgl1.CurrentCell.RowIndex)
                                End If
                            End If
                        End If
                    End If

                Case Col1ItemCategory
                    If e.KeyCode <> Keys.Enter And e.KeyCode <> Keys.Insert Then
                        If Dgl1.AgHelpDataSet(Col1ItemCategory) Is Nothing Then
                            FCreateHelpItemCategory()
                        End If
                    End If

                Case Col1ItemGroup
                    If e.KeyCode <> Keys.Enter And e.KeyCode <> Keys.Insert Then
                        If Dgl1.AgHelpDataSet(Col1ItemGroup) Is Nothing Then
                            If LblV_Type.Tag = Ncat.SaleInvoice And
                                CType(AgL.VNull(DtV_TypeSettings.Rows(0)("IsItemHelpFromSaleOrder")), Boolean) = True Then
                                FCreateHelpItemGroupFromSaleOrder(Dgl1.CurrentCell.RowIndex)
                            Else
                                FCreateHelpItemGroup(Dgl1.CurrentCell.RowIndex)
                            End If
                        End If
                    End If

                Case Col1ReferenceNo
                    If e.KeyCode <> Keys.Enter Then
                        If LblV_Type.Tag = Ncat.SaleReturn And Val(Dgl3.Item(Col1Value, rowCustomerInvoiceCount).Value) > 0 Then
                            If Dgl1.AgHelpDataSet(Col1ReferenceNo) Is Nothing Then
                                mQry = " SELECT H.DocID, '" & IIf(AgL.PubPrintDivisionShortNameOnDocumentsYn, AgL.PubDivShortName, "") & IIf(AgL.PubPrintSiteShortNameOnDocumentsYn, AgL.PubSiteShortName, "") & "' || (Case When VT.Short_Name Is Not Null Then VT.Short_Name Else '' End) || H.ManualRefNo as [Invoice No], H.V_Date as [Invoice Date]  
                                         FROM SaleInvoice H  With (NoLock)  
                                         Left Join Voucher_Type VT With (NoLock) On H.V_Type = VT.V_Type
                                         Where VT.Ncat = '" & Ncat.SaleInvoice & "' And H.SaleToParty = '" & DglMain.Item(Col1Value, rowSaleToParty).Tag & "' 
                                         And H.Div_Code='" & TxtDivision.Tag & "' And H.Site_Code = '" & DglMain.Item(Col1Value, rowSite_Code).Tag & "'  
                                         And H.V_Date <= " & AgL.Chk_Date(DglMain.Item(Col1Value, rowV_Date).Value) & "  "
                                Dgl1.AgHelpDataSet(Col1ReferenceNo) = AgL.FillData(mQry, AgL.GCn)
                            End If
                        End If
                    End If

                Case Col1SalesTaxGroup
                    If e.KeyCode <> Keys.Enter Then
                        If Dgl1.AgHelpDataSet(Dgl1.CurrentCell.ColumnIndex) Is Nothing Then
                            mQry = " SELECT H.Description as Code, H.Description FROM PostingGroupSalesTaxItem H  With (NoLock)  Where IfNull(H.Active,1) = 1 Order By H.Description  "
                            Dgl1.AgHelpDataSet(Dgl1.CurrentCell.ColumnIndex) = AgL.FillData(mQry, AgL.GCn)
                        End If
                    End If

                Case Col1StockInDiv_Code
                    If e.KeyCode <> Keys.Enter Then
                        If Dgl1.AgHelpDataSet(Dgl1.CurrentCell.ColumnIndex) Is Nothing Then
                            mQry = " SELECT Div_Code AS Code, Div_Name AS Name FROM Division "
                            Dgl1.AgHelpDataSet(Dgl1.CurrentCell.ColumnIndex) = AgL.FillData(mQry, AgL.GCn)
                        End If
                    End If

                Case Col1ItemState
                    If e.KeyCode <> Keys.Enter Then
                        If Dgl1.AgHelpDataSet(Dgl1.CurrentCell.ColumnIndex) Is Nothing Then
                            mQry = " SELECT H.Code, H.Description FROM Item H  With (NoLock)  Where H.V_Type = '" & ItemV_Type.ItemState & "'  And IfNull(H.Status,'Active') = 'Active' Order By H.Description "
                            Dgl1.AgHelpDataSet(Dgl1.CurrentCell.ColumnIndex) = AgL.FillData(mQry, AgL.GCn)
                        End If
                    End If


                Case Col1SaleInvoice
                    If e.KeyCode <> Keys.Enter Then
                        If LblV_Type.Tag = Ncat.SaleInvoice And
                                CType(AgL.VNull(DtV_TypeSettings.Rows(0)("IsApplicable_SaleOrder")), Boolean) = True Then
                            If Dgl1.AgHelpDataSet(Col1SaleInvoice) Is Nothing Then
                                FCreateHelpSaleOrder()
                            End If
                        End If
                    End If

                Case Col1SalesTaxGroup
                    If e.KeyCode <> Keys.Enter Then
                        If Dgl1.AgHelpDataSet(Col1SaleInvoice) Is Nothing Then
                            mQry = " Select Description As Code, Description  FROM PostingGroupSalesTaxParty "
                            Dgl1.AgHelpDataSet(Col1SaleInvoice) = AgL.FillData(mQry, AgL.GCn)
                        End If
                    End If

                Case Col1Dimension1
                    If e.KeyCode <> Keys.Enter Then
                        If Dgl1.AgHelpDataSet(Col1Dimension1) Is Nothing Then
                            FCreateHelpDimension1(Dgl1.CurrentCell.RowIndex)
                        End If
                    End If

                Case Col1Dimension2
                    If e.KeyCode <> Keys.Enter Then
                        If Dgl1.AgHelpDataSet(Col1Dimension2) Is Nothing Then
                            FCreateHelpDimension2(Dgl1.CurrentCell.RowIndex)
                        End If
                    End If

                Case Col1Dimension3
                    If e.KeyCode <> Keys.Enter Then
                        If Dgl1.AgHelpDataSet(Col1Dimension3) Is Nothing Then
                            mQry = " SELECT Code, Description  FROM Dimension3  With (NoLock)  "
                            Dgl1.AgHelpDataSet(Col1Dimension3) = AgL.FillData(mQry, AgL.GCn)
                        End If
                    End If

                Case Col1Dimension4
                    If e.KeyCode <> Keys.Enter Then
                        If Dgl1.AgHelpDataSet(Col1Dimension4) Is Nothing Then
                            mQry = " SELECT Code, Description  FROM Dimension4  With (NoLock)  "
                            Dgl1.AgHelpDataSet(Col1Dimension4) = AgL.FillData(mQry, AgL.GCn)
                        End If
                    End If

                Case Col1Size
                    If e.KeyCode <> Keys.Enter Then
                        If Dgl1.AgHelpDataSet(Col1Size) Is Nothing Then
                            FCreateHelpSize(Dgl1.CurrentCell.RowIndex)
                        End If
                    End If

                Case Col1ItemInvoiceGroup
                    If e.KeyCode <> Keys.Enter Then
                        If Dgl1.AgHelpDataSet(Col1ItemInvoiceGroup) Is Nothing Then
                            FCreateHelpItemInvoiceGroup(Dgl1.CurrentCell.RowIndex)
                        End If
                    End If

                Case Col1SalesRepresentative
                    If e.KeyCode <> Keys.Enter Then
                        If Dgl1.AgHelpDataSet(Col1SalesRepresentative) Is Nothing Then
                            mQry = "SELECT Sg.Code, Sg.Name From viewHelpSubgroup Sg  With (NoLock) Left Join HRM_Employee Emp On Sg.Code = Emp.Subcode 
                                    Where sg.SubgroupType ='" & SubgroupType.Employee & "' 
                                    And Emp.RelievingDate Is Null And Emp.Designation='SREP' And Site_Code = '" & DglMain.Item(Col1Value, rowSite_Code).Tag & "' Order By sg.Name "
                            Dgl1.AgHelpDataSet(Col1SalesRepresentative) = AgL.FillData(mQry, AgL.GCn)
                        End If
                    End If

                Case Col1Godown
                    If e.KeyCode <> Keys.Enter Then
                        If Dgl1.AgHelpDataSet(Col1Godown) Is Nothing Then
                            mQry = "SELECT Sg.SubCode As Code, Sg.Name 
                                    From SubGroup Sg  With (NoLock) 
                                    Where Sg.SubgroupType ='" & SubgroupType.Godown & "' "
                            Dgl1.AgHelpDataSet(Col1Godown) = AgL.FillData(mQry, AgL.GCn)
                        End If
                    End If

                Case Col1LotNo
                    If e.KeyCode <> Keys.Enter Then
                        If Dgl1.AgHelpDataSet(Col1LotNo) Is Nothing Then
                            mQry = "SELECT I.Description As Code, I.Description As Description
                                    From Item I With (NoLock) 
                                    Where I.V_Type ='" & ItemV_Type.Lot & "' "
                            Dgl1.AgHelpDataSet(Col1LotNo) = AgL.FillData(mQry, AgL.GCn)
                        End If
                    End If

                Case Col1Unit
                    If Dgl1.AgHelpDataSet(Col1Unit) Is Nothing Then
                        mQry = " SELECT Code, Code AS Description FROM Unit  With (NoLock) "
                        Dgl1.AgHelpDataSet(Col1Unit) = AgL.FillData(mQry, AgL.GCn)
                    End If
            End Select
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub
    Private Sub FOpenMaster(ByVal e As System.Windows.Forms.KeyEventArgs)
        Dim FrmObj As Object = Nothing
        Dim CFOpen As New ClsFunction()
        Dim DtTemp As DataTable = Nothing
        Try
            If AgL.StrCmp(Topctrl1.Mode, "Browse") Then Exit Sub
            If e.KeyCode = Keys.Insert Then
                If Dgl1.Columns(Dgl1.CurrentCell.ColumnIndex).Name = Col1Item Then
                    If Not AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")).Contains(",") Then
                        mQry = " Select MnuName, MnuText From ItemType  With (NoLock) Where Code = '" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) & "' "
                        DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)
                        If DtTemp.Rows.Count > 0 Then
                            FrmObj = CFOpen.FOpen(DtTemp.Rows(0)("MnuName"), DtTemp.Rows(0)("MnuText"), True)
                            If FrmObj IsNot Nothing Then
                                FrmObj.MdiParent = Me.MdiParent
                                FrmObj.Show()
                                FrmObj.Topctrl1.FButtonClick(0)
                                FrmObj = Nothing
                            End If
                        End If
                    End If
                End If
            End If
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub

    Private Sub FrmSaleQuotation_BaseFunction_DispText() Handles Me.BaseFunction_DispText
        Dim i As Integer

        GBoxImportFromExcel.Enabled = False

        For i = 0 To Dgl1.Columns.Count - 1
            If Dgl1.Columns(i).DefaultCellStyle.BackColor = Dgl1.AgReadOnlyColumnColor Then
                Dgl1.Columns(i).ReadOnly = True
            End If
        Next

        'If EntryNCat = Ncat.SaleInvoice Or EntryNCat = Ncat.SaleOrder Then
        '    BtnHeaderDetail.Visible = True
        'Else
        '    BtnHeaderDetail.Visible = False
        'End If

        'If EntryNCat = Ncat.SaleOrder Then
        '    LblV_Type.Text = "Order Type"
        '    DglMain.Item(Col1Head, rowReferenceNo).Value = "Order No"
        '    DglMain.Item(Col1Head, rowV_Date).Value = "Order Date"
        'ElseIf EntryNCat = Ncat.SaleReturn Then
        '    LblV_Type.Text = "Return Type"
        '    DglMain.Item(Col1Head, rowReferenceNo).Value = "Return No"
        '    DglMain.Item(Col1Head, rowV_Date).Value = "Return Date"
        'End If

        Dgl2.Item(Col1Value, rowSalesTaxNo).ReadOnly = True
        Dgl2.Item(Col1Value, rowAadharNo).ReadOnly = True



        LblBarcode.Visible = CType(AgL.VNull(DtV_TypeSettings.Rows(0)("IsVisible_BarcodeGunTextbox")), Boolean)
        TxtBarcode.Visible = CType(AgL.VNull(DtV_TypeSettings.Rows(0)("IsVisible_BarcodeGunTextbox")), Boolean)

        If FDivisionNameForCustomization(4) = "X DEVI" Then
            ChkTemporarilySaved.Visible = True
        End If

        If FGetSettings(SettingFields.GeneratedEntryV_TypeForAadhat, SettingType.General) <> "" Then
            DglPurchase.Visible = True
        Else
            DglPurchase.Visible = False
        End If

        'If CType(AgL.VNull(FGetSettings(SettingFields.ShowItemCategorySummaryYn, SettingType.General)), Boolean) = True Then
        '    DglItemCategorySummary.Visible = True
        'Else
        '    DglItemCategorySummary.Visible = False
        'End If

        'If DglMain.Rows(rowSaleToPartyName).Visible = True And
        '    Not AgL.StrCmp(Topctrl1.Mode, "Browse") Then
        '    DglMain.Rows(rowSaleToPartyName).Visible = False
        'End If

        If ClsMain.IsScopeOfWorkContains(IndustryType.SubIndustryType.RetailModule) Then
            LblCurrentBalance.Visible = False
            TxtCurrBal.Visible = False
            LblCreditLimit.Visible = False
            TxtCreditLimit.Visible = False
            LblBalanceLimit.Visible = False
            TxtBalanceLimit.Visible = False
            Dgl4.Visible = True
        End If
    End Sub
    Private Sub FrmSaleInvoice_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles Me.KeyDown
        If e.KeyCode = Keys.F11 Then
            LblPurchaseRate.Visible = Not LblPurchaseRate.Visible
        ElseIf e.KeyCode = Keys.F9 Then
            If Dgl1.CurrentCell IsNot Nothing Then
                If Dgl1.Item(Col1Item, Dgl1.CurrentCell.RowIndex).Value <> "" Then
                    FPostInPurchIndent(AgL.GCn, AgL.ECmd, Dgl1.CurrentCell.RowIndex)
                End If
            End If
        ElseIf e.KeyCode = (Keys.W And e.Control) Then
            If Topctrl1.Mode = "Add" Then
                ShowSaleInvoiceParty("", DglMain.Item(Col1Value, rowSaleToParty).Tag, TxtNature.Text, True)
            Else
                ShowSaleInvoiceParty(mSearchCode, "", TxtNature.Text, True)
            End If
        End If

        If Topctrl1.Mode.ToString.ToUpper <> "BROWSE" Then
            If e.KeyCode = Keys.F3 Then
                Select Case Me.ActiveControl.Name.ToUpper
                    Case DglMain.Name.ToUpper

                        Dgl2.Focus() : MakeGridCurrentCellNothing(Dgl2.Name)
                    Case Dgl2.Name.ToUpper

                        If TxtBarcode.Visible = True Then
                            TxtBarcode.Focus()
                        Else
                            Dgl1.Focus() : MakeGridCurrentCellNothing(Dgl1.Name)
                        End If
                    Case Dgl1.Name.ToUpper
                        If Dgl3.Visible Then
                            Dgl3.Focus() : MakeGridCurrentCellNothing(Dgl3.Name)
                        ElseIf DglPurchase.Visible Then
                            DglPurchase.Focus() : MakeGridCurrentCellNothing(DglPurchase.Name)
                        Else
                            AgCalcGrid1.Focus() : MakeGridCurrentCellNothing(AgCalcGrid1.Name)
                        End If
                    Case Dgl3.Name.ToUpper

                        If DglPurchase.Visible Then
                            DglPurchase.Focus() : MakeGridCurrentCellNothing(DglPurchase.Name)
                        Else
                            AgCalcGrid1.Focus() : MakeGridCurrentCellNothing(AgCalcGrid1.Name)
                        End If
                    Case DglPurchase.Name.ToUpper

                        AgCalcGrid1.Focus() : MakeGridCurrentCellNothing(AgCalcGrid1.Name)
                    Case Else
                        Me.SelectNextControl(Me.ActiveControl, True, True, True, True)
                End Select
            End If
        End If
    End Sub

    Private Sub FShowTransactionHistory(ByVal Item As String, mRow As Integer)
        Dim DtTemp As DataTable = Nothing
        Dim CSV_Qry As String = ""
        Dim CSV_QryArr() As String = Nothing
        Dim I As Integer, J As Integer
        Dim IGridWidth As Integer = 0
        Try
            mQry = ""
            If CType(AgL.VNull(FGetSettings(SettingFields.ShowLastRatesYn, SettingType.General)), Boolean) = True Then
                If ClsMain.IsScopeOfWorkContains(IndustryType.MedicalIndustry) Then
                    If Item <> "" Then
                        mQry = " SELECT 1 As OrderField, 'Purchase' As [Inv_No], Null AS [Inv_Date],  
                            " & Val(Dgl1.Item(Col1PurchaseRate, mRow).Value) & " As Rate, 
                            0 As Qty, 
                            " & Val(Dgl1.Item(Col1PurchaseDiscountPer, mRow).Value) & " As Disc_Per, 
                            " & Val(Dgl1.Item(Col1PurchaseAdditionalDiscountPer, mRow).Value) & " As Add_Disc_Per, 
                            " & AgL.Chk_Text(Dgl1.Item(Col1PurchaseDeal, mRow).Value) & " As Deal "
                        mQry += " UNION ALL "
                    End If
                End If

                mQry += " SELECT " & IIf(AgL.PubServerName = "", "", " Top 5 ") & " 2 As OrderField, H.ManualRefNo [Inv_No], H.V_Date AS [Inv_Date],  " &
                            " L.Rate, L.Qty, L.DiscountPer As Disc_Per, L.AdditionalDiscountPer As Add_Disc_Per, L.Deal " &
                            " FROM SaleInvoiceDetail L  With (NoLock) " &
                            " LEFT JOIN  SaleInvoice H  With (NoLock) ON L.DocId = H.DocId " &
                            " Left Join Voucher_Type Vt  With (NoLock) on H.V_Type = Vt.V_Type " &
                            " Where  NCat = '" & AgLibrary.ClsMain.agConstants.Ncat.SaleInvoice & "' And L.Item = '" & Item & "'" &
                            " And H.DocId <> '" & mSearchCode & "' " &
                            " And H.SaleToParty = '" & DglMain.Item(Col1Value, rowSaleToParty).Tag & "' " &
                            " And Date(H.V_Date) <=" & AgL.Chk_Date(DglMain.Item(Col1Value, rowV_Date).Value) & " " &
                            " ORDER BY OrderField, H.V_Date DESC " & IIf(AgL.PubServerName = "", " Limit 5 ", "") & ""


                'If AgL.PubServerName = "" Then
                '    mQry += " SELECT H.ManualRefNo [Inv_No], H.V_Date AS [Inv_Date],  " &
                '            " L.Rate, L.Qty, L.DiscountPer As Disc_Per, L.AdditionalDiscountPer As Add_Disc_Per, L.Deal " &
                '            " FROM SaleInvoiceDetail L  With (NoLock) " &
                '            " LEFT JOIN  SaleInvoice H  With (NoLock) ON L.DocId = H.DocId " &
                '            " Left Join Voucher_Type Vt  With (NoLock) on H.V_Type = Vt.V_Type " &
                '            " Where  NCat = '" & AgLibrary.ClsMain.agConstants.Ncat.SaleInvoice & "' And L.Item = '" & Item & "'" &
                '            " And H.DocId <> '" & mSearchCode & "' " &
                '            " And H.SaleToParty ='" & DglMain.Item(Col1Value, rowSaleToParty).Tag & "' " &
                '            " And Date(H.V_Date) <=" & AgL.Chk_Date(DglMain.Item(Col1Value, rowV_Date).Value) & " " &
                '            " ORDER BY H.V_Date DESC Limit 5  "
                'Else
                '    mQry += " SELECT Top 5 H.ManualRefNo [Inv_No], H.V_Date AS [Inv_Date],  " &
                '            " L.Rate, L.Qty, L.DiscountPer As Disc_Per, L.AdditionalDiscountPer As Add_Disc_Per, L.Deal " &
                '            " FROM SaleInvoiceDetail L  With (NoLock) " &
                '            " LEFT JOIN  SaleInvoice H  With (NoLock) ON L.DocId = H.DocId " &
                '            " Left Join Voucher_Type Vt  With (NoLock) on H.V_Type = Vt.V_Type " &
                '            " Where NCat = '" & AgLibrary.ClsMain.agConstants.Ncat.SaleInvoice & "' And L.Item = '" & Item & "'" &
                '            " And H.DocId <> '" & mSearchCode & "' " &
                '            " And H.SaleToParty ='" & DglMain.Item(Col1Value, rowSaleToParty).Tag & "' " &
                '            " And H.V_Date <=" & AgL.Chk_Date(DglMain.Item(Col1Value, rowV_Date).Value) & " " &
                '            " ORDER BY H.V_Date DESC  "
                'End If
                DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)





                If DtTemp.Rows.Count = 0 Then Dgl.DataSource = Nothing : Dgl.Visible = False : Exit Sub

                Dgl.DataSource = DtTemp
                Dgl.Visible = True
                If Dgl.Columns.Contains("OrderField") Then Dgl.Columns("OrderField").Visible = False

                'Dgl.DataSource.DefaultView.RowFilter = " Item='" & Item & "' "

                Me.Controls.Add(Dgl)
                Dgl.Left = Me.Left + 12
                'Dgl.Top = Me.Bottom - Dgl.Height - 100
                Dgl.Top = PnlTotals.Bottom
                Dgl.Height = 130
                Dgl.Width = 450
                Dgl.Anchor = AnchorStyles.Bottom + AnchorStyles.Left
                Dgl.ColumnHeadersHeight = 40
                Dgl.AllowUserToAddRows = False
                If Dgl.Columns.Count > 0 Then

                    If CSV_Qry <> "" Then J = CSV_QryArr.Length

                    For I = 0 To Dgl.ColumnCount - 1
                        If CSV_Qry <> "" Then
                            If I < J Then
                                If Val(CSV_QryArr(I)) > 0 Then
                                    Dgl.Columns(I).Width = Val(CSV_QryArr(I))
                                Else
                                    Dgl.AutoResizeColumn(I)
                                    'Dgl.Columns(I).Width = 100
                                End If
                            Else
                                Dgl.AutoResizeColumn(I)
                                'Dgl.Columns(I).Width = 100
                            End If
                        Else
                            Dgl.Columns(I).Width = 100
                        End If
                        Dgl.Columns(I).SortMode = DataGridViewColumnSortMode.NotSortable
                        IGridWidth += Dgl.Columns(I).Width
                    Next


                    Dgl.Width = IGridWidth + 50


                    Dgl.RowHeadersVisible = False
                    Dgl.EnableHeadersVisualStyles = False
                    Dgl.AllowUserToResizeRows = False
                    Dgl.ReadOnly = True
                    Dgl.AutoResizeRows()
                    Dgl.AutoResizeColumnHeadersHeight()
                    Dgl.BackgroundColor = Color.Cornsilk
                    Dgl.ColumnHeadersDefaultCellStyle.BackColor = Color.Cornsilk
                    Dgl.DefaultCellStyle.BackColor = Color.Cornsilk
                    Dgl.ColumnHeadersBorderStyle = DataGridViewHeaderBorderStyle.None
                    Dgl.CellBorderStyle = DataGridViewCellBorderStyle.None
                    Dgl.Font = New Font(New FontFamily("Verdana"), 8)
                    Dgl.ColumnHeadersDefaultCellStyle.Font = New Font(New FontFamily("Verdana"), 8, FontStyle.Bold)
                    Dgl.BringToFront()
                    Dgl.Show()
                End If
            End If
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub
    Private Sub Dgl1_RowEnter(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles Dgl1.RowEnter
        If AgL.XNull(Dgl1.Item(Col1SKU, e.RowIndex).Tag) = "" Then
            FShowTransactionHistory(Dgl1.Item(Col1Item, e.RowIndex).Tag, e.RowIndex)
        Else
            FShowTransactionHistory(Dgl1.Item(Col1SKU, e.RowIndex).Tag, e.RowIndex)
        End If

        LblPurchaseRate.Text = Format(Val(Dgl1.Item(Col1PurchaseRate, e.RowIndex).Value), "0.00")

        If AgL.VNull(Dgl1.Item(Col1CurrentStock, e.RowIndex).Value) = 0 Then
            Dgl1.Item(Col1CurrentStock, e.RowIndex).Value = ClsMain.FGetCurrentStock(Dgl1.Item(Col1Item, e.RowIndex).Tag,
                                    Dgl1.Item(Col1Godown, e.RowIndex).Tag, DglMain.Item(Col1Value, rowV_Date).Value)
        End If
        LblCurrentStock.Text = Dgl1.Item(Col1CurrentStock, e.RowIndex).Value


        Dim mRow = e.RowIndex
        Try
            If mPrevRowIndex <> e.RowIndex Then
                'FChangeOptions(mRow)
            End If
            mPrevRowIndex = mRow
        Catch ex As Exception
        End Try
    End Sub

    Private Sub Dgl1_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles Dgl1.Leave
        Dgl.Visible = False
    End Sub

    'Private Sub FCheckDuplicate(ByVal mRow As Integer)
    '    Dim I As Integer = 0
    '    Dim Str1 As String = ""
    '    Dim Str2 As String = ""
    '    Try
    '        With Dgl1
    '            For I = 0 To .Rows.Count - 1
    '                If .Item(Col1Item, I).Value <> "" Then
    '                    If mRow <> I Then
    '                        Str1 = Dgl1.Item(Col1Item, I).Value & Dgl1.Item(Col1Specification, I).Value & Dgl1.Item(Col1Dimension1, I).Value & Dgl1.Item(Col1Dimension2, I).Value & Dgl1.Item(Col1Dimension3, I).Value & Dgl1.Item(Col1Dimension4, I).Value & Dgl1.Item(Col1Barcode, I).Value
    '                        Str2 = Dgl1.Item(Col1Item, mRow).Value & Dgl1.Item(Col1Specification, mRow).Value & Dgl1.Item(Col1Dimension1, mRow).Value & Dgl1.Item(Col1Dimension2, mRow).Value & Dgl1.Item(Col1Dimension3, mRow).Value & Dgl1.Item(Col1Dimension4, mRow).Value & Dgl1.Item(Col1Barcode, mRow).Value
    '                        If AgL.StrCmp(Str1, Str2) Then
    '                            If MsgBox("Item " & .Item(Col1Item, I).Value & " Is Already Feeded At Row No " & .Item(ColSNo, I).Value & ".Do You Want To Continue ?", MsgBoxStyle.Information + MsgBoxStyle.YesNo) = MsgBoxResult.No Then
    '                                Dgl1.Item(Col1Item, mRow).Tag = "" : Dgl1.Item(Col1Item, mRow).Value = ""
    '                            Else
    '                                If AgL.XNull(DtV_TypeSettings.Rows(0)("ActionOnDuplicateItem")).ToString.ToUpper = "DO NOTHING" Then
    '                                ElseIf AgL.XNull(DtV_TypeSettings.Rows(0)("ActionOnDuplicateItem")).ToString.ToUpper = "GO TO FIRST ITEM" Then
    '                                    Dim mFirstRowIndex As Integer
    '                                    mFirstRowIndex = Val(Dgl1.Item(ColSNo, I).Value) - 1
    '                                    Dgl1.CurrentCell = Dgl1.Item(Col1DocQty, mFirstRowIndex)
    '                                    Dgl1.Item(Col1Item, mRow).Tag = "" : Dgl1.Item(Col1Item, mRow).Value = ""
    '                                End If
    '                            End If
    '                            '.CurrentCell = .Item(Col1Item, I) : Dgl1.Focus()
    '                            '.Rows.Remove(.Rows(mRow)) : Exit Sub
    '                        End If
    '                    End If
    '                End If
    '            Next
    '        End With
    '    Catch ex As Exception
    '        MsgBox(ex.Message)
    '    End Try
    'End Sub


    Private Sub FCheckDuplicate(ByVal mRow As Integer)
        Dim I As Integer = 0
        Dim Str1 As String = ""
        Dim Str2 As String = ""
        Try
            If AgL.XNull(DtV_TypeSettings.Rows(0)("ActionOnDuplicateItem")).ToString <> ActionOnDuplicateItem.DoNothing Then
                With Dgl1
                    For I = 0 To .Rows.Count - 1
                        If .Item(Col1SKU, I).Value <> "" Then
                            If mRow <> I Then
                                Str1 = Dgl1.Item(Col1Item, I).Value & Dgl1.Item(Col1Specification, I).Value & Dgl1.Item(Col1Dimension1, I).Value & Dgl1.Item(Col1Dimension2, I).Value & Dgl1.Item(Col1Dimension3, I).Value & Dgl1.Item(Col1Dimension4, I).Value & Dgl1.Item(Col1Barcode, I).Value
                                Str2 = Dgl1.Item(Col1Item, mRow).Value & Dgl1.Item(Col1Specification, mRow).Value & Dgl1.Item(Col1Dimension1, mRow).Value & Dgl1.Item(Col1Dimension2, mRow).Value & Dgl1.Item(Col1Dimension3, mRow).Value & Dgl1.Item(Col1Dimension4, mRow).Value & Dgl1.Item(Col1Barcode, mRow).Value
                                If AgL.StrCmp(Str1, Str2) Then
                                    If MsgBox("Item " & .Item(Col1Item, I).Value & " Is Already Feeded At Row No " & .Item(ColSNo, I).Value & ".Do You Want To Continue ?", MsgBoxStyle.Information + MsgBoxStyle.YesNo) = MsgBoxResult.No Then
                                        Dgl1.Item(Col1Item, mRow).Tag = "" : Dgl1.Item(Col1Item, mRow).Value = ""
                                    Else
                                        If AgL.XNull(DtV_TypeSettings.Rows(0)("ActionOnDuplicateItem")).ToString = ActionOnDuplicateItem.AlertAndAskToContinue Then
                                        ElseIf AgL.XNull(DtV_TypeSettings.Rows(0)("ActionOnDuplicateItem")).ToString = ActionOnDuplicateItem.AlertAndGoToFirstItem Then
                                            Dim mFirstRowIndex As Integer
                                            mFirstRowIndex = Val(Dgl1.Item(ColSNo, I).Value) - 1
                                            Dgl1.CurrentCell = Dgl1.Item(Col1DocQty, mFirstRowIndex)
                                            Dgl1.Item(Col1Item, mRow).Tag = "" : Dgl1.Item(Col1Item, mRow).Value = ""
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    Next
                End With
            End If
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub

    Private Sub FFormatRateCells(ByVal mRow As Integer)
        'Dim I As Integer = 0
        'Try
        '    If Val(Dgl1.Item(Col1Rate, mRow).Value) < Val(Dgl1.Item(Col1PurchaseRate, mRow).Value) Then
        '        Dgl1.Item(Col1Rate, mRow).Style.Font = New Font(Dgl1.DefaultCellStyle.Font.FontFamily, Dgl1.DefaultCellStyle.Font.Size, FontStyle.Bold)
        '        Dgl1.Item(Col1Rate, mRow).Style.ForeColor = Color.Red

        '    Else
        '        Dgl1.Item(Col1Rate, mRow).Style.ForeColor = Color.Black
        '        Dgl1.Item(Col1Rate, mRow).Style.Font = New Font(Dgl1.DefaultCellStyle.Font.FontFamily, Dgl1.DefaultCellStyle.Font.Size, FontStyle.Regular)
        '    End If
        'Catch ex As Exception
        '    MsgBox(ex.Message)
        'End Try
    End Sub


    Private Sub FPostInPurchIndent(ByVal Conn As Object, ByVal Cmd As Object, ByVal mRow As Integer)
        Dim mSr As Integer = 0

        mQry = " Select Count(*) From PurchIndent H  With (NoLock) LEFT JOIN PurchIndentDetail L  With (NoLock) ON H.DocId = L.DocId Where H.V_Date = '" & DglMain.Item(Col1Value, rowV_Date).Value & "' And L.Item = '" & Dgl1.Item(Col1Item, mRow).Tag & "'"
        If AgL.VNull(AgL.Dman_Execute(mQry, AgL.GcnRead).ExecuteScalar) = 0 Then
            mQry = " Select Count(*) From PurchIndent  With (NoLock)  Where DocId = '" & mSearchCode & "'  "
            If AgL.VNull(AgL.Dman_Execute(mQry, AgL.GcnRead).ExecuteScalar) = 0 Then
                mQry = " INSERT INTO PurchIndent " &
                            " ( " &
                            " DocID, " &
                            " V_Type, " &
                            " V_Prefix, " &
                            " V_Date, " &
                            " V_No, " &
                            " Div_Code, " &
                            " Site_Code, " &
                            " Remarks, " &
                            " EntryBy, " &
                            " EntryDate) " &
                            " Values ( " &
                            " '" & mSearchCode & "', " &
                            " '" & DglMain.Item(Col1Value, rowV_Type).Tag & "', " &
                            " " & AgL.Chk_Text(LblPrefix.Text) & ", " &
                            " " & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_Date).Value) & ", " &
                            " " & Val(DglMain.Item(Col1Value, rowV_No).Value) & ", " &
                            " " & AgL.Chk_Text(TxtDivision.Tag) & ", " &
                            " " & AgL.Chk_Text(DglMain.Item(Col1Value, rowSite_Code).Tag) & ", " &
                            " " & AgL.Chk_Text(Dgl3(Col1Value, rowRemarks).Value) & ", " &
                            " '" & AgL.PubUserName & "', " &
                            " '" & AgL.PubLoginDate & "') "
                AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            End If




            mQry = " Select Max(Sr) From PurchIndentDetail  With (NoLock)  Where DocId = '" & mSearchCode & "'  "
            mSr = AgL.VNull(AgL.Dman_Execute(mQry, AgL.GcnRead).ExecuteScalar)

            mSr += 1
            mQry = " INSERT INTO PurchIndentDetail(DocId, Sr, Item, IndentQty, Unit) " &
                    " Values('" & mSearchCode & "', " & mSr & ", " & AgL.Chk_Text(Dgl1.Item(Col1Item, mRow).Tag) & ", 1, " &
                    " " & AgL.Chk_Text(Dgl1.Item(Col1Unit, mRow).Value) & ")"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
        End If
        Dgl1.Item(ColSNo, mRow).Style.ForeColor = Color.Red
        Dgl1.Item(ColSNo, mRow).Style.Font = New Font(Dgl1.DefaultCellStyle.Font.FontFamily, Dgl1.DefaultCellStyle.Font.Size, FontStyle.Bold)
    End Sub

    Private Sub Topctrl1_tbEdit() Handles Topctrl1.tbEdit
        If mFlag_Import = True Then
            If Dgl3.Visible = True Then
                Dgl3.CurrentCell = Dgl3(Col1Value, rowRemarks)
                Dgl3.Focus() : MakeGridCurrentCellNothing(Dgl3.Name)
                Exit Sub
            End If
        End If
        If Dgl1.Rows.Count > 0 Then
            If Dgl1.Columns(Col1Item).Visible = True Then
                Dgl1.CurrentCell = Dgl1.Item(Col1Item, Dgl1.Rows.Count - 1) : Dgl1.Focus() : MakeGridCurrentCellNothing(Dgl1.Name)
            Else
                Dgl1.CurrentCell = Dgl1.Item(Dgl1.FirstDisplayedCell.ColumnIndex, Dgl1.Rows.Count - 1) : Dgl1.Focus() : MakeGridCurrentCellNothing(Dgl1.Name)
            End If
        End If
    End Sub


    Private Function FCreateHelpSubgroup() As DataSet
        Dim strCond As String = ""
        If DtV_TypeSettings.Rows.Count > 0 Then
            If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_AcGroup")) <> "" Then
                If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_AcGroup")).ToString.Substring(0, 1) = "+" Then
                    strCond += " And CharIndex('+' || Sg.GroupCode,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_AcGroup")) & "') > 0 "
                ElseIf AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_AcGroup")).ToString.Substring(0, 1) = "-" Then
                    strCond += " And CharIndex('-' || Sg.GroupCode,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_AcGroup")) & "') <= 0 "
                End If
            End If

            If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_SubgroupType")) <> "" Then
                If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_SubgroupType")).ToString.Substring(0, 1) = "+" Then
                    strCond += " And CharIndex('+' || Sg.SubgroupType,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_SubgroupType")) & "') > 0 "
                ElseIf AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_SubgroupType")).ToString.Substring(0, 1) = "-" Then
                    strCond += " And CharIndex('-' || Sg.SubgroupType,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_SubgroupType")) & "') <= 0 "
                End If
            End If

            If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_Nature")) <> "" Then
                If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_Nature")).ToString.Substring(0, 1) = "+" Then
                    strCond += " And CharIndex('+' || Sg.Nature,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_Nature")) & "') > 0 "
                ElseIf AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_Nature")).ToString.Substring(0, 1) = "-" Then
                    strCond += " And CharIndex('-' || Sg.Nature,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_Nature")) & "') <= 0 "
                End If
            End If

            If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_AcTreeNodeType")) <> "" Then
                If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_AcTreeNodeType")).ToString.Contains(TreeNodeType.Leaf) Then
                    strCond += " And Sg.Parent Is Not Null "
                End If
                If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_AcTreeNodeType")).ToString.Contains(TreeNodeType.Root) Then
                    strCond += " And Sg.Parent Is Null "
                End If
                If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_AcTreeNodeType")).ToString.Contains(TreeNodeType.Parent) Then
                    strCond += " And Sg.SubCode In (Select Distinct Parent From SubGroup) "
                End If
            End If
        End If

        If FGetSettings(SettingFields.FilterInclude_Process, SettingType.General) <> "" Then
            If FGetSettings(SettingFields.FilterInclude_Process, SettingType.General).ToString.Substring(0, 1) = "+" Then
                strCond += " And CharIndex('+' || IfNull(Sp.Process,'" & Process.Sales & "'),'" & FGetSettings(SettingFields.FilterInclude_Process, SettingType.General) & "') > 0 "
            ElseIf FGetSettings(SettingFields.FilterInclude_Process, SettingType.General).ToString.Substring(0, 1) = "-" Then
                strCond += " And CharIndex('-' || IfNull(Sp.Process,'" & Process.Sales & "'),'" & FGetSettings(SettingFields.FilterInclude_Process, SettingType.General) & "') <= 0 "
            End If
        End If

        If Not AgL.VNull(AgL.PubDtEnviro.Rows(0)("ShowAccountsOfOtherDivisions")) Then
            strCond += " And (Sg.Div_Code = '" & AgL.PubDivCode & "' Or IfNull(Sg.ShowAccountInOtherDivisions,0) = 1) "
        End If

        If Not AgL.VNull(AgL.PubDtEnviro.Rows(0)("ShowAccountsOfOtherSites")) Then
            strCond += " And (Sg.Site_Code = '" & AgL.PubSiteCode & "' Or IfNull(Sg.ShowAccountInOtherSites,0) = 1) "
        End If

        strCond += " And Sg.Nature In ('" & ClsMain.SubGroupNature.Customer & "','" & ClsMain.SubGroupNature.Supplier & "','" & ClsMain.SubGroupNature.Cash & "','" & ClsMain.SubGroupNature.Bank & "')"

        mQry = "SELECT Sg.SubCode As Code, Sg.Name || ',' || IfNull(C.CityName,'') As Party, Sg.Address, Ag.GroupName, Sg.SalesTaxPostingGroup, " &
                " Sg.SalesTaxPostingGroup, " &
                " Sg.Div_Code, Sg.CreditDays, Sg.CreditLimit, Sg.Nature " &
                " FROM SubGroup Sg  With (NoLock) " &
                " LEFT JOIN City C  With (NoLock) ON Sg.CityCode = C.CityCode  " &
                " Left Join AcGroup Ag  With (NoLock) on Sg.GroupCode = Ag.GroupCode " &
                " Left Join SubgroupProcess SP On Sg.Subcode = SP.Subcode " &
                " Where IfNull(Sg.Status,'" & AgTemplate.ClsMain.EntryStatus.Active & "') = '" & AgTemplate.ClsMain.EntryStatus.Active & "' " & strCond
        mQry += " Union All SELECT Sg.SubCode As Code, Sg.Name || ',' || IfNull(C.CityName,'') As Party, Sg.Address, Ag.GroupName, Sg.SalesTaxPostingGroup, " &
                " Sg.SalesTaxPostingGroup, " &
                " Sg.Div_Code, Sg.CreditDays, Sg.CreditLimit, Sg.Nature " &
                " FROM SubGroup Sg  With (NoLock) " &
                " LEFT JOIN City C  With (NoLock) ON Sg.CityCode = C.CityCode  " &
                " Left Join AcGroup Ag  With (NoLock) on Sg.GroupCode = Ag.GroupCode " &
                " Left Join SubgroupProcess SP On Sg.Subcode = SP.Subcode " &
                " Where IfNull(Sg.Status,'" & AgTemplate.ClsMain.EntryStatus.Active & "') = '" & AgTemplate.ClsMain.EntryStatus.Active & "' " &
                " And Sg.Nature In ('" & ClsMain.SubGroupNature.Supplier & "')    "
        If FGetSettings(SettingFields.FilterInclude_Process, SettingType.General) <> "" Then
            mQry += " And CharIndex('+' || IfNull(Sp.Process,'.'),'" & FGetSettings(SettingFields.FilterInclude_Process, SettingType.General) & "') > 0 "
        End If


        'TxtSaleToParty.AgHelpDataSet(6, TabControl1.Top + TP1.Top, TabControl1.Left + TP1.Left) = AgL.FillData(mQry, AgL.GCn)
        'Dgl2.Item(Col1Head, rowShipToParty).Tag = TxtSaleToParty.AgHelpDataSet
        Return AgL.FillData(mQry, AgL.GCn)
    End Function


    Private Function FCreateHelpBillToParty() As DataSet
        Dim strCond As String = ""
        If DtV_TypeSettings.Rows.Count > 0 Then
            If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_AcGroup")) <> "" Then
                strCond += " And CharIndex('+' || Sg.GroupCode,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_AcGroup")) & "') > 0 "
                strCond += " And CharIndex('-' || Sg.GroupCode,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_AcGroup")) & "') <= 0 "
            End If

            If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_SubgroupType")) <> "" Then
                strCond += " And CharIndex('+' || Sg.SubgroupType,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_SubgroupType")) & "') > 0 "
                strCond += " And CharIndex('-' || Sg.SubgroupType,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_SubgroupType")) & "') <= 0 "
            End If

            If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_Nature")) <> "" Then
                strCond += " And CharIndex('+' || Sg.Nature,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_Nature")) & "') > 0 "
                strCond += " And CharIndex('-' || Sg.Nature,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_Nature")) & "') <= 0 "
            End If
        End If

        strCond += " And Sg.Nature In ('" & ClsMain.SubGroupNature.Customer & "','" & ClsMain.SubGroupNature.Supplier & "','" & ClsMain.SubGroupNature.Cash & "','" & ClsMain.SubGroupNature.Bank & "')"

        If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_AcTreeNodeType")).ToString.Contains(TreeNodeType.Leaf) Then
            strCond += " And Sg.SubCode In (Select Parent From SubGroup Where Subcode = '" & DglMain.Item(Col1Value, rowSaleToParty).Tag & "')"
        End If

        mQry = "SELECT Sg.SubCode As Code, Sg.Name || ',' || IfNull(C.CityName,'') As Party, Sg.Address, Ag.GroupName, Sg.SalesTaxPostingGroup, " &
                " Sg.SalesTaxPostingGroup, " &
                " Sg.Div_Code, Sg.CreditDays, Sg.CreditLimit, Sg.Nature " &
                " FROM SubGroup Sg  With (NoLock) " &
                " LEFT JOIN City C  With (NoLock) ON Sg.CityCode = C.CityCode  " &
                " Left Join AcGroup Ag  With (NoLock) on Sg.GroupCode = Ag.GroupCode " &
                " Where 1 = 1 " &
                " And IfNull(Sg.Status,'" & AgTemplate.ClsMain.EntryStatus.Active & "') = '" & AgTemplate.ClsMain.EntryStatus.Active & "' " & strCond
        'TxtBillToParty.AgHelpDataSet(6, TabControl1.Top + TP1.Top, TabControl1.Left + TP1.Left) = AgL.FillData(mQry, AgL.GCn)
        Return AgL.FillData(mQry, AgL.GCn)
    End Function
    Private Function FCreateHelpLinkedParty() As DataSet
        Dim strCond As String = ""

        strCond += " And Sg.Nature In ('" & ClsMain.SubGroupNature.Customer & "','" & ClsMain.SubGroupNature.Supplier & "','" & ClsMain.SubGroupNature.Cash & "','" & ClsMain.SubGroupNature.Bank & "')"

        If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_AcTreeNodeType")).ToString.Contains(TreeNodeType.Leaf) Then
            strCond += " And Sg.SubCode In (Select Parent From SubGroup Where Subcode = '" & DglMain.Item(Col1Value, rowSaleToParty).Tag & "')"
        End If

        strCond += " And Sg.Parent = '" & DglMain.Item(Col1Value, rowSaleToParty).Tag & "' "

        mQry = "SELECT Sg.SubCode As Code, Sg.Name || ',' || IfNull(C.CityName,'') As Party, Sg.Address, Ag.GroupName, Sg.SalesTaxPostingGroup, " &
                " Sg.SalesTaxPostingGroup, " &
                " Sg.Div_Code, Sg.CreditDays, Sg.CreditLimit, Sg.Nature " &
                " FROM SubGroup Sg  With (NoLock) " &
                " LEFT JOIN City C  With (NoLock) ON Sg.CityCode = C.CityCode  " &
                " Left Join AcGroup Ag  With (NoLock) on Sg.GroupCode = Ag.GroupCode " &
                " Where 1 = 1 " &
                " And IfNull(Sg.Status,'" & AgTemplate.ClsMain.EntryStatus.Active & "') = '" & AgTemplate.ClsMain.EntryStatus.Active & "' " & strCond
        'TxtBillToParty.AgHelpDataSet(6, TabControl1.Top + TP1.Top, TabControl1.Left + TP1.Left) = AgL.FillData(mQry, AgL.GCn)
        Return AgL.FillData(mQry, AgL.GCn)
    End Function


    Private Sub FCreateHelpItemCategory()
        Dim strCond As String = ""

        Dim ContraV_TypeCondStr As String = ""

        If DtV_TypeSettings.Rows.Count > 0 Then
            If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) <> "" Then
                If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")).ToString.Substring(0, 1) = "+" Then
                    strCond += " And CharIndex('+' || I.ItemType,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) & "') > 0 "
                ElseIf AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")).ToString.Substring(0, 1) = "-" Then
                    strCond += " And CharIndex('-' || I.ItemType,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) & "') <= 0 "
                End If
            End If
        End If

        Dim FilterInclude_ItemType As String = FGetSettings(SettingFields.FilterInclude_ItemType, SettingType.General)
        If FilterInclude_ItemType <> "" Then
            If FilterInclude_ItemType.Substring(0, 1) = "+" Then
                strCond += " And CharIndex('+' || I.ItemType,'" & FilterInclude_ItemType & "') > 0 "
            ElseIf FilterInclude_ItemType.Substring(0, 1) = "-" Then
                strCond += " And CharIndex('-' || I.ItemType,'" & FilterInclude_ItemType & "') <= 0 "
            End If
        End If

        mQry = "SELECT I.Code, I.Description
                        FROM ItemCategory I  With (NoLock)
                        Where IfNull(I.Status,'" & AgTemplate.ClsMain.EntryStatus.Active & "') = '" & AgTemplate.ClsMain.EntryStatus.Active & "' " & strCond
        Dgl1.AgHelpDataSet(Col1ItemCategory) = AgL.FillData(mQry, AgL.GCn)
    End Sub
    Private Sub FCreateHelpDimension1(RowIndex As Integer)
        Dim strCond As String = ""

        Dim ContraV_TypeCondStr As String = ""

        If DtV_TypeSettings.Rows.Count > 0 Then
            If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) <> "" Then
                If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")).ToString.Substring(0, 1) = "+" Then
                    strCond += " And CharIndex('+' || I.ItemType,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) & "') > 0 "
                ElseIf AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")).ToString.Substring(0, 1) = "-" Then
                    strCond += " And CharIndex('-' || I.ItemType,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) & "') <= 0 "
                End If
            End If
        End If

        If FDivisionNameForCustomization(15) = "MANISH TEXTILES" Or FDivisionNameForCustomization(13) = "JEET TEXTILES" Or FDivisionNameForCustomization(13) = "ARORA TEXTILE" Then
            If Dgl1.Item(Col1Item, RowIndex).Value <> "" Then
                strCond += " And I.BaseItem = '" & Dgl1.Item(Col1Item, RowIndex).Tag & "'  "
            End If
        Else
            If Dgl1.Item(Col1ItemCategory, RowIndex).Value <> "" Then
                strCond += " And (I.ItemCategory = '" & Dgl1.Item(Col1ItemCategory, RowIndex).Tag & "' Or I.ItemCategory Is Null Or I.BaseItem Is Not Null) "
            End If

            If Dgl1.Item(Col1Item, RowIndex).Value <> "" Then
                strCond += " And (I.BaseItem = '" & Dgl1.Item(Col1Item, RowIndex).Tag & "' Or I.BaseItem Is Null ) "
            End If
        End If


        strCond += " And I.V_Type = '" & ItemV_Type.Dimension1 & "' "

        If DtItemRelation.Rows.Count > 0 Then
            If AgL.XNull(Dgl1.Item(Col1Dimension3, RowIndex).Tag) <> "" Then
                If DtItemRelation.Select("ItemV_Type = '" & ItemV_Type.Dimension3 & "'
                                And RelatedItemV_Type = '" & ItemV_Type.Dimension1 & "'").Length > 0 Then
                    Dim DrItemRelation As DataRow() = DtItemRelation.Select("Item = '" & Dgl1.Item(Col1Dimension3, RowIndex).Tag & "'")
                    Dim bFilterItems As String = ""
                    For I As Integer = 0 To DrItemRelation.Length - 1
                        If bFilterItems <> "" Then bFilterItems += ","
                        bFilterItems += AgL.Chk_Text(AgL.XNull(DrItemRelation(I)("RelatedItem")))
                    Next
                    If bFilterItems <> "" Then
                        strCond += " And I.Code In (" & bFilterItems & ") "
                    Else
                        strCond += " And I.Code In ('') "
                    End If
                End If
            End If
        End If

        'This is only check for pratham not agarwal because there is no design wise rate.
        If FDivisionNameForCustomization(14) = "PRATHAM APPARE" Then
            If AgL.XNull(Dgl1.Item(Col1Dimension3, RowIndex).Tag) <> "" Then
                strCond += " And I.Code In (SELECT DISTINCT L.Dimension1
                    FROM RateList H 
                    LEFT JOIN RateListDetail L ON H.Code = L.Code
                    WHERE H.V_Type = 'RTLE'
                    AND L.ItemCategory = '" & Dgl1.Item(Col1ItemCategory, RowIndex).Tag & "'
                    AND L.Dimension3 = '" & Dgl1.Item(Col1Dimension3, RowIndex).Tag & "')"
            End If
        End If

        mQry = "SELECT I.Code, I.Description
                        FROM Item I  With (NoLock)
                        Where IfNull(I.Status,'" & AgTemplate.ClsMain.EntryStatus.Active & "') = '" & AgTemplate.ClsMain.EntryStatus.Active & "' " & strCond
        Dgl1.AgHelpDataSet(Col1Dimension1) = AgL.FillData(mQry, AgL.GCn)
    End Sub
    Private Sub FCreateHelpDimension2(RowIndex As Integer)
        Dim strCond As String = ""

        Dim ContraV_TypeCondStr As String = ""

        If DtV_TypeSettings.Rows.Count > 0 Then
            If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) <> "" Then
                If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")).ToString.Substring(0, 1) = "+" Then
                    strCond += " And CharIndex('+' || I.ItemType,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) & "') > 0 "
                ElseIf AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")).ToString.Substring(0, 1) = "-" Then
                    strCond += " And CharIndex('-' || I.ItemType,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) & "') <= 0 "
                End If
            End If
        End If

        If Dgl1.Item(Col1ItemCategory, RowIndex).Value <> "" Then
            strCond += " And (I.ItemCategory = '" & Dgl1.Item(Col1ItemCategory, RowIndex).Tag & "' Or I.ItemCategory Is Null ) "
        End If

        strCond += " And I.V_Type = '" & ItemV_Type.Dimension2 & "' "

        If DtItemRelation.Rows.Count > 0 Then
            If AgL.XNull(Dgl1.Item(Col1Dimension3, RowIndex).Tag) <> "" Then
                If DtItemRelation.Select("ItemV_Type = '" & ItemV_Type.Dimension3 & "'
                                And RelatedItemV_Type = '" & ItemV_Type.Dimension2 & "'").Length > 0 Then
                    Dim DrItemRelation As DataRow() = DtItemRelation.Select("Item = '" & Dgl1.Item(Col1Dimension3, RowIndex).Tag & "'")
                    Dim bFilterItems As String = ""
                    For I As Integer = 0 To DrItemRelation.Length - 1
                        If bFilterItems <> "" Then bFilterItems += ","
                        bFilterItems += AgL.Chk_Text(AgL.XNull(DrItemRelation(I)("RelatedItem")))
                    Next
                    If bFilterItems <> "" Then
                        strCond += " And I.Code In (" & bFilterItems & ") "
                    Else
                        strCond += " And I.Code In ('') "
                    End If
                End If
            End If
        End If

        'This is only check for pratham not agarwal because there is no design wise rate.
        If FDivisionNameForCustomization(14) = "PRATHAM APPARE" Then
            If AgL.XNull(Dgl1.Item(Col1Dimension3, RowIndex).Tag) <> "" Then
                strCond += " And I.Code In (SELECT DISTINCT L.Dimension2
                    FROM RateList H 
                    LEFT JOIN RateListDetail L ON H.Code = L.Code
                    WHERE H.V_Type = 'RTLE'
                    AND L.ItemCategory = '" & Dgl1.Item(Col1ItemCategory, RowIndex).Tag & "'
                    AND L.Dimension3 = '" & Dgl1.Item(Col1Dimension3, RowIndex).Tag & "')"
            End If
        End If

        mQry = "SELECT I.Code, I.Description
                        FROM Item I  With (NoLock)
                        Where IfNull(I.Status,'" & AgTemplate.ClsMain.EntryStatus.Active & "') = '" & AgTemplate.ClsMain.EntryStatus.Active & "' " & strCond
        Dgl1.AgHelpDataSet(Col1Dimension2) = AgL.FillData(mQry, AgL.GCn)
    End Sub
    Private Sub FCreateHelpSize(RowIndex As Integer)
        Dim strCond As String = ""

        Dim ContraV_TypeCondStr As String = ""

        If DtV_TypeSettings.Rows.Count > 0 Then
            If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) <> "" Then
                If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")).ToString.Substring(0, 1) = "+" Then
                    strCond += " And CharIndex('+' || I.ItemType,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) & "') > 0 "
                ElseIf AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")).ToString.Substring(0, 1) = "-" Then
                    strCond += " And CharIndex('-' || I.ItemType,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) & "') <= 0 "
                End If
            End If
        End If

        If Dgl1.Item(Col1ItemCategory, RowIndex).Value <> "" Then
            strCond += " And (I.ItemCategory = '" & Dgl1.Item(Col1ItemCategory, RowIndex).Tag & "' Or I.ItemCategory Is Null ) "
        End If

        strCond += " And I.V_Type = '" & ItemV_Type.SIZE & "' "

        If DtItemRelation.Rows.Count > 0 Then
            If AgL.XNull(Dgl1.Item(Col1Dimension3, RowIndex).Tag) <> "" Then
                If DtItemRelation.Select("ItemV_Type = '" & ItemV_Type.Dimension3 & "'
                                And RelatedItemV_Type = '" & ItemV_Type.SIZE & "'").Length > 0 Then
                    Dim DrItemRelation As DataRow() = DtItemRelation.Select("Item = '" & Dgl1.Item(Col1Dimension3, RowIndex).Tag & "'")
                    Dim bFilterItems As String = ""
                    For I As Integer = 0 To DrItemRelation.Length - 1
                        If bFilterItems <> "" Then bFilterItems += ","
                        bFilterItems += AgL.Chk_Text(AgL.XNull(DrItemRelation(I)("RelatedItem")))
                    Next
                    If bFilterItems <> "" Then
                        strCond += " And I.Code In (" & bFilterItems & ") "
                    Else
                        strCond += " And I.Code In ('') "
                    End If
                End If
            End If
        End If

        mQry = "SELECT I.Code, I.Description
                        FROM Item I  With (NoLock)
                        Where IfNull(I.Status,'" & AgTemplate.ClsMain.EntryStatus.Active & "') = '" & AgTemplate.ClsMain.EntryStatus.Active & "' " & strCond
        Dgl1.AgHelpDataSet(Col1Size) = AgL.FillData(mQry, AgL.GCn)
    End Sub

    Private Sub FCreateHelpItemInvoiceGroup(RowIndex As Integer)
        Dim strCond As String = ""

        Dim ContraV_TypeCondStr As String = ""

        If DtV_TypeSettings.Rows.Count > 0 Then
            If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) <> "" Then
                If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")).ToString.Substring(0, 1) = "+" Then
                    strCond += " And CharIndex('+' || I.ItemType,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) & "') > 0 "
                ElseIf AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")).ToString.Substring(0, 1) = "-" Then
                    strCond += " And CharIndex('-' || I.ItemType,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) & "') <= 0 "
                End If
            End If
        End If

        If Dgl1.Item(Col1ItemCategory, RowIndex).Value <> "" Then
            strCond += " And (I.ItemCategory = '" & Dgl1.Item(Col1ItemCategory, RowIndex).Tag & "' Or I.ItemCategory Is Null ) "
        End If

        strCond += " And I.V_Type = '" & ItemV_Type.ItemInvoiceGroup & "' "

        If DtItemRelation.Rows.Count > 0 Then
            If AgL.XNull(Dgl1.Item(Col1Dimension3, RowIndex).Tag) <> "" Then
                If DtItemRelation.Select("ItemV_Type = '" & ItemV_Type.Dimension3 & "'
                                And RelatedItemV_Type = '" & ItemV_Type.SIZE & "'").Length > 0 Then
                    Dim DrItemRelation As DataRow() = DtItemRelation.Select("Item = '" & Dgl1.Item(Col1Dimension3, RowIndex).Tag & "'")
                    Dim bFilterItems As String = ""
                    For I As Integer = 0 To DrItemRelation.Length - 1
                        If bFilterItems <> "" Then bFilterItems += ","
                        bFilterItems += AgL.Chk_Text(AgL.XNull(DrItemRelation(I)("RelatedItem")))
                    Next
                    If bFilterItems <> "" Then
                        strCond += " And I.Code In (" & bFilterItems & ") "
                    Else
                        strCond += " And I.Code In ('') "
                    End If
                End If
            End If
        End If

        mQry = "SELECT I.Code, I.Description
                        FROM Item I  With (NoLock)
                        Where IfNull(I.Status,'" & AgTemplate.ClsMain.EntryStatus.Active & "') = '" & AgTemplate.ClsMain.EntryStatus.Active & "' " & strCond
        Dgl1.AgHelpDataSet(Col1ItemInvoiceGroup) = AgL.FillData(mQry, AgL.GCn)
    End Sub
    Private Sub FCreateHelpSaleOrder()
        Dim strCond As String = ""

        mQry = "SELECT H.DocID, Max(H.V_Type || '-' || H.ManualRefNo) AS OrderNo, Sum(VOrderBalance.OrderBalanceAmount) AS OrderBalanceAmount
                    FROM (" & FGetSaleOrderBalanceQry(CType(AgL.VNull(DtV_TypeSettings.Rows(0)("CalculateContraBalanceOnValueYN")), Boolean), DglMain.Item(Col1Value, rowSaleToParty).Tag) & " ) AS VOrderBalance
                LEFT JOIN SaleInvoice H ON VOrderBalance.DocId = H.DocID
                GROUP BY H.DocID "
        Dgl1.AgHelpDataSet(Col1SaleInvoice) = AgL.FillData(mQry, AgL.GCn)
    End Sub
    Public Shared Function FGetSaleOrderBalanceQry(Optional CalculateContraBalanceOnValueYN As Boolean = False,
                                               Optional bParty As String = "") As String
        Dim mQry As String = "Select L.DocID, L.Sr, L.Amount - IfNull(VOrderCancel.OrderCancelAmount,0) - IfNull(VInvoice.InvoiceAmount,0) - 
                                IfNull(VInvoiceReturn.ReturnAmount, 0) As OrderBalanceAmount,
                        L.Qty -IfNull(VOrderCancel.OrderCancelQty, 0) - IfNull(VInvoice.InvoiceQty, 0) -
                                IfNull(VInvoiceReturn.ReturnQty, 0) AS OrderBalanceQty
                        From SaleInvoice H 
	                    Left Join SaleInvoiceDetail L ON H.DocID = L.DocID
                        Left Join Voucher_Type Vt ON H.V_Type = Vt.V_Type
                        Left Join(
		                    SELECT L.SaleInvoice, L.SaleInvoiceSr, Sum(L.Qty) As OrderCancelQty,
                            Sum(L.Amount) As OrderCancelAmount
		                    From SaleInvoice H 
		                    Left Join SaleInvoiceDetail L ON H.DocID = L.DocID
                            Left Join Voucher_Type Vt ON H.V_Type = Vt.V_Type
                            WHERE Vt.NCat = '" & Ncat.SaleOrderCancel & "'	
                            Group BY L.SaleInvoice, L.SaleInvoiceSr
	                    ) AS VOrderCancel ON L.DocID = VOrderCancel.SaleInvoice And L.Sr = VOrderCancel.SaleInvoiceSr
	                    Left Join(
		                    SELECT L.SaleInvoice, L.SaleInvoiceSr, Sum(L.Qty) As InvoiceQty,
                            Sum(L.Amount) As InvoiceAmount
		                    From SaleInvoice H 
		                    Left Join SaleInvoiceDetail L ON H.DocID = L.DocID
                            Left Join Voucher_Type Vt ON H.V_Type = Vt.V_Type
                            WHERE Vt.NCat = '" & Ncat.SaleInvoice & "'	
                            Group BY L.SaleInvoice, L.SaleInvoiceSr
	                    ) AS VInvoice ON L.DocID = VInvoice.SaleInvoice And L.Sr = VInvoice.SaleInvoiceSr
	                    Left Join(
		                    SELECT L.SaleInvoice, L.SaleInvoiceSr, Sum(L.Qty) As ReturnQty,
                            Sum(Sid.Amount) As ReturnAmount
		                    From SaleInvoice H 
		                    Left Join SaleInvoiceDetail L ON H.DocID = L.DocID
                            Left Join SaleInvoiceDetail Sid ON L.SaleInvoice = Sid.DocId And L.SaleInvoiceSr = Sid.Sr
                            Left Join Voucher_Type Vt ON H.V_Type = Vt.V_Type
                            WHERE Vt.NCat = '" & Ncat.SaleReturn & "'	
                            Group BY L.SaleInvoice, L.SaleInvoiceSr
	                    ) AS VInvoiceReturn ON L.DocID = VInvoiceReturn.SaleInvoice And L.Sr = VInvoiceReturn.SaleInvoiceSr
	                    WHERE 1=1 "
        If bParty <> "" Then
            mQry += " And H.SaleToParty = '" & bParty & "' "
        End If

        mQry += " And Vt.NCat = '" & Ncat.SaleOrder & "' "

        If CalculateContraBalanceOnValueYN = True Then
            mQry += " And L.Amount - IfNull(VOrderCancel.OrderCancelAmount,0) - IfNull(VInvoice.InvoiceAmount,0) - 
			                    IfNull(VInvoiceReturn.ReturnAmount,0) > 0 "
        Else
            mQry += " And L.Qty - IfNull(VOrderCancel.OrderCancelQty,0) - IfNull(VInvoice.InvoiceQty,0) - 
			                IfNull(VInvoiceReturn.ReturnQty,0) > 0 "
        End If
        FGetSaleOrderBalanceQry = mQry
    End Function

    Private Sub FCreateHelpItemGroup(RowIndex As Integer)
        Dim strCond As String = ""

        Dim ContraV_TypeCondStr As String = ""

        If DtV_TypeSettings.Rows.Count > 0 Then
            If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) <> "" Then
                If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")).ToString.Substring(0, 1) = "+" Then
                    strCond += " And CharIndex('+' || I.ItemType,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) & "') > 0 "
                ElseIf AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")).ToString.Substring(0, 1) = "-" Then
                    strCond += " And CharIndex('-' || I.ItemType,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) & "') <= 0 "
                End If
            End If
        End If

        If Dgl1.Item(Col1ItemCategory, RowIndex).Value <> "" Then
            strCond += " And (I.ItemCategory = '" & Dgl1.Item(Col1ItemCategory, RowIndex).Tag & "' Or I.ItemCategory Is Null ) "
        End If


        If Not AgL.VNull(AgL.PubDtEnviro.Rows(0)("ShowItemGroupsOfOtherDivisions")) Then
            strCond += " And (I.Div_Code = '" & AgL.PubDivCode & "' Or I.Div_Code Is Null Or IfNull(I.ShowItemGroupInOtherDivisions,0) =1) "
        End If


        If Not AgL.VNull(AgL.PubDtEnviro.Rows(0)("ShowItemGroupsOfOtherSites")) Then
            strCond += " And (I.Site_Code = '" & AgL.PubSiteCode & "' Or I.Site_Code Is Null Or IfNull(I.ShowItemGroupInOtherSites,0) =1) "
        End If


        'mQry = "Select IG.Code, IG.Description 
        '        From Item I  With (NoLock)
        '        Left Join ItemGroup IG  With (NoLock) On I.ItemGroup = IG.Code
        '        Where IfNull(I.Status,'" & AgTemplate.ClsMain.EntryStatus.Active & "') = '" & AgTemplate.ClsMain.EntryStatus.Active & "' " & strCond & "
        '        And Ig.Code Is Not Null
        '        Group By I.ItemGroup,IG.Code, IG.Description "



        mQry = "Select I.Code, I.Description
                        FROM ItemGroup I 
                        Where IfNull(I.Status,'" & AgTemplate.ClsMain.EntryStatus.Active & "') = '" & AgTemplate.ClsMain.EntryStatus.Active & "' " & strCond
        Dgl1.AgHelpDataSet(Col1ItemGroup) = AgL.FillData(mQry, AgL.GCn)
    End Sub
    Private Sub FCreateHelpItem(RowIndex As Integer)
        Dim strCond As String = ""
        If DtV_TypeSettings.Rows.Count > 0 Then
            If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) <> "" Then
                If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")).ToString.Substring(0, 1) = "+" Then
                    strCond += " And CharIndex('+' || I.ItemType,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) & "') > 0 "
                ElseIf AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")).ToString.Substring(0, 1) = "-" Then
                    strCond += " And CharIndex('-' || I.ItemType,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) & "') <= 0 "
                End If
            End If

            If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemV_Type")) <> "" Then
                If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemV_Type")).ToString.Substring(0, 1) = "+" Then
                    strCond += " And CharIndex('+' || I.V_Type,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemV_Type")) & "') > 0 "
                ElseIf AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemV_Type")).ToString.Substring(0, 1) = "-" Then
                    strCond += " And CharIndex('-' || I.V_Type,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemV_Type")) & "') <= 0 "
                End If
            Else
                strCond += " And I.V_Type In ('ITEM', 'IC') "
            End If


            If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemCategory")) <> "" Then
                If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemCategory")).ToString.Substring(0, 1) = "+" Then
                    strCond += " And CharIndex('+' || I.ItemCategory,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemCategory")) & "') > 0 "
                ElseIf AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemCategory")).ToString.Substring(0, 1) = "-" Then
                    strCond += " And CharIndex('-' || I.ItemCategory,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemCategory")) & "') <= 0 "
                End If
            End If


            If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemGroup")) <> "" Then
                If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemGroup")).ToString.Substring(0, 1) = "+" Then
                    strCond += " And CharIndex('+' || I.ItemGroup,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemGroup")) & "') > 0 "
                ElseIf AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemGroup")).ToString.Substring(0, 1) = "-" Then
                    strCond += " And CharIndex('-' || I.ItemGroup,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemGroup")) & "') <= 0 "
                End If
            End If


            If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_Item")) <> "" Then
                If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_Item")).ToString.Substring(0, 1) = "+" Then
                    strCond += " And CharIndex('+' || I.Code,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_Item")) & "') > 0 "
                ElseIf AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_Item")).ToString.Substring(0, 1) = "-" Then
                    strCond += " And CharIndex('-' || I.Code,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_Item")) & "') <= 0 "
                End If
            End If
        End If

        If Not AgL.VNull(AgL.PubDtEnviro.Rows(0)("ShowItemsOfOtherDivisions")) Then
            strCond += " And (I.Div_Code = '" & AgL.PubDivCode & "' Or I.Div_Code Is Null Or IfNull(I.ShowItemInOtherDivisions,0) =1) "
        End If

        If Not AgL.VNull(AgL.PubDtEnviro.Rows(0)("ShowItemsOfOtherSites")) Then
            strCond += " And (I.Site_Code = '" & AgL.PubSiteCode & "' Or I.Site_Code Is Null Or IfNull(I.ShowItemInOtherSites,0) =1) "
        End If


        If Dgl1.Item(Col1ItemCategory, RowIndex).Value <> "" And Dgl1.Columns(Col1ItemCategory).Visible And UserMovedOverItemCategory Then
            strCond += " And (I.ItemCategory = '" & Dgl1.Item(Col1ItemCategory, RowIndex).Tag & "' Or I.ItemCategory Is Null) "
        End If




        If FDivisionNameForCustomization(4) = "X DEVI" Then
            'strCond += " And I.ItemGroup = '" & Dgl1.Item(Col1ItemGroup, RowIndex).Tag & "' "
            Dim bParentItemGroup$ = ""
            bParentItemGroup = AgL.XNull(AgL.Dman_Execute(" Select Parent From Item Where Code = '" & Dgl1.Item(Col1ItemGroup, RowIndex).Tag & "'", AgL.GCn).ExecuteScalar())
            If bParentItemGroup <> "" Then
                strCond += " And I.ItemGroup = '" & bParentItemGroup & "' "
            Else
                strCond += " And I.ItemGroup = '" & Dgl1.Item(Col1ItemGroup, RowIndex).Tag & "' "
            End If
        Else
            If Dgl1.Item(Col1ItemGroup, RowIndex).Value <> "" And Dgl1.Columns(Col1ItemGroup).Visible And UserMovedOverItemGroup Then
                strCond += " And (I.ItemGroup = '" & Dgl1.Item(Col1ItemGroup, RowIndex).Tag & "' Or I.ItemGroup Is Null) "
            End If
        End If

        If FDivisionNameForCustomization(4) = "X DEVI" Then
            mQry = "SELECT I.Code, I.Description, IG.PrintingDescription as ItemGroup_PD, IfNull(Rld.Rate,0) As Rate " &
                  " FROM Item I  With (NoLock) " &
                  " Left Join Item IG On I.ItemGroup = IG.Code " &
                  " Left Join RateListDetail Rld On I.Code = Rld.Item And Rld.RateType = '" & Dgl2(Col1Value, rowRateType).Tag & "' " &
                  " Where I.ItemType <> '" & ItemTypeCode.ServiceProduct & "' 
                  And IfNull(I.Status,'" & AgTemplate.ClsMain.EntryStatus.Active & "') = '" & AgTemplate.ClsMain.EntryStatus.Active & "' " & strCond
        Else
            mQry = "SELECT I.Code, I.Description, IG.PrintingDescription as ItemGroup_PD, I.Rate " &
                  " FROM Item I  With (NoLock) " &
                  " Left Join Item IG On I.ItemGroup = IG.Code " &
                  " Where I.ItemType <> '" & ItemTypeCode.ServiceProduct & "' 
                  And IfNull(I.Status,'" & AgTemplate.ClsMain.EntryStatus.Active & "') = '" & AgTemplate.ClsMain.EntryStatus.Active & "' " & strCond
        End If



        mQry += " UNION ALL "
        mQry += "SELECT I.Code, I.Description, IG.PrintingDescription as ItemGroup_PD, I.Rate " &
                  " FROM Item I  With (NoLock) " &
                  " Left Join Item IG On I.ItemGroup = IG.Code " &
                  " Where I.ItemType = '" & ItemTypeCode.ServiceProduct & "' 
                  And IfNull(I.Status,'" & AgTemplate.ClsMain.EntryStatus.Active & "') = '" & AgTemplate.ClsMain.EntryStatus.Active & "' "


        If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemV_Type")) <> "" Then
            If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemV_Type")).ToString.Substring(0, 1) = "+" Then
                mQry += " And CharIndex('+' || I.V_Type,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemV_Type")) & "') > 0 "
            ElseIf AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemV_Type")).ToString.Substring(0, 1) = "-" Then
                mQry += " And CharIndex('-' || I.V_Type,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemV_Type")) & "') <= 0 "
            End If
        Else
            mQry += " And I.V_Type In ('ITEM', 'IC') "
        End If

        Dgl1.AgHelpDataSet(Col1Item) = AgL.FillData(mQry, AgL.GCn)
        PubDtSaleInvoiceItemHelp = Dgl1.AgHelpDataSet(Col1Item)
    End Sub

    Private Sub FCreateHelpInvoicedItem()
        Dim strCond As String = ""
        If DtV_TypeSettings.Rows.Count > 0 Then
            If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) <> "" Then
                strCond += " And CharIndex('+' || I.ItemType,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) & "') > 0 "
                strCond += " And CharIndex('-' || I.ItemType,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) & "') <= 0 "
            End If

            If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemGroup")) <> "" Then
                strCond += " And CharIndex('+' || I.ItemGroup,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemGroup")) & "') > 0 "
                strCond += " And CharIndex('-' || I.ItemGroup,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemGroup")) & "') <= 0 "
            End If

            If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_Item")) <> "" Then
                strCond += " And CharIndex('+' || I.Code,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_Item")) & "') > 0 "
                strCond += " And CharIndex('-' || I.Code,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_Item")) & "') <= 0 "
            End If
        End If



        mQry = "SELECT I.Code,  I.Description, I.ManualCode, I.Unit, I.ItemType, I.SalesTaxPostingGroup , " &
               " IfNull(I.IsDeleted ,0) AS IsDeleted, I.Div_Code, " &
               " I.DealUnit, I.DealQty As UnitMultiplier, I.Rate As Rate, 1 As PendingQty, I.Status, " &
               " U.DecimalPlaces as QtyDecimalPlaces, U1.DecimalPlaces as DealQtyDecimalPlaces " &
               " FROM Item I  With (NoLock) " &
               " LEFT JOIN Unit U  With (NoLock) On I.Unit = U.Code " &
               " LEFT JOIN Unit U1  With (NoLock) On I.DealUnit = U1.Code " &
               " Where 1=1 " &
               " And IfNull(I.Status,'" & AgTemplate.ClsMain.EntryStatus.Active & "') = '" & AgTemplate.ClsMain.EntryStatus.Active & "' " & strCond & " "
        Dgl1.AgHelpDataSet(Col1Item, 10) = AgL.FillData(mQry, AgL.GcnRead)
    End Sub


    Private Sub FCreateHelpItemFromSaleOrder(RowIndex As Integer)
        Dim strCond As String = ""
        If DtV_TypeSettings.Rows.Count > 0 Then
            If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) <> "" Then
                If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")).ToString.Substring(0, 1) = "+" Then
                    strCond += " And CharIndex('+' || I.ItemType,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) & "') > 0 "
                ElseIf AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")).ToString.Substring(0, 1) = "-" Then
                    strCond += " And CharIndex('-' || I.ItemType,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) & "') <= 0 "
                End If
            End If

            If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemGroup")) <> "" Then
                If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemGroup")).ToString.Substring(0, 1) = "+" Then
                    strCond += " And CharIndex('+' || I.ItemGroup,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemGroup")) & "') > 0 "
                ElseIf AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemGroup")).ToString.Substring(0, 1) = "-" Then
                    strCond += " And CharIndex('-' || I.ItemGroup,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemGroup")) & "') <= 0 "
                End If
            End If

            If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_Item")) <> "" Then
                If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_Item")).ToString.Substring(0, 1) = "+" Then
                    strCond += " And CharIndex('+' || I.Code,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_Item")) & "') > 0 "
                ElseIf AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_Item")).ToString.Substring(0, 1) = "+" Then
                    strCond += " And CharIndex('-' || I.Code,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_Item")) & "') <= 0 "
                End If
            End If

            If Dgl1.Item(Col1ItemCategory, RowIndex).Value <> "" And Dgl1.Columns(Col1ItemCategory).Visible Then
                strCond += " And I.ItemCategory = '" & Dgl1.Item(Col1ItemCategory, RowIndex).Tag & "' "
            End If

            If Dgl1.Item(Col1ItemGroup, RowIndex).Value <> "" And Dgl1.Columns(Col1ItemGroup).Visible Then
                strCond += " And I.ItemGroup = '" & Dgl1.Item(Col1ItemGroup, RowIndex).Tag & "' "
            End If
        End If



        Dim bItemGroupSaleOrder As Integer = 0
        If Dgl1.Item(Col1SaleInvoice, RowIndex).Tag <> "" Then
            bItemGroupSaleOrder = AgL.VNull(AgL.Dman_Execute(" Select Count(*) As cnt
                    From SaleInvoiceDetail L 
                    LEFT JOIN Item I On L.Item = I.Code 
                    Where L.DocId = '" & Dgl1.Item(Col1SaleInvoice, RowIndex).Tag & "' And I.V_Type = 'IG'", AgL.GCn).ExecuteScalar())
        End If

        If bItemGroupSaleOrder > 0 Then
            mQry = "SELECT I.Code As Code,  Max(I.Description) As Description, Max(I.ManualCode) As ManualCode, 
                Max(I.Unit) As Unit, Max(I.ItemType) As ItemType, 
                Max(I.SalesTaxPostingGroup) As SalesTaxPostingGroup, IfNull(Max(I.IsDeleted),0) AS IsDeleted, 
                Max(I.Div_Code) As Div_Code, Max(I.DealUnit) As DealUnit, Max(I.DealQty) As UnitMultiplier, 
                Max(I.Rate) As Rate, 1 As PendingQty, 
                Max(I.Status) As Status, Max(U.DecimalPlaces) as QtyDecimalPlaces, 
                Max(U1.DecimalPlaces) as DealQtyDecimalPlaces,
                Max(L.DocId) As SaleInvoice, Max(L.Sr) As SaleInvoiceSr
                FROM (" & FGetSaleOrderBalanceQry(CType(AgL.VNull(DtV_TypeSettings.Rows(0)("CalculateContraBalanceOnValueYN")), Boolean), DglMain.Item(Col1Value, rowSaleToParty).Tag) & ") VSaleOrderBalance
                LEFT JOIN SaleInvoiceDetail L ON VSaleOrderBalance.DocID = L.DocID And VSaleOrderBalance.Sr = L.Sr 
                LEFT JOIN ItemGroup Ig On L.Item = Ig.Code 
                LEFT JOIN Item I ON Ig.Code = I.ItemGroup 
                LEFT JOIN Unit U  With (NoLock) On I.Unit = U.Code 
                LEFT JOIN Unit U1  With (NoLock) On I.DealUnit = U1.Code 
                WHERE 1=1 
                And I.Code Is Not Null " & strCond
            If Dgl1.Item(Col1SaleInvoice, RowIndex).Tag <> "" Then
                mQry += " And L.DocId = '" & Dgl1.Item(Col1SaleInvoice, RowIndex).Tag & "' "
            End If
            mQry += " Group By I.Code "
        Else
            mQry = "SELECT Max(I.Code) As Code,  Max(I.Description) As Description, Max(I.ManualCode) As ManualCode, 
                Max(I.Unit) As Unit, Max(I.ItemType) As ItemType, 
                Max(I.SalesTaxPostingGroup) As SalesTaxPostingGroup, IfNull(Max(I.IsDeleted),0) AS IsDeleted, 
                Max(I.Div_Code) As Div_Code, Max(I.DealUnit) As DealUnit, Max(I.DealQty) As UnitMultiplier, 
                Max(I.Rate) As Rate, 1 As PendingQty, 
                Max(I.Status) As Status, Max(U.DecimalPlaces) as QtyDecimalPlaces, 
                Max(U1.DecimalPlaces) as DealQtyDecimalPlaces,
                L.DocId As SaleInvoice, L.Sr As SaleInvoiceSr
                FROM (" & FGetSaleOrderBalanceQry(CType(AgL.VNull(DtV_TypeSettings.Rows(0)("CalculateContraBalanceOnValueYN")), Boolean), DglMain.Item(Col1Value, rowSaleToParty).Tag) & ") VSaleOrderBalance
                LEFT JOIN SaleInvoiceDetail L ON VSaleOrderBalance.DocID = L.DocID And VSaleOrderBalance.Sr = L.Sr 
                LEFT JOIN ItemGroup Ig On L.Item = Ig.Code 
                LEFT JOIN Item I ON Ig.Code = I.ItemGroup 
                LEFT JOIN Unit U  With (NoLock) On I.Unit = U.Code 
                LEFT JOIN Unit U1  With (NoLock) On I.DealUnit = U1.Code 
                WHERE 1=1 
                And I.Code Is Not Null " & strCond
            If Dgl1.Item(Col1SaleInvoice, RowIndex).Tag <> "" Then
                mQry += " And L.DocId = '" & Dgl1.Item(Col1SaleInvoice, RowIndex).Tag & "' "
            End If

            mQry += " UNION ALL "
            mQry += "SELECT I.Code, I.Description, I.ManualCode, I.Unit, I.ItemType, I.SalesTaxPostingGroup, I.IsDeleted, I.Div_Code, I.DealUnit, " &
                  "  I.DealQty as Unitmultiplier, I.Rate, 1 as PendingQty, I.Status, 0 as QtyDecimalPlaces, 0 as DealQtyDecimalPlaces, Null as SaleInvoice, Null as SaleInvoiceSr " &
                  " FROM Item I  With (NoLock) " &
                  " Left Join Item IG On I.ItemGroup = IG.Code " &
                  " Where I.ItemType = '" & ItemTypeCode.ServiceProduct & "' 
                  And IfNull(I.Status,'" & AgTemplate.ClsMain.EntryStatus.Active & "') = '" & AgTemplate.ClsMain.EntryStatus.Active & "' "

            mQry += " Group By SaleInvoice, SaleInvoiceSr, I.Code "
        End If
        Dgl1.AgHelpDataSet(Col1Item, 15) = AgL.FillData(mQry, AgL.GcnRead)
    End Sub


    Private Sub FCreateHelpItemGroupFromSaleOrder(RowIndex As Integer)
        Dim strCond As String = ""
        If DtV_TypeSettings.Rows.Count > 0 Then
            If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) <> "" Then
                If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")).ToString.Substring(0, 1) = "+" Then
                    strCond += " And CharIndex('+' || I.ItemType,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) & "') > 0 "
                ElseIf AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")).ToString.Substring(0, 1) = "-" Then
                    strCond += " And CharIndex('-' || I.ItemType,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) & "') <= 0 "
                End If
            End If

            If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemGroup")) <> "" Then
                If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemGroup")).ToString.Substring(0, 1) = "+" Then
                    strCond += " And CharIndex('+' || I.ItemGroup,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemGroup")) & "') > 0 "
                ElseIf AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemGroup")).ToString.Substring(0, 1) = "-" Then
                    strCond += " And CharIndex('-' || I.ItemGroup,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemGroup")) & "') <= 0 "
                End If
            End If

            If Not AgL.VNull(AgL.PubDtEnviro.Rows(0)("ShowItemGroupsOfOtherDivisions")) Then
                strCond += " And (IG.Div_Code = '" & AgL.PubDivCode & "' Or IfNull(IG.ShowItemGroupInOtherDivisions,0) =1) "
            End If

            If Not AgL.VNull(AgL.PubDtEnviro.Rows(0)("ShowItemGroupsOfOtherSites")) Then
                strCond += " And (IG.Site_Code = '" & AgL.PubSiteCode & "' Or IfNull(IG.ShowItemGroupInOtherSites,0) =1) "
            End If
        End If

        If Dgl1.Item(Col1ItemCategory, RowIndex).Value <> "" And Dgl1.Columns(Col1ItemCategory).Visible Then
            strCond += " And I.ItemCategory = '" & Dgl1.Item(Col1ItemCategory, RowIndex).Tag & "' "
        End If

        If Dgl1.Item(Col1SaleInvoice, RowIndex).Tag <> "" And Dgl1.Columns(Col1SaleInvoice).Visible Then
            strCond += " And L.DocId = '" & Dgl1.Item(Col1SaleInvoice, RowIndex).Tag & "' "
        End If

        mQry = "Select IfNull(IG.Code,I.Code) As Code, IfNull(IG.Description,I.Description) As Description 
                From SaleInvoice H 
                LEFT JOIN Voucher_Type Vt On H.V_Type = Vt.V_Type
                LEFT JOIN SaleInvoiceDetail L On H.DocId = L.DocId
                LEFT JOIN Item I  With (NoLock) On L.Item = I.Code 
                LEFT JOIN ItemGroup Ig On L.Item = Ig.Code 
                Where IfNull(I.Status,'" & AgTemplate.ClsMain.EntryStatus.Active & "') = '" & AgTemplate.ClsMain.EntryStatus.Active & "' " & strCond & "
                And Ig.Code Is Not Null
                Group By I.ItemGroup,IG.Code, IG.Description "
        Dgl1.AgHelpDataSet(Col1ItemGroup, 0) = AgL.FillData(mQry, AgL.GcnRead)
    End Sub


    'Private Sub FrmSaleInvoice_BaseEvent_Topctrl_tbPrn(ByVal SearchCode As String) Handles Me.BaseEvent_Topctrl_tbPrn


    '    Dim mPrintTitle As String
    '    mQry = "
    '            Select H.DocID, H.V_Date, VT.Description as Voucher_Type, VT.NCat, H.Div_Code || H.Site_Code || '-' || H.V_Type || '-' || H.ManualRefNo as InvoiceNo, IfNull(RT.Description,'Super Net') as RateType, Agent.DispName as AgentName, '" & AgL.PubDtEnviro.Rows(0)("Caption_SalesAgent") & "' as AgentCaption,
    '            H.SaleToPartyName, H.SaleToPartyAddress, C.CityName as CityName, State.ManualCode as StateCode, State.Description as StateName, 
    '            H.SaleToPartyMobile, Sg.ContactPerson, H.SaleToPartySalesTaxNo, (Select RegistrationNo From SubgroupRegistration Where RegistrationType='" & SubgroupRegistrationType.AadharNo & "' And Subcode=H.SaleToParty) as SaleToPartyAadharNo,
    '            H.ShipToAddress, H.TermsAndConditions, Transporter.Name as TransporterName, TD.LrNo, TD.LrDate, L.ReferenceNo,
    '            I.Description as ItemName, IG.Description as ItemGroupName, IC.Description as ItemCatName, I.Specification as ItemSpecification, L.Specification as InvoiceLineSpecification, I.HSN,
    '            L.SalesTaxGroupItem, STGI.GrossTaxRate, L.Pcs, L.Qty, L.Rate, L.Unit, TS.DiscountCalculationPattern, L.DiscountPer, L.DiscountAmount, L.AdditionalDiscountPer, L.AdditionalDiscountAmount, 
    '            L.Amount,L.Taxable_Amount,L.Tax1_Per, L.Tax1, L.Tax2_Per, L.Tax2, L.Tax3_Per, L.Tax3, L.Tax4_Per, L.Tax4, L.Tax5_Per, L.Tax5, L.Net_Amount,
    '            H.Gross_Amount as H_Gross_Amount,H.Taxable_Amount as H_Taxable_Amount,H.Tax1_Per as H_Tax1_Per, H.Tax1 as H_Tax1, 
    '            H.Tax2_Per as H_Tax2_Per, H.Tax2 as H_Tax2, H.Tax3_Per as H_Tax3_Per, H.Tax3 as H_Tax3, H.Tax4_Per as H_Tax4_Per, H.Tax4 as H_Tax4, 
    '            H.Tax5_Per as H_Tax5_Per, H.Tax5 as H_Tax5, H.Round_Off, H.Net_Amount as H_Net_Amount, '" & AgL.XNull(AgL.PubDtEnviro.Rows(0)("Default_BankAccountDetail")) & "' as Default_BankAccountDetail,
    '            (Select '[' || group_concat(cast(cast(pcs as INT) as nvarchar) || ' X ' || cast(qty as nvarchar),', ') || ']' from SaleInvoiceDimensionDetail DL Where DL.DocID = L.DocID And DL.TSr = L.Sr) as DimDetail,
    '            (Select  group_concat(ItemCatName ,', ')   from
    '                (
    '                select ItemCat.Description as ItemCatName
    '                from SaleInvoiceDetail SIL 
    '                Left Join Item On SIL.Item = Item.Code   
    '                Left Join ItemCategory ItemCat On Item.ItemCategory = ItemCat.Code
    '                Where SIL.DocID = SIL.DocID And Item.HSN = I.Hsn
    '                group By ItemCat.Description
    '                )) as HsnDescription
    '            from SaleInvoice H
    '            Left Join SaleInvoiceTrnSetting TS On H.DocId = TS.DocID
    '            Left Join SaleInvoiceDetail L On H.DocID = L.DocID
    '            Left Join Item I On L.Item = I.Code
    '            Left Join ItemGroup IG On I.ItemGroup = IG.Code
    '            Left Join ItemCategory IC On I.ItemCategory = IC.Code
    '            Left Join City C On H.SaleToPartyCity = C.CityCode
    '            Left Join State On C.State = State.Code
    '            Left Join SaleInvoiceTransport TD On H.DocID = TD.DocID
    '            Left Join ViewHelpSubgroup Transporter On TD.Transporter= Transporter.Code
    '            Left Join PostingGroupSalesTaxItem STGI On L.SalesTaxGroupItem = STGI.Description
    '            Left Join Subgroup Sg On H.SaleToParty = Sg.Subcode
    '            Left Join RateType RT on H.RateType = Rt.Code
    '            Left Join Subgroup Agent On H.Agent = Agent.Subcode
    '            Left Join Voucher_Type Vt On H.V_Type = Vt.V_Type
    '            Where H.DocID = '" & mSearchCode & "'
    '            "


    '    If LblV_Type.Tag = Ncat.SaleReturn Then
    '        mPrintTitle = "SALES RETURN"
    '    Else
    '        If Not AgL.PubDtDivisionSiteSetting.Rows(0)("IsSalesTaxApplicable") Then
    '            mPrintTitle = "CHALLAN"
    '        Else
    '            mPrintTitle = "TAX INVOICE"
    '        End If
    '    End If

    '    If ClsMain.IsScopeOfWorkContains("+CLOTH TRADING WHOLESALE") Then
    '        FPrintThisDocument(Me, DglMain.Item(Col1Value, rowV_Type).Tag, mQry, "SaleInvoice_Print_Cloth", mPrintTitle, , , , DglMain.Item(Col1Value, rowSaleToParty).Tag, DglMain.Item(Col1Value, rowV_Date).Value)
    '    Else
    '        FPrintThisDocument(Me, DglMain.Item(Col1Value, rowV_Type).Tag, mQry, "SaleInvoice_Print", mPrintTitle, , , , DglMain.Item(Col1Value, rowSaleToParty).Tag, DglMain.Item(Col1Value, rowV_Date).Value)
    '    End If
    'End Sub
    Class printArgs
        Dim searchCode As String
        Dim printFor As PrintFor
    End Class

    Private Sub FrmSaleInvoice_BaseEvent_Topctrl_tbPrn(ByVal SearchCode As String) Handles Me.BaseEvent_Topctrl_tbPrn
        '_backgroundWorker1 = New System.ComponentModel.BackgroundWorker()
        '_backgroundWorker1.WorkerSupportsCancellation = False
        '_backgroundWorker1.WorkerReportsProgress = False
        'AddHandler Me._backgroundWorker1.DoWork, New DoWorkEventHandler(AddressOf Me.FGetPrint)

        '_backgroundWorker1.RunWorkerAsync(SearchCode, ClsMain.PrintFor.DocumentPrint)

        FGetPrint(SearchCode, ClsMain.PrintFor.DocumentPrint)
    End Sub

    Public Sub FGetPrint(ByVal SearchCode As String, mPrintFor As ClsMain.PrintFor,
                         Optional ByVal IsPrintToPrinter As Boolean = False, Optional BulkCondStr As String = "")
        'For SSRS Print Out
        Dim DtTemp As DataTable
        Dim I As Integer

        AgL.PubTempStr = ""
        AgL.PubTempStr = AgL.PubTempStr & "Start Checking if mismatch between gross amount & amount : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf
        mQry = "SELECT H.DocID  FROM SaleInvoice H With (NoLock)
                LEFT JOIN SaleInvoiceDetail L With (NoLock) ON H.DocID = L.DocID 
                WHERE H.DocID " & IIf(BulkCondStr <> "", " In (" & BulkCondStr & ")", " ='" & SearchCode & "'") &
                " And H.Gross_Amount > 0
                Group BY H.DocID 
                HAVING Round(Sum(L.Amount),2)<>Round(Max(H.Gross_Amount),2)"
        If AgL.FillData(mQry, AgL.GCn).Tables(0).Rows.Count > 0 Then
            MsgBox("Something went wrong with gross amount. Can not print Invoice. Please check once.")
            Exit Sub
        End If
        AgL.PubTempStr = AgL.PubTempStr & "End Checking if mismatch between gross amount & amount : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf

        AgL.PubTempStr = AgL.PubTempStr & "Start Checking if mismatch between qty and dimenstion detail : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf
        mQry = "SELECT H.DocID, H.Sr, I.Description as ItemName, Round(Sum(L.TotalQty),2),Round(Max(H.Qty),2)  FROM SaleInvoiceDetail H With (NoLock)
                LEFT JOIN SaleInvoiceDimensionDetail L With (NoLock) ON H.DocID = L.DocID And H.Sr = L.TSr
                Left Join Item I With (NoLock) On H.Item = I.Code
                WHERE H.DocID " & IIf(BulkCondStr <> "", " In (" & BulkCondStr & ")", " ='" & SearchCode & "'") &
                " Group BY H.DocID, H.Sr, I.Description 
                HAVING abs(Round(Sum(L.TotalQty),2))<>abs(Round(Max(H.Qty),2))"

        DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)
        If DtTemp.Rows.Count > 0 Then
            MsgBox("Something went wrong with dimension detail at item " & AgL.XNull(DtTemp.Rows(0)("ItemName")) & ". Can not print Invoice. Please check once.")
            Exit Sub
        End If
        AgL.PubTempStr = AgL.PubTempStr & "End Checking if mismatch between qty and dimenstion detail : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf

        'FGetPrintSSRS(mPrintFor)



        mQry = "Select H.DocID From SaleInvoice H With (NoLock) Where H.GenDocId = '" & SearchCode & "'"
        DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)
        If DtTemp.Rows.Count > 0 Then
            For I = 0 To DtTemp.Rows.Count - 1
                FGetPrintCrystal(AgL.XNull(DtTemp.Rows(I)("DocID")), mPrintFor, IsPrintToPrinter, BulkCondStr)
            Next
            If FDivisionNameForCustomization(13) = "JAIN BROTHERS" Or FDivisionNameForCustomization(11) = "BOOK SHOPEE" Then
                FGetPrintCrystal(SearchCode, mPrintFor, IsPrintToPrinter, BulkCondStr, "SaleInvoice_Print_Thermal_JainBrothersOfficeCopy.rpt")
                FGetPrintCrystal(SearchCode, mPrintFor, IsPrintToPrinter, BulkCondStr, "SaleInvoice_Print_Thermal_JainBrothersOfficeCopy.rpt")
            End If
        Else
            If ClsMain.IsScopeOfWorkContains("+Cloth Aadhat Module") Then
                FGetPrintCrystal_Aadhat(Me, SearchCode, mPrintFor, IsPrintToPrinter, BulkCondStr, "")
            Else
                FGetPrintCrystal(SearchCode, mPrintFor, IsPrintToPrinter, BulkCondStr)

                'If FDivisionNameForCustomization(13) = "JAIN BROTHERS" Or FDivisionNameForCustomization(11) = "BOOK SHOPEE" Then
                '    If Val(FGetSettings(SettingFields.PrintStockSlipWithDocumentPrint, SettingType.General)) > 0 Then
                '        FGetPrintCrystal(SearchCode, mPrintFor, IsPrintToPrinter, BulkCondStr, "SaleInvoice_Print_Thermal_JainBrothersOfficeCopy.rpt")
                '    End If
                '    If Val(FGetSettings(SettingFields.PrintStockSlipWithDocumentPrint, SettingType.General)) > 1 Then
                '        FGetPrintCrystal(SearchCode, mPrintFor, IsPrintToPrinter, BulkCondStr, "SaleInvoice_Print_Thermal_JainBrothersOfficeCopy.rpt")
                '    End If
                'End If
            End If
        End If

        Clipboard.SetText(AgL.PubTempStr)
        AgL.PubTempStr = ""
    End Sub

    Private Function FGetSettings(FieldName As String, SettingType As String) As String
        Debug.Print("Before FGetSettings " & AgL.PubStopWatch.ElapsedMilliseconds.ToString)
        Dim mValue As String
        mValue = ClsMain.FGetSettings(FieldName, SettingType, TxtDivision.Tag, DglMain.Item(Col1Value, rowSite_Code).Tag, VoucherCategory.Sales, LblV_Type.Tag, DglMain.Item(Col1Value, rowV_Type).Tag, "", DglMain.Item(Col1Value, rowSettingGroup).Tag)
        FGetSettings = mValue
        Debug.Print("After FGetSettings " & AgL.PubStopWatch.ElapsedMilliseconds.ToString)
    End Function

    Private Function FGetSettingsForDocID(FieldName As String, SettingType As String, DocID As String, NCat As String) As String
        Dim mVType As String = AgL.DeCodeDocID(DocID, AgLibrary.ClsMain.DocIdPart.VoucherType)
        Dim mDivCode As String = AgL.DeCodeDocID(DocID, AgLibrary.ClsMain.DocIdPart.Division)
        Dim mSiteCode As String = AgL.DeCodeDocID(DocID, AgLibrary.ClsMain.DocIdPart.Site)
        Debug.Print("Before FGetSettings " & AgL.PubStopWatch.ElapsedMilliseconds.ToString)
        Dim mValue As String
        mValue = ClsMain.FGetSettings(FieldName, SettingType, mDivCode, mSiteCode, VoucherCategory.Sales, NCat, mVType, "", DglMain.Item(Col1Value, rowSettingGroup).Tag)
        FGetSettingsForDocID = mValue
        Debug.Print("After FGetSettings " & AgL.PubStopWatch.ElapsedMilliseconds.ToString)
    End Function

    Sub FGetPrintCrystal(ByVal SearchCode As String, mPrintFor As ClsMain.PrintFor, Optional ByVal IsPrintToPrinter As Boolean = False, Optional BulkCondStr As String = "", Optional ReportFileName As String = "")
        Dim mPrintTitle As String
        Dim PrintingCopies() As String
        Dim I As Integer, J As Integer
        Dim sQryPayment As String = ""
        Dim DtDoc As DataTable
        Dim mDocReportFileName As String = ""
        Dim dtTemp As DataTable
        Dim mSaleToParty As String
        Dim mSalesTaxGroupParty As String
        Dim mDocDate As Date



        Dim mDocumentNoPattern As String = ClsMain.FGetSettings(ClsMain.SettingFields.DocumentNoPattern, SettingType.General, "", "", "", "", "", "", "")
        Dim mCompanyPrefix As String = AgL.XNull(AgL.Dman_Execute("Select CompanyPrefix From Company Where Comp_code = '" & AgL.PubCompCode & "'", AgL.GCn).executeScalar())
        AgL.PubTempStr = AgL.PubTempStr & "Start Feching basic header detail of document : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf
        mQry = "Select VT.nCat, H.V_Type, H.Div_Code, H.Site_Code, H.V_date From SaleInvoice H With (NoLock) Left Join Voucher_Type Vt With (NoLock) On H.V_Type = Vt.V_Type Where H.DocID = '" & SearchCode & "'"
        DtDoc = AgL.FillData(mQry, AgL.GCn).Tables(0)
        AgL.PubTempStr = AgL.PubTempStr & "End Feching basic header detail of document : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf

        AgL.PubTempStr = AgL.PubTempStr & "Start Feching Printing Desc of voucher Type : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf
        mPrintTitle = AgL.Dman_Execute("Select IfNull(PrintingDescription, Description) From Voucher_Type Where V_Type = '" & AgL.XNull(DtDoc.Rows(0)("V_Type")) & "' ", AgL.GCn).ExecuteScalar()
        AgL.PubTempStr = AgL.PubTempStr & "End Feching Printing Desc of voucher Type : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf

        AgL.PubTempStr = AgL.PubTempStr & "Start Feching Doc No Caption Setting : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf
        Dim mDocNoCaption As String = FGetSettings(SettingFields.DocumentPrintEntryNoCaption, SettingType.General)
        AgL.PubTempStr = AgL.PubTempStr & "End Feching Doc No Caption Setting : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf
        AgL.PubTempStr = AgL.PubTempStr & "Start Feching Doc Date Caption Setting : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf
        Dim mDocDateCaption As String = FGetSettings(SettingFields.DocumentPrintEntryDateCaption, SettingType.General)
        AgL.PubTempStr = AgL.PubTempStr & "End Feching Doc Date Caption Setting : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf
        AgL.PubTempStr = AgL.PubTempStr & "Start Feching Terms & Cond Setting : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf
        Dim mTermsAndConditions As String = FGetSettingsForDocID(SettingFields.TermsAndConditions, SettingType.General, SearchCode, AgL.XNull(DtDoc.Rows(0)("NCat")))
        AgL.PubTempStr = AgL.PubTempStr & "End Feching Terms & Cond Setting : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf


        AgL.PubTempStr = AgL.PubTempStr & "Start Feching Party Detail from document Header Table : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf
        mQry = "Select IfNull(SalesTaxGroupParty,'') as SalesTaxGroupParty, IfNull(SaleToParty,'') as SaleToParty From SaleInvoice Where DocID = '" & SearchCode & "'"
        dtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)
        If dtTemp.Rows.Count > 0 Then
            mSaleToParty = AgL.XNull(dtTemp.Rows(0)("SaleToParty"))
            mSalesTaxGroupParty = AgL.XNull(dtTemp.Rows(0)("SalesTaxGroupParty"))
        Else
            MsgBox("Party detail can not be fetched for selected invoice. Can't generate print.")
            Exit Sub
        End If
        AgL.PubTempStr = AgL.PubTempStr & "End Feching Party Detail from document Header Table : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf




        If mSalesTaxGroupParty <> AgLibrary.ClsMain.agConstants.PostingGroupSalesTaxParty.Registered Then
            AgL.PubTempStr = AgL.PubTempStr & "Start Feching Unreg party report file name from setting : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf
            mDocReportFileName = FGetSettingsForDocID(SettingFields.DocumentPrintReportFileNameUnregisteredParty, SettingType.General, SearchCode, AgL.XNull(DtDoc.Rows(0)("NCat")))
            AgL.PubTempStr = AgL.PubTempStr & "End Feching Unreg party report file name from setting : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf
        End If
        If mDocReportFileName = "" Then
            AgL.PubTempStr = AgL.PubTempStr & "Start Feching report file name from setting : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf
            mDocReportFileName = FGetSettingsForDocID(SettingFields.DocumentPrintReportFileName, SettingType.General, SearchCode, AgL.XNull(DtDoc.Rows(0)("NCat")))
            AgL.PubTempStr = AgL.PubTempStr & "End Feching report file name from setting : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf
        End If
        If ReportFileName <> "" Then
            mDocReportFileName = ReportFileName
        End If


        AgL.PubTempStr = AgL.PubTempStr & "Start Feching Show Party Balance In Report from setting : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf
        Dim DocumentPrintShowPartyBalance As String = FGetSettings(SettingFields.DocumentPrintShowPartyBalance, SettingType.General)
        AgL.PubTempStr = AgL.PubTempStr & "End Feching Show Party Balance In Report from setting : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf

        Dim mOpeningBalance As Double = 0, mTodaysDr As Double = 0, mTodaysCr As Double = 0, mClosingBalance As Double = 0
        If DocumentPrintShowPartyBalance <> DocumentPrintFieldsVisibilityOptions.Hide Then
            AgL.PubTempStr = AgL.PubTempStr & "Start Feching Party Balance To Print From Ledger Table : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf
            mQry = "Select IfNull(Sum(Case When LG.V_Date < " & AgL.Chk_Date(AgL.XNull(DtDoc.Rows(0)("V_Date"))) & " THEN LG.AmtDr-LG.AmtCr ELSE 0 END),0) AS OpeningBalance,
	               IfNull(Sum(CASE WHEN LG.V_Date = " & AgL.Chk_Date(AgL.XNull(DtDoc.Rows(0)("V_Date"))) & " THEN LG.AmtDr ELSE 0 END),0) AS TodaysDr,
	               IfNull(Sum(CASE WHEN LG.V_Date = " & AgL.Chk_Date(AgL.XNull(DtDoc.Rows(0)("V_Date"))) & " THEN LG.AmtCr ELSE 0 END),0) AS TodaysCr,
	               IfNull(Sum(CASE WHEN LG.V_Date <= " & AgL.Chk_Date(AgL.XNull(DtDoc.Rows(0)("V_Date"))) & " THEN LG.AmtDr-LG.AmtCr ELSE 0 END),0) AS ClosingBalance     
                   FROM Ledger LG
                   WHERE LG.SubCode ='" & mSaleToParty & "'"
            dtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)
            If dtTemp.Rows.Count > 0 Then
                mOpeningBalance = AgL.VNull(dtTemp.Rows(0)("OpeningBalance"))
                mTodaysDr = AgL.VNull(dtTemp.Rows(0)("TodaysDr"))
                mTodaysCr = AgL.VNull(dtTemp.Rows(0)("TodaysCr"))
                mClosingBalance = AgL.VNull(dtTemp.Rows(0)("ClosingBalance"))
            End If
            AgL.PubTempStr = AgL.PubTempStr & "End Feching Party Balance To Print From Ledger Table : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf
        End If


        If LblV_Type.Tag = Ncat.SaleInvoice Then
            AgL.PubTempStr = AgL.PubTempStr & "Start Feching Is Sales Tax Applicable from setting : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf
            If Not AgL.PubDtDivisionSiteSetting.Rows(0)("IsSalesTaxApplicable") Then
                mPrintTitle = "CHALLAN"
            Else
                mDocNoCaption = "Invoice No."
                mDocDateCaption = "Invoice Date"
            End If
            AgL.PubTempStr = AgL.PubTempStr & "Start Feching Is Sales Tax Applicable from setting : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf
        End If


        AgL.PubTempStr = AgL.PubTempStr & "Start Feching Is Copy Captions from setting : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf
        Dim bPrimaryQry As String = ""
        If BulkCondStr <> "" Then
            bPrimaryQry = " Select * From SaleInvoice  With (NoLock) Where DocID In (" & BulkCondStr & ")"
            PrintingCopies = FGetSettings(SettingFields.PrintingBulkCopyCaptions, SettingType.General).ToString.Split(",")
        Else
            bPrimaryQry = " Select * From SaleInvoice  With (NoLock) Where DocID = '" & SearchCode & "'"
            PrintingCopies = FGetSettings(SettingFields.PrintingCopyCaptions, SettingType.General).ToString.Split(",")
        End If
        AgL.PubTempStr = AgL.PubTempStr & "End Feching Is Copy Captions from setting : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf


        'PrintingCopies = AgL.XNull(DtV_TypeSettings.Rows(0)("PrintingCopyCaptions")).ToString.Split(",")

        mQry = ""
        For I = 1 To PrintingCopies.Length
            If mQry <> "" Then mQry = mQry + " Union All "
            '(Case When DP.Prefix Is Not Null Then DP.Prefix || H.ManualRefNo Else H.Div_Code || H.Site_Code || '-' || H.V_Type || '-' || H.ManualRefNo End) as InvoiceNo, 
            ''" & IIf(AgL.PubPrintDivisionShortNameOnDocumentsYn, AgL.PubDivShortName, "") & IIf(AgL.PubPrintSiteShortNameOnDocumentsYn, AgL.PubSiteShortName, "") & "' || (Case When VT.Short_Name Is Not Null Then VT.Short_Name Else '' End) || H.ManualRefNo  as InvoiceNo, 
            mQry = mQry + "
                Select '" & I & "' as Copies, '" & AgL.XNull(PrintingCopies(I - 1)) & "' as CopyPrintingCaption, '" & mDocNoCaption & "' as DocNoCaption, '" & mDocDateCaption & "' as DocDateCaption, SiteState.ManualCode as SiteStateCode, SiteState.Description as SiteStateName, H.DocID, L.Sr, H.V_Date, H.DeliveryDate, VT.Description as Voucher_Type, VT.NCat,                                 
                Replace(Replace(Replace(Replace(Replace('" & mDocumentNoPattern & "','<DIVISION>',IfNull(Dm.ShortName,'')),'<SITE>',IfNull(Site.ShortName,'')),'<DOCTYPE>',IfNull(Vt.Short_Name,'')),'<DOCNO>',IfNull(H.ManualRefNo,'')),'<COMPANYPREFIX>', '" & mCompanyPrefix & "') As InvoiceNo,
                Gen.ManualRefNo as GenDocNo, H.AmsDocNo, H.AmsDocDate, H.AmsDocNetAmount, IfNull(RT.Description,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("SaleRate_Caption")) & "') as RateType, 
                '" & FGetSettings(SettingFields.DocumentPrintShowRateType, SettingType.General) & "' as DocumentPrintShowRateType,
                IfNull(Agent.DispName,'') as AgentName, IfNull(SRep.Name,'') as SalesRepName, IfNull(SRep.ManualCode,'') as SalesRepCode, '" & AgL.PubDtEnviro.Rows(0)("Caption_SalesAgent") & "' as AgentCaption,
                (Case When BP.Nature = 'Cash' Then BP.DispName || ' - ' || IsNull(H.SaleToPartyName,'') Else H.SaletoPartyName End) as SaleToPartyName, 
                IfNull(H.SaleToPartyAddress,'') as SaleToPartyAddress, IfNull(C.CityName,'') as CityName, IfNull(H.SaleToPartyPincode,'') as SaleToPartyPincode, 
                IfNull(State.ManualCode,'') as StateCode, IfNull(State.Description,'')  as StateName, 
                IfNull(H.SaleToPartyMobile,'') as SaleToPartyMobile, Sg.ContactPerson, IfNull(H.SaleToPartySalesTaxNo,'') as SaleToPartySalesTaxNo, 
                IfNull(H.SaleToPartyAadharNo,'') as SaleToPartyAadharNo, IfNull(H.SaleToPartyPanNo,'') as SaleToPartyPanNo,
                IfNull((Select RegistrationNo From SubgroupRegistration Where Subcode=H.SaleToParty And RegistrationType = '" & SubgroupRegistrationType.LicenseNo & "'),'') as SaleToPartyLicenseNo,
                (Case When BP.Nature = 'Cash' Then IfNull(SP.DispName, BP.DispName || ' - ' || IsNull(H.SaleToPartyName,'')) Else IfNull(SP.DispName,H.SaletoPartyName) End) as ShipToPartyName,
                (Case When SP.DispName Is Null Then IfNull(H.SaleToPartyAddress,'') Else IfNull(Sp.Address,'') End) as ShipToPartyAddress, 
                (Case When SP.DispName Is Null Then IfNull(C.CityName,'') Else IfNull(SC.CityName,'') End) as ShipToPartyCity, 
                (Case When SP.DispName Is Null Then IfNull(H.SaleToPartyPinCode,'') Else IfNull(Sp.Pin,'') End) as ShipToPartyPincode, 
                (Case When SP.DispName Is Null Then IfNull(State.ManualCode,'') Else IfNull(SS.ManualCode,'') End) as ShipToPartyStateCode, 
                (Case When SP.DispName Is Null Then IfNull(State.Description,'') Else IfNull(SS.Description,'') End) as ShipToPartyStateName, 
                (Case When SP.DispName Is Null Then IfNull(H.SaleToPartyMobile,'') Else IfNull(Sp.Mobile,'') End) as ShipToPartyMobile, 
                (Case When SP.DispName Is Null Then IfNull(H.SaleToPartySalesTaxNo,'') Else IfNull((Select RegistrationNo From SubgroupRegistration Where Subcode=H.ShipToParty And RegistrationType = '" & SubgroupRegistrationType.SalesTaxNo & "'),'') End) as ShipToPartySalesTaxNo, 
                (Case When SP.DispName Is Null Then IfNull(H.SaleToPartyAadharNo,'') Else IfNull((Select RegistrationNo From SubgroupRegistration Where Subcode=H.ShipToParty And RegistrationType = '" & SubgroupRegistrationType.AadharNo & "'),'') End) as ShipToPartyAadharNo, 
                (Case When SP.DispName Is Null Then IfNull(H.SaleToPartyPanNo,'') Else IfNull((Select RegistrationNo From SubgroupRegistration Where Subcode=H.ShipToParty And RegistrationType = '" & SubgroupRegistrationType.PanNo & "'),'') End) as ShipToPartyPanNo, 
                (Case When SP.DispName Is Null Then IfNull((Select RegistrationNo From SubgroupRegistration Where Subcode=H.SaleToParty And RegistrationType = '" & SubgroupRegistrationType.LicenseNo & "'),'') Else IfNull((Select RegistrationNo From SubgroupRegistration Where Subcode=H.ShipToParty And RegistrationType = '" & SubgroupRegistrationType.LicenseNo & "'),'') End) as ShipToPartyLicenseNo, 
                IsNull((Select RegistrationNo From SubgroupRegistration Where Subcode=Transporter.Code And RegistrationType = 'Sales Tax No'),'')  as TransporterSalesTaxNo,
                H.ShipToAddress, '" & mTermsAndConditions & "'  TermsAndConditions, IfNull(Transporter.Name,'') as TransporterName, IfNull(TD.LrNo,'') as LrNo, TD.LrDate, TD.NoOfBales, IfNull(TD.PrivateMark,'') PrivateMark, TD.Weight, TD.Freight, TD.ChargedWeight, IfNull(TD.PaymentType,'') as FreightType, 
                IfNull(TD.RoadPermitNo,'') as RoadPermitNo, TD.RoadPermitDate, IfNull(TD.VehicleNo,'') as VehicleNo, IfNull(TD.ShipMethod,'') as ShipMethod, IfNull(TD.PreCarriageBy,'') PreCarriageBy, IfNull(TD.PreCarriagePlace,'') as PreCarriagePlace, IfNull(TD.BookedFrom,'') as BookedFrom, IfNull(TD.BookedTo,'') as BookedTo, IfNull(TD.Destination,'') as Destination, IfNull(TD.DescriptionOfGoods,'') as DescriptionOfGoods, IfNull(TD.DescriptionOfPacking,'') as DescriptionOfPacking, 
                IfNull(L.ReferenceNo,'') as ReferenceNo, Barcode.Description as BarcodeName,
                I.Description as ItemName, " & IIf(mPrintFor = ClsMain.PrintFor.QA, "IG.Description", "IfNull(IG.PrintingDescription,IG.Description)") & " as ItemGroupName, 
                IC.Description as ItemCatName, I.ManualCode As ItemManualCode, I.Specification as ItemSpecification, L.Specification as InvoiceLineSpecification, IfNull(I.HSN,IC.HSN) as HSN, I.MaintainStockYn,
                D1.Specification as D1Spec, D2.Specification as D2Spec, D3.Specification as D3Spec, D4.Specification as D4Spec, Size.Specification as SizeSpec,
                IIG.ManualCode as ItemInvoiceGroupCode, IIG.Description as ItemInvoiceGroupDesc,
                '" & AgL.PubCaptionItemType & "' as ItemTypeCaption,'" & AgL.PubCaptionItemCategory & "' as ItemCategoryCaption,
                '" & AgL.PubCaptionItemGroup & "' as ItemGroupCaption,'" & AgL.PubCaptionItem & "' as ItemCaption,'" & AgL.PubCaptionBarcode & "' as BarcodeCaption,
                '" & AgL.PubCaptionDimension1 & "' as D1Caption, '" & AgL.PubCaptionDimension2 & "' as D2Caption, '" & AgL.PubCaptionDimension3 & "' as D3Caption, '" & AgL.PubCaptionDimension4 & "' as D4Caption, 
                L.SalesTaxGroupItem, STGI.GrossTaxRate, Case When IfNull(L.MRP, 0) <> 0 Then IfNull(L.MRP, 0) Else IfNull(Sku.MRP,0) End As MRP, 
                L.LotNo, L.ExpiryDate, I.Remark1 as ItemRemark1, 
                (Case when abs(IfNull(I.MaintainStockYn,1)) =1 AND IfNull(I.ItemType,Ic.ItemType) <> '" & ItemTypeCode.ServiceProduct & "' Then L.Pcs Else 0 End) as Pcs, 
                (Case when abs(IfNull(I.MaintainStockYn,1)) =1 AND IfNull(I.ItemType,Ic.ItemType) <> '" & ItemTypeCode.ServiceProduct & "' Then (Case When Vt.Ncat = '" & Ncat.SaleReturn & "' Then  abs(L.Qty) Else L.Qty End) Else 0 End) as Qty, 
                (Case when abs(IfNull(I.MaintainStockYn,1)) =1 AND IfNull(I.ItemType,Ic.ItemType) <> '" & ItemTypeCode.ServiceProduct & "' Then L.Rate Else 0 End) as Rate, 
                IfNull(ISS.Description,'') as ItemState, ifNull(Catalog.Description,'') as CatalogSpecification, CSite.Name as CatalogSiteName, L.Unit, U.DecimalPlaces as UnitDecimalPlaces, 
                L.DiscountPer, L.DiscountAmount, L.AdditionalDiscountPer, L.AdditionalDiscountAmount, L.AdditionPer, L.AdditionAmount, 
                L.DiscountAmount+L.AdditionalDiscountAmount-L.AdditionAmount as TotalDiscount, L.Deal,
                ((Case When Vt.Ncat = '" & Ncat.SaleReturn & "' Then -1.0 else 1.0 end) * L.Amount)+(L.DiscountAmount+L.AdditionalDiscountAmount-L.AdditionAmount) as AmountBeforeDiscount,
                (Case When Vt.Ncat = '" & Ncat.SaleReturn & "' Then -1.0 else 1.0 end) * (L.Amount) as Amount,
                (Case When Vt.Ncat = '" & Ncat.SaleReturn & "' Then -1.0 else 1.0 end) * (L.Taxable_Amount) as Taxable_Amount,
                Abs(L.Tax1_Per) as Tax1_Per, (Case When Vt.Ncat = '" & Ncat.SaleReturn & "' Then -1.0 else 1.0 end) * (L.Tax1) as Tax1, 
                abs(L.Tax2_Per) as Tax2_Per, (Case When Vt.Ncat = '" & Ncat.SaleReturn & "' Then -1.0 else 1.0 end) * (L.Tax2) as Tax2, 
                abs(L.Tax3_Per) as Tax3_Per, (Case When Vt.Ncat = '" & Ncat.SaleReturn & "' Then -1.0 else 1.0 end) * (L.Tax3) as Tax3, 
                abs(L.Tax4_Per) as Tax4_Per, (Case When Vt.Ncat = '" & Ncat.SaleReturn & "' Then -1.0 else 1.0 end) * (L.Tax4) as Tax4, 
                abs(L.Tax5_Per) as Tax5_Per, (Case When Vt.Ncat = '" & Ncat.SaleReturn & "' Then -1.0 else 1.0 end) * (L.Tax5) as Tax5, 
                (Case When Vt.Ncat = '" & Ncat.SaleReturn & "' Then -1.0 else 1.0 end) * (L.Net_Amount) as Net_Amount, 
                L.Remark AS LRemarks, L.Remarks1 AS LRemarks1, L.Remarks2 AS LRemarks2,  L.Remarks3 AS LRemarks3,  L.Remarks4 AS LRemarks4, IfNull(H.Remarks,'') as HRemarks, H.SalesTaxSummaryStr,
                (Select Sum(L1.DiscountAmount) From SaleInvoiceDetail L1 Where L1.DocID = H.DocID) as H_Discount, 
                (Select Sum(L1.AdditionalDiscountAmount) From SaleInvoiceDetail L1 Where L1.DocID = H.DocID) as H_AdditionalDiscount, 
                (Select Sum(L1.AdditionAmount) From SaleInvoiceDetail L1 Where L1.DocID = H.DocID) as H_Additional, 
                (Select Sum(L1.DiscountAmount+L1.AdditionalDiscountAmount-L1.AdditionAmount) From SaleInvoiceDetail L1 Where L1.DocID = H.DocID) as H_TotalDiscount, 
                (Select Sum(abs(L1.Amount)+L1.DiscountAmount+L1.AdditionalDiscountAmount-L1.AdditionAmount) From SaleinvoiceDetail L1 Where L1.DocID = H.DocId) as H_AmountBeforeDiscount,
                abs(H.Gross_Amount) as H_Gross_Amount, 
                H.SpecialDiscount_Per as H_SpecialDiscount_Per, H.SpecialDiscount as H_SpecialDiscount, Abs(H.Taxable_Amount) as H_Taxable_Amount,
                Abs(H.Tax1_Per) as H_Tax1_Per, Abs(H.Tax1) as H_Tax1, H.Tax2_Per as H_Tax2_Per, abs(H.Tax2) as H_Tax2, 
                H.Tax3_Per as H_Tax3_Per, abs(H.Tax3) as H_Tax3, H.Tax4_Per as H_Tax4_Per, abs(H.Tax4) as H_Tax4, 
                H.Tax5_Per as H_Tax5_Per, abs(H.Tax5) as H_Tax5, H.Deduction_Per as H_Deduction_Per, H.Deduction as H_Deduction, 
                H.Other_Charge_Per as H_Other_Charge_Per, H.Other_Charge as H_Other_Charge, 
                H.Other_Charge1_Per as H_Other_Charge1_Per, H.Other_Charge1 as H_Other_Charge1, 
                H.Other_Charge2_Per as H_Other_Charge2_Per, H.Other_Charge2 as H_Other_Charge2, 
                H.Round_Off, abs(H.Net_Amount) as H_Net_Amount, 
                IfNull(H.EInvoiceIRN,'') EInvoiceIRN, H.EInvoiceAckNo, H.EInvoiceAckDate,
                '" & AgL.XNull(AgL.PubDtEnviro.Rows(0)("Default_BankAccountDetail")) & "' as Default_BankAccountDetail,
                '" & FGetSettings(SettingFields.DocumentPrintHeaderPattern, SettingType.General) & "' as DocumentPrintHeaderPattern, IfNull(L.DimensionDetail,'') as DimDetail,
                '" & AgL.PubUserName & "' as PrintedByUser, H.EntryBy as EntryByUser, '" & mPrintTitle & "' as PrintTitle,
                '" & FGetSettings(SettingFields.DocumentPrintShowPrintDateTimeYn, SettingType.General) & "' as DocumentPrintShowPrintDateTimeYn,
                '" & DocumentPrintShowPartyBalance & "' as DocumentPrintShowPartyBalance, 
                " & mOpeningBalance & " as TodaysOpeningBalance, " & mTodaysDr & " as TodaysDr, " & mTodaysCr & " as TodaysCr, " & mClosingBalance & " as TodaysClosingBalance
                from (" & bPrimaryQry & ") as H
                Left Join SaleInvoiceTrnSetting TS  With (NoLock) On H.DocId = TS.DocID
                Left Join SaleInvoiceDetail L  With (NoLock) On H.DocID = L.DocID
                LEFT JOIN Item Sku On L.Item = Sku.Code
                Left Join SaleInvoiceDetailSku LS  With (NoLock) On LS.DocID = L.DocID And LS.Sr = L.Sr
                Left Join Item I  With (NoLock) On LS.Item = I.Code
                Left Join Item D1  With (NoLock) On LS.Dimension1 = D1.Code
                Left Join Item D2  With (NoLock) On LS.Dimension2 = D2.Code
                Left Join Item D3  With (NoLock) On LS.Dimension3 = D3.Code
                Left Join Item D4  With (NoLock) On LS.Dimension4 = D4.Code   
                Left Join Item size  With (NoLock) On LS.Size = Size.Code
                Left Join Unit U  With (NoLock) On I.Unit = U.Code
                Left Join Item IG  With (NoLock) On LS.ItemGroup = IG.Code
                Left Join Item IC  With (NoLock) On LS.ItemCategory = IC.Code
                Left Join Item ISS On L.ItemState = ISS.Code
                Left Join Item IIG On LS.ItemInvoiceGroup = IIG.Code
                Left Join City C  With (NoLock) On H.SaleToPartyCity = C.CityCode
                Left Join State  With (NoLock) On C.State = State.Code
                Left Join SaleInvoiceTransport TD  With (NoLock) On H.DocID = TD.DocID
                Left Join ViewHelpSubgroup Transporter  With (NoLock) On TD.Transporter= Transporter.Code
                Left Join PostingGroupSalesTaxItem STGI  With (NoLock) On L.SalesTaxGroupItem = STGI.Description
                Left Join Subgroup Sg  With (NoLock) On H.SaleToParty = Sg.Subcode
                Left Join Subgroup BP With (NoLock) On H.BillToParty = BP.Subcode
                Left Join Subgroup SP With (NoLock) On H.ShipToParty = SP.Subcode
                Left Join Subgroup SRep With (NoLock) on L.SalesRepresentative  = SRep.Subcode
                Left Join City SC With (NoLock) On SP.CityCode = SC.CityCode
                Left Join State SS with (NoLock) On SC.State = SS.Code
                Left Join RateType RT  With (NoLock) on H.RateType = Rt.Code
                Left Join Subgroup Agent  With (NoLock) On H.Agent = Agent.Subcode
                Left Join Voucher_Type Vt  With (NoLock) On H.V_Type = Vt.V_Type
                Left Join DocumentPrefix DP On VT.Category = DP.Category And H.Div_Code = DP.Div_Code                
                Left Join SiteMast Site On H.Site_Code = Site.Code
                LEFT JOIN Division Dm On H.Div_Code = Dm.Div_Code
                Left Join City SiteCity On Site.City_Code = SiteCity.CityCode
                Left Join State SiteState On SiteCity.State = SiteState.Code
                Left Join Barcode With (NoLock) On Barcode.Code = L.Barcode
                Left Join SaleInvoice Gen With (NoLock) On H.GenDocID = Gen.DocId
                Left Join Catalog With (NoLock) On L.Catalog = Catalog.Code
                Left Join SiteMast CSite On Catalog.Site_Code = CSite.Code
                "


            'If ClsMain.IsScopeOfWorkContains(IndustryType.SubIndustryType.RetailModule) Then
            If sQryPayment <> "" Then sQryPayment = sQryPayment + " Union All "

            sQryPayment = sQryPayment + "Select '" & I & "' as Copies, H.DocID,
                                    H.Sr, PM.Description AS PaymentModeName, H.Amount, H.ReferenceNo  
                                    FROM SaleInvoicePayment H
                                    LEFT JOIN PaymentMode PM ON H.PaymentMode = PM.Code 
                                    WHERE H.DocID ='" & mSearchCode & "'                                   
                                  "
            'End If

        Next
        mQry = mQry + " Order By Copies, H.DocID, L.Sr "


        Dim objRepPrint As Object
        If mPrintFor = ClsMain.PrintFor.EMail Then
            objRepPrint = New AgLibrary.FrmMailComposeWithCrystal(AgL)
            'objRepPrint.TxtToEmail.Text = AgL.XNull(AgL.Dman_Execute("Select Sg.Email
            '        From SaleInvoice H  With (NoLock)
            '        LEFT JOIN SubGroup Sg  With (NoLock) On H.SaleToParty = Sg.SubCode
            '        Where H.DocId = '" & mSearchCode & "'", AgL.GCn).ExecuteScalar())
            'objRepPrint.TxtCcEmail.Text = AgL.XNull(AgL.Dman_Execute("Select Sg.Email
            '        From SaleInvoice H  With (NoLock)
            '        LEFT JOIN SubGroup Sg  With (NoLock) On H.Agent = Sg.SubCode
            '        Where H.DocId = '" & mSearchCode & "'", AgL.GCn).ExecuteScalar())
            FGetMailConfiguration(objRepPrint, SearchCode)
            'objRepPrint.AttachmentName = "Invoice"
        ElseIf mPrintFor = ClsMain.PrintFor.Whatsapp Then
            objRepPrint = New FrmWhatsapp(AgL)
            FGetWhatsappConfiguration(objRepPrint, SearchCode)
        Else
            objRepPrint = New AgLibrary.RepView(AgL)
        End If


        Dim sQry As String = ""
        Dim sQryRepName As String = ""

        If sQryPayment <> "" Then
            If sQry <> "" Then sQry = sQry & "^"
            If sQryRepName <> "" Then sQryRepName = sQryRepName & "^"
            sQry += sQryPayment
            sQryRepName += "PaymentDetail"
        End If


        DsMainDocPrintRep = Nothing
        Report_QryArr = Nothing
        Report_NameArr = Nothing
        Report_TitleArr = Nothing
        Report_FormatArr = Nothing

        SubReport_QryArr = Nothing
        SubReport_NameArr = Nothing
        SubReport_DataSetArr = Nothing
        AgL.PubTempStr = AgL.PubTempStr & "Start FPrintThisDocument Function : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf
        If mDocReportFileName = "" Then
            FPrintThisDocument(Me, objRepPrint, DglMain.Item(Col1Value, rowV_Type).Tag, mQry, "SaleInvoice_Print.rpt", mPrintTitle, , sQry, sQryRepName, DglMain.Item(Col1Value, rowSaleToParty).Tag, DglMain.Item(Col1Value, rowV_Date).Value, IsPrintToPrinter, AgL.XNull(DtDoc.Rows(0)("Div_Code")), AgL.XNull(DtDoc.Rows(0)("Site_Code")))
        Else
            FPrintThisDocument(Me, objRepPrint, DglMain.Item(Col1Value, rowV_Type).Tag, mQry, mDocReportFileName, mPrintTitle, , sQry, sQryRepName, DglMain.Item(Col1Value, rowSaleToParty).Tag, DglMain.Item(Col1Value, rowV_Date).Value, IsPrintToPrinter, AgL.XNull(DtDoc.Rows(0)("Div_Code")), AgL.XNull(DtDoc.Rows(0)("Site_Code")))
        End If

        If FDivisionNameForCustomization(13) = "JAIN BROTHERS" Or FDivisionNameForCustomization(11) = "BOOK SHOPEE" Then
            If Val(FGetSettings(SettingFields.PrintStockSlipWithDocumentPrint, SettingType.General)) > 0 Then
                objRepPrint = New AgLibrary.RepView(AgL)
                'FGetPrintCrystal(SearchCode, mPrintFor, IsPrintToPrinter, BulkCondStr, "SaleInvoice_Print_Thermal_JainBrothersOfficeCopy.rpt")
                FPrintThisDocument(Me, objRepPrint, DglMain.Item(Col1Value, rowV_Type).Tag, mQry, "SaleInvoice_Print_Thermal_JainBrothersOfficeCopy.rpt", mPrintTitle, , sQry, sQryRepName, DglMain.Item(Col1Value, rowSaleToParty).Tag, DglMain.Item(Col1Value, rowV_Date).Value, IsPrintToPrinter, AgL.XNull(DtDoc.Rows(0)("Div_Code")), AgL.XNull(DtDoc.Rows(0)("Site_Code")))
            End If
            If Val(FGetSettings(SettingFields.PrintStockSlipWithDocumentPrint, SettingType.General)) > 1 Then
                objRepPrint = New AgLibrary.RepView(AgL)
                'FGetPrintCrystal(SearchCode, mPrintFor, IsPrintToPrinter, BulkCondStr, "SaleInvoice_Print_Thermal_JainBrothersOfficeCopy.rpt")
                FPrintThisDocument(Me, objRepPrint, DglMain.Item(Col1Value, rowV_Type).Tag, mQry, "SaleInvoice_Print_Thermal_JainBrothersOfficeCopy.rpt", mPrintTitle, , sQry, sQryRepName, DglMain.Item(Col1Value, rowSaleToParty).Tag, DglMain.Item(Col1Value, rowV_Date).Value, IsPrintToPrinter, AgL.XNull(DtDoc.Rows(0)("Div_Code")), AgL.XNull(DtDoc.Rows(0)("Site_Code")))
            End If
        Else
            If Val(FGetSettings(SettingFields.PrintStockSlipWithDocumentPrint, SettingType.General)) > 0 Then
                Dim mStockSlipReportFileName As String
                mStockSlipReportFileName = AgL.XNull(FGetSettings(SettingFields.StockSlipReportFileName, SettingType.General))
                If mStockSlipReportFileName = "" Then mStockSlipReportFileName = "SaleInvoice_Print_Thermal_StockSlip.rpt"
                objRepPrint = New AgLibrary.RepView(AgL)
                FPrintThisDocument(Me, objRepPrint, DglMain.Item(Col1Value, rowV_Type).Tag, mQry, mStockSlipReportFileName, mPrintTitle, , sQry, sQryRepName, DglMain.Item(Col1Value, rowSaleToParty).Tag, DglMain.Item(Col1Value, rowV_Date).Value, IsPrintToPrinter, AgL.XNull(DtDoc.Rows(0)("Div_Code")), AgL.XNull(DtDoc.Rows(0)("Site_Code")))
            End If
        End If


        AgL.PubTempStr = AgL.PubTempStr & "End FPrintThisDocument Function : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf

    End Sub

    Sub FPrintThisDocument(ByVal objFrm As Object, ByVal objRepFrm As Object, ByVal V_Type As String,
     Optional ByVal Report_QueryList As String = "", Optional ByVal Report_NameList As String = "",
     Optional ByVal Report_TitleList As String = "", Optional ByVal Report_FormatList As String = "",
     Optional ByVal SubReport_QueryList As String = "",
     Optional ByVal SubReport_NameList As String = "", Optional ByVal PartyCode As String = "", Optional ByVal V_Date As String = "", Optional ByVal IsPrintToPrinter As Boolean = False,
     Optional ByVal Division As String = "", Optional ByVal Site As String = ""
     )

        Dim DtVTypeSetting As DataTable = Nothing
        Dim mQry As String = ""

        Dim strQry As String = ""

        Dim RepName As String = ""
        Dim RepTitle As String = ""
        Dim RepQry As String = ""

        Dim RetIndex As Integer = 0


        Dim I As Integer = 0

        Try

            If TypeOf (objFrm) Is AgTemplate.TempTransaction Then
                If Division = "" Then
                    Division = objFrm.TxtDivision.Tag
                End If
            Else
                If Division = "" Then
                    Division = AgL.PubDivCode
                End If
            End If



            If Report_QueryList <> "" Then Report_QryArr = Split(Report_QueryList, "~")
            If Report_TitleList <> "" Then Report_TitleArr = Split(Report_TitleList, "|")
            If Report_NameList <> "" Then Report_NameArr = Split(Report_NameList, "|")

            If Report_FormatList <> "" Then
                Report_FormatArr = Split(Report_FormatList, "|")

                For I = 0 To Report_FormatArr.Length - 1
                    If strQry <> "" Then strQry += " UNION ALL "
                    strQry += " Select " & I & " As Code, '" & Report_FormatArr(I) & "' As Name "
                Next

                Dim FRH_Single As DMHelpGrid.FrmHelpGrid
                FRH_Single = New DMHelpGrid.FrmHelpGrid(New DataView(AgL.FillData(strQry, AgL.GCn).TABLES(0)), "", 300, 350, , , False)
                FRH_Single.FFormatColumn(0, , 0, , False)
                FRH_Single.FFormatColumn(1, "Report Format", 250, DataGridViewContentAlignment.MiddleLeft)
                FRH_Single.StartPosition = FormStartPosition.CenterScreen
                FRH_Single.ShowDialog()

                If FRH_Single.BytBtnValue = 0 Then
                    RetIndex = FRH_Single.DRReturn("Code")
                End If

                If Report_NameArr.Length = Report_FormatArr.Length Then RepName = Report_NameArr(RetIndex) Else RepName = Report_NameArr(0)
                If Report_TitleArr.Length = Report_FormatArr.Length Then RepTitle = Report_TitleArr(RetIndex) Else RepTitle = Report_TitleArr(0)
                If Report_QryArr.Length = Report_FormatArr.Length Then RepQry = Report_QryArr(RetIndex) Else RepQry = Report_QryArr(0)
            Else
                RepName = Report_NameArr(0)
                RepTitle = Report_TitleArr(0)
                RepQry = Report_QryArr(0)
            End If

            If DsMainDocPrintRep Is Nothing Then

                AgL.PubTempStr = AgL.PubTempStr & "Start Execute Main Query to print : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf
                DsMainDocPrintRep = AgL.FillData(RepQry, AgL.GCn)
                AgL.PubTempStr = AgL.PubTempStr & "End Execute Main Query to print : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf



                Dim mCompanyLogoFileName As String
                Dim mCompanyAuthorisedSignatoryFileName As String
                Dim mEInvoiceQrCodeFileName As String = ""

                AgL.PubTempStr = AgL.PubTempStr & "Start fetching logo & signature file name from setting : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf
                If TypeOf (objFrm) Is AgTemplate.TempTransaction Then
                    mCompanyLogoFileName = ClsMain.FGetSettings(SettingFields.CompanyLogoFileName, SettingType.General, objFrm.TxtDivision.Tag, objFrm.TxtSite_Code.Tag, "", "", "", "", "")
                    mCompanyAuthorisedSignatoryFileName = ClsMain.FGetSettings(SettingFields.CompanyAuthorisedSignatoryFileName, SettingType.General, objFrm.TxtDivision.Tag, objFrm.TxtSite_Code.Tag, "", "", "", "", "")

                Else
                    mCompanyLogoFileName = ClsMain.FGetSettings(SettingFields.CompanyLogoFileName, SettingType.General, AgL.PubDivCode, AgL.PubSiteCode, "", "", "", "", "")
                    mCompanyAuthorisedSignatoryFileName = ClsMain.FGetSettings(SettingFields.CompanyAuthorisedSignatoryFileName, SettingType.General, AgL.PubDivCode, AgL.PubSiteCode, "", "", "", "", "")
                End If
                mEInvoiceQrCodeFileName = PubAttachmentPath + mSearchCode + "\" + "EInvoiceQrCode.PNG"

                AgL.PubTempStr = AgL.PubTempStr & "End fetching logo & signature file name from setting : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf

                DsMainDocPrintRep.Tables(0).Columns.Add("CompanyLogo", System.Type.GetType("System.Byte[]"))
                DsMainDocPrintRep.Tables(0).Columns.Add("CompanyAuthorisedSignature", System.Type.GetType("System.Byte[]"))
                DsMainDocPrintRep.Tables(0).Columns.Add("EInvoiceQrCode", System.Type.GetType("System.Byte[]"))

                AgL.PubTempStr = AgL.PubTempStr & "Start Reading Logo File : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf
                Dim FileCompanyLogo() As Byte
                If File.Exists(mCompanyLogoFileName) Then
                    FileCompanyLogo = ReadFile(mCompanyLogoFileName)
                Else
                    FileCompanyLogo = ConvertToByteArray(My.Resources.BlankImage)
                End If


                For I = 0 To DsMainDocPrintRep.Tables(0).Rows.Count - 1
                    DsMainDocPrintRep.Tables(0).Rows(I)("CompanyLogo") = FileCompanyLogo
                Next
                AgL.PubTempStr = AgL.PubTempStr & "End Reading Logo File : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf


                AgL.PubTempStr = AgL.PubTempStr & "Start Reading Signature File : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf
                Dim FileCompanySign() As Byte
                If File.Exists(mCompanyAuthorisedSignatoryFileName) Then
                    FileCompanySign = ReadFile(mCompanyAuthorisedSignatoryFileName)
                Else
                    FileCompanySign = ConvertToByteArray(My.Resources.BlankImage)
                End If


                For I = 0 To DsMainDocPrintRep.Tables(0).Rows.Count - 1
                    DsMainDocPrintRep.Tables(0).Rows(I)("CompanyAuthorisedSignature") = FileCompanySign
                Next
                AgL.PubTempStr = AgL.PubTempStr & "End Reading Signature File : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf


                AgL.PubTempStr = AgL.PubTempStr & "Start Reading EInvoice QR File : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf
                Dim FileEInvoiceQR() As Byte
                If File.Exists(mEInvoiceQrCodeFileName) Then
                    FileEInvoiceQR = ReadFile(mEInvoiceQrCodeFileName)
                Else
                    FileEInvoiceQR = ConvertToByteArray(My.Resources.BlankImage)
                End If


                For I = 0 To DsMainDocPrintRep.Tables(0).Rows.Count - 1
                    DsMainDocPrintRep.Tables(0).Rows(I)("EInvoiceQrCode") = FileEInvoiceQR
                Next
                AgL.PubTempStr = AgL.PubTempStr & "End Reading EInvoice QR File : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf


                AgPL.CreateFieldDefFile1(DsMainDocPrintRep, AgL.PubReportPath & "\" & RepName & ".ttx", True)

                If SubReport_QueryList <> "" Then SubReport_QryArr = Split(SubReport_QueryList, "^")
                If SubReport_NameList <> "" Then SubReport_NameArr = Split(SubReport_NameList, "^")


                AgL.PubTempStr = AgL.PubTempStr & "Start Executing Subreport Queries : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf
                If SubReport_QryArr IsNot Nothing And SubReport_NameArr IsNot Nothing Then
                    If SubReport_QryArr.Length <> SubReport_NameArr.Length Then
                        MsgBox("Number Of SubReport Qries And SubReport Names Are Not Equal.", MsgBoxStyle.Information)
                        Exit Sub
                    End If

                    For I = 0 To SubReport_QryArr.Length - 1
                        ReDim Preserve SubReport_DataSetArr(I)
                        SubReport_DataSetArr(I) = New DataSet
                        SubReport_DataSetArr(I) = AgL.FillData(SubReport_QryArr(I).ToString, AgL.GCn)

                        AgPL.CreateFieldDefFile1(SubReport_DataSetArr(I), AgL.PubReportPath & "\" & Report_NameList & SubReport_NameArr(I).ToString & ".ttx", True)
                    Next
                End If
                AgL.PubTempStr = AgL.PubTempStr & "End Executing Subreport Queries : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf
            End If



            If FDivisionNameForCustomization(12) = "MAA KI KRIPA" Then
            Else
                AgL.PubCrystalDocument = New ReportDocument
            End If

            AgL.PubTempStr = AgL.PubTempStr & "Start Loading Crystal Report Document : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf
            AgL.PubCrystalDocument.Load(AgL.PubReportPath & "\" & RepName)
            AgL.PubTempStr = AgL.PubTempStr & "End Loading Crystal Report Document : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf
            AgL.PubTempStr = AgL.PubTempStr & "Start Setting Datasource to report document : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf
            AgL.PubCrystalDocument.SetDataSource(DsMainDocPrintRep.Tables(0))
            AgL.PubTempStr = AgL.PubTempStr & "End Setting Datasource to report document : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf


            AgL.PubTempStr = AgL.PubTempStr & "Start Setting Datasource to subreports : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf
            If SubReport_QryArr IsNot Nothing And SubReport_NameArr IsNot Nothing Then
                For I = 0 To SubReport_NameArr.Length - 1
                    Try
                        AgL.PubCrystalDocument.OpenSubreport(SubReport_NameArr(I).ToString).Database.Tables(0).SetDataSource(SubReport_DataSetArr(I).Tables(0))
                    Catch ex As Exception
                    End Try
                Next
            End If
            AgL.PubTempStr = AgL.PubTempStr & "End Setting Datasource to subreports : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf

            AgL.PubTempStr = AgL.PubTempStr & "Start Assigning PubCrystalDocument to Report Source : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf
            CType(objRepFrm.Controls("CrvReport"), CrystalDecisions.Windows.Forms.CrystalReportViewer).ReportSource = AgL.PubCrystalDocument
            AgL.PubTempStr = AgL.PubTempStr & "End Assigning PubCrystalDocument to Report Source : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf


            AgL.PubTempStr = AgL.PubTempStr & "Start setting Formulas : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf
            If TypeOf (objFrm) Is AgTemplate.TempTransaction Then
                ClsMain.Formula_Set(AgL.PubCrystalDocument, Division, CType(objFrm, AgTemplate.TempTransaction).TxtSite_Code.Tag, V_Type, RepTitle)
            ElseIf TypeOf (objFrm) Is AgLibrary.FrmRepDisplay Then
                ClsMain.Formula_Set(AgL.PubCrystalDocument, AgL.PubDivCode, AgL.PubSiteCode, V_Type, RepTitle)
                ClsMain.SetFormulaFilters(AgL.PubCrystalDocument, objFrm)
            Else
                ClsMain.Formula_Set(AgL.PubCrystalDocument, Division, AgL.PubSiteCode, V_Type, RepTitle)
            End If
            AgL.PubTempStr = AgL.PubTempStr & "End setting Formulas : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf
            'AgPL.Show_Report(objRepFrm, "* " & RepTitle & " *", objFrm.MdiParent)

            If IsPrintToPrinter = True Then
                AgL.PubTempStr = AgL.PubTempStr & "Start Printing To Printer : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf


                AgL.PubCrystalDocument.PrintToPrinter(1, True, 0, 0)

                AgL.PubTempStr = AgL.PubTempStr & "End Printing To Printer : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf

            Else
                AgL.PubTempStr = AgL.PubTempStr & "Start Printing To Screen : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf
                objRepFrm.MdiParent = objFrm.MdiParent
                objRepFrm.Show()
                AgL.PubTempStr = AgL.PubTempStr & "End Printing To Screen : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf


            End If

            AgL.PubTempStr = AgL.PubTempStr & "Start Insert to Log Table : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf
            If TypeOf (objFrm) Is AgTemplate.TempTransaction Then
                Call AgL.LogTableEntry(objFrm.mSearchCode, objFrm.Text, "P", AgL.PubMachineName, AgL.PubUserName, AgL.PubLoginDate, AgL.GCn, AgL.ECmd)
            Else
                Call AgL.LogTableEntry("", objFrm.Text, "P", AgL.PubMachineName, AgL.PubUserName, AgL.PubLoginDate, AgL.GCn, AgL.ECmd)
            End If
            AgL.PubTempStr = AgL.PubTempStr & "End Insert to Log Table : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf
        Catch Ex As Exception
            MsgBox(Ex.Message)
        End Try
    End Sub


    Public Sub FGetPrintCrystal_Aadhat(ObjFrm As Object, ByVal SearchCode As String, mPrintFor As ClsMain.PrintFor, IsPrintToPrinter As Boolean, BulkCondStr As String, PrintingCopiesStr As String)
        Dim mPrintTitle As String
        Dim PrintingCopies() As String
        Dim I As Integer, J As Integer
        Dim mQry As String
        Dim dtDoc As DataTable
        Dim mDocNoCaption As String = ""
        Dim mDocDateCaption As String = ""
        Dim mDocReportFileName As String = ""
        Dim mDocNoPrefix As String = ""
        Dim mDocPrintHeaderPattern As String = ""
        Dim mTermsAndConditions As String


        mQry = "Select H.DocID, H.Div_Code, H.Site_Code, H.V_Type, VT.NCat, VT.Description as V_TypeDescription,
                H.V_Date, H.SaleToParty 
                From SaleInvoice H With (NoLock) 
                Left Join Voucher_Type Vt With (NoLock) On H.V_Type = VT.V_Type
                Where H.DocID ='" & SearchCode & "' "
        dtDoc = AgL.FillData(mQry, AgL.GCn).Tables(0)
        If dtDoc.Rows.Count > 0 Then
            mDocNoCaption = ClsMain.FGetSettings(SettingFields.DocumentPrintEntryNoCaption, SettingType.General, AgL.XNull(dtDoc.Rows(0)("Div_Code")), AgL.XNull(dtDoc.Rows(0)("Site_Code")), VoucherCategory.Sales, AgL.XNull(dtDoc.Rows(0)("NCAT")), AgL.XNull(dtDoc.Rows(0)("V_Type")), "", "")
            mDocDateCaption = ClsMain.FGetSettings(SettingFields.DocumentPrintEntryDateCaption, SettingType.General, AgL.XNull(dtDoc.Rows(0)("Div_Code")), AgL.XNull(dtDoc.Rows(0)("Site_Code")), VoucherCategory.Sales, AgL.XNull(dtDoc.Rows(0)("NCAT")), AgL.XNull(dtDoc.Rows(0)("V_Type")), "", "")
            mDocReportFileName = ClsMain.FGetSettings(SettingFields.DocumentPrintReportFileName, SettingType.General, AgL.XNull(dtDoc.Rows(0)("Div_Code")), AgL.XNull(dtDoc.Rows(0)("Site_Code")), VoucherCategory.Sales, AgL.XNull(dtDoc.Rows(0)("NCAT")), AgL.XNull(dtDoc.Rows(0)("V_Type")), "", "")
            mDocNoPrefix = ClsMain.FGetSettings(SettingFields.DocumentPrintEntryNoPrefix, SettingType.General, AgL.XNull(dtDoc.Rows(0)("Div_Code")), AgL.XNull(dtDoc.Rows(0)("Site_Code")), VoucherCategory.Sales, AgL.XNull(dtDoc.Rows(0)("NCAT")), AgL.XNull(dtDoc.Rows(0)("V_Type")), "", "")
            mTermsAndConditions = ClsMain.FGetSettings(SettingFields.TermsAndConditions, SettingType.General, AgL.XNull(dtDoc.Rows(0)("Div_Code")), AgL.XNull(dtDoc.Rows(0)("Site_Code")), VoucherCategory.Sales, AgL.XNull(dtDoc.Rows(0)("NCAT")), AgL.XNull(dtDoc.Rows(0)("V_Type")), "", "")
            mDocPrintHeaderPattern = ClsMain.FGetSettings(SettingFields.DocumentPrintHeaderPattern, SettingType.General, AgL.XNull(dtDoc.Rows(0)("Div_Code")), AgL.XNull(dtDoc.Rows(0)("Site_Code")), VoucherCategory.Sales, AgL.XNull(dtDoc.Rows(0)("NCAT")), AgL.XNull(dtDoc.Rows(0)("V_Type")), "", "")
            mPrintTitle = AgL.XNull(dtDoc.Rows(0)("V_TypeDescription"))

            If AgL.XNull(dtDoc.Rows(0)("NCAT")) = Ncat.SaleInvoice Then
                mPrintTitle = "TAX INVOICE"
                mDocNoCaption = "Invoice No."
                mDocDateCaption = "Invoice Date"
            End If


            'Dim mDocNoCaption As String = FGetSettings(SettingFields.DocumentPrintEntryNoCaption, SettingType.General)
            'Dim mDocDateCaption As String = FGetSettings(SettingFields.DocumentPrintEntryDateCaption, SettingType.General)
            'Dim mDocReportFileName As String = FGetSettings(SettingFields.DocumentPrintReportFileName, SettingType.General)
            'Dim mDocNoPrefix As String = FGetSettings(SettingFields.DocumentPrintEntryNoPrefix, SettingType.General)



            Dim bPrimaryQry As String = ""
            If BulkCondStr <> "" Then
                bPrimaryQry = " Select * From SaleInvoice  With (NoLock) Where DocID In (" & BulkCondStr & ")"
                PrintingCopies = PrintingCopiesStr.Split(",") 'FGetSettings(SettingFields.PrintingBulkCopyCaptions, SettingType.General).ToString.Split(",")
            Else
                bPrimaryQry = " Select * From SaleInvoice  With (NoLock) Where DocID = '" & SearchCode & "'"
                PrintingCopies = PrintingCopiesStr.Split(",")
            End If

            'PrintingCopies = AgL.XNull(DtV_TypeSettings.Rows(0)("PrintingCopyCaptions")).ToString.Split(",")

            mQry = ""
            For I = 1 To PrintingCopies.Length
                If mQry <> "" Then mQry = mQry + " Union All "

                mQry = mQry + "
                Select '" & I & "' as Copies, '" & AgL.XNull(PrintingCopies(I - 1)) & "' as CopyPrintingCaption, '" & mDocNoCaption & "' as DocNoCaption, '" & mDocDateCaption & "' as DocDateCaption, SiteState.ManualCode as SiteStateCode, SiteState.Description as SiteStateName, H.DocID, L.Sr, H.V_Date, H.DeliveryDate, VT.Description as Voucher_Type, VT.NCat, '" & mDocNoPrefix & "' || H.ManualRefNo as InvoiceNo, RT.Description as RateType, IfNull(Agent.DispName,'') as AgentName, '" & AgL.PubDtEnviro.Rows(0)("Caption_SalesAgent") & "' as AgentCaption,
                (Case When BP.Nature = 'Cash' Then BP.DispName || ' - ' || IsNull(H.SaleToPartyName,'') Else H.SaletoPartyName  End)  as SaleToPartyName, Sg.ManualCode as SaleToPartyCode,
                IfNull(H.SaleToPartyAddress,'') as SaleToPartyAddress, IfNull(C.CityName,'') as CityName, IfNull(H.SaleToPartyPincode,'') as SaleToPartyPincode, 
                IfNull(State.ManualCode,'') as StateCode, IfNull(State.Description,'')  as StateName, 
                IfNull(H.SaleToPartyMobile,'') as SaleToPartyMobile, Sg.ContactPerson, IfNull(H.SaleToPartySalesTaxNo,'') as SaleToPartySalesTaxNo, 
                IfNull(H.SaleToPartyAadharNo,'') as SaleToPartyAadharNo, IfNull(H.SaleToPartyPanNo,'') as SaleToPartyPanNo,
                (Case When BP.Nature = 'Cash' Then IfNull(SP.DispName, BP.DispName || ' - ' || IsNull(H.SaleToPartyName,'')) Else IfNull(SP.DispName ,H.SaletoPartyName) End) as ShipToPartyName,
                (Case When SP.DispName Is Null Then IfNull(Sg.ManualCode,'') Else IfNull(Sp.ManualCode,'') End) as ShipToPartyManualCode, 
                (Case When SP.DispName Is Null Then IfNull(H.SaleToPartyAddress,'') Else IfNull(Sp.Address,'') End) as ShipToPartyAddress, 
                (Case When SP.DispName Is Null Then IfNull(C.CityName,'') Else IfNull(SC.CityName,'') End) as ShipToPartyCity, 
                (Case When SP.DispName Is Null Then IfNull(H.SaleToPartyPinCode,'') Else IfNull(Sp.Pin,'') End) as ShipToPartyPincode, 
                (Case When SP.DispName Is Null Then IfNull(State.ManualCode,'') Else IfNull(SS.ManualCode,'') End) as ShipToPartyStateCode, 
                (Case When SP.DispName Is Null Then IfNull(State.Description,'') Else IfNull(SS.Description,'') End) as ShipToPartyStateName, 
                (Case When SP.DispName Is Null Then IfNull(H.SaleToPartyMobile,'') Else IfNull(Sp.Mobile,'') End) as ShipToPartyMobile, 
                (Case When SP.DispName Is Null Then IfNull(H.SaleToPartySalesTaxNo,'') Else IfNull((Select RegistrationNo From SubgroupRegistration Where Subcode=H.ShipToParty And RegistrationType = '" & SubgroupRegistrationType.SalesTaxNo & "'),'') End) as ShipToPartySalesTaxNo, 
                (Case When SP.DispName Is Null Then IfNull(H.SaleToPartyAadharNo,'') Else IfNull((Select RegistrationNo From SubgroupRegistration Where Subcode=H.ShipToParty And RegistrationType = '" & SubgroupRegistrationType.AadharNo & "'),'') End) as ShipToPartyAadharNo, 
                (Case When SP.DispName Is Null Then IfNull(H.SaleToPartyPanNo,'') Else IfNull((Select RegistrationNo From SubgroupRegistration Where Subcode=H.ShipToParty And RegistrationType = '" & SubgroupRegistrationType.PanNo & "'),'') End) as ShipToPartyPanNo, 
                H.ShipToAddress, '" & mTermsAndConditions & "' TermsAndConditions, IfNull(Transporter.DispName,'') as TransporterName, IfNull(TD.LrNo,'') as LrNo, TD.LrDate, TD.NoOfBales, IfNull(TD.PrivateMark,'') PrivateMark, 
                TD.Weight, TD.Freight, TD.ChargedWeight, IfNull(TD.PaymentType,'') as FreightType, IfNull(TD.RoadPermitNo,'') as RoadPermitNo, TD.RoadPermitDate, IfNull(TD.VehicleNo,'') as VehicleNo, 
                IfNull(TD.ShipMethod,'') as ShipMethod, IfNull(TD.PreCarriageBy,'') PreCarriageBy, IfNull(TD.PreCarriagePlace,'') as PreCarriagePlace, IfNull(TD.BookedFrom,'') as BookedFrom, 
                IfNull(TD.BookedTo,'') as BookedTo, 
                IfNull(TD.Destination,(Case When SP.DispName Is Null Then IfNull(C.CityName,'') Else IfNull(SC.CityName,'') End)) as Destination, 
                IfNull(TD.DescriptionOfGoods,'') as DescriptionOfGoods, IfNull(TD.DescriptionOfPacking,'') as DescriptionOfPacking, 
                IfNull(L.ReferenceNo,'') as ReferenceNo, IfNull(Contra.ManualRefNo,'') as ContraDocNo,
                (Select group_concat(C1.ManualRefNo ,',') From SaleInvoice C1 Where C1.DocID = L.SaleInvoice And C1.DocID Is Not Null Group By C1.DocID) as ContraDocNoCsv,
                I.Description as ItemName, " & IIf(mPrintFor = ClsMain.PrintFor.QA, "IG.Description", "IfNull(IG.PrintingDescription,IG.Description)") & " as ItemGroupName, 
                IC.Description as ItemCatName, I.Specification as ItemSpecification, L.Specification as InvoiceLineSpecification, I.HSN, I.MaintainStockYn,
                L.SalesTaxGroupItem, STGI.GrossTaxRate, (Case when abs(IfNull(I.MaintainStockYn,1)) =1 Then L.Pcs Else 0 End) as Pcs, 
                (Case when abs(IfNull(I.MaintainStockYn,1)) =1 Then abs(L.Qty) Else 0 End) as Qty, L.Rate, L.Unit, U.DecimalPlaces as UnitDecimalPlaces, 
                TS.DiscountCalculationPattern, L.DiscountPer, L.DiscountAmount, L.AdditionalDiscountPer, L.AdditionalDiscountAmount, L.AdditionPer, L.AdditionAmount, 
                L.DiscountAmount+L.AdditionalDiscountAmount-L.AdditionAmount as TotalDiscount, 
                abs(L.Amount)+L.DiscountAmount+L.AdditionalDiscountAmount-L.AdditionAmount as AmountBeforeDiscount,
                abs(L.Amount) as Amount,Abs(L.Taxable_Amount) as Taxable_Amount,Abs(L.Tax1_Per) as Tax1_Per, abs(L.Tax1) as Tax1, 
                abs(L.Tax2_Per) as Tax2_Per, abs(L.Tax2) as Tax2, abs(L.Tax3_Per) as Tax3_Per, abs(L.Tax3) as Tax3, 
                abs(L.Tax4_Per) as Tax4_Per, abs(L.Tax4) as Tax4, abs(L.Tax5_Per) as Tax5_Per, abs(L.Tax5) as Tax5, 
                abs(L.Net_Amount) as Net_Amount, (Case When L.Remark Is Null And I.ItemType <> '" & ItemTypeCode.TradingProduct & "' Then I.Specification Else L.Remark End) as LRemarks, H.Remarks as HRemarks, 
                (Select Sum(L1.DiscountAmount+L1.AdditionalDiscountAmount-L1.AdditionAmount) From SaleInvoiceDetail L1 Where L1.DocID = H.DocID) as H_TotalDiscount, 
                (Select Sum(abs(L1.Amount)+L1.DiscountAmount+L1.AdditionalDiscountAmount-L1.AdditionAmount) From SaleinvoiceDetail L1 Where L1.DocID = H.DocId) as H_AmountBeforeDiscount,
                abs(H.Gross_Amount) as H_Gross_Amount, 
                H.SpecialDiscount_Per as H_SpecialDiscount_Per, H.SpecialDiscount as H_SpecialDiscount, Abs(H.Taxable_Amount) as H_Taxable_Amount,
                Abs(H.Tax1_Per) as H_Tax1_Per, Abs(H.Tax1) as H_Tax1, H.Tax2_Per as H_Tax2_Per, abs(H.Tax2) as H_Tax2, 
                H.Tax3_Per as H_Tax3_Per, abs(H.Tax3) as H_Tax3, H.Tax4_Per as H_Tax4_Per, abs(H.Tax4) as H_Tax4, 
                H.Tax5_Per as H_Tax5_Per, abs(H.Tax5) as H_Tax5, H.Deduction_Per as H_Deduction_Per, H.Deduction as H_Deduction, 
                H.Other_Charge_Per as H_Other_Charge_Per, H.Other_Charge as H_Other_Charge, H.Round_Off, abs(H.Net_Amount) as H_Net_Amount, 
                IfNull(H.EInvoiceIRN,'') EInvoiceIRN, H.EInvoiceAckNo, H.EInvoiceAckDate,
                '" & AgL.XNull(AgL.PubDtEnviro.Rows(0)("Default_BankAccountDetail")) & "' as Default_BankAccountDetail,
                '" & mDocPrintHeaderPattern & "' as DocumentPrintHeaderPattern, IfNull(L.DimensionDetail,'') as DimDetail,
                '" & AgL.PubUserName & "' as PrintedByUser, H.EntryBy as EntryByUser, '" & mPrintTitle & "' as PrintTitle,
                
                IfNull(PIH.VendorDocNo,'') as PurchInvoiceNo


                from (" & bPrimaryQry & ") as H
                Left Join SaleInvoiceTrnSetting TS  With (NoLock) On H.DocId = TS.DocID
                Left Join SaleInvoiceDetail L  With (NoLock) On H.DocID = L.DocID
                Left Join Item I  With (NoLock) On L.Item = I.Code
                Left Join Unit U  With (NoLock) On I.Unit = U.Code
                Left Join Item IG  With (NoLock) On I.ItemGroup = IG.Code
                Left Join Item IC  With (NoLock) On I.ItemCategory = IC.Code
                Left Join City C  With (NoLock) On H.SaleToPartyCity = C.CityCode
                Left Join State  With (NoLock) On C.State = State.Code
                Left Join SaleInvoiceTransport TD  With (NoLock) On H.DocID = TD.DocID
                Left Join Subgroup Transporter  With (NoLock) On TD.Transporter= Transporter.SubCode
                Left Join PostingGroupSalesTaxItem STGI  With (NoLock) On L.SalesTaxGroupItem = STGI.Description
                Left Join Subgroup Sg  With (NoLock) On H.SaleToParty = Sg.Subcode
                Left Join Subgroup BP With (NoLock) On H.BillToParty = BP.Subcode
                Left Join Subgroup SP With (NoLock) On H.ShipToParty = SP.Subcode
                Left Join City SC With (NoLock) On SP.CityCode = SC.CityCode
                Left Join State SS with (NoLock) On SC.State = SS.Code
                Left Join RateType RT  With (NoLock) on H.RateType = Rt.Code
                Left Join Subgroup Agent  With (NoLock) On H.Agent = Agent.Subcode
                Left Join Voucher_Type Vt  With (NoLock) On H.V_Type = Vt.V_Type
                Left Join DocumentPrefix DP On VT.Category = DP.Category And H.Div_Code = DP.Div_Code                
                Left Join SiteMast Site On H.Site_Code = Site.Code
                Left Join City SiteCity On Site.City_Code = SiteCity.CityCode
                Left Join State SiteState On SiteCity.State = SiteState.Code
                Left Join PurchInvoiceDetail PID With (NoLock) On PID.DocID = L.Remarks1 And PID.Sr=1
                Left Join PurchInvoice PIH With (NoLock) On PIH.DocID = PID.DocID
                Left Join SaleInvoice Contra With (NoLock) On L.SaleInvoice = Contra.DocID
                "

            Next
            mQry = mQry + " Order By Copies, H.DocID, L.Sr "


            Dim objRepPrint As Object
            If mPrintFor = ClsMain.PrintFor.EMail Then
                objRepPrint = New AgLibrary.FrmMailComposeWithCrystal(AgL)
                FGetMailConfiguration(objRepPrint, SearchCode)
                objRepPrint.TxtToEmail.Text = AgL.XNull(AgL.Dman_Execute("Select Sg.EMail
                    From PurchInvoice H 
                    LEFT JOIN SubGroup Sg  On H.Vendor = Sg.SubCode
                    Where H.GenDocId = '" & SearchCode & "'", AgL.GCn).ExecuteScalar())
            ElseIf mPrintFor = ClsMain.PrintFor.Whatsapp Then
                objRepPrint = New FrmWhatsapp(AgL)
                FGetWhatsappConfiguration(objRepPrint, SearchCode)
            Else
                objRepPrint = New AgLibrary.RepView(AgL)
            End If


            If mDocReportFileName = "" Then
                ClsMain.FPrintThisDocument(ObjFrm, objRepPrint, AgL.XNull(dtDoc.Rows(0)("V_Type")), mQry, "SaleInvoice_Print.rpt", mPrintTitle, , , , AgL.XNull(dtDoc.Rows(0)("SaleToParty")), AgL.XNull(dtDoc.Rows(0)("V_Date")), IsPrintToPrinter,,, mSearchCode)
            Else
                ClsMain.FPrintThisDocument(ObjFrm, objRepPrint, AgL.XNull(dtDoc.Rows(0)("V_Type")), mQry, mDocReportFileName, mPrintTitle, , , , AgL.XNull(dtDoc.Rows(0)("SaleToParty")), AgL.XNull(dtDoc.Rows(0)("V_Date")), IsPrintToPrinter,,, mSearchCode)
            End If
        End If
    End Sub

    Public Sub FPrintThisDocument(ByVal objFrm As Object, ByVal objRepFrm As Object, ByVal V_Type As String,
         Optional ByVal Report_QueryList As String = "", Optional ByVal Report_NameList As String = "",
         Optional ByVal Report_TitleList As String = "", Optional ByVal Report_FormatList As String = "",
         Optional ByVal SubReport_QueryList As String = "",
         Optional ByVal SubReport_NameList As String = "", Optional ByVal PartyCode As String = "", Optional ByVal V_Date As String = "", Optional ByVal IsPrintToPrinter As Boolean = False
         )

        Dim DtVTypeSetting As DataTable = Nothing
        Dim mQry As String = ""
        Dim mCrd As New ReportDocument
        Dim DsRep As New DataSet
        Dim strQry As String = ""

        Dim RepName As String = ""
        Dim RepTitle As String = ""
        Dim RepQry As String = ""

        Dim RetIndex As Integer = 0

        Dim Report_QryArr() As String = Nothing
        Dim Report_NameArr() As String = Nothing
        Dim Report_TitleArr() As String = Nothing
        Dim Report_FormatArr() As String = Nothing

        Dim SubReport_QryArr() As String = Nothing
        Dim SubReport_NameArr() As String = Nothing
        Dim SubReport_DataSetArr() As DataSet = Nothing
        Dim FileCompanyLogo As Byte()
        Dim FileCompanySign As Byte()


        Dim I As Integer = 0

        Try


            If Report_QueryList <> "" Then Report_QryArr = Split(Report_QueryList, "~")
            If Report_TitleList <> "" Then Report_TitleArr = Split(Report_TitleList, "|")
            If Report_NameList <> "" Then Report_NameArr = Split(Report_NameList, "|")

            If Report_FormatList <> "" Then
                Report_FormatArr = Split(Report_FormatList, "|")

                For I = 0 To Report_FormatArr.Length - 1
                    If strQry <> "" Then strQry += " UNION ALL "
                    strQry += " Select " & I & " As Code, '" & Report_FormatArr(I) & "' As Name "
                Next

                Dim FRH_Single As DMHelpGrid.FrmHelpGrid
                FRH_Single = New DMHelpGrid.FrmHelpGrid(New DataView(AgL.FillData(strQry, AgL.GCn).TABLES(0)), "", 300, 350, , , False)
                FRH_Single.FFormatColumn(0, , 0, , False)
                FRH_Single.FFormatColumn(1, "Report Format", 250, DataGridViewContentAlignment.MiddleLeft)
                FRH_Single.StartPosition = FormStartPosition.CenterScreen
                FRH_Single.ShowDialog()

                If FRH_Single.BytBtnValue = 0 Then
                    RetIndex = FRH_Single.DRReturn("Code")
                End If

                If Report_NameArr.Length = Report_FormatArr.Length Then RepName = Report_NameArr(RetIndex) Else RepName = Report_NameArr(0)
                If Report_TitleArr.Length = Report_FormatArr.Length Then RepTitle = Report_TitleArr(RetIndex) Else RepTitle = Report_TitleArr(0)
                If Report_QryArr.Length = Report_FormatArr.Length Then RepQry = Report_QryArr(RetIndex) Else RepQry = Report_QryArr(0)
            Else
                RepName = Report_NameArr(0)
                RepTitle = Report_TitleArr(0)
                RepQry = Report_QryArr(0)
            End If

            DsRep = AgL.FillData(RepQry, AgL.GCn)

            If File.Exists("..\Data\Logo.Jpg") Then
                FileCompanyLogo = ReadFile("..\Data\Logo.Jpg")
                DsRep.Tables(0).Columns.Add("CompanyLogo", System.Type.GetType("System.Byte[]"))
                DsRep.Tables(0).Rows(0)("CompanyLogo") = FileCompanyLogo
            End If
            If File.Exists("..\Data\Sign.Jpg") Then
                FileCompanySign = ReadFile("..\Data\Sign.Jpg")
                DsRep.Tables(0).Columns.Add("CompanySign", System.Type.GetType("System.Byte[]"))
                DsRep.Tables(0).Rows(DsRep.Tables(0).Rows.Count - 1)("CompanySign") = FileCompanySign
            End If


            FReplaceInvoiceVariables(DsRep.Tables(0), TxtDivision.Tag, DglMain.Item(Col1Value, rowSite_Code).Tag)
            AgPL.CreateFieldDefFile1(DsRep, AgL.PubReportPath & "\" & RepName & ".ttx", True)

            If SubReport_QueryList <> "" Then SubReport_QryArr = Split(SubReport_QueryList, "|")
            If SubReport_NameList <> "" Then SubReport_NameArr = Split(SubReport_NameList, "|")

            If SubReport_QryArr IsNot Nothing And SubReport_NameArr IsNot Nothing Then
                If SubReport_QryArr.Length <> SubReport_NameArr.Length Then
                    MsgBox("Number Of SubReport Qries And SubReport Names Are Not Equal.", MsgBoxStyle.Information)
                    Exit Sub
                End If

                For I = 0 To SubReport_QryArr.Length - 1
                    ReDim Preserve SubReport_DataSetArr(I)
                    SubReport_DataSetArr(I) = New DataSet
                    SubReport_DataSetArr(I) = AgL.FillData(SubReport_QryArr(I).ToString, AgL.GCn)
                    AgPL.CreateFieldDefFile1(SubReport_DataSetArr(I), AgL.PubReportPath & "\" & Report_NameList & (I + 1).ToString & ".ttx", True)
                Next
            End If

            mCrd.Load(AgL.PubReportPath & "\" & RepName)
            mCrd.SetDataSource(DsRep.Tables(0))


            If SubReport_QryArr IsNot Nothing And SubReport_NameArr IsNot Nothing Then
                For I = 0 To SubReport_NameArr.Length - 1
                    mCrd.OpenSubreport(SubReport_NameArr(I).ToString).Database.Tables(0).SetDataSource(SubReport_DataSetArr(I).Tables(0))
                Next
            End If

            CType(objRepFrm.Controls("CrvReport"), CrystalDecisions.Windows.Forms.CrystalReportViewer).ReportSource = mCrd
            Formula_Set(mCrd, RepTitle)
            'ClsMain.Formula_Set(mCrd, CType(objFrm, AgTemplate.TempTransaction1).TxtDivision.Tag, CType(objFrm, AgTemplate.TempTransaction1).DglMain.Item(Col1Value, rowSite_Code).Tag)
            ClsMain.Formula_Set(mCrd, CType(objFrm, AgTemplate.TempTransaction1).TxtDivision.Tag, CType(objFrm, AgTemplate.TempTransaction1).DglMain.Item(Col1Value, rowSite_Code).Tag, CType(objFrm, AgTemplate.TempTransaction1).DglMain.Item(Col1Value, rowV_Type).Tag, RepTitle)
            'AgPL.Show_Report(objRepFrm, "* " & RepTitle & " *", objFrm.MdiParent)

            If IsPrintToPrinter = True Then
                mCrd.PrintToPrinter(1, True, 0, 0)
            Else
                objRepFrm.MdiParent = Me.MdiParent
                objRepFrm.Show()
            End If

            Call AgL.LogTableEntry(objFrm.mSearchCode, objFrm.Text, "P", AgL.PubMachineName, AgL.PubUserName, AgL.PubLoginDate, AgL.GCn, AgL.ECmd)
        Catch Ex As Exception
            MsgBox(Ex.Message)
        End Try
    End Sub


    Public Sub Formula_Set(ByVal mCRD As ReportDocument, Optional ByVal mRepTitle As String = "", Optional ByVal Date1 As String = "", Optional ByVal Date2 As String = "")
        Dim i As Integer
        For i = 0 To mCRD.DataDefinition.FormulaFields.Count - 1
            Select Case AgL.UTrim(mCRD.DataDefinition.FormulaFields(i).Name)
                Case AgL.UTrim("Title")
                    mCRD.DataDefinition.FormulaFields(i).Text = "'" & mRepTitle & "'"
                Case AgL.UTrim("comp_name")
                    mCRD.DataDefinition.FormulaFields(i).Text = "'" & AgL.PubCompName & "'"
                Case AgL.UTrim("comp_add")
                    mCRD.DataDefinition.FormulaFields(i).Text = "'" & AgL.PubCompAdd1 & "'"
                Case AgL.UTrim("RegOffice_FullAddress")
                    mCRD.DataDefinition.FormulaFields(i).Text = "'" & AgL.PubCompAdd1 & "'"
                Case AgL.UTrim("RegOffice_City")
                    mCRD.DataDefinition.FormulaFields(i).Text = "'" & AgL.PubCompAdd2 & "'"
                Case AgL.UTrim("comp_add1")
                    mCRD.DataDefinition.FormulaFields(i).Text = "'" & AgL.PubCompAdd2 & "'"
                Case AgL.UTrim("comp_Pin")
                    mCRD.DataDefinition.FormulaFields(i).Text = "'" & AgL.PubCompPinCode & "'"
                Case AgL.UTrim("comp_phone")
                    mCRD.DataDefinition.FormulaFields(i).Text = "'" & AgL.PubCompPhone & "'"
                Case AgL.UTrim("comp_city")
                    mCRD.DataDefinition.FormulaFields(i).Text = "'" & AgL.PubCompCity & "'"
                Case AgL.UTrim("Title")
                    mCRD.DataDefinition.FormulaFields(i).Text = "'" & mRepTitle & "'"
                Case AgL.UTrim("Division")
                    If AgL.PubDivName IsNot Nothing Then
                        mCRD.DataDefinition.FormulaFields(i).Text = "'" & AgL.PubDivName.ToUpper & " DIVISION" & "'"
                    End If
                Case AgL.UTrim("Tin_No")
                    mCRD.DataDefinition.FormulaFields(i).Text = "'" & "TIN NO : " & AgL.PubCompTIN & "'"
                Case AgL.UTrim("DateBetween")
                    If Date1 <> "" And Date2 <> "" Then
                        mCRD.DataDefinition.FormulaFields(i).Text = "'" & "From Date " & Date1 & " To " & Date2 & " '"
                    ElseIf Date1 <> "" And Date2 = "" Then
                        mCRD.DataDefinition.FormulaFields(i).Text = "' " & "For Date : " & Date1 & " '"
                    End If

            End Select
        Next
    End Sub


    Public Function FReplaceInvoiceVariables(ByRef dtTable As DataTable, DivisionCode As String, SiteCode As String) As DataTable
        Dim I As Integer, J As Integer
        For I = 0 To dtTable.Rows.Count - 1
            For J = 0 To dtTable.Columns.Count - 1
                If Not IsDBNull(dtTable.Rows(I)(J)) Then
                    If TypeOf (dtTable.Rows(I)(J)) IsNot Object Then
                        If AgL.XNull(dtTable.Rows(I)(J)) <> "" Then
                            dtTable.Rows(I)(J) = FReplaceInvoiceVariables(dtTable.Rows(I)(J), DivisionCode, SiteCode)
                        End If
                    End If
                End If
            Next J
        Next I

        FReplaceInvoiceVariables = dtTable
    End Function

    Public Function FReplaceInvoiceVariables(ByRef mText As String, DivisionCode As String, SiteCode As String) As String
        Dim mQry As String
        Dim dtTemp As DataTable

        If mText.IndexOf("<") >= 0 And mText.IndexOf(">") > 0 Then
            mText = Replace(mText, "<Default_DebtorsInterestRate>", AgL.XNull(AgL.PubDtEnviro.Rows(0)("Default_DebtorsInterestRate")))

            mQry = "Select *
                    From SaleInvoice H  With (NoLock)
                    Where H.DocID = '" & mSearchCode & "'"
            dtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)


            mText = Replace(mText, "<CreditDays>", AgL.XNull(dtTemp.Rows(0)("CreditDays")))
            ClsMain.FReplacePubVariables(mText, TxtDivision.Tag, DglMain.Item(Col1Value, rowSite_Code).Tag)

        End If

        FReplaceInvoiceVariables = mText
    End Function


    Private Sub ShowSaleInvoiceParty(DocID As String, PartyCode As String, AcGroupNature As String, Optional ShowDialogForCash As Boolean = False)
        If AgL.XNull(DtV_TypeSettings.Rows(0)("SaleInvoicePattern")) = SaleInvoicePattern.PointOfSale And
            (LblV_Type.Tag = Ncat.SaleInvoice Or LblV_Type.Tag = Ncat.SaleInvoiceOverlay Or LblV_Type.Tag = Ncat.SaleReturn) Then
            AcGroupNature = "Cash"
        ElseIf DglMain.Item(Col1Value, rowSaleToParty).Tag.ToString.ToUpper = "TEMPPARTY" Or
            DglMain.Item(Col1Value, rowSaleToParty).Tag.ToString.ToUpper = "CUSTOMER" Then
            AcGroupNature = "Cash"
        ElseIf AcGroupNature = "BANK" Then
            AcGroupNature = "Cash"
        End If
        If DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag IsNot Nothing Then
            CType(DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag, FrmSaleInvoiceParty_WithDimension).NCAT = LblV_Type.Tag
            CType(DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag, FrmSaleInvoiceParty_WithDimension).EntryMode = Topctrl1.Mode
            CType(DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag, FrmSaleInvoiceParty_WithDimension).DivisionCode = TxtDivision.Tag
            CType(DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag, FrmSaleInvoiceParty_WithDimension).SiteCode = DglMain.Item(Col1Value, rowSite_Code).Tag
            CType(DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag, FrmSaleInvoiceParty_WithDimension).DtSaleInvoiceSettings = DtV_TypeSettings
            CType(DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag, FrmSaleInvoiceParty_WithDimension).objFrmSaleInvoice = Me
            CType(DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag, FrmSaleInvoiceParty_WithDimension).InvoiceAmount = Val(AgCalcGrid1.AgChargesValue(AgTemplate.ClsMain.Charges.NETAMOUNT, AgStructure.AgCalcGrid.AgCalcGridColumn.Col_Amount))

            DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag.ShowDialog()
        Else
            Dim FrmObj As FrmSaleInvoiceParty_WithDimension
            FrmObj = New FrmSaleInvoiceParty_WithDimension
            FrmObj.NCAT = LblV_Type.Tag
            FrmObj.EntryMode = Topctrl1.Mode
            FrmObj.DivisionCode = TxtDivision.Tag
            FrmObj.SiteCode = DglMain.Item(Col1Value, rowSite_Code).Tag
            FrmObj.DtSaleInvoiceSettings = DtV_TypeSettings
            FrmObj.IniGrid(DocID, PartyCode, AcGroupNature)
            FrmObj.objFrmSaleInvoice = Me
            FrmObj.InvoiceAmount = Val(AgCalcGrid1.AgChargesValue(AgTemplate.ClsMain.Charges.NETAMOUNT, AgStructure.AgCalcGrid.AgCalcGridColumn.Col_Amount))
            DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag = FrmObj
            If AcGroupNature.ToUpper = "CASH" And ShowDialogForCash Then
                DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag.ShowDialog()
            End If
        End If

        If Not AgL.StrCmp(Topctrl1.Mode, "Browse") Then
            Dim I As Integer = 0
            If DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag IsNot Nothing Then
                mQry = ""
                If Val(CType(DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag, FrmSaleInvoiceParty_WithDimension).TxtCashReceived.Text) <> 0 Then
                    mQry = " Select 'Cash' As PaymentModeDescription, " & Val(CType(DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag, FrmSaleInvoiceParty_WithDimension).TxtCashReceived.Text) & " As Amount "
                End If
                For I = 0 To CType(DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag, FrmSaleInvoiceParty_WithDimension).Dgl2.Rows.Count - 1
                    If CType(DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag, FrmSaleInvoiceParty_WithDimension).Dgl2.Item(FrmSaleInvoiceParty_WithDimension.Col2PaymentMode, I).Value <> "" Then
                        If mQry <> "" Then mQry += " UNION ALL "
                        mQry += " Select '" & CType(DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag, FrmSaleInvoiceParty_WithDimension).Dgl2.Item(FrmSaleInvoiceParty_WithDimension.Col2PaymentMode, I).Value & "' As PaymentModeDescription, 
                            " & Val(CType(DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag, FrmSaleInvoiceParty_WithDimension).Dgl2.Item(FrmSaleInvoiceParty_WithDimension.Col2Amount, I).Value) & " As Amount "
                    End If
                Next
                If mQry <> "" Then
                    Dim DtTemp As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)
                    Dgl4.RowCount = 1 : Dgl4.Rows.Clear()
                    If DtTemp.Rows.Count > 0 Then
                        For I = 0 To DtTemp.Rows.Count - 1
                            Dgl4.Rows.Add()
                            Dgl4.Item(Col1Head, I).Value = AgL.XNull(DtTemp.Rows(I)("PaymentModeDescription"))
                            Dgl4.Item(Col1Value, I).Value = AgL.XNull(DtTemp.Rows(I)("Amount"))
                        Next
                    End If
                End If
            End If
        End If
    End Sub

    Private Sub FrmSaleInvoiceDirect_BaseEvent_Topctrl_tbEdit(ByRef Passed As Boolean) Handles Me.BaseEvent_Topctrl_tbEdit
        Dim DtTemp As DataTable

        ShowSaleInvoiceParty(mSearchCode, "", TxtNature.Text)
        Dgl1.ReadOnly = False

        If ClsMain.IsEntryLockedWithLockText("SaleInvoice", "DocId", mSearchCode) = True Then
            Passed = False
            Exit Sub
        End If

        mQry = "Select H.* from SaleInvoiceTrnSetting H  With (NoLock)  Where DocID = '" & mSearchCode & "' "
        DtV_TypeTrnSettings = AgL.FillData(mQry, AgL.GCn).Tables(0)

        mQry = "Select IfNull(Max(Sr),0) From SaleInvoiceDimensionDetail  With (NoLock) Where DocID ='" & mSearchCode & "' "
        mDimensionSrl = AgL.Dman_Execute(mQry, AgL.GCn).ExecuteScalar
        mQry = "Select IfNull(Max(Sr),0) From Stock  With (NoLock) Where DocID ='" & mSearchCode & "' "
        DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)
        If AgL.VNull(DtTemp.Rows(0)(0)) > mDimensionSrl Then
            mDimensionSrl = AgL.VNull(DtTemp.Rows(0)(0))
        End If

        mQry = " SELECT * FROM TransactionReferences T 
                    WHERE T.ReferenceDocId = '" & mSearchCode & "' 
                    AND IfNull(T.IsEditingAllowed,0) = 0 "
        Dim DtTransactionReferences As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)
        Dim mTrasactionReferenceMsg As String = ""
        For I As Integer = 0 To DtTransactionReferences.Rows.Count - 1
            mTrasactionReferenceMsg += DtTransactionReferences.Rows(I)("Remark")
        Next
        If mTrasactionReferenceMsg <> "" Then
            MsgBox(mTrasactionReferenceMsg, MsgBoxStyle.Information)
            Passed = False
            Exit Sub
        End If

        mQry = " SELECT Count(*) AS Cnt FROM TransactionReferences T 
                    WHERE T.ReferenceDocId = '" & mSearchCode & "' 
                    AND IfNull(T.IsEditingAllowed,0) = 0 "
        If AgL.Dman_Execute(mQry, AgL.GCn).ExecuteScalar() > 0 Then
            MsgBox("Some Refrential Entries Exist For This Entry.Can't Modify.", MsgBoxStyle.Information)
            Passed = False
            Exit Sub
        End If


        FGetSettingVariableValuesForAddAndEdit()

        If SettingFields_MaximumItemLimit = 1 Then
            Dgl1.AllowUserToAddRows = False
        End If
    End Sub

    Public Shared Narrowing Operator CType(v As FrmSaleInvoiceDirect_Aadhat) As FrmSaleInvoiceDirect_WithDimension
        Throw New NotImplementedException()
    End Operator
    Private Sub ShowSaleInvoiceHeader()
        If Dgl3.Item(Col1Value, rowBtnTransportDetail).Tag IsNot Nothing Then
            CType(Dgl3.Item(Col1Value, rowBtnTransportDetail).Tag, FrmSaleInvoiceTransport).EntryMode = Topctrl1.Mode
            CType(Dgl3.Item(Col1Value, rowBtnTransportDetail).Tag, FrmSaleInvoiceTransport).Ncat = LblV_Type.Tag
            Dgl3.Item(Col1Value, rowBtnTransportDetail).Tag.ShowDialog()
        Else
            Dim FrmObj As FrmSaleInvoiceTransport
            FrmObj = New FrmSaleInvoiceTransport
            FrmObj.Ncat = LblV_Type.Tag
            FrmObj.IniGrid(mSearchCode)
            FrmObj.EntryMode = Topctrl1.Mode

            If AgL.XNull(Dgl3.Item(Col1Value, rowTransporter).Value) <> "" Then
                FrmObj.Dgl1.Item(FrmSaleInvoiceTransport.Col1Value, FrmSaleInvoiceTransport.rowTransporter).Value = Dgl3.Item(Col1Value, rowTransporter).Value
                FrmObj.Dgl1.Item(FrmSaleInvoiceTransport.Col1Value, FrmSaleInvoiceTransport.rowTransporter).Tag = Dgl3.Item(Col1Value, rowTransporter).Tag
            End If
            Dgl3.Item(Col1Value, rowBtnTransportDetail).Tag = FrmObj
            Dgl3.Item(Col1Value, rowBtnTransportDetail).Tag.ShowDialog()
        End If
    End Sub

    Private Sub Dgl1_CellDoubleClick(sender As Object, e As DataGridViewCellEventArgs) Handles Dgl1.CellDoubleClick
        Dim mRow As Integer
        mRow = e.RowIndex
        If Dgl1.Columns(e.ColumnIndex).Name = Col1DocQty Then ShowSaleInvoiceDimensionDetail(mRow)
    End Sub

    Private Sub Dgl1_DoubleClick(sender As Object, e As EventArgs) Handles Dgl1.DoubleClick
        If Topctrl1.Mode = "Browse" Then
            Dgl1.CurrentRow.Selected = True
        End If
    End Sub

    Private Sub Dgl1_KeyPress(sender As Object, e As KeyPressEventArgs) Handles Dgl1.KeyPress
        If Dgl1.CurrentCell Is Nothing Then Exit Sub

        If Dgl1.CurrentCell.ColumnIndex = Dgl1.Columns(Col1DocQty).Index Then
            If AgL.VNull(Dgl1.Item(Col1Unit, Dgl1.CurrentCell.RowIndex).Tag) Then
                If e.KeyChar = Chr(Keys.Space) Then
                    ShowSaleInvoiceDimensionDetail(Dgl1.CurrentCell.RowIndex)
                    e.Handled = True
                End If
            End If
        End If
    End Sub

    Private Function FHPGD_PendingSaleChallanForOneInvoice(mDocID As String) As String
        Dim FRH_Multiple As DMHelpGrid.FrmHelpGrid_Multi
        Dim StrRtn As String = ""
        Dim mLineCond As String = ""
        Dim DtTemp As DataTable

        Dim mDocumentNoPattern As String = ClsMain.FGetSettings(ClsMain.SettingFields.DocumentNoPattern, SettingType.General, "", "", "", "", "", "", "")
        Dim mCompanyPrefix As String = AgL.XNull(AgL.Dman_Execute("Select CompanyPrefix From Company Where Comp_code = '" & AgL.PubCompCode & "'", AgL.GCn).executeScalar())

        mQry = "
                Select 'o' As Tick, SI.DocID || '#' || Cast(SI.TSr as Varchar) || '#' || Cast(SI.Sr as Varchar) as SearchKey, 
                I.Description As Item,Ig.Description As ItemGroup, Ic.Description As ItemCategory, 
                Replace(Replace(Replace(Replace(Replace('" & mDocumentNoPattern & "','<DIVISION>',IfNull(Dm.ShortName,'')),'<SITE>',IfNull(Site.ShortName,'')),'<DOCTYPE>',IfNull(Vt.Short_Name,'')),'<DOCNO>',IfNull(H.ManualRefNo,'')),'<COMPANYPREFIX>', '" & mCompanyPrefix & "') as InvoiceNo, 
                H.V_Date as InvoiceDate, 
                SI.Item, 
                I.Description As Item,
                D1.Description As Dimension1, D2.Description As Dimension2, 
                D3.Description As Dimension3, D4.Description As Dimension4,
                Size.Description As Size, SI.Qty_Iss + IfNull(SR.Qty_Ret,0) Qty_Bal, SI.Unit  
                From
                    (    
                    select S.DocID, S.Tsr, S.Sr,  S.Item, S.Qty_Iss, S.Unit, S.Rate 
                    from Stock S  With (NoLock)
                    LEFT JOIN Item Sku With (NoLock) On S.Item = Sku.Code
                    Left Join Voucher_Type Vt  With (NoLock) on S.V_Type = VT.V_Type
                    where VT.NCat = '" & Ncat.SaleInvoice & "' " & mLineCond & "
                    Union All 
                    select S.DocID, S.Tsr, S.Sr,  S.Item, S.Qty_Iss, S.Unit, S.Rate 
                    from StockProcess S With (NoLock)
                    LEFT JOIN Item Sku With (NoLock) On S.Item = Sku.Code
                    Left Join Voucher_Type Vt With (NoLock) on S.V_Type = VT.V_Type
                    where VT.NCat = '" & Ncat.SaleInvoice & "' " & mLineCond & "
                    ) as SI
                Left Join 
                    (
                    select S.ReferenceDocID, S.ReferenceTsr, S.ReferenceDocIDSr, Sum(S.Qty_Iss) as Qty_Ret
                    from Stock S  With (NoLock)
                    LEFT JOIN Item Sku With (NoLock) On S.Item = Sku.Code
                    Left Join Voucher_Type Vt  With (NoLock) on S.V_Type = VT.V_Type
                    where VT.nCat='" & Ncat.SaleReturn & "'  " & mLineCond & "
                    Group By S.ReferenceDocID, S.ReferenceTsr, S.ReferenceDocIDSr
                    ) As SR On SI.DocID = SR.ReferenceDocID And SI.TSr = SR.ReferenceTSr And SI.Sr = SR.ReferenceDocIDSr
                Left Join SaleInvoice H  With (NoLock) On SI.DocID = H.DocID
                LEFT JOIN Item Sku ON Sku.Code = SI.Item
                LEFT JOIN ItemCategory Ic ON Ic.Code = Sku.ItemCategory 
                LEFT JOIN ItemGroup Ig ON Ig.Code = Sku.ItemGroup
                LEFT JOIN Item I ON I.Code = IsNull(Sku.BaseItem,Sku.Code) And I.V_Type <> '" & ItemV_Type.SKU & "'
                LEFT JOIN Item D1 ON D1.Code = Sku.Dimension1  
                LEFT JOIN Item D2 ON D2.Code = Sku.Dimension2
                LEFT JOIN Item D3 ON D3.Code = Sku.Dimension3
                LEFT JOIN Item D4 ON D4.Code = Sku.Dimension4
                LEFT JOIN Item Size ON Size.Code = Sku.Size 
                Left Join Voucher_Type Vt On H.V_Type = VT.V_Type
                LEFT JOIN Division Dm On H.Div_Code = Dm.Div_Code
                Left Join SiteMast Site On H.Site_Code = Site.Code
                Where  H.DocId = '" & mDocID & "' And SI.Qty_Iss + IfNull(SR.Qty_Ret,0) >0                
                Order By H.V_Date Desc, Replace(Replace(Replace(Replace(Replace('" & mDocumentNoPattern & "','<DIVISION>',IfNull(Dm.ShortName,'')),'<SITE>',IfNull(Site.ShortName,'')),'<DOCTYPE>',IfNull(Vt.Short_Name,'')),'<DOCNO>',IfNull(H.ManualRefNo,'')),'<COMPANYPREFIX>', '" & mCompanyPrefix & "') Desc           
                "
        DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)
        If DtTemp.Rows.Count = 0 Then
            Exit Function
        End If

        FRH_Multiple = New DMHelpGrid.FrmHelpGrid_Multi(New DataView(DtTemp), "", 400, 820, , , False)
        FRH_Multiple.FFormatColumn(0, "Tick", 40, DataGridViewContentAlignment.MiddleCenter, True)
        FRH_Multiple.FFormatColumn(1, , 0, , False)
        FRH_Multiple.FFormatColumn(2, AgL.PubCaptionItem, 250, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Item] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(3, AgL.PubCaptionItemGroup, 100, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[ItemGroup] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(4, AgL.PubCaptionItemCategory, 100, DataGridViewContentAlignment.MiddleLeft)
        FRH_Multiple.FFormatColumn(5, "Invoice No.", 100, DataGridViewContentAlignment.MiddleLeft)
        FRH_Multiple.FFormatColumn(6, "Invoice Date", 100, DataGridViewContentAlignment.MiddleLeft)
        FRH_Multiple.FFormatColumn(7, , 0, DataGridViewContentAlignment.MiddleLeft, False)
        FRH_Multiple.FFormatColumn(8, AgL.PubCaptionDimension1, 100, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension1] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(9, AgL.PubCaptionDimension2, 100, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension2] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(10, AgL.PubCaptionDimension3, 100, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension3] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(11, AgL.PubCaptionDimension4, 100, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension4] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(12, "Size", 100, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Size] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(13, "Bal Qty", 100, DataGridViewContentAlignment.MiddleRight)
        FRH_Multiple.FFormatColumn(14, "Unit", 70, DataGridViewContentAlignment.MiddleLeft)

        FRH_Multiple.StartPosition = FormStartPosition.CenterScreen
        FRH_Multiple.ShowDialog()

        If FRH_Multiple.BytBtnValue = 0 Then
            StrRtn = FRH_Multiple.FFetchData(1, "'", "'", ",", True)
        End If
        FHPGD_PendingSaleChallanForOneInvoice = StrRtn

        FRH_Multiple = Nothing
    End Function


    Private Function FHPGD_PendingSaleChallan(mRow As Integer) As String
        Dim FRH_Multiple As DMHelpGrid.FrmHelpGrid_Multi
        Dim StrRtn As String = ""
        Dim mLineCond As String = ""
        Dim DtTemp As DataTable


        mLineCond = " And S.Subcode = '" & DglMain.Item(Col1Value, rowSaleToParty).Tag & "' "


        If AgL.XNull(Dgl1.Item(Col1ItemCategory, mRow).Tag) <> "" Then
            mLineCond += " And Sku.ItemCategory = '" & Dgl1.Item(Col1ItemCategory, mRow).Tag & "' "
        End If
        If AgL.XNull(Dgl1.Item(Col1ItemGroup, mRow).Tag) <> "" Then
            mLineCond += " And Sku.ItemGroup = '" & Dgl1.Item(Col1ItemGroup, mRow).Tag & "' "
        End If
        If AgL.XNull(Dgl1.Item(Col1Item, mRow).Tag) <> "" Then
            mLineCond += " And IfNull(Sku.BaseItem, SKU.Code) = '" & Dgl1.Item(Col1Item, mRow).Tag & "' "
        End If
        If AgL.XNull(Dgl1.Item(Col1Dimension1, mRow).Tag) <> "" Then
            mLineCond += " And Sku.Dimension1 = '" & Dgl1.Item(Col1Dimension1, mRow).Tag & "' "
        End If
        If AgL.XNull(Dgl1.Item(Col1Dimension2, mRow).Tag) <> "" Then
            mLineCond += " And Sku.Dimension2 = '" & Dgl1.Item(Col1Dimension2, mRow).Tag & "' "
        End If
        If AgL.XNull(Dgl1.Item(Col1Dimension3, mRow).Tag) <> "" Then
            mLineCond += " And Sku.Dimension3 = '" & Dgl1.Item(Col1Dimension3, mRow).Tag & "' "
        End If
        If AgL.XNull(Dgl1.Item(Col1Dimension4, mRow).Tag) <> "" Then
            mLineCond += " And Sku.Dimension4 = '" & Dgl1.Item(Col1Dimension4, mRow).Tag & "' "
        End If
        If AgL.XNull(Dgl1.Item(Col1Size, mRow).Tag) <> "" Then
            mLineCond += " And Sku.Size = '" & Dgl1.Item(Col1Size, mRow).Tag & "' "
        End If

        Dim mDocumentNoPattern As String = ClsMain.FGetSettings(ClsMain.SettingFields.DocumentNoPattern, SettingType.General, "", "", "", "", "", "", "")
        Dim mCompanyPrefix As String = AgL.XNull(AgL.Dman_Execute("Select CompanyPrefix From Company Where Comp_code = '" & AgL.PubCompCode & "'", AgL.GCn).executeScalar())

        mQry = "
                Select 'o' As Tick, SI.DocID || '#' || Cast(SI.TSr as Varchar) || '#' || Cast(SI.Sr as Varchar) as SearchKey, 
                Replace(Replace(Replace(Replace(Replace('" & mDocumentNoPattern & "','<DIVISION>',IfNull(Dm.ShortName,'')),'<SITE>',IfNull(Site.ShortName,'')),'<DOCTYPE>',IfNull(Vt.Short_Name,'')),'<DOCNO>',IfNull(H.ManualRefNo,'')),'<COMPANYPREFIX>', '" & mCompanyPrefix & "') as InvoiceNo, 
                H.V_Date as InvoiceDate, 
                SI.Item, Ic.Description As ItemCategory, Ig.Description As ItemGroup, 
                I.Description As Item,
                D1.Description As Dimension1, D2.Description As Dimension2, 
                D3.Description As Dimension3, D4.Description As Dimension4,
                Size.Description As Size, SI.Qty_Iss + IfNull(SR.Qty_Ret,0) Qty_Bal, SI.Unit  
                From
                    (    
                    select S.DocID, S.Tsr, S.Sr,  S.Item, S.Qty_Iss, S.Unit, S.Rate 
                    from Stock S  With (NoLock)
                    LEFT JOIN Item Sku With (NoLock) On S.Item = Sku.Code
                    Left Join Voucher_Type Vt  With (NoLock) on S.V_Type = VT.V_Type
                    where VT.NCat = '" & Ncat.SaleInvoice & "' " & mLineCond & "
                    Union All 
                    select S.DocID, S.Tsr, S.Sr,  S.Item, S.Qty_Iss, S.Unit, S.Rate 
                    from StockProcess S With (NoLock)
                    LEFT JOIN Item Sku With (NoLock) On S.Item = Sku.Code
                    Left Join Voucher_Type Vt With (NoLock) on S.V_Type = VT.V_Type
                    where VT.NCat = '" & Ncat.SaleInvoice & "' " & mLineCond & "
                    ) as SI
                Left Join 
                    (
                    select S.ReferenceDocID, S.ReferenceTsr, S.ReferenceDocIDSr, Sum(S.Qty_Iss) as Qty_Ret
                    from Stock S  With (NoLock)
                    LEFT JOIN Item Sku With (NoLock) On S.Item = Sku.Code
                    Left Join Voucher_Type Vt  With (NoLock) on S.V_Type = VT.V_Type
                    where VT.nCat='" & Ncat.SaleReturn & "'  " & mLineCond & "
                    Group By S.ReferenceDocID, S.ReferenceTsr, S.ReferenceDocIDSr
                    ) As SR On SI.DocID = SR.ReferenceDocID And SI.TSr = SR.ReferenceTSr And SI.Sr = SR.ReferenceDocIDSr
                Left Join SaleInvoice H  With (NoLock) On SI.DocID = H.DocID
                LEFT JOIN Item Sku ON Sku.Code = SI.Item
                LEFT JOIN ItemCategory Ic ON Ic.Code = Sku.ItemCategory 
                LEFT JOIN ItemGroup Ig ON Ig.Code = Sku.ItemGroup
                LEFT JOIN Item I ON I.Code = IsNull(Sku.BaseItem,Sku.Code) And I.V_Type <> '" & ItemV_Type.SKU & "'
                LEFT JOIN Item D1 ON D1.Code = Sku.Dimension1  
                LEFT JOIN Item D2 ON D2.Code = Sku.Dimension2
                LEFT JOIN Item D3 ON D3.Code = Sku.Dimension3
                LEFT JOIN Item D4 ON D4.Code = Sku.Dimension4
                LEFT JOIN Item Size ON Size.Code = Sku.Size 
                Left Join Voucher_Type Vt On H.V_Type = VT.V_Type
                LEFT JOIN Division Dm On H.Div_Code = Dm.Div_Code
                Left Join SiteMast Site On H.Site_Code = Site.Code
                Where  H.SaleToParty = '" & DglMain.Item(Col1Value, rowSaleToParty).Tag & "' And SI.Qty_Iss + IfNull(SR.Qty_Ret,0) >0
                And H.V_Date <= " & AgL.Chk_Date(DglMain.Item(Col1Value, rowV_Date).Value) & "     
                Order By H.V_Date Desc, Replace(Replace(Replace(Replace(Replace('" & mDocumentNoPattern & "','<DIVISION>',IfNull(Dm.ShortName,'')),'<SITE>',IfNull(Site.ShortName,'')),'<DOCTYPE>',IfNull(Vt.Short_Name,'')),'<DOCNO>',IfNull(H.ManualRefNo,'')),'<COMPANYPREFIX>', '" & mCompanyPrefix & "') Desc           
                "
        DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)
        If DtTemp.Rows.Count = 0 Then
            Exit Function
        End If

        FRH_Multiple = New DMHelpGrid.FrmHelpGrid_Multi(New DataView(DtTemp), "", 400, 820, , , False)
        FRH_Multiple.FFormatColumn(0, "Tick", 40, DataGridViewContentAlignment.MiddleCenter, True)
        FRH_Multiple.FFormatColumn(1, , 0, , False)
        FRH_Multiple.FFormatColumn(2, "Invoice No.", 100, DataGridViewContentAlignment.MiddleLeft)
        FRH_Multiple.FFormatColumn(3, "Invoice Date", 100, DataGridViewContentAlignment.MiddleLeft)
        FRH_Multiple.FFormatColumn(4, , 0, DataGridViewContentAlignment.MiddleLeft, False)
        FRH_Multiple.FFormatColumn(5, AgL.PubCaptionItemCategory, 100, DataGridViewContentAlignment.MiddleLeft)
        FRH_Multiple.FFormatColumn(6, AgL.PubCaptionItemGroup, 100, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[ItemGroup] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(7, AgL.PubCaptionItem, 250, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Item] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(8, AgL.PubCaptionDimension1, 100, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension1] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(9, AgL.PubCaptionDimension2, 100, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension2] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(10, AgL.PubCaptionDimension3, 100, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension3] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(11, AgL.PubCaptionDimension4, 100, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension4] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(12, "Size", 100, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Size] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(13, "Bal Qty", 100, DataGridViewContentAlignment.MiddleRight)
        FRH_Multiple.FFormatColumn(14, "Unit", 70, DataGridViewContentAlignment.MiddleLeft)

        FRH_Multiple.StartPosition = FormStartPosition.CenterScreen
        FRH_Multiple.ShowDialog()

        If FRH_Multiple.BytBtnValue = 0 Then
            StrRtn = FRH_Multiple.FFetchData(1, "'", "'", ",", True)
        End If
        FHPGD_PendingSaleChallan = StrRtn

        FRH_Multiple = Nothing
    End Function
    Private Sub FillGridForSaleReturn(strInvoiceLines As String, IsFilledFromLine As Boolean)
        Dim DrTemp As DataRow() = Nothing
        Dim DtTemp As DataTable = Nothing
        Dim DtItem As DataTable
        Dim mRow As Integer
        Dim I As Integer
        Try
            Dim mDocumentNoPattern As String = ClsMain.FGetSettings(ClsMain.SettingFields.DocumentNoPattern, SettingType.General, "", "", "", "", "", "", "")
            Dim mCompanyPrefix As String = AgL.XNull(AgL.Dman_Execute("Select CompanyPrefix From Company Where Comp_code = '" & AgL.PubCompCode & "'", AgL.GCn).executeScalar())



            'H.Div_Code || H.Site_Code || '-' || H.V_Type || '-' || H.ManualRefNo as InvoiceNo, 
            mQry = "    Select H.DocID,                    
                Replace(Replace(Replace(Replace(Replace('" & mDocumentNoPattern & "','<DIVISION>',IfNull(Dm.ShortName,'')),'<SITE>',IfNull(Site.ShortName,'')),'<DOCTYPE>',IfNull(Vt.Short_Name,'')),'<DOCNO>',IfNull(H.ManualRefNo,'')),'<COMPANYPREFIX>', '" & mCompanyPrefix & "') as InvoiceNo,
                H.V_Date as InvoiceDate, 
                Sku.Description As SkuDescription, It.Name As ItemType, Ic.Description As ItemCategory, 
                Ig.Description As ItemGroup, I.Description As Item, I.ManualCode As ItemManualCode,
                D1.Description As Dimension1, D2.Description As Dimension2, 
                D3.Description As Dimension3, D4.Description As Dimension4,
                Size.Description As Size, Bc.Code As Barcode, Bc.Description As BarcodeDesc,
                SI.Qty_Iss + IfNull(SR.Qty_Ret,0) Qty_Bal, SI.Unit, L.DiscountPer, L.AdditionalDiscountPer, L.Rate,
                Sku.Code As SkuCode, It.Code As ItemTypeCode, Ic.Code As ItemCategoryCode, Ig.Code As ItemGroupCode, I.Code As ItemCode,
                D1.Code As Dimension1Code, D2.Code As Dimension2Code, 
                D3.Code As Dimension3Code, D4.Code As Dimension4Code,
                Size.Code As SizeCode, 
                Case When IfNull(U.ShowDimensionDetailInSales,0) = 1 Or IfNull(Ic.ShowDimensionDetailInSales,0) = 1 Then 1
                        Else 0 End As ShowDimensionDetailInSales, 
                U.DecimalPlaces as QtyDecimalPlaces, IG.Default_DiscountPerSale, L.SalesTaxGroupItem, SI.DocID as StockDocID, SI.TSr as StockTSr, SI.Sr as StockSr ,
                L.DocId As SaleInvoice, L.Sr As SaleInvoiceSr
                From
                    (    
                    select S.DocID, S.Tsr, S.Sr,  S.Item, S.Qty_Iss, S.Unit, S.Rate, S.Barcode 
                    from Stock S  With (NoLock)
                    Left Join Voucher_Type Vt  With (NoLock) on S.V_Type = VT.V_Type
                    where VT.NCat = '" & Ncat.SaleInvoice & "'
                    Union All 
                    select S.DocID, S.Tsr, S.Sr,  S.Item, S.Qty_Iss, S.Unit, S.Rate, S.Barcode 
                    from StockProcess S  With (NoLock)
                    Left Join Voucher_Type Vt  With (NoLock) on S.V_Type = VT.V_Type
                    where VT.NCat = '" & Ncat.SaleInvoice & "'
                    ) as SI
                Left Join 
                    (
                    select S.ReferenceDocID, S.ReferenceTsr, S.ReferenceDocIDSr, Sum(S.Qty_Iss) as Qty_Ret
                    from Stock S  With (NoLock)
                    Left Join Voucher_Type Vt  With (NoLock) on S.V_Type = VT.V_Type
                    where VT.nCat = '" & Ncat.SaleReturn & "'
                    Group By S.ReferenceDocID, S.ReferenceTsr, S.ReferenceDocIDSr
                    ) As SR On SI.DocID = SR.ReferenceDocID And SI.TSr = SR.ReferenceTSr And SI.Sr = SR.ReferenceDocIDSr
                Left Join SaleInvoice H  With (NoLock) On SI.DocID = H.DocID
                LEFT JOIN Item Sku ON Sku.Code = SI.Item
                LEFT JOIN Item I ON I.Code = IsNull(Sku.BaseItem,Sku.Code) And I.V_Type <> '" & ItemV_Type.SKU & "'
                LEFT JOIN ItemType It On Sku.ItemType = It.Code
                LEFT JOIN Item IC On Sku.ItemCategory = IC.Code
                LEFT JOIN Item IG On Sku.ItemGroup = IG.Code
                LEFT JOIN Item D1 ON D1.Code = Sku.Dimension1  
                LEFT JOIN Item D2 ON D2.Code = Sku.Dimension2
                LEFT JOIN Item D3 ON D3.Code = Sku.Dimension3
                LEFT JOIN Item D4 ON D4.Code = Sku.Dimension4
                LEFT JOIN Item Size ON Size.Code = Sku.Size 
                LEFT JOIN Barcode Bc On SI.Barcode = Bc.Code
                Left Join Unit U  With (NoLock) On I.Unit = U.Code 
                Left Join SaleInvoiceDetail L  With (NoLock) On L.DocID = SI.DocID And L.Sr = SI.TSr
                Left Join Voucher_Type Vt On H.V_Type = VT.V_Type
                LEFT JOIN Division Dm On H.Div_Code = Dm.Div_Code
                Left Join SiteMast Site On H.Site_Code = Site.Code
                Where SI.DocID || '#' || Cast(SI.TSr as Varchar) || '#' || Cast(SI.Sr as Varchar) in (" & strInvoiceLines & ")
                "


            DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)
            If DtTemp.Rows.Count > 0 Then
                If Dgl1.CurrentCell Is Nothing Then
                    Dgl1.CurrentCell = Dgl1.FirstDisplayedCell
                End If
                'Dgl1.Rows(Dgl1.CurrentCell.RowIndex).Visible = False
                For I = 0 To DtTemp.Rows.Count - 1
                    If I = 0 Then
                        mRow = Dgl1.CurrentCell.RowIndex
                        Dgl1.Item(ColSNo, mRow).Value = Dgl1.CurrentCell.RowIndex + 1
                    Else
                        mRow = Dgl1.Rows.Add()
                        Dgl1.Item(ColSNo, mRow).Value = Dgl1.Rows.Count - 1
                    End If

                    Dgl1.Item(Col1SKU, mRow).Tag = AgL.XNull(DtTemp.Rows(I)("SkuCode"))
                    Dgl1.Item(Col1SKU, mRow).Value = AgL.XNull(DtTemp.Rows(I)("SkuDescription"))
                    Dgl1.Item(Col1Barcode, mRow).Tag = AgL.XNull(DtTemp.Rows(I)("Barcode"))
                    Dgl1.Item(Col1Barcode, mRow).Value = AgL.XNull(DtTemp.Rows(I)("BarcodeDesc"))
                    Dgl1.Item(Col1ItemType, mRow).Tag = AgL.XNull(DtTemp.Rows(I)("ItemTypeCode"))
                    Dgl1.Item(Col1ItemType, mRow).Value = AgL.XNull(DtTemp.Rows(I)("ItemType"))
                    Dgl1.Item(Col1ItemCategory, mRow).Tag = AgL.XNull(DtTemp.Rows(I)("ItemCategoryCode"))
                    Dgl1.Item(Col1ItemCategory, mRow).Value = AgL.XNull(DtTemp.Rows(I)("ItemCategory"))
                    Dgl1.Item(Col1ItemGroup, mRow).Tag = AgL.XNull(DtTemp.Rows(I)("ItemGroupCode"))
                    Dgl1.Item(Col1ItemGroup, mRow).Value = AgL.XNull(DtTemp.Rows(I)("ItemGroup"))
                    Dgl1.Item(Col1ItemCode, mRow).Tag = AgL.XNull(DtTemp.Rows(I)("ItemCode"))
                    Dgl1.Item(Col1ItemCode, mRow).Value = AgL.XNull(DtTemp.Rows(I)("ItemManualCode"))
                    Dgl1.Item(Col1Item, mRow).Tag = AgL.XNull(DtTemp.Rows(I)("ItemCode"))
                    Dgl1.Item(Col1Item, mRow).Value = AgL.XNull(DtTemp.Rows(I)("Item"))
                    Dgl1.Item(Col1Dimension1, mRow).Tag = AgL.XNull(DtTemp.Rows(I)("Dimension1Code"))
                    Dgl1.Item(Col1Dimension1, mRow).Value = AgL.XNull(DtTemp.Rows(I)("Dimension1"))
                    Dgl1.Item(Col1Dimension2, mRow).Tag = AgL.XNull(DtTemp.Rows(I)("Dimension2Code"))
                    Dgl1.Item(Col1Dimension2, mRow).Value = AgL.XNull(DtTemp.Rows(I)("Dimension2"))
                    Dgl1.Item(Col1Dimension3, mRow).Tag = AgL.XNull(DtTemp.Rows(I)("Dimension3Code"))
                    Dgl1.Item(Col1Dimension3, mRow).Value = AgL.XNull(DtTemp.Rows(I)("Dimension3"))
                    Dgl1.Item(Col1Dimension4, mRow).Tag = AgL.XNull(DtTemp.Rows(I)("Dimension4Code"))
                    Dgl1.Item(Col1Dimension4, mRow).Value = AgL.XNull(DtTemp.Rows(I)("Dimension4"))
                    Dgl1.Item(Col1Size, mRow).Tag = AgL.XNull(DtTemp.Rows(I)("SizeCode"))
                    Dgl1.Item(Col1Size, mRow).Value = AgL.XNull(DtTemp.Rows(I)("Size"))

                    Dgl1.Item(Col1Unit, mRow).Value = AgL.XNull(DtTemp.Rows(I)("Unit"))
                    'Dgl1.Item(Col1Unit, mRow).Tag = AgL.XNull(DtTemp.Rows(I)("ShowDimensionDetailInSales"))
                    Dgl1.Item(Col1Unit, mRow).Tag = 0
                    Dgl1.Item(Col1SalesTaxGroup, mRow).Tag = AgL.XNull(DtTemp.Rows(I)("SalesTaxGroupItem"))
                    Dgl1.Item(Col1SalesTaxGroup, mRow).Value = AgL.XNull(DtTemp.Rows(I)("SalesTaxGroupItem"))
                    Dgl1.Item(Col1QtyDecimalPlaces, mRow).Value = AgL.VNull(DtTemp.Rows(I)("QtyDecimalPlaces"))
                    Dgl1.Item(Col1DefaultDiscountPer, mRow).Value = AgL.VNull(DtTemp.Rows(I)("Default_DiscountPerSale"))
                    Dgl1.Item(Col1DiscountPer, mRow).Value = AgL.VNull(DtTemp.Rows(I)("DiscountPer"))
                    Dgl1.Item(Col1AdditionalDiscountPer, mRow).Value = AgL.VNull(DtTemp.Rows(I)("AdditionalDiscountPer"))
                    Dgl1.Item(Col1SaleInvoice, mRow).Value = AgL.XNull(DtTemp.Rows(I)("DocID"))
                    If AgL.VNull(DtV_TypeSettings.Rows(0)("PickSaleRateFromMaster")) = True Then
                        If Dgl2(Col1Value, rowRateType).Value <> "" Then
                            mQry = "select Rate from RateListDetail  With (NoLock) where Item ='" & Dgl1.Item(Col1Item, mRow).Tag & "' and RateType='" & Dgl2(Col1Value, rowRateType).Tag & "'"
                            DtItem = AgL.FillData(mQry, AgL.GCn).Tables(0)
                            If DtItem.Rows.Count > 0 Then
                                Dgl1.Item(Col1Rate, mRow).Value = AgL.VNull(DtItem.Rows(0)("Rate"))
                            End If
                        Else
                            mQry = "select Rate from RateListDetail  With (NoLock) where Item ='" & Dgl1.Item(Col1Item, mRow).Tag & "' and RateType Is Null"
                            DtItem = AgL.FillData(mQry, AgL.GCn).Tables(0)
                            If DtItem.Rows.Count > 0 Then
                                Dgl1.Item(Col1Rate, mRow).Value = AgL.VNull(DtItem.Rows(0)("Rate"))
                            End If
                        End If
                        FSetSalesTaxGroupItemBasedOnRate(mRow)
                    Else
                        Dgl1.Item(Col1Rate, mRow).Value = AgL.VNull(DtTemp.Rows(I)("Rate"))
                    End If

                    If FDivisionNameForCustomization(4) = "X DEVI" Then
                        Dgl1.Item(Col1Rate, mRow).Value = FGetLastSaleRate(mRow)
                    End If


                    If FDivisionNameForCustomization(13) = "JAIN BROTHERS" Or FDivisionNameForCustomization(11) = "BOOK SHOPEE" Or
                        (FDivisionNameForCustomization(5) = "LIBAS" And LblV_Type.Tag = Ncat.SaleReturn) Then
                        Dgl1.Item(Col1Qty, mRow).Value = AgL.VNull(DtTemp.Rows(I)("Qty_Bal"))
                        Dgl1.Item(Col1DocQty, mRow).Value = AgL.VNull(DtTemp.Rows(I)("Qty_Bal"))
                    Else
                        Dgl1.Item(Col1Qty, mRow).Value = 0 ' AgL.VNull(DtTemp.Rows(I)("Qty_Bal"))
                        Dgl1.Item(Col1DocQty, mRow).Value = 0 ' AgL.VNull(DtTemp.Rows(I)("Qty_Bal"))
                    End If
                    Dgl1.Item(Col1ReferenceNo, mRow).Value = AgL.XNull(DtTemp.Rows(I)("InvoiceNo"))
                    Dgl1.Item(Col1ReferenceDate, mRow).Value = ClsMain.FormatDate(AgL.XNull(DtTemp.Rows(I)("InvoiceDate")))
                    Dgl1.Item(Col1ReferenceDocId, mRow).Value = AgL.XNull(DtTemp.Rows(I)("StockDocID"))
                    Dgl1.Item(Col1ReferenceDocIdTSr, mRow).Value = AgL.XNull(DtTemp.Rows(I)("StockTSr"))
                    Dgl1.Item(Col1ReferenceDocIdSr, mRow).Value = AgL.XNull(DtTemp.Rows(I)("StockSr"))

                    Dgl1.Item(Col1SaleInvoice, mRow).Tag = AgL.XNull(DtTemp.Rows(I)("SaleInvoice"))
                    Dgl1.Item(Col1SaleInvoiceSr, mRow).Value = AgL.XNull(DtTemp.Rows(I)("SaleInvoiceSr"))
                Next

                FShowTransactionHistory(AgL.XNull(DtTemp.Rows(0)("SkuCode")), mRow)
                Calculation()
            End If
        Catch ex As Exception
            MsgBox(ex.Message & " On Validating_Item Function ")
        End Try
    End Sub

    Private Sub TxtBarcode_Validating(sender As Object, e As CancelEventArgs) Handles TxtBarcode.Validating
        Dim DtBarcode As DataTable
        Dim DtBarcodeSiteDetail As DataTable

        If TxtBarcode.Text = "" Then Exit Sub
        If Validate_Barcode(sender.text) = False Then TxtBarcode.Text = "" : e.Cancel = True : Exit Sub

        mQry = "Select I.V_Type As ItemV_Type, B.* 
                From Barcode B With (NoLock) 
                LEFT JOIN Item I With (NoLock) On B.Item = I.Code
                Where B.Description = '" & TxtBarcode.Text & "'"
        DtBarcode = AgL.FillData(mQry, AgL.GCn).Tables(0)
        If DtBarcode.Rows.Count = 0 Then
            MsgBox("Invalid Barcode")
            TxtBarcode.Text = ""
            e.Cancel = True
            Exit Sub
        Else
            ''''''This section is commented because some parties want to purchase
            ''''''goods in wholesale firm and want to sale in Retail firm.


            If CType(AgL.VNull(FGetSettings(SettingFields.BarcodeDivisionWiseYn, SettingType.General)), Boolean) = True Then
                If AgL.XNull(DtBarcode.Rows(0)("Div_Code")) <> TxtDivision.Tag Then
                    MsgBox("Barcode does not belong to current division. Can not continue.")
                    TxtBarcode.Text = ""
                    e.Cancel = True
                    Exit Sub
                End If
            End If

            If CType(AgL.VNull(FGetSettings(SettingFields.BarcodeDivisionWiseYn, SettingType.General)), Boolean) = True Then
                mQry = "Select * from BarcodeSiteDetail  With (NoLock) Where Code = '" & DtBarcode.Rows(0)("Code") & "' And Div_Code='" & TxtDivision.Tag & "' And Site_Code = '" & DglMain.Item(Col1Value, rowSite_Code).Tag & "' "
            Else
                mQry = "Select * from BarcodeSiteDetail  With (NoLock) Where Code = '" & DtBarcode.Rows(0)("Code") & "' And Site_Code = '" & DglMain.Item(Col1Value, rowSite_Code).Tag & "' "
            End If
            DtBarcodeSiteDetail = AgL.FillData(mQry, AgL.GCn).Tables(0)

            If DtBarcodeSiteDetail.Rows.Count = 0 Then
                MsgBox("No record found for barcode for current site. Can not continue.")
                TxtBarcode.Text = ""
                e.Cancel = True
                Exit Sub
            End If


            Dim mRow As Integer
            mRow = Dgl1.Rows.Add()
            Dgl1.Item(ColSNo, mRow).Value = Dgl1.Rows.Count - 1
            Dgl1.Item(Col1Barcode, mRow).Tag = AgL.XNull(DtBarcode.Rows(0)("Code"))
            Dgl1.Item(Col1Barcode, mRow).Value = AgL.XNull(DtBarcode.Rows(0)("Description"))

            If AgL.XNull(DtBarcode.Rows(0)("ItemV_Type")) = ItemV_Type.SKU Then
                Validating_SkuCode(DtBarcode.Rows(0)("Item"), Dgl1.Columns(Col1Item).Index, mRow)
                Validating_ItemCode(Dgl1.Item(Col1Item, mRow).Tag, Dgl1.Columns(Col1Item).Index, mRow)
                Dgl1.Item(Col1Item, mRow).Value = AgL.XNull(AgL.Dman_Execute("Select Specification From Item Where Code = '" & Dgl1.Item(Col1Item, mRow).Tag & "'", AgL.GCn).ExecuteScalar())
            Else
                Validating_ItemCode(DtBarcode.Rows(0)("Item"), Dgl1.Columns(Col1Item).Index, mRow)
            End If
            'If Dgl1.Item(Col1Item, mRow).Value = "" Then
            '    Dgl1.Rows(mRow).Visible = False
            'Else
            Dgl1.Item(Col1Qty, mRow).Value = 1 'AgL.VNull(DtBarcode.Rows(0)("Qty"))
            Dgl1.Item(Col1DocQty, mRow).Value = 1 'AgL.VNull(DtBarcode.Rows(0)("Qty"))
            'End If
            Calculation()
            Calculation()
            FGeterateSkuName(mRow)
            TxtBarcode.Text = ""
            TxtBarcode.Focus()
        End If
        Calculation(True)
    End Sub

    Public Sub FImportFromExcel_Old()
        Dim mTrans As String = ""
        Dim ErrorLog As String = ""
        Dim DtSaleInvoice As DataTable
        Dim DtSaleInvoiceDetail As DataTable
        Dim DtSaleInvoiceDimensionDetail As DataTable
        Dim DtMain As DataTable = Nothing

        Dim I As Integer
        Dim J As Integer
        Dim K As Integer
        Dim M As Integer
        Dim N As Integer
        'Dim FW As System.IO.StreamWriter = New System.IO.StreamWriter("C:\ImportLog.Txt", False, System.Text.Encoding.Default)
        Dim StrErrLog As String = ""

        mQry = "Select '' as Srl, 'V_TYPE' as [Field Name], 'Text' as [Data Type], 5 as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'V_NO' as [Field Name], 'Number' as [Data Type], Null as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'V_Date' as [Field Name], 'Date' as [Data Type], Null as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Invoice No' as [Field Name], 'Text' as [Data Type], 20 as [Length], 'Mandatory, Should be unique.' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Sale To Party' as [Field Name], 'Text' as [Data Type], 255 as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Sale To Party Address' as [Field Name], 'Text' as [Data Type], 255 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Sale To Party City' as [Field Name], 'Text' as [Data Type], 50 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Sale To Party Pincode' as [Field Name], 'Text' as [Data Type], 6 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Sale To Party Sales Tax No' as [Field Name], 'Text' as [Data Type], 20 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Bill To Party' as [Field Name], 'Text' as [Data Type], 255 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Agent' as [Field Name], 'Text' as [Data Type], 255 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Rate Type' as [Field Name], 'Text' as [Data Type], 50 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Sales Tax Group Party' as [Field Name], 'Text' as [Data Type], 20 as [Length], 'Mandatory, Registered / Unregistered / Composition' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Place Of Supply' as [Field Name], 'Text' as [Data Type], 20 as [Length], 'Mandatory, Outside State / Within State' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Sale To Party Doc No' as [Field Name], 'Text' as [Data Type], 50 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Sale To Party Doc Date' as [Field Name], 'Date' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Remark' as [Field Name], 'Text' as [Data Type], 255 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Terms And Conditions' as [Field Name], 'Text' as [Data Type], 255 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Credit Limit' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Credit Days' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        DtSaleInvoice = AgL.FillData(mQry, AgL.GCn).Tables(0)


        mQry = "Select '' as Srl, 'V_TYPE' as [Field Name], 'Text' as [Data Type], 5 as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Invoice No' as [Field Name], 'Text' as [Data Type], 20 as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Item Name' as [Field Name], 'Text' as [Data Type], 255 as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Specification' as [Field Name], 'Text' as [Data Type], 255 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Sales Tax Group Item' as [Field Name], 'Text' as [Data Type], 20 as [Length], 'Mandatory, GST 0% / GST 5% / GST 12% / GST 18% / GST 28%' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Qty' as [Field Name], 'Number' as [Data Type], Null as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Unit' as [Field Name], 'Text' as [Data Type], 50 as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Pcs' as [Field Name], 'Number' as [Data Type], 50 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Unit Multiplier' as [Field Name], 'Text' as [Data Type], 10 as [Length], 'Conversion from unit to deal unit.' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Deal Unit' as [Field Name], 'Text' as [Data Type], 10 as [Length], 'If billing unit is different from unit then that billing unit will be save in deal unit other wise unit will be save here.' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Deal Qty' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Rate' as [Field Name], 'Number' as [Data Type], Null as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Discount Per' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Discount Amount' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Additional Discount Per' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Additional Discount Amount' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Amount' as [Field Name], 'Number' as [Data Type], Null as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Remark' as [Field Name], 'Text' as [Data Type], 255 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Bale No' as [Field Name], 'Text' as [Data Type], 50 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Lot No' as [Field Name], 'Text' as [Data Type], 50 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Gross_Amount' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Taxable_Amount' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Tax1_Per' as [Field Name], 'Number' as [Data Type], Null as [Length], 'IGST Per' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Tax1' as [Field Name], 'Number' as [Data Type], Null as [Length], 'IGST Amount' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Tax2_Per' as [Field Name], 'Number' as [Data Type], Null as [Length], 'CGST Per' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Tax2' as [Field Name], 'Number' as [Data Type], Null as [Length], 'CGST Amount' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Tax3_Per' as [Field Name], 'Number' as [Data Type], Null as [Length], 'SGST Per' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Tax3' as [Field Name], 'Number' as [Data Type], Null as [Length], 'SGST Amount' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Tax4_Per' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Tax4' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Tax5_Per' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Tax5' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'SubTotal1' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Deduction_Per' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Deduction' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Other_Charge_Per' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Other_Charge' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Round_Off' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Net_Amount' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        DtSaleInvoiceDetail = AgL.FillData(mQry, AgL.GCn).Tables(0)


        mQry = "Select '' as Srl, 'V_TYPE' as [Field Name], 'Text' as [Data Type], 5 as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Invoice No' as [Field Name], 'Text' as [Data Type], 20 as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select '' as Srl, 'TSr' as [Field Name], 'Number' as [Data Type], Null as [Length], 'Sr Of Second Table' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Sr' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Specification' as [Field Name], 'Text' as [Data Type], 50 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Pcs' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Qty' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'TotalQty' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        DtSaleInvoiceDimensionDetail = AgL.FillData(mQry, AgL.GCn).Tables(0)



        Dim ObjFrmImport As New FrmImportSaleFromExcel
        ObjFrmImport.Text = "Sale Invoice Import From Excel"
        ObjFrmImport.Dgl1.DataSource = DtSaleInvoice
        ObjFrmImport.Dgl2.DataSource = DtSaleInvoiceDetail
        ObjFrmImport.Dgl3.DataSource = DtSaleInvoiceDimensionDetail
        ObjFrmImport.StartPosition = FormStartPosition.CenterScreen
        ObjFrmImport.ShowDialog()

        If Not AgL.StrCmp(ObjFrmImport.UserAction, "OK") Then Exit Sub

        DtSaleInvoice = ObjFrmImport.P_DsExcelData_SaleInvoice.Tables(0)
        DtSaleInvoiceDetail = ObjFrmImport.P_DsExcelData_SaleInvoiceDetail.Tables(0)
        DtSaleInvoiceDimensionDetail = ObjFrmImport.P_DsExcelData_SaleInvoiceDimensionDetail.Tables(0)


        Dim DtV_Type = DtSaleInvoice.DefaultView.ToTable(True, "V_Type")
        For I = 0 To DtV_Type.Rows.Count - 1
            If AgL.XNull(DtV_Type.Rows(I)("V_Type")) <> "" Then
                If AgL.Dman_Execute("SELECT Count(*) From Voucher_TYpe where V_Type = '" & AgL.XNull(DtV_Type.Rows(I)("V_Type")) & "'", AgL.GCn).ExecuteScalar = 0 Then
                    If ErrorLog.Contains("These Voucher Types Are Not Present In Master") = False Then
                        ErrorLog += vbCrLf & "These Voucher Types Not Present In Master" & vbCrLf
                        ErrorLog += AgL.XNull(DtV_Type.Rows(I)("V_Type")) & ", "
                    Else
                        ErrorLog += AgL.XNull(DtV_Type.Rows(I)("V_Type")) & ", "
                    End If
                End If
            End If
        Next

        Dim DtSaleToParty = DtSaleInvoice.DefaultView.ToTable(True, "Sale To Party")
        For I = 0 To DtSaleToParty.Rows.Count - 1
            If AgL.XNull(DtSaleToParty.Rows(I)("Sale To Party")) <> "" Then
                If AgL.Dman_Execute("SELECT Count(*) From SubGroup where Name = '" & AgL.XNull(DtSaleToParty.Rows(I)("Sale To Party")) & "'", AgL.GCn).ExecuteScalar = 0 Then
                    If ErrorLog.Contains("These Parties Are Not Present In Master") = False Then
                        ErrorLog += vbCrLf & "These Parties Are Not Present In Master" & vbCrLf
                        ErrorLog += AgL.XNull(DtSaleToParty.Rows(I)("Sale To Party")) & ", "
                    Else
                        ErrorLog += AgL.XNull(DtSaleToParty.Rows(I)("Sale To Party")) & ", "
                    End If
                End If
            End If
        Next

        Dim DtBillToParty = DtSaleInvoice.DefaultView.ToTable(True, "Bill To Party")
        For I = 0 To DtBillToParty.Rows.Count - 1
            If AgL.XNull(DtBillToParty.Rows(I)("Bill To Party")) <> "" Then
                If AgL.Dman_Execute("SELECT Count(*) From SubGroup where Name = '" & AgL.XNull(DtBillToParty.Rows(I)("Bill To Party")) & "'", AgL.GCn).ExecuteScalar = 0 Then
                    If ErrorLog.Contains("These Parties Are Not Present In Master") = False Then
                        ErrorLog += vbCrLf & "These Parties Are Not Present In Master" & vbCrLf
                        ErrorLog += AgL.XNull(DtBillToParty.Rows(I)("Bill To Party")) & ", "
                    Else
                        ErrorLog += AgL.XNull(DtBillToParty.Rows(I)("Bill To Party")) & ", "
                    End If
                End If
            End If
        Next

        Dim DtAgent = DtSaleInvoice.DefaultView.ToTable(True, "Agent")
        For I = 0 To DtAgent.Rows.Count - 1
            If AgL.XNull(DtAgent.Rows(I)("Agent")) <> "" Then
                If AgL.Dman_Execute("SELECT Count(*) From SubGroup where Name = '" & AgL.XNull(DtAgent.Rows(I)("Agent")) & "'", AgL.GCn).ExecuteScalar = 0 Then
                    If ErrorLog.Contains("These Agents Are Not Present In Master") = False Then
                        ErrorLog += vbCrLf & "These Agents Are Not Present In Master" & vbCrLf
                        ErrorLog += AgL.XNull(DtAgent.Rows(I)("Agent")) & ", "
                    Else
                        ErrorLog += AgL.XNull(DtAgent.Rows(I)("Agent")) & ", "
                    End If
                End If
            End If
        Next

        Dim DtRateType = DtSaleInvoice.DefaultView.ToTable(True, "Rate Type")
        For I = 0 To DtRateType.Rows.Count - 1
            If AgL.XNull(DtRateType.Rows(I)("Rate Type")) <> "" Then
                If AgL.Dman_Execute("SELECT Count(*) From RateTYpe where Description = '" & AgL.XNull(DtRateType.Rows(I)("Rate Type")) & "'", AgL.GCn).ExecuteScalar = 0 Then
                    If ErrorLog.Contains("These Rate Types Are Not Present In Master") = False Then
                        ErrorLog += vbCrLf & "These Rate Types Are Not Present In Master" & vbCrLf
                        ErrorLog += AgL.XNull(DtRateType.Rows(I)("Rate Type")) & ", "
                    Else
                        ErrorLog += AgL.XNull(DtRateType.Rows(I)("Rate Type")) & ", "
                    End If
                End If
            End If
        Next

        Dim DtSalesTaxGroupParty = DtSaleInvoice.DefaultView.ToTable(True, "Sales Tax Group Party")
        For I = 0 To DtSalesTaxGroupParty.Rows.Count - 1
            If AgL.XNull(DtSalesTaxGroupParty.Rows(I)("Sales Tax Group Party")) <> "" Then
                If AgL.Dman_Execute("SELECT Count(*) From PostingGroupSalesTaxParty where Description = '" & AgL.XNull(DtSalesTaxGroupParty.Rows(I)("Sales Tax Group Party")) & "'", AgL.GCn).ExecuteScalar = 0 Then
                    If ErrorLog.Contains("These Sales Tax Group Parties Are Not Present In Master") = False Then
                        ErrorLog += vbCrLf & "These Sales Tax Group Parties Are Not Present In Master" & vbCrLf
                        ErrorLog += AgL.XNull(DtSalesTaxGroupParty.Rows(I)("Sales Tax Group Party")) & ", "
                    Else
                        ErrorLog += AgL.XNull(DtSalesTaxGroupParty.Rows(I)("Sales Tax Group Party")) & ", "
                    End If
                End If
            End If
        Next




        For I = 0 To DtSaleInvoice.Rows.Count - 1
            If AgL.XNull(DtSaleInvoice.Rows(I)("Sale To Party")) = "" Then
                ErrorLog += "Sale To Party is blank at row no." + (I + 2).ToString() & vbCrLf
            End If

            If AgL.XNull(DtSaleInvoice.Rows(I)("Bill To Party")) = "" Then
                ErrorLog += "Bill To Party is blank at row no." + (I + 2).ToString() & vbCrLf
            End If

            If AgL.XNull(DtSaleInvoice.Rows(I)("Sales Tax Group Party")) = "" Then
                ErrorLog += "Sales Tax Group Party is blank at row no." + (I + 2).ToString() & vbCrLf
            End If

            If AgL.XNull(DtSaleInvoice.Rows(I)("V_Date")) = "" Then
                ErrorLog += "V_Date is blank at row no." + (I + 2).ToString() & vbCrLf
            End If

            If AgL.XNull(DtSaleInvoice.Rows(I)("V_Type")) = "" Then
                ErrorLog += "V_Type is blank at row no." + (I + 2).ToString() & vbCrLf
            End If
        Next

        Dim DtItem = DtSaleInvoiceDetail.DefaultView.ToTable(True, "Item Name")
        For I = 0 To DtItem.Rows.Count - 1
            If AgL.XNull(DtItem.Rows(I)("Item Name")) <> "" Then
                If AgL.Dman_Execute("SELECT Count(*) From Item where Description = '" & AgL.XNull(DtItem.Rows(I)("Item Name")) & "'", AgL.GCn).ExecuteScalar = 0 Then
                    If ErrorLog.Contains("These Item Names Are Not Present In Master") = False Then
                        ErrorLog += vbCrLf & "These Item Names Are Not Present In Master" & vbCrLf
                        ErrorLog += AgL.XNull(DtItem.Rows(I)("Item Name")) & ", "
                    Else
                        ErrorLog += AgL.XNull(DtItem.Rows(I)("Item Name")) & ", "
                    End If
                End If
            End If
        Next

        Dim DtSalesTaxGroupItem = DtSaleInvoiceDetail.DefaultView.ToTable(True, "Sales Tax Group Item")
        For I = 0 To DtSalesTaxGroupItem.Rows.Count - 1
            If AgL.XNull(DtSalesTaxGroupItem.Rows(I)("Sales Tax Group Item")) <> "" Then
                If AgL.Dman_Execute("SELECT Count(*) From PostingGroupSalesTaxItem where Description = '" & AgL.XNull(DtSalesTaxGroupItem.Rows(I)("Sales Tax Group Item")) & "'", AgL.GCn).ExecuteScalar = 0 Then
                    If ErrorLog.Contains("These SalesTaxGroupItems Are Not Present In Master") = False Then
                        ErrorLog += vbCrLf & "These SalesTaxGroupItems Are Not Present In Master" & vbCrLf
                        ErrorLog += AgL.XNull(DtSalesTaxGroupItem.Rows(I)("Sales Tax Group Item")) & ", "
                    Else
                        ErrorLog += AgL.XNull(DtSalesTaxGroupItem.Rows(I)("Sales Tax Group Item")) & ", "
                    End If
                End If
            End If
        Next

        For I = 0 To DtSaleInvoiceDetail.Rows.Count - 1
            If AgL.XNull(DtSaleInvoiceDetail.Rows(I)("Item Name")) = "" Then
                ErrorLog += "Item Name is blank at row no." + (I + 2).ToString() & vbCrLf
            End If

            If AgL.XNull(DtSaleInvoiceDetail.Rows(I)("Sales Tax Group Item")) = "" Then
                ErrorLog += "Sales Tax Group Item is blank at row no." + (I + 2).ToString() & vbCrLf
            End If
        Next

        If ErrorLog <> "" Then
            If File.Exists(My.Application.Info.DirectoryPath + " \ " + "ErrorLog.txt") Then
                My.Computer.FileSystem.WriteAllText(My.Application.Info.DirectoryPath + "\" + "ErrorLog.txt", ErrorLog, False)
            Else
                File.Create(My.Application.Info.DirectoryPath + " \ " + "ErrorLog.txt")
                My.Computer.FileSystem.WriteAllText(My.Application.Info.DirectoryPath + " \ " + "ErrorLog.txt", ErrorLog, False)
            End If
            System.Diagnostics.Process.Start("notepad.exe", My.Application.Info.DirectoryPath + "\" + "ErrorLog.txt")
            Exit Sub
        End If

        Try
            AgL.ECmd = AgL.GCn.CreateCommand
            AgL.ETrans = AgL.GCn.BeginTransaction(IsolationLevel.ReadCommitted)
            AgL.ECmd.Transaction = AgL.ETrans
            mTrans = "Begin"


            For I = 0 To DtSaleInvoice.Rows.Count - 1
                'Dim mDocId = AgL.GetDocId(AgL.XNull(DtSaleInvoice.Rows(I)("V_Type")), CStr(DglMain.Item(Col1Value, rowV_No).Value), CDate(AgL.XNull(DtSaleInvoice.Rows(I)("V_Date"))),
                '                          AgL.GCn, AgL.PubDivCode, AgL.PubSiteCode)
                Dim mDocId = AgL.CreateDocId(AgL, "SaleInvoice", AgL.XNull(DtSaleInvoice.Rows(I)("V_Type")), CStr(DglMain.Item(Col1Value, rowV_No).Value), CDate(AgL.XNull(DtSaleInvoice.Rows(I)("V_Date"))),
                                          AgL.GCn, AgL.PubDivCode, AgL.PubSiteCode)

                Dim mV_No As String = Val(AgL.DeCodeDocID(mDocId, AgLibrary.ClsMain.DocIdPart.VoucherNo))
                Dim mV_Prefix As String = AgL.DeCodeDocID(mDocId, AgLibrary.ClsMain.DocIdPart.VoucherPrefix)

                Dim mSaleToParty As String = ""
                Dim mSaleToPartyName As String = ""
                Dim mSaleToPartyAddress As String = ""
                Dim mSaleToPartyCity As String = ""
                Dim mSaleToPartyMobile As String = ""
                Dim mSaleToPartySalesTaxNo As String = ""

                mQry = "SELECT Sg.SubCode As SaleToParty, Name As SaleToPartyName, Address As SaleToPartyAddress, CityCode As SaleToPartyCity, Mobile As SaleToPartyMobile, Sgr.RegistrationNo As SaleToPartySalesTaxNo
                        FROM Subgroup Sg
                        left join (Select SubCode, RegistrationNo From SubgroupRegistration Where RegistrationType = 'Sales Tax No') As Sgr On Sg.Subcode = Sgr.Subcode
                        Where Sg.Name =  '" & AgL.XNull(DtSaleInvoice.Rows(I)("Sale To Party")) & "'"
                Dim DtAcGroup As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)
                If (DtAcGroup.Rows.Count > 0) Then
                    mSaleToParty = AgL.XNull(DtAcGroup.Rows(0)("SaleToParty"))
                    mSaleToPartyName = AgL.XNull(DtAcGroup.Rows(0)("SaleToPartyName"))
                    mSaleToPartyAddress = AgL.XNull(DtAcGroup.Rows(0)("SaleToPartyAddress"))
                    mSaleToPartyCity = AgL.XNull(DtAcGroup.Rows(0)("SaleToPartyCity"))
                    mSaleToPartyMobile = AgL.XNull(DtAcGroup.Rows(0)("SaleToPartyMobile"))
                    mSaleToPartySalesTaxNo = AgL.XNull(DtAcGroup.Rows(0)("SaleToPartySalesTaxNo"))
                End If



                Dim mBillToParty As String = AgL.Dman_Execute("SELECT Sg.SubCode As BillToParty
                        FROM Subgroup Sg
                        Where Sg.Name =  '" & AgL.XNull(DtSaleInvoice.Rows(I)("Bill To Party")) & "'", AgL.GCn).ExecuteScalar()

                If AgL.Dman_Execute("SELECT Count(*) From SaleInvoice where V_Type = '" & AgL.XNull(DtSaleInvoice.Rows(I)("V_Type")) & "' And ReferenceNo = '" & AgL.XNull(DtSaleInvoice.Rows(I)("Manual Ref No")) & "' ", AgL.GCn).ExecuteScalar = 0 Then
                    mQry = " INSERT INTO SaleInvoice (DocID,  V_Type,  V_Prefix, V_Date,  V_No,  Div_Code,  Site_Code,
                             ReferenceNo,  SaleToParty,  BillToParty,  Agent, SaleToPartyName,  SaleToPartyAddress,
                             SaleToPartyCity,  SaleToPartyMobile, SaleToPartySalesTaxNo,  ShipToAddress,
                             RateType,  SalesTaxGroupParty, PlaceOfSupply,  Structure,
                             CustomFields,  SaleToPartyDocNo, SaleToPartyDocDate,  ReferenceDocId,
                             Remarks,  TermsAndConditions, Gross_Amount,  Taxable_Amount,
                             Tax1_Per,  Tax1,  Tax2_Per, Tax2,  Tax3_Per,  Tax3,
                             Tax4_Per,  Tax4,  Tax5_Per, Tax5,  SubTotal1,  Deduction_Per,
                             Deduction,  Other_Charge_Per,  Other_Charge, Round_Off,  Net_Amount,  PaidAmt,
                             CreditLimit,  CreditDays,  Status, EntryBy,  EntryDate,  ApproveBy,
                             ApproveDate,  MoveToLog,  MoveToLogDate, UploadDate)
                             Select  " & AgL.Chk_Text(mDocId) & ",  
                             " & AgL.Chk_Text(AgL.XNull(DtSaleInvoice.Rows(I)("V_Type"))) & ",  
                             " & AgL.Chk_Text(mV_Prefix) & ",  
                             " & AgL.Chk_Date(AgL.XNull(DtSaleInvoice.Rows(I)("V_Date"))) & ",  
                             " & AgL.Chk_Text(mV_No) & ",  
                             " & AgL.Chk_Text(AgL.PubDivCode) & ",
                             " & AgL.Chk_Text(AgL.PubSiteCode) & ",  " & AgL.Chk_Text(AgL.XNull(DtSaleInvoice.Rows(I)("Manual Ref No"))) & ",  
                             " & AgL.Chk_Text(mSaleToParty) & ", 
                             (SELECT SubCode  From SubGroup WHERE Name = '" & AgL.XNull(DtSaleInvoice.Rows(I)("Bill To Party")) & "') As BillToParty,
                             (SELECT SubCode  From SubGroup WHERE Name = '" & AgL.XNull(DtSaleInvoice.Rows(I)("Agent")) & "') As Agent,
                             " & AgL.Chk_Text(mSaleToPartyName) & ",
                             " & AgL.Chk_Text(mSaleToPartyAddress) & ",  " & AgL.Chk_Text(mSaleToPartyCity) & ",  
                             " & AgL.Chk_Text(mSaleToPartyMobile) & ", " & AgL.Chk_Text(mSaleToPartySalesTaxNo) & ",  
                             " & AgL.Chk_Text(AgL.XNull(DtSaleInvoice.Rows(I)("Ship To Address"))) & ",  
                             (SELECT Code  From RateType Where Description = '" & AgL.XNull(DtSaleInvoice.Rows(I)("Rate Type")) & "') As RateType,
                             '" & AgL.XNull(DtSaleInvoice.Rows(I)("Sales Tax Group Party")) & "' As SalesTaxGroupParty,
                             " & AgL.Chk_Text(AgL.XNull(DtSaleInvoice.Rows(I)("Place Of Supply"))) & ",  
                             (Select IfNull(Max(Structure),'') From Voucher_Type Where V_Type = '" & AgL.XNull(DtSaleInvoice.Rows(I)("V_Type")) & "') As Structure, 
                             Null As CustomFields,  
                              " & AgL.Chk_Text(AgL.XNull(DtSaleInvoice.Rows(I)("Sale To Party Doc No"))) & ",  
                              " & AgL.Chk_Date(AgL.XNull(DtSaleInvoice.Rows(I)("Sale To Party Doc Date"))) & ",  
                              Null As ReferenceDocId,  " & AgL.Chk_Text(AgL.XNull(DtSaleInvoice.Rows(I)("Remark"))) & ",  
                              " & AgL.Chk_Text(AgL.XNull(DtSaleInvoice.Rows(I)("Terms And Conditions"))) & ", 
                              " & AgL.VNull(DtSaleInvoice.Rows(I)("Gross Amount")) & ",  
                              " & AgL.VNull(DtSaleInvoice.Rows(I)("Taxable_Amount")) & ",  
                              " & AgL.VNull(DtSaleInvoice.Rows(I)("Tax1_Per")) & " As Tax1_Per,
                              " & AgL.VNull(DtSaleInvoice.Rows(I)("Tax1")) & " As Tax1,  
                              " & AgL.VNull(DtSaleInvoice.Rows(I)("Tax2_Per")) & " As Tax2_Per,  
                              " & AgL.VNull(DtSaleInvoice.Rows(I)("Tax2")) & " As Tax2, 
                              " & AgL.VNull(DtSaleInvoice.Rows(I)("Tax3_Per")) & " As Tax3_Per,  
                              " & AgL.VNull(DtSaleInvoice.Rows(I)("Tax3")) & " As Tax3,  
                              " & AgL.VNull(DtSaleInvoice.Rows(I)("Tax4_Per")) & " As Tax4_Per,
                              " & AgL.VNull(DtSaleInvoice.Rows(I)("Tax4")) & " As Tax4,  
                              " & AgL.VNull(DtSaleInvoice.Rows(I)("Tax5_Per")) & " As Tax5_Per,  
                              " & AgL.VNull(DtSaleInvoice.Rows(I)("Tax5")) & " As Tax5, 
                              " & AgL.VNull(DtSaleInvoice.Rows(I)("SubTotal1")) & " As SubTotal1,  
                              " & AgL.VNull(DtSaleInvoice.Rows(I)("Deduction_Per")) & " As Deduction_Per,  
                              " & AgL.VNull(DtSaleInvoice.Rows(I)("Deduction")) & " As Deduction,
                              " & AgL.VNull(DtSaleInvoice.Rows(I)("Other_Charge_Per")) & " As Other_Charge_Per,  
                              " & AgL.VNull(DtSaleInvoice.Rows(I)("Other_Charge")) & " As Other_Charge,  
                              " & AgL.VNull(DtSaleInvoice.Rows(I)("Round_Off")) & " As Round_Off, 
                              " & AgL.VNull(DtSaleInvoice.Rows(I)("Net_Amount")) & " As Net_Amount,  
                              0 As PaidAmt,  
                              " & AgL.VNull(DtSaleInvoice.Rows(I)("Credit Limit")) & " As CreditLimit,
                              " & AgL.VNull(DtSaleInvoice.Rows(I)("Credit Days")) & " As CreditDays,  
                              'Active' As Status,  
                              " & AgL.Chk_Text(AgL.PubUserName) & " As EntryBy, 
                              " & AgL.Chk_Date(AgL.PubLoginDate) & "  As EntryDate,  
                              Null As ApproveBy,  Null As ApproveDate,
                              Null As MoveToLog,  Null As MoveToLogDate,  Null As UploadDate"
                    AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)



                    Dim DtSaleInvoiceDetail_ForHeader As New DataTable
                    For M = 0 To DtSaleInvoiceDetail.Columns.Count - 1
                        Dim DColumn As New DataColumn
                        DColumn.ColumnName = DtSaleInvoiceDetail.Columns(M).ColumnName
                        DtSaleInvoiceDetail_ForHeader.Columns.Add(DColumn)
                    Next

                    Dim DtRowSaleInvoiceDetail_ForHeader As DataRow() = DtSaleInvoiceDetail.Select("V_Type = " + AgL.Chk_Text(AgL.XNull(DtSaleInvoice.Rows(I)("V_Type"))) + " And [Manual Ref No] = " + AgL.Chk_Text(AgL.XNull(DtSaleInvoice.Rows(I)("Manual Ref No"))))
                    If DtRowSaleInvoiceDetail_ForHeader.Length > 0 Then
                        For M = 0 To DtRowSaleInvoiceDetail_ForHeader.Length - 1
                            DtSaleInvoiceDetail_ForHeader.Rows.Add()
                            For N = 0 To DtSaleInvoiceDetail_ForHeader.Columns.Count - 1
                                DtSaleInvoiceDetail_ForHeader.Rows(M)(N) = DtRowSaleInvoiceDetail_ForHeader(M)(N)
                            Next
                        Next
                    End If

                    For J = 0 To DtSaleInvoiceDetail_ForHeader.Rows.Count - 1
                        mQry = "Insert Into SaleInvoiceDetail(DocId, Sr, Item, Specification, SalesTaxGroupItem, 
                           DocQty, FreeQty, Qty, Unit, Pcs, UnitMultiplier, DealUnit, 
                           DocDealQty, Rate, DiscountPer, DiscountAmount, AdditionalDiscountPer, AdditionalDiscountAmount,  
                           Amount, Remark, BaleNo, LotNo,  
                           ReferenceDocId, ReferenceDocIdSr, 
                           SaleInvoice, SaleInvoiceSr, V_Nature, GrossWeight, NetWeight, Gross_Amount, Taxable_Amount,
                           Tax1_Per, Tax1, Tax2_Per, Tax2, Tax3_Per, Tax3, Tax4_Per, Tax4, Tax5_Per, Tax5, SubTotal1, Deduction_Per, 
                           Deduction, Other_Charge_Per, Other_Charge, Round_Off, Net_Amount)
                           Select " & AgL.Chk_Text(mDocId) & ", " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("TSr")) & ", " &
                            " (SELECT Code From Item WHERE Description = '" & AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Item Name")) & "') As Item, " &
                            " " & AgL.Chk_Text(AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Specification"))) & ", " &
                            " " & AgL.Chk_Text(AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Sales Tax Group Item"))) & ", " &
                            " " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Doc Qty")) & ", " &
                            " " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Free Qty")) & ", " &
                            " " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Qty")) & ", " &
                            " " & AgL.Chk_Text(AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Unit"))) & ", " &
                            " " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Pcs")) & ", " &
                            " " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Unit Multiplier")) & ", " &
                            " " & AgL.Chk_Text(AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Deal Unit"))) & ", " &
                            " " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Doc Deal Qty")) & ", " &
                            " " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Rate")) & ", " &
                            " " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Discount Per")) & ", " &
                            " " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Discount Amount")) & ", " &
                            " " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Additional Discount Per")) & ", " &
                            " " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Additional Discount Amount")) & ", " &
                            " " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Amount")) & ", " &
                            " " & AgL.Chk_Text(AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Remark"))) & ", " &
                            " " & AgL.Chk_Text(AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Bale No"))) & ", " &
                            " " & AgL.Chk_Text(AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Lot No"))) & ", " &
                            " Null As ReferenceDocId, " &
                            " Null As ReferenceDocIdSr, " &
                            " " & AgL.Chk_Text(mDocId) & " As SaleInvoice, " &
                            " " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("TSr")) & " As Sr, " &
                            " 'Invoice' As V_Nature,
                            " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Gross Weight")) & ", " & "
                            " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Net Weight")) & ", 
                            " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Gross_Amount")) & ", " & "
                            " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Taxable_Amount")) & ", 
                            " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Tax1_Per")) & ", 
                            " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Tax1")) & ", 
                            " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Tax2_Per")) & ", 
                            " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Tax2")) & ", 
                            " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Tax3_Per")) & ", 
                            " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Tax3")) & ", 
                            " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Tax4_Per")) & ", 
                            " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Tax4")) & ", 
                            " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Tax5_Per")) & ", 
                            " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Tax5")) & ", 
                            " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("SubTotal1")) & ", 
                            " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Deduction_Per")) & ", 
                            " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Deduction")) & ", 
                            " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Other_Charge_Per")) & ", 
                            " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Other_Charge")) & ", 
                            " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Round_Off")) & ", 
                            " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Net_Amount")) & ""
                        AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)






                        Dim DtSaleInvoiceDimensionDetail_ForHeader As New DataTable
                        For M = 0 To DtSaleInvoiceDimensionDetail.Columns.Count - 1
                            Dim DColumn As New DataColumn
                            DColumn.ColumnName = DtSaleInvoiceDimensionDetail.Columns(M).ColumnName
                            DtSaleInvoiceDimensionDetail_ForHeader.Columns.Add(DColumn)
                        Next

                        Dim DtRowSaleInvoiceDimensionDetail_ForHeader As DataRow() = DtSaleInvoiceDimensionDetail.Select("V_Type = " + AgL.Chk_Text(AgL.XNull(DtSaleInvoiceDetail.Rows(J)("V_Type"))) + " And [Manual Ref No] = " + AgL.Chk_Text(AgL.XNull(DtSaleInvoiceDetail.Rows(J)("Manual Ref No"))) + " And TSr = " + AgL.XNull(DtSaleInvoiceDetail.Rows(J)("TSr")), "TSr")
                        If DtRowSaleInvoiceDimensionDetail_ForHeader.Length > 0 Then
                            For M = 0 To DtRowSaleInvoiceDetail_ForHeader.Length - 1
                                'DtSaleInvoiceDimensionDetail_ForHeader.Rows.Add(DtRowSaleInvoiceDimensionDetail_ForHeader(M))
                                DtSaleInvoiceDetail_ForHeader.Rows.Add()
                                For N = 0 To DtSaleInvoiceDimensionDetail_ForHeader.Columns.Count - 1
                                    DtSaleInvoiceDimensionDetail_ForHeader.Rows(M)(N) = DtRowSaleInvoiceDimensionDetail_ForHeader(M)(N)
                                Next
                            Next
                        End If




                        For K = 0 To DtSaleInvoiceDimensionDetail_ForHeader.Rows.Count - 1
                            mQry = " INSERT INTO SaleInvoiceDimensionDetail (DocID, TSr, SR, Specification, Pcs, Qty, TotalQty) 
                                    Select " & AgL.Chk_Text(mDocId) & ", 
                                    " & AgL.VNull(DtSaleInvoiceDimensionDetail_ForHeader.Rows(K)("TSr")) & " As Sr, 
                                    " & (K + 1) & ", 
                                    " & AgL.Chk_Text(AgL.XNull(DtSaleInvoiceDimensionDetail_ForHeader.Rows(K)("Specification"))) & ", 
                                    " & AgL.VNull(DtSaleInvoiceDimensionDetail_ForHeader.Rows(K)("Pcs")) & ", 
                                    " & AgL.VNull(DtSaleInvoiceDimensionDetail_ForHeader.Rows(K)("Qty")) & ", 
                                    " & AgL.VNull(DtSaleInvoiceDimensionDetail_ForHeader.Rows(K)("TotalQty")) & " "
                            AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)
                        Next
                    Next

                    mQry = "Insert Into Stock(DocID, TSr, Sr, V_Type, V_Prefix, V_Date, V_No, RecID, Div_Code, Site_Code, 
                                  SubCode, SalesTaxGroupParty,  Item,  LotNo, 
                                  EType_IR, Qty_Iss, Qty_Rec, Unit, UnitMultiplier, DealQty_Iss , DealQty_Rec, DealUnit, 
                                  ReferenceDocID, ReferenceDocIDSr, Rate, Amount, Landed_Value) 
                                  Select L.DocId, L.Sr, L.Sr, H.V_Type, H.V_Prefix, H.V_Date, H.V_No, H.ReferenceNo, 
                                  H.Div_Code, H.Site_Code, H.SaleToParty,  H.SalesTaxGroupParty,  L.Item,
                                  L.LotNo, 'I', 
                                  Case When  IfNull(L.Qty,0) >= 0 Then L.Qty Else 0 End As Qty_Iss, 
                                  Case When  IfNull(L.Qty,0) < 0 Then L.Qty Else 0 End As Qty_Rec, 
                                  L.Unit, L.UnitMultiplier, 
                                  Case When  IfNull(L.DealQty,0) >= 0 Then L.DealQty Else 0 End As DealQty_Iss, 
                                  Case When  IfNull(L.DealQty,0) < 0 Then L.DealQty Else 0 End As DealQty_Rec, 
                                  L.DealUnit,  
                                  L.ReferenceDocId, L.ReferenceDocIdSr, 
                                  L.Amount/L.Qty, L.Amount, L.Amount
                                  FROM SaleInvoiceDetail L    
                                  LEFT JOIN SaleInvoice H On L.DocId = H.DocId 
                                  WHERE L.DocId =  '" & mDocId & "' "
                    AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)


                    'For Ledger Posting

                    'mQry = " Select H.*, Vt.NCat As NCat
                    '        From (Select * From SaleInvoice  Where DocID='" & mDocId & "') H 
                    '        LEFT JOIN Voucher_Type Vt On H.V_Type = Vt.V_Type "
                    'DsTemp = AgL.FillData(mQry, AgL.GCn)


                    'AgCalcGrid1.FrmType = Me.FrmType
                    'AgCalcGrid1.AgStructure = AgL.XNull(DsTemp.Tables(0).Rows(0)("Structure"))
                    'EntryNCat = AgL.XNull(DsTemp.Tables(0).Rows(0)("NCat"))
                    'DglMain.Item(Col1Value, rowV_Date).Value = AgL.XNull(DsTemp.Tables(0).Rows(0)("V_Date"))
                    'IniGrid()
                    'AgCalcGrid1.FMoveRecFooterTable(DsTemp.Tables(0), AgL.XNull(DsTemp.Tables(0).Rows(0)("NCat")), AgL.XNull(DsTemp.Tables(0).Rows(0)("V_Date")))



                    'Dim A As Integer = 0
                    'mQry = "Select L.* From (Select * From SaleInvoiceDetail  Where DocId = '" & mDocId & "') As L 
                    '            Order By L.Sr "
                    'DsTemp = AgL.FillData(mQry, AgL.GCn)
                    'For A = 0 To DsTemp.Tables(0).Rows.Count - 1
                    '    Dgl1.Rows.Add()
                    '    Call AgCalcGrid1.FMoveRecLineTable(DsTemp.Tables(0), A)
                    'Next

                    'Dim mNarr As String = "Being goods sold To " & DglMain.Item(Col1Value, rowSaleToParty).Value & ""
                    'Call ClsFunction.PostStructureLineToAccounts(AgCalcGrid1, mNarr, mDocId, AgL.PubDivCode, AgL.PubSiteCode, AgL.PubDivCode,
                    '       AgL.XNull(DtSaleInvoice.Rows(I)("V_Type")), mV_Prefix, mV_No, AgL.XNull(DtSaleInvoice.Rows(I)("Manual Ref No")),
                    '        mBillToParty, AgL.XNull(DtSaleInvoice.Rows(I)("V_Date")), AgL.GCn, AgL.ECmd)
                    'End For Ledger Posting

                    AgL.UpdateVoucherCounter(mDocId, CDate(AgL.XNull(DtSaleInvoice.Rows(I)("V_Date"))), AgL.GCn, AgL.ECmd, AgL.PubDivCode, AgL.PubSiteCode)
                End If
            Next

            AgL.ETrans.Commit()
            mTrans = "Commit"

        Catch ex As Exception
            AgL.ETrans.Rollback()
            MsgBox(ex.Message)
        End Try
        If StrErrLog <> "" Then MsgBox(StrErrLog)


        For I = 0 To DTMaster.Rows.Count - 1
            BMBMaster.Position = I
            MoveRec()



            Dim mNarrParty As String
            Dim mNarr As String

            mNarrParty = DglMain.Item(Col1Value, rowV_Type).Value
            mNarr = DglMain.Item(Col1Value, rowV_Type).Value & " : " & DglMain.Item(Col1Value, rowSaleToParty).Value


        Next
    End Sub

    Public Sub FImportFromExcel(bImportFor As ImportFor)
        Dim mTrans As String = ""
        Dim ErrorLog As String = ""
        Dim DtSaleInvoice As DataTable
        Dim DtSaleInvoiceDetail As DataTable
        Dim DtSaleInvoiceDimensionDetail As DataTable
        Dim DtSaleInvoice_DataFields As DataTable
        Dim DtSaleInvoiceDetail_DataFields As DataTable
        Dim DtSaleInvoiceDimensionDetail_DataFields As DataTable
        Dim DtMain As DataTable = Nothing

        Dim I As Integer
        Dim J As Integer
        Dim K As Integer
        Dim M As Integer
        Dim N As Integer
        'Dim FW As System.IO.StreamWriter = New System.IO.StreamWriter("C:\ImportLog.Txt", False, System.Text.Encoding.Default)
        Dim StrErrLog As String = ""

        mQry = "Select '' as Srl, '" & GetFieldAliasName(bImportFor, "V_TYPE") & "' as [Field Name], 'Text' as [Data Type], 5 as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "V_NO") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "V_Date") & "' as [Field Name], 'Date' as [Data Type], Null as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Invoice No") & "' as [Field Name], 'Text' as [Data Type], 20 as [Length], 'Mandatory, Should be unique.' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Sale To Party") & "' as [Field Name], 'Text' as [Data Type], 255 as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Sale To Party Address") & "' as [Field Name], 'Text' as [Data Type], 255 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Sale To Party City") & "' as [Field Name], 'Text' as [Data Type], 50 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Sale To Party Pincode") & "' as [Field Name], 'Text' as [Data Type], 6 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Sale To Party Sales Tax No") & "' as [Field Name], 'Text' as [Data Type], 20 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Bill To Party") & "' as [Field Name], 'Text' as [Data Type], 255 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Agent") & "' as [Field Name], 'Text' as [Data Type], 255 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Rate Type") & "' as [Field Name], 'Text' as [Data Type], 50 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Sales Tax Group Party") & "' as [Field Name], 'Text' as [Data Type], 20 as [Length], 'Mandatory, Registered / Unregistered / Composition' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Place Of Supply") & "' as [Field Name], 'Text' as [Data Type], 20 as [Length], 'Mandatory, Outside State / Within State' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Sale To Party Doc No") & "' as [Field Name], 'Text' as [Data Type], 50 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Sale To Party Doc Date") & "' as [Field Name], 'Date' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Remark") & "' as [Field Name], 'Text' as [Data Type], 255 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Terms And Conditions") & "' as [Field Name], 'Text' as [Data Type], 255 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Credit Limit") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Credit Days") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "SubTotal1") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Deduction_Per") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Deduction") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Other_Charge_Per") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Other_Charge") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Round_Off") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Net_Amount") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "

        DtSaleInvoice_DataFields = AgL.FillData(mQry, AgL.GCn).Tables(0)


        mQry = "Select '' as Srl, '" & GetFieldAliasName(bImportFor, "V_TYPE") & "' as [Field Name], 'Text' as [Data Type], 5 as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Invoice No") & "' as [Field Name], 'Text' as [Data Type], 20 as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "TSr") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], 'Sr Of Second Table' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Item Name") & "' as [Field Name], 'Text' as [Data Type], 255 as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Specification") & "' as [Field Name], 'Text' as [Data Type], 255 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Sales Tax Group Item") & "' as [Field Name], 'Text' as [Data Type], 20 as [Length], 'Mandatory, GST 0% / GST 5% / GST 12% / GST 18% / GST 28%' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Qty") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Unit") & "' as [Field Name], 'Text' as [Data Type], 50 as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Pcs") & "' as [Field Name], 'Number' as [Data Type], 50 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Unit Multiplier") & "' as [Field Name], 'Text' as [Data Type], 10 as [Length], 'Conversion from unit to deal unit.' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Deal Unit") & "' as [Field Name], 'Text' as [Data Type], 10 as [Length], 'If billing unit is different from unit then that billing unit will be save in deal unit other wise unit will be save here.' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Deal Qty") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Rate") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Discount Per") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Discount Amount") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Additional Discount Per") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Additional Discount Amount") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Amount") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Remark") & "' as [Field Name], 'Text' as [Data Type], 255 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Bale No") & "' as [Field Name], 'Text' as [Data Type], 50 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Lot No") & "' as [Field Name], 'Text' as [Data Type], 50 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Gross_Amount") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Taxable_Amount") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Tax1_Per") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], 'IGST Per' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Tax1") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], 'IGST Amount' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Tax2_Per") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], 'CGST Per' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Tax2") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], 'CGST Amount' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Tax3_Per") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], 'SGST Per' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Tax3") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], 'SGST Amount' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Tax4_Per") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Tax4") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Tax5_Per") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Tax5") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "SubTotal1") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        DtSaleInvoiceDetail_DataFields = AgL.FillData(mQry, AgL.GCn).Tables(0)


        mQry = "Select '' as Srl, '" & GetFieldAliasName(bImportFor, "V_TYPE") & "' as [Field Name], 'Text' as [Data Type], 5 as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Invoice No") & "' as [Field Name], 'Text' as [Data Type], 20 as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select '' as Srl, '" & GetFieldAliasName(bImportFor, "TSr") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], 'Sr Of Second Table' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Sr") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Specification") & "' as [Field Name], 'Text' as [Data Type], 50 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Pcs") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Qty") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "TotalQty") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        DtSaleInvoiceDimensionDetail_DataFields = AgL.FillData(mQry, AgL.GCn).Tables(0)



        Dim ObjFrmImport As New FrmImportSaleFromExcel
        ObjFrmImport.Text = "Sale Invoice Import"
        ObjFrmImport.Dgl1.DataSource = DtSaleInvoice_DataFields
        ObjFrmImport.Dgl2.DataSource = DtSaleInvoiceDetail_DataFields
        ObjFrmImport.Dgl3.DataSource = DtSaleInvoiceDimensionDetail_DataFields
        ObjFrmImport.StartPosition = FormStartPosition.CenterScreen
        ObjFrmImport.ShowDialog()

        If Not AgL.StrCmp(ObjFrmImport.UserAction, "OK") Then Exit Sub

        DtSaleInvoice = ObjFrmImport.P_DsExcelData_SaleInvoice.Tables(0)
        DtSaleInvoiceDetail = ObjFrmImport.P_DsExcelData_SaleInvoiceDetail.Tables(0)
        DtSaleInvoiceDimensionDetail = ObjFrmImport.P_DsExcelData_SaleInvoiceDimensionDetail.Tables(0)

        mFlag_Import = True

        If bImportFor = ImportFor.Dos Then
            'Creation Of Packing Item
            Dim ItemTable As New FrmItemMaster.StructItem
            Dim bItemCode As String = AgL.GetMaxId("Item", "Code", AgL.GCn, AgL.PubDivCode, AgL.PubSiteCode, 4, True, True, AgL.ECmd, AgL.Gcn_ConnectionString)
            Dim bManualCode As String = ""
            If AgL.PubServerName <> "" Then
                bManualCode = AgL.XNull(AgL.Dman_Execute("SELECT  IfNull(Max(CAST(ManualCode AS INTEGER)),0) + 1 FROM Item  WHERE IsNumeric(ManualCode)>0", AgL.GcnRead).ExecuteScalar)
            Else
                bManualCode = AgL.XNull(AgL.Dman_Execute("SELECT  IfNull(Max(CAST(ManualCode AS INTEGER)),0) + 1 FROM Item  WHERE ABS(ManualCode)>0", AgL.GcnRead).ExecuteScalar)
            End If


            ItemTable.Code = bItemCode
            ItemTable.ManualCode = bManualCode
            ItemTable.DisplayName = "Packing"
            ItemTable.Specification = "Packing"
            ItemTable.ItemGroupDesc = ""
            ItemTable.ItemCategoryDesc = ""
            ItemTable.Description = "Packing"
            ItemTable.ItemType = "TP"
            ItemTable.Unit = "Pcs"
            ItemTable.PurchaseRate = 0
            ItemTable.Rate = 0
            ItemTable.SalesTaxPostingGroup = "GST 5%"
            ItemTable.HSN = ""
            ItemTable.EntryBy = AgL.PubUserName
            ItemTable.EntryDate = AgL.GetDateTime(AgL.GcnRead)
            ItemTable.EntryType = "Add"
            ItemTable.EntryStatus = LogStatus.LogOpen
            ItemTable.Div_Code = AgL.PubDivCode
            ItemTable.Status = "Active"
            ItemTable.StockYN = 0
            ItemTable.IsSystemDefine = 0
            Dim DTUP As DataTable = AgL.FillData("Select '' As [UP] ", AgL.GCn).Tables(0)
            Dim FrmObj As New FrmItemMaster("", DTUP, ItemV_Type.Item)
            FrmObj.ImportItemTable(ItemTable)


            For I = 0 To DtSaleInvoice.Rows.Count - 1
                DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Sales Tax Group Party")) = DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Sales Tax Group Party")).ToString().Replace(" ", "")

                If DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Place Of Supply")).ToString().Trim() = "EX.U.P." Then
                    DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Place Of Supply")) = PlaceOfSupplay.OutsideState
                Else
                    DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Place Of Supply")) = PlaceOfSupplay.WithinState
                End If

                If DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Sale To Party")).ToString().Trim() = "CASH A/C." Then
                    DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Sale To Party")) = "CASH A/C"
                End If

                If AgL.XNull(DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Rate Type"))).ToString().Trim() = "DHARA" Then
                    DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Rate Type")) = "Dhara Rate"
                ElseIf AgL.XNull(DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Rate Type"))).ToString().Trim() = "NET" Then
                    DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Rate Type")) = "Nett Rate"
                ElseIf AgL.XNull(DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Rate Type"))).ToString().Trim() = "SUPER NET" Then
                    DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Rate Type")) = "Super Nett Rate"
                End If


                If AgL.XNull(DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Agent"))).ToString().Trim() = "N.A" Or
                        AgL.XNull(DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Agent"))).ToString().Trim() = "." Then
                    DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Agent")) = ""
                End If

                If DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "V_Type")).ToString().Trim = "G1" Then
                    DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "V_Type")) = "SI"
                ElseIf DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "V_Type")).ToString().Trim = "R1" Or DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "V_Type")).ToString().Trim = "R2" Then
                    DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "V_Type")) = "SR"
                ElseIf DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "V_Type")).ToString().Trim = "S" Then
                    DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "V_Type")) = "SI"
                ElseIf DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "V_Type")).ToString().Trim = "SD" Then
                    DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "V_Type")) = "SID"
                End If

                If DtSaleInvoice.Columns.Contains(GetFieldAliasName(bImportFor, "fv_no")) Then
                    DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Remark")) = DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "fv_no"))
                End If
            Next

            For I = 0 To DtSaleInvoiceDetail.Rows.Count - 1
                DtSaleInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "Sales Tax Group Item")) = DtSaleInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "Sales Tax Group Item")).ToString().Replace("@ ", "").Replace("@", "").Trim

                Dim bItemDesc As String = ""
                mQry = "Select I.Description 
                        From Item I
                        LEFT JOIN ItemGroup Ig ON I.ItemGroup = Ig.Code
                        LEFT JOIN ItemCategory Ic On I.ItemCategory = Ic.Code
                        Where IsNull(Specification,'') = " & AgL.Chk_Text(DtSaleInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "Item Name")).ToString.Trim) & " 
                        And IsNull(Ig.Description,'') = " & AgL.Chk_Text(DtSaleInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "Item Group")).ToString.Trim) & " 
                        And IsNull(Ic.Description,'') = " & AgL.Chk_Text(DtSaleInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "Item Category")).ToString.Trim) & ""
                bItemDesc = AgL.Dman_Execute(mQry, AgL.GCn).ExecuteScalar

                If bItemDesc = "" Then
                    mQry = "Select Description From Item Where Description = " & AgL.Chk_Text(DtSaleInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "Item Name")).ToString.Trim) & " "
                    bItemDesc = AgL.Dman_Execute(mQry, AgL.GCn).ExecuteScalar

                    If bItemDesc = "" Then
                        mQry = "Select Description From Item Where Specification = " & AgL.Chk_Text(DtSaleInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "Item Name")).ToString.Trim) & " "
                        bItemDesc = AgL.Dman_Execute(mQry, AgL.GCn).ExecuteScalar
                    End If
                End If
                DtSaleInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "Item Name")) = bItemDesc

                If DtSaleInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "V_Type")) = "G1" Then
                    DtSaleInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "V_Type")) = "SI"
                ElseIf DtSaleInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "V_Type")) = "R1" Then
                    DtSaleInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "V_Type")) = "SR"
                ElseIf DtSaleInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "V_Type")).ToString().Trim = "S" Then
                    DtSaleInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "V_Type")) = "SI"
                ElseIf DtSaleInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "V_Type")).ToString().Trim = "SD" Then
                    DtSaleInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "V_Type")) = "SID"
                End If

                If DtSaleInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "Unit")).ToString.Trim = "P" Then
                    DtSaleInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "Unit")) = "Pcs"
                ElseIf DtSaleInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "Unit")).ToString.Trim.ToUpper = "MTR" Then
                    DtSaleInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "Unit")) = "Meter"
                ElseIf DtSaleInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "Unit")).ToString.Trim.ToUpper = "M" Then
                    DtSaleInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "Unit")) = "Meter"
                End If




            Next



            For I = 0 To DtSaleInvoiceDimensionDetail.Rows.Count - 1
                If DtSaleInvoiceDimensionDetail.Rows(I)(GetFieldAliasName(bImportFor, "V_Type")) = "G1" Then
                    DtSaleInvoiceDimensionDetail.Rows(I)(GetFieldAliasName(bImportFor, "V_Type")) = "SI"
                ElseIf DtSaleInvoiceDimensionDetail.Rows(I)(GetFieldAliasName(bImportFor, "V_Type")) = "R1" Then
                    DtSaleInvoiceDimensionDetail.Rows(I)(GetFieldAliasName(bImportFor, "V_Type")) = "SR"
                ElseIf DtSaleInvoiceDimensionDetail.Rows(I)(GetFieldAliasName(bImportFor, "V_Type")).ToString().Trim = "S" Then
                    DtSaleInvoiceDimensionDetail.Rows(I)(GetFieldAliasName(bImportFor, "V_Type")) = "SI"
                ElseIf DtSaleInvoiceDimensionDetail.Rows(I)(GetFieldAliasName(bImportFor, "V_Type")).ToString().Trim = "SD" Then
                    DtSaleInvoiceDimensionDetail.Rows(I)(GetFieldAliasName(bImportFor, "V_Type")) = "SID"
                End If
            Next
        End If



        Dim DtV_Type = DtSaleInvoice.DefaultView.ToTable(True, GetFieldAliasName(bImportFor, "V_Type"))
        For I = 0 To DtV_Type.Rows.Count - 1
            If AgL.XNull(DtV_Type.Rows(I)(GetFieldAliasName(bImportFor, "V_Type"))) <> "" Then
                If AgL.Dman_Execute("SELECT Count(*) From Voucher_TYpe where V_Type = '" & AgL.XNull(DtV_Type.Rows(I)(GetFieldAliasName(bImportFor, "V_Type"))) & "'", AgL.GCn).ExecuteScalar = 0 Then
                    If ErrorLog.Contains("These Voucher Types Are Not Present In Master") = False Then
                        ErrorLog += vbCrLf & "These Voucher Types Not Present In Master" & vbCrLf
                        ErrorLog += AgL.XNull(DtV_Type.Rows(I)(GetFieldAliasName(bImportFor, "V_Type"))) & ", "
                    Else
                        ErrorLog += AgL.XNull(DtV_Type.Rows(I)(GetFieldAliasName(bImportFor, "V_Type"))) & ", "
                    End If
                End If
            End If
        Next

        Dim DtSaleToParty = DtSaleInvoice.DefaultView.ToTable(True, GetFieldAliasName(bImportFor, "Sale To Party"))
        For I = 0 To DtSaleToParty.Rows.Count - 1
            If AgL.XNull(DtSaleToParty.Rows(I)(GetFieldAliasName(bImportFor, "Sale To Party"))).ToString().Trim <> "" Then
                If AgL.Dman_Execute("SELECT Count(*) From SubGroup where Upper(RTrim(LTrim(Name))) = " & AgL.Chk_Text(AgL.XNull(DtSaleToParty.Rows(I)(GetFieldAliasName(bImportFor, "Sale To Party"))).ToString().Trim().ToUpper) & "", AgL.GCn).ExecuteScalar = 0 Then
                    If ErrorLog.Contains("These Parties Are Not Present In Master") = False Then
                        ErrorLog += vbCrLf & "These Parties Are Not Present In Master" & vbCrLf
                        ErrorLog += AgL.XNull(DtSaleToParty.Rows(I)(GetFieldAliasName(bImportFor, "Sale To Party"))) & ", "
                    Else
                        ErrorLog += AgL.XNull(DtSaleToParty.Rows(I)(GetFieldAliasName(bImportFor, "Sale To Party"))) & ", "
                    End If
                End If
            End If
        Next

        Dim DtBillToParty = DtSaleInvoice.DefaultView.ToTable(True, GetFieldAliasName(bImportFor, "Bill To Party"))
        For I = 0 To DtBillToParty.Rows.Count - 1
            If AgL.XNull(DtBillToParty.Rows(I)(GetFieldAliasName(bImportFor, "Bill To Party"))).ToString().Trim <> "" Then
                If AgL.Dman_Execute("SELECT Count(*) From SubGroup where Upper(RTrim(LTrim(Name))) = " & AgL.Chk_Text(AgL.XNull(DtBillToParty.Rows(I)(GetFieldAliasName(bImportFor, "Bill To Party"))).ToString().Trim.ToUpper) & "", AgL.GCn).ExecuteScalar = 0 Then
                    If ErrorLog.Contains("These Parties Are Not Present In Master") = False Then
                        ErrorLog += vbCrLf & "These Parties Are Not Present In Master" & vbCrLf
                        ErrorLog += AgL.XNull(DtBillToParty.Rows(I)(GetFieldAliasName(bImportFor, "Bill To Party"))) & ", "
                    Else
                        ErrorLog += AgL.XNull(DtBillToParty.Rows(I)(GetFieldAliasName(bImportFor, "Bill To Party"))) & ", "
                    End If
                End If
            End If
        Next

        Dim DtAgent = DtSaleInvoice.DefaultView.ToTable(True, GetFieldAliasName(bImportFor, "Agent"))
        For I = 0 To DtAgent.Rows.Count - 1
            If AgL.XNull(DtAgent.Rows(I)(GetFieldAliasName(bImportFor, "Agent"))).ToString().Trim <> "" Then
                If AgL.Dman_Execute("SELECT Count(*) From SubGroup where Upper(RTrim(LTrim(Name)))  = '" & AgL.XNull(DtAgent.Rows(I)(GetFieldAliasName(bImportFor, "Agent"))).ToString().Trim.ToUpper & "'", AgL.GCn).ExecuteScalar = 0 Then
                    If ErrorLog.Contains("These Agents Are Not Present In Master") = False Then
                        ErrorLog += vbCrLf & "These Agents Are Not Present In Master" & vbCrLf
                        ErrorLog += AgL.XNull(DtAgent.Rows(I)(GetFieldAliasName(bImportFor, "Agent"))) & ", "
                    Else
                        ErrorLog += AgL.XNull(DtAgent.Rows(I)(GetFieldAliasName(bImportFor, "Agent"))) & ", "
                    End If
                End If
            End If
        Next

        Dim DtRateType = DtSaleInvoice.DefaultView.ToTable(True, GetFieldAliasName(bImportFor, "Rate Type"))
        For I = 0 To DtRateType.Rows.Count - 1
            If AgL.XNull(DtRateType.Rows(I)(GetFieldAliasName(bImportFor, "Rate Type"))).ToString().Trim <> "" Then
                If AgL.Dman_Execute("SELECT Count(*) From RateTYpe where Upper(RTrim(LTrim(Description)))  = '" & AgL.XNull(DtRateType.Rows(I)(GetFieldAliasName(bImportFor, "Rate Type"))).ToString.Trim.ToUpper & "'", AgL.GCn).ExecuteScalar = 0 Then
                    If ErrorLog.Contains("These Rate Types Are Not Present In Master") = False Then
                        ErrorLog += vbCrLf & "These Rate Types Are Not Present In Master" & vbCrLf
                        ErrorLog += AgL.XNull(DtRateType.Rows(I)(GetFieldAliasName(bImportFor, "Rate Type"))) & ", "
                    Else
                        ErrorLog += AgL.XNull(DtRateType.Rows(I)(GetFieldAliasName(bImportFor, "Rate Type"))) & ", "
                    End If
                End If
            End If
        Next

        Dim DtSalesTaxGroupParty = DtSaleInvoice.DefaultView.ToTable(True, GetFieldAliasName(bImportFor, "Sales Tax Group Party"))
        For I = 0 To DtSalesTaxGroupParty.Rows.Count - 1
            If AgL.XNull(DtSalesTaxGroupParty.Rows(I)(GetFieldAliasName(bImportFor, "Sales Tax Group Party"))) <> "" Then
                If AgL.Dman_Execute("SELECT Count(*) From PostingGroupSalesTaxParty where Description = '" & AgL.XNull(DtSalesTaxGroupParty.Rows(I)(GetFieldAliasName(bImportFor, "Sales Tax Group Party"))) & "'", AgL.GCn).ExecuteScalar = 0 Then
                    If ErrorLog.Contains("These Sales Tax Group Parties Are Not Present In Master") = False Then
                        ErrorLog += vbCrLf & "These Sales Tax Group Parties Are Not Present In Master" & vbCrLf
                        ErrorLog += AgL.XNull(DtSalesTaxGroupParty.Rows(I)(GetFieldAliasName(bImportFor, "Sales Tax Group Party"))) & ", "
                    Else
                        ErrorLog += AgL.XNull(DtSalesTaxGroupParty.Rows(I)(GetFieldAliasName(bImportFor, "Sales Tax Group Party"))) & ", "
                    End If
                End If
            End If
        Next

        For I = 0 To DtSaleInvoice_DataFields.Rows.Count - 1
            If AgL.XNull(DtSaleInvoice_DataFields.Rows(I)("Remark")).ToString().Contains("Mandatory") Then
                If Not DtSaleInvoice.Columns.Contains(AgL.XNull(DtSaleInvoice_DataFields.Rows(I)("Field Name")).ToString()) Then
                    If ErrorLog.Contains("These fields are not present is excel file") = False Then
                        ErrorLog += vbCrLf & "These fields are not present is excel file" & vbCrLf
                        ErrorLog += AgL.XNull(DtSaleInvoice_DataFields.Rows(I)("Field Name")).ToString() & ", "
                    Else
                        ErrorLog += AgL.XNull(DtSaleInvoice_DataFields.Rows(I)("Field Name")).ToString() & ", "
                    End If
                End If

                'For J = 0 To DtSaleInvoice_DataFields.Rows.Count - 1
                '    If AgL.XNull(DtSaleInvoice.Rows(I)(DtSaleInvoice_DataFields.Rows(J)("Field Name"))) = "" Then
                '        ErrorLog += DtSaleInvoice_DataFields.Rows(J)("Field Name") + " is blank at row no." + (I + 2).ToString() & vbCrLf
                '    End If
                'Next
            End If
        Next

        'Dim DtItem = DtSaleInvoiceDetail.DefaultView.ToTable(True, GetFieldAliasName(bImportFor, "Item Name"))
        'For I = 0 To DtItem.Rows.Count - 1
        '    If AgL.XNull(DtItem.Rows(I)(GetFieldAliasName(bImportFor, "Item Name"))) <> "" Then
        '        If AgL.Dman_Execute("SELECT Count(*) From Item where Description = " & AgL.Chk_Text(AgL.XNull(DtItem.Rows(I)(GetFieldAliasName(bImportFor, "Item Name")))) & "", AgL.GCn).ExecuteScalar = 0 Then
        '            If ErrorLog.Contains("These Item Names Are Not Present In Master") = False Then
        '                ErrorLog += vbCrLf & "These Item Names Are Not Present In Master" & vbCrLf
        '                ErrorLog += AgL.XNull(DtItem.Rows(I)(GetFieldAliasName(bImportFor, "Item Name"))) & ", "
        '            Else
        '                ErrorLog += AgL.XNull(DtItem.Rows(I)(GetFieldAliasName(bImportFor, "Item Name"))) & ", "
        '            End If
        '        End If
        '    End If
        'Next

        mQry = " Select Description From Item  "
        Dim DtItemTable As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)
        Dim DtItem = DtSaleInvoiceDetail.DefaultView.ToTable(True, GetFieldAliasName(bImportFor, "Item Name"))
        For I = 0 To DtItem.Rows.Count - 1
            If AgL.XNull(DtItem.Rows(I)(GetFieldAliasName(bImportFor, "Item Name"))) <> "" Then
                Dim DtRowItem As DataRow() = DtItemTable.Select("Description = " + AgL.Chk_Text(AgL.XNull(DtItem.Rows(I)(GetFieldAliasName(bImportFor, "Item Name")))))
                If DtRowItem.Length = 0 Then
                    If ErrorLog.Contains("These Item Names Are Not Present In Master") = False Then
                        ErrorLog += vbCrLf & "These Item Names Are Not Present In Master" & vbCrLf
                        ErrorLog += AgL.XNull(DtItem.Rows(I)(GetFieldAliasName(bImportFor, "Item Name"))) & ", "
                    Else
                        ErrorLog += AgL.XNull(DtItem.Rows(I)(GetFieldAliasName(bImportFor, "Item Name"))) & ", "
                    End If
                End If
            End If
        Next


        Dim DtSalesTaxGroupItem = DtSaleInvoiceDetail.DefaultView.ToTable(True, GetFieldAliasName(bImportFor, "Sales Tax Group Item"))
        For I = 0 To DtSalesTaxGroupItem.Rows.Count - 1
            If AgL.XNull(DtSalesTaxGroupItem.Rows(I)(GetFieldAliasName(bImportFor, "Sales Tax Group Item"))) <> "" Then
                If AgL.Dman_Execute("SELECT Count(*) From PostingGroupSalesTaxItem where Description = '" & AgL.XNull(DtSalesTaxGroupItem.Rows(I)(GetFieldAliasName(bImportFor, "Sales Tax Group Item"))) & "'", AgL.GCn).ExecuteScalar = 0 Then
                    If ErrorLog.Contains("These SalesTaxGroupItems Are Not Present In Master") = False Then
                        ErrorLog += vbCrLf & "These SalesTaxGroupItems Are Not Present In Master" & vbCrLf
                        ErrorLog += AgL.XNull(DtSalesTaxGroupItem.Rows(I)(GetFieldAliasName(bImportFor, "Sales Tax Group Item"))) & ", "
                    Else
                        ErrorLog += AgL.XNull(DtSalesTaxGroupItem.Rows(I)(GetFieldAliasName(bImportFor, "Sales Tax Group Item"))) & ", "
                    End If
                End If
            End If
        Next

        For I = 0 To DtSaleInvoiceDetail_DataFields.Rows.Count - 1
            If AgL.XNull(DtSaleInvoiceDetail_DataFields.Rows(I)("Remark")).ToString().Contains("Mandatory") Then
                If Not DtSaleInvoiceDetail.Columns.Contains(AgL.XNull(DtSaleInvoiceDetail_DataFields.Rows(I)("Field Name")).ToString()) Then
                    If ErrorLog.Contains("These fields are not present is excel file") = False Then
                        ErrorLog += vbCrLf & "These fields are not present is excel file" & vbCrLf
                        ErrorLog += AgL.XNull(DtSaleInvoiceDetail_DataFields.Rows(I)("Field Name")).ToString() & ", "
                    Else
                        ErrorLog += AgL.XNull(DtSaleInvoiceDetail_DataFields.Rows(I)("Field Name")).ToString() & ", "
                    End If
                End If

                'For J = 0 To DtSaleInvoiceDetail_DataFields.Rows.Count - 1
                '    If AgL.XNull(DtSaleInvoiceDetail.Rows(I)(DtSaleInvoiceDetail_DataFields.Rows(J)("Field Name"))) = "" Then
                '        ErrorLog += DtSaleInvoiceDetail_DataFields.Rows(J)("Field Name") + " is blank at row no." + (I + 2).ToString() & vbCrLf
                '    End If
                'Next
            End If
        Next

        If ErrorLog <> "" Then
            If File.Exists(My.Application.Info.DirectoryPath + " \ " + "ErrorLog.txt") Then
                My.Computer.FileSystem.WriteAllText(My.Application.Info.DirectoryPath + "\" + "ErrorLog.txt", ErrorLog, False)
            Else
                File.Create(My.Application.Info.DirectoryPath + " \ " + "ErrorLog.txt")
                My.Computer.FileSystem.WriteAllText(My.Application.Info.DirectoryPath + " \ " + "ErrorLog.txt", ErrorLog, False)
            End If
            System.Diagnostics.Process.Start("notepad.exe", My.Application.Info.DirectoryPath + "\" + "ErrorLog.txt")
            Exit Sub
        End If

        Try
            AgL.ECmd = AgL.GCn.CreateCommand
            AgL.ETrans = AgL.GCn.BeginTransaction(IsolationLevel.ReadCommitted)
            AgL.ECmd.Transaction = AgL.ETrans
            mTrans = "Begin"


            For I = 0 To DtSaleInvoice.Rows.Count - 1
                Dim Tot_Gross_Amount As Double = 0
                Dim Tot_Taxable_Amount As Double = 0
                Dim Tot_Tax1 As Double = 0
                Dim Tot_Tax2 As Double = 0
                Dim Tot_Tax3 As Double = 0
                Dim Tot_Tax4 As Double = 0
                Dim Tot_Tax5 As Double = 0
                Dim Tot_SubTotal1 As Double = 0

                Dim SaleInvoiceTableList(0) As StructSaleInvoice
                Dim SaleInvoiceDimensionTableList(0) As StructSaleInvoiceDimensionDetail
                Dim SaleInvoiceTable As New StructSaleInvoice

                SaleInvoiceTable.DocID = ""
                SaleInvoiceTable.V_Type = AgL.XNull(DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "V_Type")))
                SaleInvoiceTable.V_Prefix = ""
                SaleInvoiceTable.Site_Code = AgL.PubSiteCode
                SaleInvoiceTable.Div_Code = AgL.PubDivCode
                SaleInvoiceTable.V_No = AgL.VNull(DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "V_No")))
                SaleInvoiceTable.V_Date = AgL.XNull(DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "V_Date")))
                SaleInvoiceTable.ManualRefNo = AgL.XNull(DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Invoice No"))).ToString.Trim
                SaleInvoiceTable.SaleToParty = ""
                SaleInvoiceTable.AgentCode = ""
                SaleInvoiceTable.AgentName = AgL.XNull(DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Agent"))).ToString.Trim
                SaleInvoiceTable.SaleToPartyName = AgL.XNull(DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Sale To Party"))).ToString.Trim
                SaleInvoiceTable.BillToPartyCode = ""
                SaleInvoiceTable.BillToPartyName = AgL.XNull(DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Bill To Party"))).ToString.Trim
                SaleInvoiceTable.SaleToPartyAddress = AgL.XNull(DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Sale To Party Address"))).ToString.Trim
                SaleInvoiceTable.SaleToPartyCityCode = AgL.XNull(DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Sale To Party City"))).ToString.Trim

                If DtSaleInvoice.Columns.Contains(GetFieldAliasName(bImportFor, "Sale To Party Mobile")) = True Then
                    SaleInvoiceTable.SaleToPartyMobile = AgL.XNull(DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Sale To Party Mobile"))).ToString.Trim
                End If


                SaleInvoiceTable.SaleToPartySalesTaxNo = AgL.XNull(DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Sale To Party Sales Tax No"))).ToString.Trim
                SaleInvoiceTable.ShipToAddress = ""
                SaleInvoiceTable.RateType = AgL.XNull(DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Rate Type"))).ToString.Trim
                SaleInvoiceTable.SalesTaxGroupParty = AgL.XNull(DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Sales Tax Group Party"))).ToString.Trim
                SaleInvoiceTable.PlaceOfSupply = AgL.XNull(DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Place Of Supply"))).ToString.Trim
                SaleInvoiceTable.StructureCode = ""
                SaleInvoiceTable.CustomFields = ""

                If DtSaleInvoice.Columns.Contains(GetFieldAliasName(bImportFor, "Sale To Party Doc No")) = True Then
                    SaleInvoiceTable.SaleToPartyDocNo = AgL.XNull(DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Sale To Party Doc No"))).ToString.Trim
                End If

                If DtSaleInvoice.Columns.Contains(GetFieldAliasName(bImportFor, "Sale To Party Doc Date")) = True Then
                    SaleInvoiceTable.SaleToPartyDocDate = AgL.XNull(DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Sale To Party Doc Date")))
                End If

                SaleInvoiceTable.ReferenceDocId = ""
                SaleInvoiceTable.Remarks = AgL.XNull(DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Remark")))
                SaleInvoiceTable.TermsAndConditions = AgL.XNull(DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Terms And Conditions")))
                SaleInvoiceTable.PaidAmt = 0
                SaleInvoiceTable.CreditLimit = AgL.VNull(DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Credit Limit")))
                SaleInvoiceTable.CreditDays = AgL.VNull(DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Credit Days")))
                SaleInvoiceTable.Status = "Active"
                SaleInvoiceTable.EntryBy = AgL.PubUserName
                SaleInvoiceTable.EntryDate = AgL.GetDateTime(AgL.GcnRead)
                SaleInvoiceTable.ApproveBy = ""
                SaleInvoiceTable.ApproveDate = ""
                SaleInvoiceTable.MoveToLog = ""
                SaleInvoiceTable.MoveToLogDate = ""
                SaleInvoiceTable.UploadDate = ""

                SaleInvoiceTable.Deduction_Per = AgL.VNull(DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Deduction_Per")))
                SaleInvoiceTable.Deduction = AgL.VNull(DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Deduction")))
                SaleInvoiceTable.Other_Charge_Per = AgL.VNull(DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Other_Charge_Per")))
                SaleInvoiceTable.Other_Charge = AgL.VNull(DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Other_Charge")))
                SaleInvoiceTable.Round_Off = AgL.VNull(DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Round_Off")))
                SaleInvoiceTable.Net_Amount = AgL.VNull(DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Net_Amount")))

                If SaleInvoiceTable.V_Type = "SR" Then SaleInvoiceTable.Deduction = SaleInvoiceTable.Deduction * (-1)
                If SaleInvoiceTable.V_Type = "SR" Then SaleInvoiceTable.Other_Charge = SaleInvoiceTable.Other_Charge * (-1)
                If SaleInvoiceTable.V_Type = "SR" Then SaleInvoiceTable.Round_Off = SaleInvoiceTable.Round_Off * (-1)
                If SaleInvoiceTable.V_Type = "SR" Then SaleInvoiceTable.Net_Amount = SaleInvoiceTable.Net_Amount * (-1)



                Dim DtSaleInvoiceDetail_ForHeader As New DataTable
                For M = 0 To DtSaleInvoiceDetail.Columns.Count - 1
                    Dim DColumn As New DataColumn
                    DColumn.ColumnName = DtSaleInvoiceDetail.Columns(M).ColumnName
                    DtSaleInvoiceDetail_ForHeader.Columns.Add(DColumn)
                Next

                Dim DtRowSaleInvoiceDetail_ForHeader As DataRow() = DtSaleInvoiceDetail.Select("[" & GetFieldAliasName(bImportFor, "V_Type") & "] = " + AgL.Chk_Text(AgL.XNull(DtSaleInvoice.Rows(I)("V_Type"))) + " And [" & GetFieldAliasName(bImportFor, "Invoice No") & "] = " + AgL.Chk_Text(AgL.XNull(DtSaleInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Invoice No")))))
                If DtRowSaleInvoiceDetail_ForHeader.Length > 0 Then
                    For M = 0 To DtRowSaleInvoiceDetail_ForHeader.Length - 1
                        DtSaleInvoiceDetail_ForHeader.Rows.Add()
                        For N = 0 To DtSaleInvoiceDetail_ForHeader.Columns.Count - 1
                            DtSaleInvoiceDetail_ForHeader.Rows(M)(N) = DtRowSaleInvoiceDetail_ForHeader(M)(N)
                        Next
                    Next
                End If

                For J = 0 To DtSaleInvoiceDetail_ForHeader.Rows.Count - 1
                    SaleInvoiceTable.Line_Sr = AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "TSr"))).ToString.Trim
                    SaleInvoiceTable.Line_ItemName = AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Item Name"))).ToString.Trim
                    SaleInvoiceTable.Line_Specification = AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Specification"))).ToString.Trim
                    SaleInvoiceTable.Line_SalesTaxGroupItem = AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Sales Tax Group Item"))).ToString.Trim
                    If SaleInvoiceTable.V_Type = "SR" Then
                        SaleInvoiceTable.Line_ReferenceNo = "1"
                    Else
                        SaleInvoiceTable.Line_ReferenceNo = ""
                    End If

                    SaleInvoiceTable.Line_DocQty = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Qty")))

                    SaleInvoiceTable.Line_FreeQty = 0
                    SaleInvoiceTable.Line_Qty = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Qty")))

                    SaleInvoiceTable.Line_Unit = AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Unit"))).ToString.Trim
                    SaleInvoiceTable.Line_Pcs = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Pcs")))
                    If SaleInvoiceTable.V_Type = "SR" Then SaleInvoiceTable.Line_Pcs = SaleInvoiceTable.Line_Pcs * (-1)

                    If DtSaleInvoiceDetail_ForHeader.Columns.Contains(GetFieldAliasName(bImportFor, "Unit Multiplier")) = True Then
                        SaleInvoiceTable.Line_UnitMultiplier = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Unit Multiplier")))
                    Else
                        SaleInvoiceTable.Line_UnitMultiplier = 1
                    End If

                    If DtSaleInvoiceDetail_ForHeader.Columns.Contains(GetFieldAliasName(bImportFor, "Unit Multiplier")) = True Then
                        SaleInvoiceTable.Line_DealUnit = AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Deal Unit"))).ToString.Trim
                    Else
                        SaleInvoiceTable.Line_DealUnit = SaleInvoiceTable.Line_Unit
                    End If

                    If DtSaleInvoiceDetail_ForHeader.Columns.Contains(GetFieldAliasName(bImportFor, "Deal Qty")) = True Then
                        SaleInvoiceTable.Line_DocDealQty = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Deal Qty")))
                    Else
                        SaleInvoiceTable.Line_DocDealQty = SaleInvoiceTable.Line_Qty
                    End If



                    SaleInvoiceTable.Line_Rate = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Rate")))
                    SaleInvoiceTable.Line_DiscountPer = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Discount Per")))
                    SaleInvoiceTable.Line_DiscountAmount = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Discount Amount")))
                    SaleInvoiceTable.Line_AdditionalDiscountPer = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Additional Discount Per")))
                    SaleInvoiceTable.Line_AdditionalDiscountAmount = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Additional Discount Amount")))
                    SaleInvoiceTable.Line_Amount = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Amount")))
                    SaleInvoiceTable.Line_Remark = AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Remark")))
                    SaleInvoiceTable.Line_BaleNo = AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Bale No")))
                    SaleInvoiceTable.Line_LotNo = AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Lot No")))
                    SaleInvoiceTable.Line_ReferenceDocId = ""
                    SaleInvoiceTable.Line_ReferenceDocIdSr = ""
                    SaleInvoiceTable.Line_SaleInvoice = ""
                    SaleInvoiceTable.Line_SaleInvoiceSr = ""
                    SaleInvoiceTable.Line_V_Nature = ""
                    SaleInvoiceTable.Line_GrossWeight = 0
                    SaleInvoiceTable.Line_NetWeight = 0
                    SaleInvoiceTable.Line_Gross_Amount = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Gross_Amount")))
                    SaleInvoiceTable.Line_Taxable_Amount = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Taxable_Amount")))
                    SaleInvoiceTable.Line_Tax1_Per = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Tax1_Per")))
                    SaleInvoiceTable.Line_Tax1 = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Tax1")))
                    SaleInvoiceTable.Line_Tax2_Per = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Tax2_Per")))
                    SaleInvoiceTable.Line_Tax2 = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Tax2")))
                    SaleInvoiceTable.Line_Tax3_Per = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Tax3_Per")))
                    SaleInvoiceTable.Line_Tax3 = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Tax3")))
                    SaleInvoiceTable.Line_Tax4_Per = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Tax4_Per")))
                    SaleInvoiceTable.Line_Tax4 = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Tax4")))
                    SaleInvoiceTable.Line_Tax5_Per = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Tax5_Per")))
                    SaleInvoiceTable.Line_Tax5 = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Tax5")))
                    SaleInvoiceTable.Line_SubTotal1 = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "SubTotal1")))


                    'For Header Values
                    Tot_Gross_Amount += SaleInvoiceTable.Line_Gross_Amount
                    Tot_Taxable_Amount += SaleInvoiceTable.Line_Taxable_Amount
                    Tot_Tax1 += SaleInvoiceTable.Line_Tax1
                    Tot_Tax2 += SaleInvoiceTable.Line_Tax2
                    Tot_Tax3 += SaleInvoiceTable.Line_Tax3
                    Tot_Tax4 += SaleInvoiceTable.Line_Tax4
                    Tot_Tax5 += SaleInvoiceTable.Line_Tax5
                    Tot_SubTotal1 += SaleInvoiceTable.Line_SubTotal1

                    If SaleInvoiceTable.V_Type = "SR" Then SaleInvoiceTable.Line_DocQty = SaleInvoiceTable.Line_DocQty * (-1)
                    If SaleInvoiceTable.V_Type = "SR" Then SaleInvoiceTable.Line_Qty = SaleInvoiceTable.Line_Qty * (-1)
                    If SaleInvoiceTable.V_Type = "SR" Then SaleInvoiceTable.Line_DocDealQty = SaleInvoiceTable.Line_DocDealQty * (-1)
                    If SaleInvoiceTable.V_Type = "SR" Then SaleInvoiceTable.Line_Amount = SaleInvoiceTable.Line_Amount * (-1)

                    If SaleInvoiceTable.V_Type = "SR" Then SaleInvoiceTable.Line_Gross_Amount = SaleInvoiceTable.Line_Gross_Amount * (-1)
                    If SaleInvoiceTable.V_Type = "SR" Then SaleInvoiceTable.Line_Taxable_Amount = SaleInvoiceTable.Line_Taxable_Amount * (-1)
                    If SaleInvoiceTable.V_Type = "SR" Then SaleInvoiceTable.Line_Tax1 = SaleInvoiceTable.Line_Tax1 * (-1)
                    If SaleInvoiceTable.V_Type = "SR" Then SaleInvoiceTable.Line_Tax2 = SaleInvoiceTable.Line_Tax2 * (-1)
                    If SaleInvoiceTable.V_Type = "SR" Then SaleInvoiceTable.Line_Tax3 = SaleInvoiceTable.Line_Tax3 * (-1)
                    If SaleInvoiceTable.V_Type = "SR" Then SaleInvoiceTable.Line_Tax4 = SaleInvoiceTable.Line_Tax4 * (-1)
                    If SaleInvoiceTable.V_Type = "SR" Then SaleInvoiceTable.Line_Tax5 = SaleInvoiceTable.Line_Tax5 * (-1)
                    If SaleInvoiceTable.V_Type = "SR" Then SaleInvoiceTable.Line_SubTotal1 = SaleInvoiceTable.Line_SubTotal1 * (-1)


                    Dim DtSaleInvoiceDimensionDetail_ForHeader As New DataTable
                    For M = 0 To DtSaleInvoiceDimensionDetail.Columns.Count - 1
                        Dim DColumn As New DataColumn
                        DColumn.ColumnName = DtSaleInvoiceDimensionDetail.Columns(M).ColumnName
                        DtSaleInvoiceDimensionDetail_ForHeader.Columns.Add(DColumn)
                    Next

                    Dim DtRowSaleInvoiceDimensionDetail_ForHeader As DataRow() = DtSaleInvoiceDimensionDetail.Select("[" & GetFieldAliasName(bImportFor, "V_Type") & "] = " + AgL.Chk_Text(AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "V_Type")))) + " And [" & GetFieldAliasName(bImportFor, "Invoice No") & "] = " + AgL.Chk_Text(AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Invoice No")))) + " And [" & GetFieldAliasName(bImportFor, "TSr") & "] = " + AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "TSr"))), "TSr")
                    If DtRowSaleInvoiceDimensionDetail_ForHeader.Length > 0 Then
                        For M = 0 To DtRowSaleInvoiceDimensionDetail_ForHeader.Length - 1
                            DtSaleInvoiceDimensionDetail_ForHeader.Rows.Add()
                            For N = 0 To DtSaleInvoiceDimensionDetail_ForHeader.Columns.Count - 1
                                DtSaleInvoiceDimensionDetail_ForHeader.Rows(M)(N) = DtRowSaleInvoiceDimensionDetail_ForHeader(M)(N)
                            Next
                        Next
                    End If




                    For K = 0 To DtSaleInvoiceDimensionDetail_ForHeader.Rows.Count - 1
                        Dim SaleInvoiceDimensionTable As New StructSaleInvoiceDimensionDetail

                        SaleInvoiceDimensionTable.TSr = AgL.VNull(DtSaleInvoiceDimensionDetail_ForHeader.Rows(K)(GetFieldAliasName(bImportFor, "TSr")))
                        SaleInvoiceDimensionTable.Sr = AgL.VNull(DtSaleInvoiceDimensionDetail_ForHeader.Rows(K)(GetFieldAliasName(bImportFor, "Sr")))
                        SaleInvoiceDimensionTable.Specification = AgL.XNull(DtSaleInvoiceDimensionDetail_ForHeader.Rows(K)(GetFieldAliasName(bImportFor, "Specification")))
                        SaleInvoiceDimensionTable.Pcs = AgL.VNull(DtSaleInvoiceDimensionDetail_ForHeader.Rows(K)(GetFieldAliasName(bImportFor, "Pcs")))
                        SaleInvoiceDimensionTable.Qty = AgL.VNull(DtSaleInvoiceDimensionDetail_ForHeader.Rows(K)(GetFieldAliasName(bImportFor, "Qty")))
                        SaleInvoiceDimensionTable.TotalQty = AgL.VNull(DtSaleInvoiceDimensionDetail_ForHeader.Rows(K)(GetFieldAliasName(bImportFor, "TotalQty")))

                        SaleInvoiceDimensionTableList(UBound(SaleInvoiceDimensionTableList)) = SaleInvoiceDimensionTable
                        ReDim Preserve SaleInvoiceDimensionTableList(UBound(SaleInvoiceDimensionTableList) + 1)
                    Next

                    SaleInvoiceTableList(UBound(SaleInvoiceTableList)) = SaleInvoiceTable
                    ReDim Preserve SaleInvoiceTableList(UBound(SaleInvoiceTableList) + 1)
                Next


                SaleInvoiceTableList(0).Gross_Amount = Tot_Gross_Amount
                SaleInvoiceTableList(0).Taxable_Amount = Tot_Taxable_Amount
                SaleInvoiceTableList(0).Tax1 = Tot_Tax1
                SaleInvoiceTableList(0).Tax2 = Tot_Tax2
                SaleInvoiceTableList(0).Tax3 = Tot_Tax3
                SaleInvoiceTableList(0).Tax4 = Tot_Tax4
                SaleInvoiceTableList(0).Tax5 = Tot_Tax5
                SaleInvoiceTableList(0).SubTotal1 = Tot_SubTotal1
                SaleInvoiceTableList(0).Other_Charge = 0
                SaleInvoiceTableList(0).Deduction = 0
                SaleInvoiceTableList(0).Round_Off = Math.Round(Math.Round(SaleInvoiceTableList(0).SubTotal1) - SaleInvoiceTableList(0).SubTotal1, 2)
                SaleInvoiceTableList(0).Net_Amount = Math.Round(SaleInvoiceTableList(0).SubTotal1)


                Dim Tot_RoundOff As Double = 0
                Dim Tot_NetAmount As Double = 0
                For J = 0 To SaleInvoiceTableList.Length - 1
                    SaleInvoiceTableList(J).Line_Round_Off = Math.Round(SaleInvoiceTableList(0).Round_Off * SaleInvoiceTableList(J).Line_Gross_Amount / SaleInvoiceTableList(0).Gross_Amount, 2)
                    SaleInvoiceTableList(J).Line_Net_Amount = Math.Round(SaleInvoiceTableList(0).Net_Amount * SaleInvoiceTableList(J).Line_Gross_Amount / SaleInvoiceTableList(0).Gross_Amount, 2)
                    Tot_RoundOff += SaleInvoiceTableList(J).Line_Round_Off
                    Tot_NetAmount += SaleInvoiceTableList(J).Line_Net_Amount
                Next

                Tot_RoundOff = Math.Round(Tot_RoundOff, 2)

                If Tot_RoundOff <> SaleInvoiceTableList(0).Round_Off Then
                    SaleInvoiceTableList(0).Line_Round_Off = SaleInvoiceTableList(0).Line_Round_Off + (SaleInvoiceTableList(0).Round_Off - Tot_RoundOff)
                End If

                If Tot_NetAmount <> SaleInvoiceTableList(0).Net_Amount Then
                    SaleInvoiceTableList(0).Line_Net_Amount = SaleInvoiceTableList(0).Line_Net_Amount + (SaleInvoiceTableList(0).Net_Amount - Tot_NetAmount)
                End If


                InsertSaleInvoice(SaleInvoiceTableList, SaleInvoiceDimensionTableList)
            Next

            AgL.ETrans.Commit()
            mTrans = "Commit"

            mFlag_Import = False
        Catch ex As Exception
            AgL.ETrans.Rollback()
            MsgBox(ex.Message)
            mFlag_Import = False
        End Try
        If StrErrLog <> "" Then MsgBox(StrErrLog)
    End Sub

    Private Sub MnuImport_Click(sender As Object, e As EventArgs) Handles MnuImportFromExcel.Click, MnuImportFromDos.Click, MnuImportFromTally.Click, MnuEditSave.Click,
            MnuGenerateEWayBill.Click, MnuGenerateEBill.Click, MnuReconcileBill.Click, MnuEMail.Click, MnuSendSms.Click, MnuWhatsappDocument.Click, MnuReferenceEntries.Click, MnuReport.Click, MnuHistory.Click, MnuPrintBulk.Click, MnuCancelEntry.Click, MnuShowLedgerPosting.Click
        Select Case sender.name
            Case MnuImportFromExcel.Name
                FImportFromExcel(ImportFor.Excel)

            Case MnuImportFromDos.Name
                FImportFromExcel(ImportFor.Dos)

            Case MnuImportFromTally.Name
                FImportFromTally()

            Case MnuEditSave.Name
                FEditSaveAllEntries()

            Case MnuReferenceEntries.Name
                FShowRefrentialEntries(mSearchCode)

            Case MnuGenerateEWayBill.Name
                'FCreateJSONFile()
                Dim StrSenderText As String = "EWay Bill Generation"
                GridReportFrm = New AgLibrary.FrmRepDisplay(StrSenderText, AgL)
                GridReportFrm.Filter_IniGrid()
                Dim CRep As ClsReports = New ClsReports(GridReportFrm)
                CRep.GRepFormName = Replace(Replace(Replace(Replace(StrSenderText, "&", ""), " ", ""), "(", ""), ")", "")
                CRep.Ini_Grid()
                ClsMain.FAdjustBackgroudMaximizedWindow(Me.MdiParent)
                GridReportFrm.MdiParent = Me.MdiParent
                GridReportFrm.Show()
                CRep.ProcEWayBillGeneration(,, mSearchCode)

            Case MnuHistory.Name
                ClsMain.FShowHistory(mSearchCode, Me)

            Case MnuReconcileBill.Name
                FReconcileBill()

            Case MnuEMail.Name
                FGetPrint(mSearchCode, ClsMain.PrintFor.EMail)

            Case MnuSendSms.Name
                FSendSms(True)

            Case MnuWhatsappDocument.Name
                If AgL.StrCmp(AgL.PubUserName, "Super") Then
                    FGetPrint(mSearchCode, ClsMain.PrintFor.Whatsapp)
                Else
                    MsgBox("This is a paid service. Contact to software vendor.", MsgBoxStyle.Information)
                End If

            Case MnuReport.Name
                Dim StrSenderText As String = "Sale Order Report"
                GridReportFrm = New AgLibrary.FrmRepDisplay(StrSenderText, AgL)
                GridReportFrm.Filter_IniGrid()
                Dim CRep As ClsReports = New ClsReports(GridReportFrm)
                CRep.GRepFormName = Replace(Replace(Replace(Replace(StrSenderText, "&", ""), " ", ""), "(", ""), ")", "")
                CRep.Ini_Grid()
                GridReportFrm.FilterGrid.Item(AgLibrary.FrmRepDisplay.GFilter, 0).Value = "Voucher Type Wise Summary"
                ClsMain.FAdjustBackgroudMaximizedWindow(Me.MdiParent)
                GridReportFrm.MdiParent = Me.MdiParent
                GridReportFrm.Show()
                CRep.ProcSaleReport()

            Case MnuPrintBulk.Name
                FPrintBulk(mSearchCode)

            Case MnuCancelEntry.Name
                Dim FrmObj As New FrmSaleInvoiceCancellation()
                FrmObj.SearchCode = mSearchCode
                FrmObj.IniGrid(mSearchCode)
                FrmObj.StartPosition = FormStartPosition.CenterParent
                FrmObj.ShowDialog()

            Case MnuGenerateEBill.Name
                Dim StrSenderText As String = Me.Text
                GridReportFrm = New AgLibrary.FrmRepDisplay(StrSenderText, AgL)
                GridReportFrm.Filter_IniGrid()

                Dim CRep As ClsGenerateEInvoice_URL = New ClsGenerateEInvoice_URL(GridReportFrm, mSearchCode)
                CRep.GRepFormName = Replace(Replace(Replace(Replace(StrSenderText, "&", ""), " ", ""), "(", ""), ")", "")
                CRep.Ini_Grid()
                ClsMain.FAdjustBackgroudMaximizedWindow(Me.MdiParent)
                GridReportFrm.MdiParent = Me.MdiParent
                GridReportFrm.Show()
                CRep.ProcGenerateEInvoice()

            Case MnuShowLedgerPosting.Name
                FShowLedgerPosting()
        End Select
    End Sub

    Public Sub FImportFromTally()
        Dim mTrans As String = ""
        Dim ErrorLog As String = ""
        Dim DtTemp As New DataTable
        Dim I As Integer = 0, J As Integer = 0
        Dim bHeadSubCodeName As String = ""
        Dim FileNameWithPath As String = ""


        OFDMain.Filter = "*.xml|*.XML"
        If OFDMain.ShowDialog() = Windows.Forms.DialogResult.Cancel Then Exit Sub
        FileNameWithPath = OFDMain.FileName

        'Dim FileNameWithPath As String = My.Application.Info.DirectoryPath & "\TallyXML\PaymentRegister.xml"
        'Dim FileNameWithPath As String = My.Application.Info.DirectoryPath & "\TallyXML\ReceiptRegister.xml"

        Dim doc As New XmlDocument()
        doc.Load(FileNameWithPath)

        Try
            AgL.ECmd = AgL.GCn.CreateCommand
            AgL.ETrans = AgL.GCn.BeginTransaction(IsolationLevel.ReadCommitted)
            AgL.ECmd.Transaction = AgL.ETrans
            mTrans = "Begin"

            If AgL.Dman_Execute("Select Count(*) From Structure  Where Code = 'GstSaleTally'", AgL.GCn).ExecuteScalar() = 0 Then
                mQry = "INSERT INTO Structure (Code, Description, HeaderTable, LineTable, Div_Code, Site_Code, PreparedBy, U_EntDt,U_AE, ModifiedBy,Edit_Date, UploadDate)
                    Select 'GstSaleTally' Code, Description, HeaderTable, LineTable, Div_Code, Site_Code, PreparedBy, U_EntDt,U_AE, ModifiedBy,Edit_Date, UploadDate
                    From Structure Where Code = 'GstSale'"
                AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)

                mQry = "INSERT INTO StructureDetail (Code, Sr, WEF, Charges, Charge_Type, Value_Type, Value, Calculation, BaseColumn, PostAc, PostAcFromColumn, 
                    DrCr, LineItem, AffectCost, InactiveDate, Percentage, Amount, VisibleInMaster, VisibleInMasterLine, VisibleInTransactionLine, 
                    VisibleInTransactionFooter, HeaderPerField, HeaderAmtField, LinePerField, LineAmtField, GridDisplayIndex, UploadDate, Active)
                    Select 'GstSaleTally' As Code, Sr, WEF, Charges, Charge_Type, 
                    Case When Charges = 'RO' Then 'FixedValue Changeable' Else Value_Type End Value_Type, Value, 
                    Case When Charges = 'RO' Then Null Else Calculation End Calculation, 
                    BaseColumn, PostAc, PostAcFromColumn, 
                    DrCr, LineItem, AffectCost, InactiveDate, Percentage, Amount, VisibleInMaster, VisibleInMasterLine, VisibleInTransactionLine, 
                    VisibleInTransactionFooter, HeaderPerField, HeaderAmtField, LinePerField, LineAmtField, GridDisplayIndex, UploadDate, Active
                    From StructureDetail Where Code = 'GstSale'"
                AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)

                mQry = "UPDATE Voucher_Type Set Structure = 'GstSaleTally' Where V_Type = 'SI'"
                AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)
            End If


            Dim SaleInvoiceElementList As XmlNodeList = doc.GetElementsByTagName("VOUCHER")

            For I = 0 To SaleInvoiceElementList.Count - 1
                Dim SaleInvoiceTableList(0) As StructSaleInvoice
                If SaleInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST") IsNot Nothing Then
                    For J = 0 To SaleInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Count - 1
                        Dim SaleInvoiceTable As New StructSaleInvoice

                        SaleInvoiceTable.DocID = ""

                        If SaleInvoiceElementList(I).SelectSingleNode("VOUCHERTYPENAME") IsNot Nothing Then
                            If SaleInvoiceElementList(I).SelectSingleNode("VOUCHERTYPENAME").ChildNodes.Count > 0 Then
                                If SaleInvoiceElementList(I).SelectSingleNode("VOUCHERTYPENAME").ChildNodes(0).Value = "TAX INVOICE(CREDIT)" Then
                                    SaleInvoiceTable.V_Type = "SI"
                                ElseIf SaleInvoiceElementList(I).SelectSingleNode("VOUCHERTYPENAME").ChildNodes(0).Value = "TAX INVOICE(CASH)" Then
                                    SaleInvoiceTable.V_Type = "SI"
                                ElseIf SaleInvoiceElementList(I).SelectSingleNode("VOUCHERTYPENAME").ChildNodes(0).Value = "Credit Note" Then
                                    SaleInvoiceTable.V_Type = "SR"
                                End If
                            End If
                        End If


                        SaleInvoiceTable.V_Prefix = ""
                        SaleInvoiceTable.Site_Code = AgL.PubSiteCode
                        SaleInvoiceTable.Div_Code = AgL.PubDivCode


                        '''''''''''''''''''''''''''''''''''''''''''''''''



                        ''''''''''''''''''''''''''''''''''''''''''''''''''''''





                        If SaleInvoiceElementList(I).SelectSingleNode("VOUCHERNUMBER") IsNot Nothing Then
                            If SaleInvoiceElementList(I).SelectSingleNode("VOUCHERNUMBER").ChildNodes.Count > 0 Then
                                SaleInvoiceTable.V_No = SaleInvoiceElementList(I).SelectSingleNode("VOUCHERNUMBER").ChildNodes(0).Value.Replace("G", "")
                            End If
                        End If

                        If SaleInvoiceElementList(I).SelectSingleNode("DATE") IsNot Nothing Then
                            If SaleInvoiceElementList(I).SelectSingleNode("DATE").ChildNodes.Count > 0 Then
                                SaleInvoiceTable.V_Date = SaleInvoiceElementList(I).SelectSingleNode("DATE").ChildNodes(0).Value.ToString.Substring(6, 2) + "/" +
                                        SaleInvoiceElementList(I).SelectSingleNode("DATE").ChildNodes(0).Value.ToString.Substring(4, 2) + "/" +
                                        SaleInvoiceElementList(I).SelectSingleNode("DATE").ChildNodes(0).Value.ToString.Substring(0, 4)
                            End If
                        End If


                        Dim mManualrefNoPrefix As String = AgL.Dman_Execute("Select Ref_Prefix From Voucher_Prefix Where V_Type = '" & SaleInvoiceTable.V_Type & "' 
                                And " & AgL.Chk_Date(SaleInvoiceTable.V_Date) & " >= Date_From 
                                And " & AgL.Chk_Date(SaleInvoiceTable.V_Date) & " <= Date_To ", AgL.GCn).ExecuteScalar()
                        SaleInvoiceTable.ManualRefNo = mManualrefNoPrefix + SaleInvoiceTable.V_No.ToString().PadLeft(4).Replace(" ", "0")




                        SaleInvoiceTable.SaleToParty = ""
                        SaleInvoiceTable.AgentCode = ""
                        SaleInvoiceTable.AgentName = ""

                        If SaleInvoiceElementList(I).SelectSingleNode("PARTYLEDGERNAME") IsNot Nothing Then
                            If SaleInvoiceElementList(I).SelectSingleNode("PARTYLEDGERNAME").ChildNodes.Count > 0 Then
                                SaleInvoiceTable.SaleToPartyName = SaleInvoiceElementList(I).SelectSingleNode("PARTYLEDGERNAME").ChildNodes(0).Value
                            End If
                        End If

                        SaleInvoiceTable.BillToPartyCode = ""
                        SaleInvoiceTable.BillToPartyName = SaleInvoiceTable.SaleToPartyName

                        SaleInvoiceTable.SaleToPartyAddress = ""
                        SaleInvoiceTable.SaleToPartyCityCode = ""
                        SaleInvoiceTable.SaleToPartyMobile = ""
                        SaleInvoiceTable.SaleToPartySalesTaxNo = ""
                        SaleInvoiceTable.ShipToAddress = ""
                        SaleInvoiceTable.RateType = ""

                        If SaleInvoiceElementList(I).SelectSingleNode("GSTREGISTRATIONTYPE") IsNot Nothing Then
                            If SaleInvoiceElementList(I).SelectSingleNode("GSTREGISTRATIONTYPE").ChildNodes.Count > 0 Then
                                SaleInvoiceTable.SalesTaxGroupParty = SaleInvoiceElementList(I).SelectSingleNode("GSTREGISTRATIONTYPE").ChildNodes(0).Value
                            End If
                        End If


                        SaleInvoiceTable.PlaceOfSupply = ""
                        SaleInvoiceTable.StructureCode = ""
                        SaleInvoiceTable.CustomFields = ""
                        SaleInvoiceTable.SaleToPartyDocNo = ""
                        SaleInvoiceTable.SaleToPartyDocDate = ""
                        SaleInvoiceTable.ReferenceDocId = ""
                        SaleInvoiceTable.Remarks = "Bill No : " + SaleInvoiceElementList(I).SelectSingleNode("VOUCHERNUMBER").ChildNodes(0).Value
                        SaleInvoiceTable.TermsAndConditions = ""

                        SaleInvoiceTable.PaidAmt = 0
                        SaleInvoiceTable.CreditLimit = 0
                        SaleInvoiceTable.CreditDays = 0
                        SaleInvoiceTable.Status = "Active"
                        SaleInvoiceTable.EntryBy = AgL.PubUserName
                        SaleInvoiceTable.EntryDate = AgL.GetDateTime(AgL.GcnRead)
                        SaleInvoiceTable.ApproveBy = ""
                        SaleInvoiceTable.ApproveDate = ""
                        SaleInvoiceTable.MoveToLog = ""
                        SaleInvoiceTable.MoveToLogDate = ""
                        SaleInvoiceTable.UploadDate = ""
                        SaleInvoiceTable.Line_Sr = J + 1



                        If SaleInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("STOCKITEMNAME") IsNot Nothing Then
                            If SaleInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("STOCKITEMNAME").ChildNodes.Count > 0 Then
                                SaleInvoiceTable.Line_ItemName = SaleInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("STOCKITEMNAME").ChildNodes(0).Value
                            End If
                        End If

                        SaleInvoiceTable.Line_Specification = ""
                        SaleInvoiceTable.Line_SalesTaxGroupItem = ""

                        If SaleInvoiceElementList(I).SelectSingleNode("REFERENCE") IsNot Nothing Then
                            If SaleInvoiceElementList(I).SelectSingleNode("REFERENCE").ChildNodes.Count > 0 Then
                                SaleInvoiceTable.Line_ReferenceNo = SaleInvoiceElementList(I).SelectSingleNode("REFERENCE").ChildNodes(0).Value
                            End If
                        End If


                        If SaleInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("ACTUALQTY") IsNot Nothing Then
                            If SaleInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("ACTUALQTY").ChildNodes.Count > 0 Then
                                SaleInvoiceTable.Line_DocQty = SaleInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("ACTUALQTY").ChildNodes(0).Value.ToString()
                            End If
                        End If

                        SaleInvoiceTable.Line_FreeQty = 0

                        If SaleInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("BILLEDQTY") IsNot Nothing Then
                            If SaleInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("BILLEDQTY").ChildNodes.Count > 0 Then
                                SaleInvoiceTable.Line_Qty = SaleInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("BILLEDQTY").ChildNodes(0).Value.ToString()


                                Dim bUnitName As String = SaleInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("BILLEDQTY").ChildNodes(0).Value.ToString()
                                If bUnitName.Contains("MTR") Then
                                    SaleInvoiceTable.Line_Unit = "Meter"
                                ElseIf bUnitName.Contains("PCS") Then
                                    SaleInvoiceTable.Line_Unit = "Pcs"
                                End If
                            End If
                        End If



                        If SaleInvoiceTable.Line_Unit = "" Or SaleInvoiceTable.Line_Unit Is Nothing Then
                            SaleInvoiceTable.Line_Unit = "Pcs"
                        End If




                        SaleInvoiceTable.Line_Pcs = SaleInvoiceTable.Line_DocQty
                        SaleInvoiceTable.Line_UnitMultiplier = 1
                        SaleInvoiceTable.Line_DealUnit = ""
                        SaleInvoiceTable.Line_DocDealQty = SaleInvoiceTable.Line_DocQty

                        If SaleInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("RATE") IsNot Nothing Then
                            If SaleInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("RATE").ChildNodes.Count > 0 Then
                                SaleInvoiceTable.Line_Rate = SaleInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("RATE").ChildNodes(0).Value
                            End If
                        End If



                        SaleInvoiceTable.Line_DiscountPer = 0
                        SaleInvoiceTable.Line_DiscountAmount = 0
                        SaleInvoiceTable.Line_AdditionalDiscountPer = 0
                        SaleInvoiceTable.Line_AdditionalDiscountAmount = 0

                        If SaleInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("AMOUNT") IsNot Nothing Then
                            If SaleInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("AMOUNT").ChildNodes.Count > 0 Then
                                SaleInvoiceTable.Line_Amount = SaleInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("AMOUNT").ChildNodes(0).Value
                            End If
                        End If

                        If Val(SaleInvoiceTable.Line_Qty) = 0 And Val(SaleInvoiceTable.Line_Rate) = 0 And Val(SaleInvoiceTable.Line_Amount) <> 0 Then
                            SaleInvoiceTable.Line_Qty = 1
                            SaleInvoiceTable.Line_Rate = SaleInvoiceTable.Line_Amount
                        End If

                        If SaleInvoiceTable.Line_DocQty Is Nothing Or Val(SaleInvoiceTable.Line_DocQty) = 0 Then
                            SaleInvoiceTable.Line_DocQty = SaleInvoiceTable.Line_Qty
                        End If

                        If Math.Abs(Math.Round((Math.Abs(Val(SaleInvoiceTable.Line_Amount)) / Val(SaleInvoiceTable.Line_Qty)) - Val(SaleInvoiceTable.Line_Rate), 0)) > 1 Then
                            SaleInvoiceTable.Line_Rate = Val(SaleInvoiceTable.Line_Amount) / Val(SaleInvoiceTable.Line_Qty)
                        End If

                        SaleInvoiceTable.Line_Remark = ""
                        SaleInvoiceTable.Line_BaleNo = ""
                        SaleInvoiceTable.Line_LotNo = ""
                        SaleInvoiceTable.Line_ReferenceDocId = ""
                        SaleInvoiceTable.Line_ReferenceDocIdSr = ""
                        SaleInvoiceTable.Line_SaleInvoice = ""
                        SaleInvoiceTable.Line_SaleInvoiceSr = ""
                        SaleInvoiceTable.Line_V_Nature = ""
                        SaleInvoiceTable.Line_GrossWeight = 0
                        SaleInvoiceTable.Line_NetWeight = 0



                        'SaleInvoiceTable.Line_Tax1_Per = 0
                        'SaleInvoiceTable.Line_Tax1 = 0

                        'If SaleInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("ACCOUNTINGALLOCATIONS.LIST") IsNot Nothing Then
                        '    If SaleInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("ACCOUNTINGALLOCATIONS.LIST").SelectNodes("RATEDETAILS.LIST") IsNot Nothing Then
                        '        If SaleInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("ACCOUNTINGALLOCATIONS.LIST").SelectNodes("RATEDETAILS.LIST")(1) IsNot Nothing Then
                        '            If SaleInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("ACCOUNTINGALLOCATIONS.LIST").SelectNodes("RATEDETAILS.LIST")(1).SelectSingleNode("GSTRATE") IsNot Nothing Then
                        '                If SaleInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("ACCOUNTINGALLOCATIONS.LIST").SelectNodes("RATEDETAILS.LIST")(1).SelectSingleNode("GSTRATE").ChildNodes.Count > 0 Then
                        '                    SaleInvoiceTable.Line_Tax2_Per = SaleInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("ACCOUNTINGALLOCATIONS.LIST").SelectNodes("RATEDETAILS.LIST")(1).SelectSingleNode("GSTRATE").ChildNodes(0).Value
                        '                End If
                        '            End If
                        '        End If
                        '    End If
                        'End If

                        'If SaleInvoiceTable.Line_Tax2_Per = Nothing Then SaleInvoiceTable.Line_Tax2_Per = 0


                        'SaleInvoiceTable.Line_Tax2 = Math.Round(SaleInvoiceTable.Line_Taxable_Amount * SaleInvoiceTable.Line_Tax2_Per / 100, 2)

                        'If SaleInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("ACCOUNTINGALLOCATIONS.LIST") IsNot Nothing Then
                        '    If SaleInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("ACCOUNTINGALLOCATIONS.LIST").SelectNodes("RATEDETAILS.LIST") IsNot Nothing Then
                        '        If SaleInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("ACCOUNTINGALLOCATIONS.LIST").SelectNodes("RATEDETAILS.LIST")(1) IsNot Nothing Then
                        '            If SaleInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("ACCOUNTINGALLOCATIONS.LIST").SelectNodes("RATEDETAILS.LIST")(1).SelectSingleNode("GSTRATE") IsNot Nothing Then
                        '                If SaleInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("ACCOUNTINGALLOCATIONS.LIST").SelectNodes("RATEDETAILS.LIST")(1).SelectSingleNode("GSTRATE").ChildNodes.Count > 0 Then
                        '                    SaleInvoiceTable.Line_Tax3_Per = SaleInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("ACCOUNTINGALLOCATIONS.LIST").SelectNodes("RATEDETAILS.LIST")(1).SelectSingleNode("GSTRATE").ChildNodes(0).Value
                        '                End If
                        '            End If
                        '        End If
                        '    End If
                        'End If

                        'If SaleInvoiceTable.Line_Tax3_Per = Nothing Then SaleInvoiceTable.Line_Tax3_Per = 0


                        If SaleInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST") IsNot Nothing Then
                            For K As Integer = 0 To SaleInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST").Count
                                If SaleInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K) IsNot Nothing Then
                                    If SaleInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME") IsNot Nothing Then
                                        If SaleInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME").ChildNodes.Count > 0 Then
                                            If SaleInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME").ChildNodes(0).Value.ToString().Contains("IGST") And
                                                    SaleInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME").ChildNodes(0).Value.ToString().Contains("5") Then
                                                SaleInvoiceTable.Line_Tax1_Per = 5
                                            ElseIf SaleInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME").ChildNodes(0).Value.ToString().Contains("CGST") And
                                                    SaleInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME").ChildNodes(0).Value.ToString().Contains("2.5") Then
                                                SaleInvoiceTable.Line_Tax2_Per = 2.5
                                                SaleInvoiceTable.Line_Tax3_Per = 2.5
                                            ElseIf SaleInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME").ChildNodes(0).Value.ToString().Contains("IGST") And
                                                    SaleInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME").ChildNodes(0).Value.ToString().Contains("12") Then
                                                SaleInvoiceTable.Line_Tax1_Per = 12
                                            ElseIf SaleInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME").ChildNodes(0).Value.ToString().Contains("CGST") And
                                                    SaleInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME").ChildNodes(0).Value.ToString().Contains("6") Then
                                                SaleInvoiceTable.Line_Tax2_Per = 6
                                                SaleInvoiceTable.Line_Tax3_Per = 6
                                            ElseIf SaleInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME").ChildNodes(0).Value.ToString().Contains("IGST") And
                                                    SaleInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME").ChildNodes(0).Value.ToString().Contains("18") Then
                                                SaleInvoiceTable.Line_Tax1_Per = 18
                                            ElseIf SaleInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME").ChildNodes(0).Value.ToString().Contains("CGST") And
                                                    SaleInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME").ChildNodes(0).Value.ToString().Contains("9") Then
                                                SaleInvoiceTable.Line_Tax2_Per = 9
                                                SaleInvoiceTable.Line_Tax3_Per = 9
                                            ElseIf SaleInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME").ChildNodes(0).Value.ToString().Contains("IGST") And
                                                    SaleInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME").ChildNodes(0).Value.ToString().Contains("28") Then
                                                SaleInvoiceTable.Line_Tax1_Per = 28
                                            ElseIf SaleInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME").ChildNodes(0).Value.ToString().Contains("CGST") And
                                                    SaleInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME").ChildNodes(0).Value.ToString().Contains("14") Then
                                                SaleInvoiceTable.Line_Tax2_Per = 14
                                                SaleInvoiceTable.Line_Tax3_Per = 14
                                            ElseIf SaleInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME").ChildNodes(0).Value = "CASH DISCOUNT" Then
                                                If J = 0 Then
                                                    SaleInvoiceTable.Line_DiscountAmount = Math.Abs(Convert.ToDouble(SaleInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("AMOUNT").ChildNodes(0).Value))
                                                End If
                                            ElseIf SaleInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME").ChildNodes(0).Value = "ROUND OFF" Then
                                                SaleInvoiceTable.Round_Off = Math.Abs(Convert.ToDouble(SaleInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("AMOUNT").ChildNodes(0).Value))
                                            End If
                                        End If
                                    End If
                                End If
                            Next
                        End If

                        If SaleInvoiceTable.Line_DiscountAmount > 0 Then
                            SaleInvoiceTable.Line_Amount = SaleInvoiceTable.Line_Amount - SaleInvoiceTable.Line_DiscountAmount
                        End If

                        If SaleInvoiceTable.Line_Tax1_Per = 5 Or SaleInvoiceTable.Line_Tax2_Per = 2.5 Then
                            SaleInvoiceTable.Line_SalesTaxGroupItem = "GST 5%"
                        ElseIf SaleInvoiceTable.Line_Tax1_Per = 12 Or SaleInvoiceTable.Line_Tax2_Per = 6 Then
                            SaleInvoiceTable.Line_SalesTaxGroupItem = "GST 12%"
                        ElseIf SaleInvoiceTable.Line_Tax1_Per = 18 Or SaleInvoiceTable.Line_Tax2_Per = 9 Then
                            SaleInvoiceTable.Line_SalesTaxGroupItem = "GST 18%"
                        ElseIf SaleInvoiceTable.Line_Tax1_Per = 28 Or SaleInvoiceTable.Line_Tax2_Per = 14 Then
                            SaleInvoiceTable.Line_SalesTaxGroupItem = "GST 28%"
                        End If


                        If SaleInvoiceTable.Line_Tax1_Per > 0 Then
                            SaleInvoiceTable.PlaceOfSupply = AgLibrary.ClsMain.agConstants.PlaceOfSupplay.OutsideState
                        Else
                            SaleInvoiceTable.PlaceOfSupply = AgLibrary.ClsMain.agConstants.PlaceOfSupplay.WithinState
                        End If

                        'If SaleInvoiceTable.Line_Tax1_Per > 0 Or SaleInvoiceTable.Line_Tax2_Per > 0 Or SaleInvoiceTable.Line_Tax3_Per > 0 Then
                        '    SaleInvoiceTable.SalesTaxGroupParty = "Registered"
                        'Else
                        '    SaleInvoiceTable.SalesTaxGroupParty = "Unregistered"
                        'End If

                        If SaleInvoiceElementList(I).SelectSingleNode("GSTREGISTRATIONTYPE") IsNot Nothing Then
                            If SaleInvoiceElementList(I).SelectSingleNode("GSTREGISTRATIONTYPE").ChildNodes.Count > 0 Then
                                If SaleInvoiceElementList(I).SelectSingleNode("GSTREGISTRATIONTYPE").ChildNodes(0).Value = "Regular" Then
                                    SaleInvoiceTable.SalesTaxGroupParty = "Registered"
                                Else
                                    SaleInvoiceTable.SalesTaxGroupParty = SaleInvoiceElementList(I).SelectSingleNode("GSTREGISTRATIONTYPE").ChildNodes(0).Value
                                End If
                            End If
                        End If

                        'If SaleInvoiceTable.SalesTaxGroupParty = "" Then SaleInvoiceTable.SalesTaxGroupParty = "Unregistered"

                        SaleInvoiceTable.Line_Gross_Amount = SaleInvoiceTable.Line_Amount
                        SaleInvoiceTable.Line_Taxable_Amount = SaleInvoiceTable.Line_Amount

                        SaleInvoiceTable.Line_Tax1 = Math.Round(SaleInvoiceTable.Line_Taxable_Amount * SaleInvoiceTable.Line_Tax1_Per / 100, 2)
                        SaleInvoiceTable.Line_Tax2 = Math.Round(SaleInvoiceTable.Line_Taxable_Amount * SaleInvoiceTable.Line_Tax2_Per / 100, 2)
                        SaleInvoiceTable.Line_Tax3 = Math.Round(SaleInvoiceTable.Line_Taxable_Amount * SaleInvoiceTable.Line_Tax3_Per / 100, 2)

                        SaleInvoiceTable.Line_Tax4_Per = 0
                        SaleInvoiceTable.Line_Tax4 = 0
                        SaleInvoiceTable.Line_Tax5_Per = 0
                        SaleInvoiceTable.Line_Tax5 = 0
                        SaleInvoiceTable.Line_SubTotal1 = SaleInvoiceTable.Line_Taxable_Amount + SaleInvoiceTable.Line_Tax1 + SaleInvoiceTable.Line_Tax2 + SaleInvoiceTable.Line_Tax3 + SaleInvoiceTable.Line_Tax4 + SaleInvoiceTable.Line_Tax5
                        SaleInvoiceTable.Line_Deduction_Per = 0
                        SaleInvoiceTable.Line_Deduction = 0
                        SaleInvoiceTable.Line_Other_Charge_Per = 0
                        SaleInvoiceTable.Line_Other_Charge = 0
                        SaleInvoiceTable.Line_Round_Off = 0
                        SaleInvoiceTable.Line_Net_Amount = SaleInvoiceTable.Line_SubTotal1


                        SaleInvoiceTableList(UBound(SaleInvoiceTableList)) = SaleInvoiceTable
                        ReDim Preserve SaleInvoiceTableList(UBound(SaleInvoiceTableList) + 1)
                    Next




                    For J = 0 To SaleInvoiceTableList.Length - 1
                        SaleInvoiceTableList(0).Gross_Amount += SaleInvoiceTableList(J).Line_Gross_Amount
                        SaleInvoiceTableList(0).Taxable_Amount += SaleInvoiceTableList(J).Line_Taxable_Amount
                        SaleInvoiceTableList(0).Tax1_Per += 0
                        SaleInvoiceTableList(0).Tax1 += SaleInvoiceTableList(J).Line_Tax1
                        SaleInvoiceTableList(0).Tax2_Per += 0
                        SaleInvoiceTableList(0).Tax2 += SaleInvoiceTableList(J).Line_Tax2
                        SaleInvoiceTableList(0).Tax3_Per += 0
                        SaleInvoiceTableList(0).Tax3 += SaleInvoiceTableList(J).Line_Tax3
                        SaleInvoiceTableList(0).Tax4_Per += 0
                        SaleInvoiceTableList(0).Tax4 += SaleInvoiceTableList(J).Line_Tax4
                        SaleInvoiceTableList(0).Tax5_Per += 0
                        SaleInvoiceTableList(0).Tax5 += SaleInvoiceTableList(J).Line_Tax5
                        SaleInvoiceTableList(0).SubTotal1 += SaleInvoiceTableList(J).Line_SubTotal1
                        SaleInvoiceTableList(0).Deduction_Per += 0
                        SaleInvoiceTableList(0).Deduction += SaleInvoiceTableList(J).Line_Deduction
                        SaleInvoiceTableList(0).Other_Charge_Per += 0
                        SaleInvoiceTableList(0).Other_Charge += SaleInvoiceTableList(J).Line_Other_Charge
                        SaleInvoiceTableList(0).Round_Off = 0
                        SaleInvoiceTableList(0).Net_Amount += SaleInvoiceTableList(J).Line_Net_Amount
                    Next

                    SaleInvoiceTableList(0).Deduction = Math.Round(SaleInvoiceTableList(0).Deduction, 2)
                    SaleInvoiceTableList(0).Other_Charge = Math.Round(SaleInvoiceTableList(0).Other_Charge, 2)

                    SaleInvoiceTableList(0).Net_Amount = Math.Round(SaleInvoiceTableList(0).Net_Amount + SaleInvoiceTableList(0).Round_Off, 2)

                    Dim mTallyNetAmount As Double = 0
                    If SaleInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST") IsNot Nothing Then
                        For J = 0 To SaleInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST").Count - 1
                            If SaleInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST").Item(J).SelectSingleNode("LEDGERNAME").ChildNodes(0).Value = SaleInvoiceTableList(0).SaleToPartyName Then
                                mTallyNetAmount = Math.Abs(Convert.ToDouble(SaleInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST").Item(J).SelectSingleNode("AMOUNT").ChildNodes(0).Value))
                            End If
                        Next
                    End If

                    If mTallyNetAmount > 0 And SaleInvoiceTableList(0).V_Type = "SR" Then
                        mTallyNetAmount = -mTallyNetAmount
                    End If

                    If mTallyNetAmount < 0 Then
                        If mTallyNetAmount > SaleInvoiceTableList(0).Net_Amount Then
                            SaleInvoiceTableList(0).Deduction += Math.Round(SaleInvoiceTableList(0).Net_Amount - mTallyNetAmount, 2)
                        ElseIf mTallyNetAmount < SaleInvoiceTableList(0).Net_Amount Then
                            SaleInvoiceTableList(0).Other_Charge += Math.Round(mTallyNetAmount - SaleInvoiceTableList(0).Net_Amount, 2)
                        End If
                    Else
                        If mTallyNetAmount > SaleInvoiceTableList(0).Net_Amount Then
                            SaleInvoiceTableList(0).Other_Charge += Math.Round(mTallyNetAmount - SaleInvoiceTableList(0).Net_Amount, 2)
                        ElseIf mTallyNetAmount < SaleInvoiceTableList(0).Net_Amount Then
                            SaleInvoiceTableList(0).Deduction += Math.Round(SaleInvoiceTableList(0).Net_Amount - mTallyNetAmount, 2)
                        End If
                    End If


                    SaleInvoiceTableList(0).Net_Amount = Math.Round(SaleInvoiceTableList(0).Net_Amount + SaleInvoiceTableList(0).Other_Charge - SaleInvoiceTableList(0).Deduction, 2)

                    InsertSaleInvoice(SaleInvoiceTableList)
                End If
            Next I

            mQry = "UPDATE Voucher_Type Set Structure = 'GstSale' Where V_Type = 'SI'"
            AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)

            AgL.ETrans.Commit()
            mTrans = "Commit"

        Catch ex As Exception
            AgL.ETrans.Rollback()
            MsgBox(ex.Message)
        End Try
    End Sub
    Private Sub FEditSaveAllEntries()
        mFlag_Import = True
        For I As Integer = 0 To DTMaster.Rows.Count - 1
            BMBMaster.Position = I
            'MoveRec()
            Topctrl1.FButtonClick(1)
            Calculation()
            Topctrl1.FButtonClick(13)
        Next
        mFlag_Import = False
    End Sub
    Public Shared Function InsertSaleInvoice(SaleInvoiceTableList As StructSaleInvoice(), Optional SaleInvoiceDimensionTableList As StructSaleInvoiceDimensionDetail() = Nothing, Optional SaleInvoicePaymentTableList As StructSaleInvoicePayment() = Nothing) As String
        Dim mQry As String = ""

        If SaleInvoiceTableList(0).V_Type IsNot Nothing Then
            'SaleInvoiceTableList(0).DocID = AgL.GetDocId(SaleInvoiceTableList(0).V_Type, CStr(SaleInvoiceTableList(0).V_No),
            '                                         CDate(SaleInvoiceTableList(0).V_Date),
            '                                        IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead), SaleInvoiceTableList(0).Div_Code, SaleInvoiceTableList(0).Site_Code)
            SaleInvoiceTableList(0).DocID = AgL.CreateDocId(AgL, "SaleInvoice", SaleInvoiceTableList(0).V_Type, CStr(SaleInvoiceTableList(0).V_No),
                                                     CDate(SaleInvoiceTableList(0).V_Date),
                                                    IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead), SaleInvoiceTableList(0).Div_Code, SaleInvoiceTableList(0).Site_Code)

            SaleInvoiceTableList(0).V_Prefix = AgL.DeCodeDocID(SaleInvoiceTableList(0).DocID, AgLibrary.ClsMain.DocIdPart.VoucherPrefix)
            SaleInvoiceTableList(0).V_No = Val(AgL.DeCodeDocID(SaleInvoiceTableList(0).DocID, AgLibrary.ClsMain.DocIdPart.VoucherNo))

            Dim bNCat As String = AgL.XNull(AgL.Dman_Execute("Select NCat From Voucher_Type Where V_Type = '" & SaleInvoiceTableList(0).V_Type & "'", IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar())

            'If AgL.Dman_Execute("Select Count(*) From SaleInvoice With (NoLock) Where V_Type = '" & SaleInvoiceTableList(0).V_Type & "'
            '            And ManualRefNo = '" & SaleInvoiceTableList(0).ManualRefNo & "'
            '            And Div_Code = '" & SaleInvoiceTableList(0).Div_Code & "'
            '            And Site_Code = '" & SaleInvoiceTableList(0).Site_Code & "'
            '            And V_Prefix = '" & SaleInvoiceTableList(0).V_Prefix & "'
            '                ", IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar() > 0 Or
            '            SaleInvoiceTableList(0).ManualRefNo = "" Then
            '    Dim mManualrefNoPrefix As String = AgL.XNull(AgL.Dman_Execute("Select Ref_Prefix From Voucher_Prefix With (NoLock) Where V_Type = '" & SaleInvoiceTableList(0).V_Type & "' 
            '                    And " & AgL.Chk_Date(SaleInvoiceTableList(0).V_Date) & " >= Date_From 
            '                    And " & AgL.Chk_Date(SaleInvoiceTableList(0).V_Date) & " <= Date_To ", IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar())
            '    SaleInvoiceTableList(0).ManualRefNo = mManualrefNoPrefix + SaleInvoiceTableList(0).V_No.ToString().PadLeft(4).Replace(" ", "0")
            'End If

            If SaleInvoiceTableList(0).ManualRefNo = "" Then
                SaleInvoiceTableList(0).ManualRefNo = AgTemplate.ClsMain.FGetManualRefNo("ManualRefNo", "SaleInvoice",
                                SaleInvoiceTableList(0).V_Type, SaleInvoiceTableList(0).V_Date,
                                SaleInvoiceTableList(0).Div_Code, SaleInvoiceTableList(0).Site_Code,
                                AgTemplate.ClsMain.ManualRefType.Max)
            End If

            If SaleInvoiceTableList(0).SaleToPartyCityCode = "" And SaleInvoiceTableList(0).SaleToPartyCityName <> "" Then
                SaleInvoiceTableList(0).SaleToPartyCityCode = AgL.Dman_Execute("SELECT C.CityCode FROM City C With (NoLock) Where C.CityName =  '" & SaleInvoiceTableList(0).SaleToPartyCityName & "'", IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar()
            End If


            Dim DtSubGroup As DataTable = Nothing
            If SaleInvoiceTableList(0).SaleToParty <> "" Then
                mQry = "SELECT Sg.SubCode As SaleToParty, Name As SaleToPartyName, Address As SaleToPartyAddress, CityCode As SaleToPartyCity, Mobile As SaleToPartyMobile, Sgr.RegistrationNo As SaleToPartySalesTaxNo
                        FROM Subgroup Sg With (NoLock) 
                        left join (Select SubCode, RegistrationNo From SubgroupRegistration Where RegistrationType = 'Sales Tax No') As Sgr On Sg.Subcode = Sgr.Subcode
                        Where Sg.SubCode =  " & AgL.Chk_Text(SaleInvoiceTableList(0).SaleToParty) & ""
                DtSubGroup = AgL.FillData(mQry, IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).Tables(0)

            ElseIf SaleInvoiceTableList(0).SaleToPartyName <> "" Then
                mQry = "SELECT Sg.SubCode As SaleToParty, Name As SaleToPartyName, Address As SaleToPartyAddress, CityCode As SaleToPartyCity, Mobile As SaleToPartyMobile, Sgr.RegistrationNo As SaleToPartySalesTaxNo
                        FROM Subgroup Sg With (NoLock) 
                        left join (Select SubCode, RegistrationNo From SubgroupRegistration Where RegistrationType = 'Sales Tax No') As Sgr On Sg.Subcode = Sgr.Subcode
                        Where Upper(RTrim(LTrim(Sg.Name))) =  " & AgL.Chk_Text(SaleInvoiceTableList(0).SaleToPartyName.ToString().Trim().ToUpper) & ""
                DtSubGroup = AgL.FillData(mQry, IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).Tables(0)
            End If
            If DtSubGroup IsNot Nothing Then
                If (DtSubGroup.Rows.Count > 0) Then
                    SaleInvoiceTableList(0).SaleToParty = AgL.XNull(DtSubGroup.Rows(0)("SaleToParty"))
                    If SaleInvoiceTableList(0).SaleToPartyName = "" Then SaleInvoiceTableList(0).SaleToPartyName = AgL.XNull(DtSubGroup.Rows(0)("SaleToPartyName"))
                    If SaleInvoiceTableList(0).SaleToPartyAddress = "" Then SaleInvoiceTableList(0).SaleToPartyAddress = AgL.XNull(DtSubGroup.Rows(0)("SaleToPartyAddress"))
                    If SaleInvoiceTableList(0).SaleToPartyCityCode = "" Then SaleInvoiceTableList(0).SaleToPartyCityCode = AgL.XNull(DtSubGroup.Rows(0)("SaleToPartyCity"))
                    If SaleInvoiceTableList(0).SaleToPartyMobile = "" Then SaleInvoiceTableList(0).SaleToPartyMobile = AgL.XNull(DtSubGroup.Rows(0)("SaleToPartyMobile"))
                    If SaleInvoiceTableList(0).SaleToPartySalesTaxNo = "" Then SaleInvoiceTableList(0).SaleToPartySalesTaxNo = AgL.XNull(DtSubGroup.Rows(0)("SaleToPartySalesTaxNo"))
                End If
            End If

            If SaleInvoiceTableList(0).SaleToParty <> "" Then
                If AgL.XNull(AgL.Dman_Execute("Select SubGRoupType From SubGroup With (NoLock) Where SubCode = '" & SaleInvoiceTableList(0).SaleToParty & "'", IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar()) = "" Then
                    mQry = "UPDATE SubGroup Set SubGroupType = '" & SubgroupType.Customer & "' Where SubCode = '" & SaleInvoiceTableList(0).SaleToParty & "'"
                    AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)
                End If
            End If

            If SaleInvoiceTableList(0).AgentCode <> "" Then
                If AgL.XNull(AgL.Dman_Execute("Select SubGroupType From SubGroup With (NoLock) Where SubCode = '" & SaleInvoiceTableList(0).AgentCode & "'", IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar()) = "" Then
                    mQry = "UPDATE SubGroup Set SubGroupType = '" & SubgroupType.SalesAgent & "' Where SubCode = '" & SaleInvoiceTableList(0).AgentCode & "'"
                    AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)
                End If
            End If

            If SaleInvoiceTableList(0).BillToPartyCode = "" Then
                SaleInvoiceTableList(0).BillToPartyCode = AgL.Dman_Execute("SELECT Sg.SubCode FROM Subgroup Sg With (NoLock) Where Upper(RTrim(LTrim(Sg.Name))) =  '" & SaleInvoiceTableList(0).BillToPartyName.ToString().Trim().ToUpper & "'", IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar()
            End If

            If SaleInvoiceTableList(0).BillToPartyCode = "" Or SaleInvoiceTableList(0).BillToPartyCode Is Nothing Then
                SaleInvoiceTableList(0).BillToPartyCode = SaleInvoiceTableList(0).SaleToParty
            End If

            If SaleInvoiceTableList(0).AgentCode = "" Then
                SaleInvoiceTableList(0).AgentCode = AgL.Dman_Execute("SELECT Sg.SubCode FROM Subgroup Sg With (NoLock) Where Sg.Name =  '" & SaleInvoiceTableList(0).AgentName & "'", IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar()
            End If

            If SaleInvoiceTableList(0).StructureCode = "" Then
                SaleInvoiceTableList(0).StructureCode = AgL.Dman_Execute("Select IfNull(Max(Structure),'') From Voucher_Type With (NoLock) Where V_Type = '" & SaleInvoiceTableList(0).V_Type & "'", IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar()
            End If

            If SaleInvoiceTableList(0).SaleToPartyMobile.Length > 10 Then
                SaleInvoiceTableList(0).SaleToPartyMobile = SaleInvoiceTableList(0).SaleToPartyMobile.Substring(0, 9)
            End If

            If SaleInvoiceTableList(0).SaleToPartyAddress.Length > 100 Then
                SaleInvoiceTableList(0).SaleToPartyAddress = SaleInvoiceTableList(0).SaleToPartyAddress.Substring(0, 99)
            End If

            If SaleInvoiceTableList(0).SalesTaxGroupParty Is Nothing Or SaleInvoiceTableList(0).SalesTaxGroupParty = "" Then
                SaleInvoiceTableList(0).SalesTaxGroupParty = AgL.Dman_Execute("Select IfNull(SalesTaxPostingGroup,'') From Subgroup With (NoLock) Where SubCode = '" & SaleInvoiceTableList(0).BillToPartyCode & "'", IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar()
            End If

            If SaleInvoiceTableList(0).SalesTaxGroupParty Is Nothing Or SaleInvoiceTableList(0).SalesTaxGroupParty = "" Then
                SaleInvoiceTableList(0).SalesTaxGroupParty = "Unregistered"
            End If

            SaleInvoiceTableList(0).RateType = AgL.Dman_Execute("Select Code From RateType With (NoLock) Where Description =  '" & SaleInvoiceTableList(0).RateType & "'", IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar()

            If AgL.XNull(SaleInvoiceTableList(0).SaleToParty) = "" Then
                Err.Raise(1,, "Sale To Party is Empty.")
            End If
            If AgL.XNull(SaleInvoiceTableList(0).BillToPartyCode) = "" Then
                Err.Raise(1,, "Bill To Party is Empty.")
            End If


            'If AgL.Dman_Execute("SELECT Count(*) From SaleInvoice where V_Type = '" & SaleInvoiceTableList(0).V_Type & "' And ManualRefNo = '" & SaleInvoiceTableList(0).ManualRefNo & "' ", AgL.GCn).ExecuteScalar = 0 Then
            mQry = " INSERT INTO SaleInvoice (DocID,  V_Type,  V_Prefix, V_Date,  V_No,  Div_Code,  Site_Code,
                             ManualRefNo,  SaleToParty,  BillToParty,  Agent, SaleToPartyName,  SaleToPartyAddress,
                             SaleToPartyPinCode, SaleToPartyCity,  SaleToPartyState,  SaleToPartyMobile, SaleToPartySalesTaxNo,  ShipToParty,  ShipToAddress,
                             RateType,  SalesTaxGroupParty, PlaceOfSupply,  Structure,
                             CustomFields,  SaleToPartyDocNo, SaleToPartyDocDate,  ReferenceDocId,
                             Remarks, Tags,  TermsAndConditions, Gross_Amount,  
                             SpecialDiscount_Per, SpecialDiscount, SpecialAddition_Per, SpecialAddition, 
                             Taxable_Amount,
                             Tax1_Per,  Tax1,  Tax2_Per, Tax2,  Tax3_Per,  Tax3,
                             Tax4_Per,  Tax4,  Tax5_Per, Tax5,  SubTotal1,  Deduction_Per,
                             Deduction,  Other_Charge_Per,  Other_Charge, Other_Charge1_Per,  Other_Charge1, Round_Off,  Net_Amount,  PaidAmt,
                             CreditLimit,  CreditDays,  Status, EntryBy,  EntryDate,  ApproveBy,
                             ApproveDate,  MoveToLog,  MoveToLogDate, UploadDate, LockText, GenDocId, OMSId)
                             Select  " & AgL.Chk_Text(SaleInvoiceTableList(0).DocID) & ",  
                             " & AgL.Chk_Text(SaleInvoiceTableList(0).V_Type) & ",  
                             " & AgL.Chk_Text(SaleInvoiceTableList(0).V_Prefix) & ",  
                             " & AgL.Chk_Date(SaleInvoiceTableList(0).V_Date) & ",  
                             " & AgL.Chk_Text(SaleInvoiceTableList(0).V_No) & ",  
                             " & AgL.Chk_Text(SaleInvoiceTableList(0).Div_Code) & ",
                             " & AgL.Chk_Text(SaleInvoiceTableList(0).Site_Code) & ",  
                             " & AgL.Chk_Text(SaleInvoiceTableList(0).ManualRefNo) & ",  
                             " & AgL.Chk_Text(SaleInvoiceTableList(0).SaleToParty) & ", 
                             " & AgL.Chk_Text(SaleInvoiceTableList(0).BillToPartyCode) & ", 
                             " & AgL.Chk_Text(SaleInvoiceTableList(0).AgentCode) & ", 
                             " & AgL.Chk_Text(SaleInvoiceTableList(0).SaleToPartyName) & ",
                             " & AgL.Chk_Text(SaleInvoiceTableList(0).SaleToPartyAddress) & ",  
                             " & AgL.Chk_Text(SaleInvoiceTableList(0).SaleToPartyPinCode) & ",  
                             " & AgL.Chk_Text(SaleInvoiceTableList(0).SaleToPartyCityCode) & ",  
                             " & AgL.Chk_Text(SaleInvoiceTableList(0).SaleToPartyState) & ",  
                             " & AgL.Chk_Text(SaleInvoiceTableList(0).SaleToPartyMobile) & ", 
                             " & AgL.Chk_Text(SaleInvoiceTableList(0).SaleToPartySalesTaxNo) & ",  
                             " & AgL.Chk_Text(SaleInvoiceTableList(0).ShipToPartyCode) & ",
                             " & AgL.Chk_Text(SaleInvoiceTableList(0).ShipToAddress) & ",  
                             " & AgL.Chk_Text(SaleInvoiceTableList(0).RateType) & ",  
                             " & AgL.Chk_Text(SaleInvoiceTableList(0).SalesTaxGroupParty) & ",  
                             " & AgL.Chk_Text(SaleInvoiceTableList(0).PlaceOfSupply) & ",  
                             " & AgL.Chk_Text(SaleInvoiceTableList(0).StructureCode) & ",  
                             " & AgL.Chk_Text(SaleInvoiceTableList(0).CustomFields) & ",  
                             " & AgL.Chk_Text(SaleInvoiceTableList(0).SaleToPartyDocNo) & ",  
                             " & AgL.Chk_Date(SaleInvoiceTableList(0).SaleToPartyDocDate) & ",
                             " & AgL.Chk_Text(SaleInvoiceTableList(0).ReferenceDocId) & ",    
                             " & AgL.Chk_Text(SaleInvoiceTableList(0).Remarks) & ",    
                             " & AgL.Chk_Text(SaleInvoiceTableList(0).Tags) & ",    
                             " & AgL.Chk_Text(SaleInvoiceTableList(0).TermsAndConditions) & ",    
                             " & Val(SaleInvoiceTableList(0).Gross_Amount) & ",    
                             " & Val(SaleInvoiceTableList(0).SpecialDiscount_Per) & ",    
                             " & Val(SaleInvoiceTableList(0).SpecialDiscount) & ",    
                             " & Val(SaleInvoiceTableList(0).SpecialAddition_Per) & ",    
                             " & Val(SaleInvoiceTableList(0).SpecialAddition) & ",    
                             " & Val(SaleInvoiceTableList(0).Taxable_Amount) & ",    
                             " & Val(SaleInvoiceTableList(0).Tax1_Per) & ",    
                             " & Val(SaleInvoiceTableList(0).Tax1) & ",    
                             " & Val(SaleInvoiceTableList(0).Tax2_Per) & ",    
                             " & Val(SaleInvoiceTableList(0).Tax2) & ",    
                             " & Val(SaleInvoiceTableList(0).Tax3_Per) & ",    
                             " & Val(SaleInvoiceTableList(0).Tax3) & ",    
                             " & Val(SaleInvoiceTableList(0).Tax4_Per) & ",    
                             " & Val(SaleInvoiceTableList(0).Tax4) & ",    
                             " & Val(SaleInvoiceTableList(0).Tax5_Per) & ",    
                             " & Val(SaleInvoiceTableList(0).Tax5) & ",    
                             " & Val(SaleInvoiceTableList(0).SubTotal1) & ",    
                             " & Val(SaleInvoiceTableList(0).Deduction_Per) & ",    
                             " & Val(SaleInvoiceTableList(0).Deduction) & ",    
                             " & Val(SaleInvoiceTableList(0).Other_Charge_Per) & ",    
                             " & Val(SaleInvoiceTableList(0).Other_Charge) & ",    
                             " & Val(SaleInvoiceTableList(0).Other_Charge1_Per) & ",    
                             " & Val(SaleInvoiceTableList(0).Other_Charge1) & ",    
                             " & Val(SaleInvoiceTableList(0).Round_Off) & ",    
                             " & Val(SaleInvoiceTableList(0).Net_Amount) & ",    
                             " & Val(SaleInvoiceTableList(0).PaidAmt) & ",    
                             " & Val(SaleInvoiceTableList(0).CreditLimit) & ",    
                             " & Val(SaleInvoiceTableList(0).CreditDays) & ",    
                             " & AgL.Chk_Text(SaleInvoiceTableList(0).Status) & ",    
                             " & AgL.Chk_Text(SaleInvoiceTableList(0).EntryBy) & ",    
                             " & AgL.Chk_Date(SaleInvoiceTableList(0).EntryDate) & ",    
                             " & AgL.Chk_Text(SaleInvoiceTableList(0).ApproveBy) & ",    
                             " & AgL.Chk_Date(SaleInvoiceTableList(0).ApproveDate) & ",    
                             " & AgL.Chk_Text(SaleInvoiceTableList(0).MoveToLog) & ",    
                             " & AgL.Chk_Date(SaleInvoiceTableList(0).MoveToLogDate) & ",    
                             " & AgL.Chk_Date(SaleInvoiceTableList(0).UploadDate) & ",
                             " & AgL.Chk_Text(SaleInvoiceTableList(0).LockText) & ",    
                             " & AgL.Chk_Text(SaleInvoiceTableList(0).GenDocId) & ",    
                             " & AgL.Chk_Text(SaleInvoiceTableList(0).OmsId) & ""
            Debug.Print(mQry)
            AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)

            mQry = " Insert Into SaleInvoiceTrnSetting
                        (DocID, IsPostedInStock, IsPostedInLedger)
                        Values (" & AgL.Chk_Text(SaleInvoiceTableList(0).DocID) & ", 1,1)"
            AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)


            For I As Integer = 0 To SaleInvoiceTableList.Length - 1
                If SaleInvoiceTableList(I).Line_ItemName IsNot Nothing Then
                    If SaleInvoiceTableList(I).Line_ItemCode = "" Then
                        SaleInvoiceTableList(I).Line_ItemCode = AgL.Dman_Execute("SELECT Code FROM Item With (NoLock) Where Description =  " & AgL.Chk_Text(SaleInvoiceTableList(I).Line_ItemName) & "", IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar()

                        If SaleInvoiceTableList(I).Line_ItemCode = "" Or SaleInvoiceTableList(I).Line_ItemCode Is Nothing Then
                            SaleInvoiceTableList(I).Line_ItemCode = AgL.Dman_Execute("SELECT Code FROM Item With (NoLock) Where Specification  =  '" & SaleInvoiceTableList(I).Line_ItemName & "'", IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar()
                        End If

                        If SaleInvoiceTableList(I).Line_ItemCode = "" Then
                            Err.Raise(1,, "Item is saving blank in sale invoice detail for " & SaleInvoiceTableList(0).ManualRefNo)
                        End If
                    End If

                    If AgL.XNull(SaleInvoiceTableList(I).Line_CatalogCode) = "" Then
                        SaleInvoiceTableList(I).Line_CatalogCode = AgL.Dman_Execute("SELECT Code FROM Catalog Where Description =  " & AgL.Chk_Text(SaleInvoiceTableList(I).Line_CatalogName) & "", IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar()
                    End If

                    mQry = "Insert Into SaleInvoiceDetail(DocId, Sr, Barcode, Item, Specification, SalesTaxGroupItem, 
                           DocQty, FreeQty, Qty, Unit, Pcs, UnitMultiplier, DealUnit, 
                           DocDealQty, Cost, Rate, DiscountPer, DiscountAmount, AdditionalDiscountPer, AdditionalDiscountAmount,  
                           ExtraDiscountPer, ExtraDiscountAmount,  
                           AdditionPer, AdditionAmount,Amount, Remark, BaleNo, LotNo, Catalog, 
                           MRP, Deal, ExpiryDate, ReconcileDateTime,
                           ReferenceDocId, ReferenceDocIdSr, ReferenceNo, SalesRepresentative, 
                           SaleInvoice, SaleInvoiceSr, V_Nature, GrossWeight, NetWeight, OMSId, Gross_Amount, 
                           SpecialDiscount_Per, SpecialDiscount, SpecialAddition_Per, SpecialAddition,
                           Taxable_Amount,
                           Tax1_Per, Tax1, Tax2_Per, Tax2, Tax3_Per, Tax3, Tax4_Per, Tax4, Tax5_Per, Tax5, SubTotal1, Deduction_Per, 
                           Deduction, Other_Charge_Per, Other_Charge, Other_Charge1_Per, Other_Charge1, Round_Off, Net_Amount)
                           Select " & AgL.Chk_Text(SaleInvoiceTableList(0).DocID) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_Sr) & ", 
                           " & AgL.Chk_Text(SaleInvoiceTableList(I).Line_Barcode) & ", 
                            " & AgL.Chk_Text(SaleInvoiceTableList(I).Line_ItemCode) & ", 
                            " & AgL.Chk_Text(SaleInvoiceTableList(I).Line_Specification) & ", 
                            " & AgL.Chk_Text(SaleInvoiceTableList(I).Line_SalesTaxGroupItem) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_DocQty) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_FreeQty) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_Qty) & ", 
                            " & AgL.Chk_Text(SaleInvoiceTableList(I).Line_Unit) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_Pcs) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_UnitMultiplier) & ", 
                            " & AgL.Chk_Text(SaleInvoiceTableList(I).Line_DealUnit) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_DocDealQty) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_Cost) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_Rate) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_DiscountPer) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_DiscountAmount) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_AdditionalDiscountPer) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_AdditionalDiscountAmount) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_ExtraDiscountPer) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_ExtraDiscountAmount) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_AdditionPer) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_AdditionAmount) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_Amount) & ", 
                            " & AgL.Chk_Text(SaleInvoiceTableList(I).Line_Remark) & ", 
                            " & AgL.Chk_Text(SaleInvoiceTableList(I).Line_BaleNo) & ", 
                            " & AgL.Chk_Text(SaleInvoiceTableList(I).Line_LotNo) & ", 
                            " & AgL.Chk_Text(SaleInvoiceTableList(I).Line_CatalogCode) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_MRP) & ", 
                            " & AgL.Chk_Text(SaleInvoiceTableList(I).Line_Deal) & ", 
                            " & AgL.Chk_Date(SaleInvoiceTableList(I).Line_Expiry) & ", 
                            " & AgL.Chk_Date(SaleInvoiceTableList(I).Line_ReconcileDateTime) & ", 
                            " & AgL.Chk_Text(SaleInvoiceTableList(I).Line_ReferenceDocId) & ", 
                            " & AgL.Chk_Text(SaleInvoiceTableList(I).Line_ReferenceDocIdSr) & ", 
                            " & AgL.Chk_Text(SaleInvoiceTableList(I).Line_ReferenceNo) & ",
                            " & AgL.Chk_Text(SaleInvoiceTableList(I).Line_SalesRepresentative) & ", 
                            " & AgL.Chk_Text(SaleInvoiceTableList(I).Line_SaleInvoice) & ", 
                            " & AgL.Chk_Text(SaleInvoiceTableList(I).Line_SaleInvoiceSr) & ", 
                            " & AgL.Chk_Text(SaleInvoiceTableList(I).Line_V_Nature) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_GrossWeight) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_NetWeight) & ", 
                            " & AgL.Chk_Text(SaleInvoiceTableList(I).Line_OmsId) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_Gross_Amount) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_SpecialDiscount_Per) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_SpecialDiscount) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_SpecialAddition_Per) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_SpecialAddition) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_Taxable_Amount) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_Tax1_Per) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_Tax1) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_Tax2_Per) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_Tax2) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_Tax3_Per) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_Tax3) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_Tax4_Per) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_Tax4) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_Tax5_Per) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_Tax5) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_SubTotal1) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_Deduction_Per) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_Deduction) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_Other_Charge_Per) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_Other_Charge) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_Other_Charge1_Per) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_Other_Charge1) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_Round_Off) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_Net_Amount) & ""
                    Debug.Print(mQry)
                    AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)

                    mQry = "INSERT INTO SaleInvoiceDetailSku (DocID, Sr, ItemCategory, ItemGroup, Item)
                            Select " & AgL.Chk_Text(SaleInvoiceTableList(0).DocID) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_Sr) & ", 
                            " & AgL.Chk_Text(SaleInvoiceTableList(I).Line_ItemCategoryCode) & ",
                            " & AgL.Chk_Text(SaleInvoiceTableList(I).Line_ItemGroupCode) & ",
                            " & AgL.Chk_Text(SaleInvoiceTableList(I).Line_ItemCode) & " "
                    AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)

                    mQry = " Insert Into SaleInvoiceDetailHelpValues 
                            (DocID, Sr, PurchaseRate, PurchaseDiscountPer, 
                            PurchaseAdditionalDiscountPer, PurchaseDeal) 
                            Values(" & AgL.Chk_Text(SaleInvoiceTableList(0).DocID) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_Sr) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_PurchaseRate) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_PurchaseDiscountPer) & ", 
                            " & Val(SaleInvoiceTableList(I).Line_PurchaseAdditionalDiscountPer) & ", 
                            " & AgL.Chk_Text(SaleInvoiceTableList(I).Line_PurchaseDeal) & ") "
                    AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)
                End If
            Next


            If SaleInvoiceDimensionTableList IsNot Nothing Then
                For K As Integer = 0 To SaleInvoiceDimensionTableList.Length - 1
                    If Val(SaleInvoiceDimensionTableList(K).Qty) > 0 Then
                        mQry = " INSERT INTO SaleInvoiceDimensionDetail (DocID, TSr, SR, Specification, Pcs, Qty, TotalQty) 
                            Select " & AgL.Chk_Text(SaleInvoiceTableList(0).DocID) & ", 
                            " & Val(SaleInvoiceDimensionTableList(K).TSr) & " As TSr, 
                            " & Val(SaleInvoiceDimensionTableList(K).Sr) & " As Sr, 
                            " & AgL.Chk_Text(SaleInvoiceDimensionTableList(K).Specification) & ", 
                            " & Val(SaleInvoiceDimensionTableList(K).Pcs) & ", 
                            " & Val(SaleInvoiceDimensionTableList(K).Qty) & ", 
                            " & Val(SaleInvoiceDimensionTableList(K).TotalQty) & ""
                        AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)
                    End If
                Next
            End If





            Dim SalesTaxSummaryStrColumns As String = ""
            SalesTaxSummaryStrColumns = ClsMain.FGetSettings(SettingFields.SalesTaxSummaryStrColumns, SettingType.General,
                        SaleInvoiceTableList(0).Div_Code, SaleInvoiceTableList(0).Site_Code,
                        VoucherCategory.Sales, bNCat, SaleInvoiceTableList(0).V_Type, "",
                        SaleInvoiceTableList(0).SettingGroup)
            If SalesTaxSummaryStrColumns <> "" Then
                mQry = " Select L.DocID "
                If SalesTaxSummaryStrColumns.Contains("HSN") Then
                    mQry += " ,IfNull(I.HSN,Ic.HSN) As HSN "
                End If
                If SalesTaxSummaryStrColumns.Contains("SALES TAX GROUP") Then
                    mQry += " ,L.SalesTaxGroupItem "
                End If
                mQry += " ,Sum(L.Taxable_Amount) As Taxable_Amount, 
                Sum(L.Tax1) As Tax1, Sum(L.Tax2) As Tax2, Sum(L.Tax3) As Tax3
                From SaleInvoiceDetail L  With (NoLock)
                LEFT JOIN Item I With (NoLock) ON L.Item = I.Code
                LEFT JOIN ItemCategory Ic  With (NoLock) On I.ItemCategory = Ic.Code
                Where L.DocId = '" & SaleInvoiceTableList(0).DocID & "'
                Group By L.DocId "
                If SalesTaxSummaryStrColumns.Contains("HSN") Then
                    mQry += " ,IfNull(I.HSN,Ic.HSN) "
                End If
                If SalesTaxSummaryStrColumns.Contains("SALES TAX GROUP") Then
                    mQry += " ,L.SalesTaxGroupItem "
                End If
                Dim DtSalesTaxSummary As DataTable = AgL.FillData(mQry, IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).Tables(0)

                Dim SalesTaxSummaryStr As String = ""
                For I As Integer = 0 To DtSalesTaxSummary.Rows.Count - 1
                    If SalesTaxSummaryStrColumns.Contains("HSN") Then SalesTaxSummaryStr += AgL.XNull(DtSalesTaxSummary.Rows(I)("HSN"))
                    If SalesTaxSummaryStrColumns.Contains("SALES TAX GROUP") Then SalesTaxSummaryStr += " " & AgL.XNull(DtSalesTaxSummary.Rows(I)("SalesTaxGroupItem"))
                    If SalesTaxSummaryStrColumns.Contains("TAXABLE AMOUNT") Then SalesTaxSummaryStr += " Taxable Amt : " & AgL.XNull(DtSalesTaxSummary.Rows(I)("Taxable_Amount"))
                    If SalesTaxSummaryStrColumns.Contains("TAX AMOUNT") Then SalesTaxSummaryStr += " Tax Amt : " & (AgL.VNull(DtSalesTaxSummary.Rows(I)("Tax1")) + AgL.VNull(DtSalesTaxSummary.Rows(I)("Tax2")) + AgL.VNull(DtSalesTaxSummary.Rows(I)("Tax3"))).ToString()
                    SalesTaxSummaryStr += ", "
                Next

                mQry = " UPDATE SaleInvoice Set SalesTaxSummaryStr = '" & SalesTaxSummaryStr & "'
                Where DocId = '" & SaleInvoiceTableList(0).DocID & "'"
                AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)
            End If

            If bNCat <> Ncat.SaleOrder Then
                mQry = "Insert Into Stock(DocID, TSr, Sr, V_Type, V_Prefix, V_Date, V_No, RecID, Div_Code, Site_Code, 
                        SubCode, SalesTaxGroupParty,  Item,  LotNo, 
                        EType_IR, Qty_Iss, Qty_Rec, Unit, UnitMultiplier, DealQty_Iss , DealQty_Rec, DealUnit, 
                        ReferenceDocID, ReferenceDocIDSr, Rate, Amount, Landed_Value) 
                        Select L.DocId, L.Sr, L.Sr, H.V_Type, H.V_Prefix, H.V_Date, H.V_No, H.ManualRefNo, 
                        H.Div_Code, H.Site_Code, H.SaleToParty,  H.SalesTaxGroupParty,  L.Item,
                        L.LotNo, 'I', 
                        Case When  IfNull(L.Qty,0) >= 0 Then L.Qty Else 0 End As Qty_Iss, 
                        Case When  IfNull(L.Qty,0) < 0 Then IfNull(Abs(L.Qty),0) Else 0 End As Qty_Rec, 
                        L.Unit, L.UnitMultiplier, 
                        Case When  IfNull(L.DealQty,0) >= 0 Then L.DealQty Else 0 End As DealQty_Iss, 
                        Case When  IfNull(L.DealQty,0) < 0 Then IfNull(Abs(L.DealQty),0) Else 0 End As DealQty_Rec, 
                        L.DealUnit,  
                        L.ReferenceDocId, L.ReferenceDocIdSr, 
                        Case When L.Qty > 0 Then L.Amount/L.Qty Else 0 End As Rate, L.Amount, L.Amount
                        FROM SaleInvoiceDetail L    
                        LEFT JOIN SaleInvoice H On L.DocId = H.DocId 
                        WHERE L.DocId =  '" & SaleInvoiceTableList(0).DocID & "' "
                AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)

                If mFlag_Import = False Then
                    FGetCalculationData(SaleInvoiceTableList(0).DocID, AgL.GCn, AgL.ECmd)
                End If


                If SaleInvoicePaymentTableList IsNot Nothing Then
                    Dim mNarr As String
                    Dim mAmtDr As Double
                    Dim mSr As Integer
                    mSr = AgL.VNull(AgL.Dman_Execute(" Select Max(V_SNo) From Ledger With (NoLock) Where DocId = " & AgL.Chk_Text(SaleInvoiceTableList(0).DocID) & "", IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar())


                    For K As Integer = 0 To SaleInvoicePaymentTableList.Length - 1
                        If Val(SaleInvoicePaymentTableList(K).Amount) > 0 Then
                            mQry = " INSERT INTO SaleInvoicePayment (DocID, Sr, PaymentMode, Amount, PostToAc) 
                            Select " & AgL.Chk_Text(SaleInvoiceTableList(0).DocID) & ", 
                            " & Val(SaleInvoicePaymentTableList(K).Sr) & " As Sr, 
                            " & AgL.Chk_Text(SaleInvoicePaymentTableList(K).PaymentMode) & ", 
                            " & Val(SaleInvoicePaymentTableList(K).Amount) & ", 
                            " & AgL.Chk_Text(SaleInvoicePaymentTableList(K).PostToAc) & ""
                            AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)

                            mSr += 1
                            mNarr = "Payment received through " & SaleInvoicePaymentTableList(K).PaymentMode
                            mQry = "Insert Into Ledger(DocId,RecId,V_SNo,V_Date,SubCode,ContraSub,AmtDr,AmtCr,
                                Narration,V_Type,V_No,V_Prefix,Site_Code,DivCode) 
                                Values ('" & SaleInvoiceTableList(0).DocID & "','" & SaleInvoiceTableList(0).ManualRefNo & "'," & mSr & ", 
                                " & AgL.Chk_Date(SaleInvoiceTableList(0).V_Date) & ",
                                " & AgL.Chk_Text(SaleInvoicePaymentTableList(K).PostToAc) & ", 
                                " & AgL.Chk_Text(SaleInvoiceTableList(0).BillToPartyCode) & ", 
                                " & IIf(Val(SaleInvoicePaymentTableList(K).Amount) >= 0, Val(SaleInvoicePaymentTableList(K).Amount), 0) & ", 
                                " & IIf(Val(SaleInvoicePaymentTableList(K).Amount) < 0, Math.Abs(Val(SaleInvoicePaymentTableList(K).Amount)), 0) & ", 
                                " & AgL.Chk_Text(mNarr) & ",
                                '" & SaleInvoiceTableList(0).V_Type & "',
                                " & Val(SaleInvoiceTableList(0).V_No) & ", 
                                '" & SaleInvoiceTableList(0).V_Prefix & "',
                                '" & SaleInvoiceTableList(0).Site_Code & "',
                                '" & SaleInvoiceTableList(0).Div_Code & "')"
                            AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)
                            mAmtDr += Val(SaleInvoicePaymentTableList(K).Amount)
                        End If
                    Next

                    If mAmtDr > 0 Then
                        mSr += 1
                        mNarr = "Payment received "
                        mQry = "Insert Into Ledger(DocId,RecId,V_SNo,V_Date,SubCode,ContraSub,AmtDr,AmtCr,
                                Narration,V_Type,V_No,V_Prefix,Site_Code,DivCode) 
                                Values ('" & SaleInvoiceTableList(0).DocID & "','" & SaleInvoiceTableList(0).ManualRefNo & "',
                                " & mSr & ", 
                                " & AgL.Chk_Date(SaleInvoiceTableList(0).V_Date) & ",
                                " & AgL.Chk_Text(SaleInvoiceTableList(0).BillToPartyCode) & ", 
                                Null, 
                                " & IIf(Val(mAmtDr) <= 0, Math.Abs(Val(mAmtDr)), 0) & ", 
                                " & IIf(Val(mAmtDr) > 0, Math.Abs(Val(mAmtDr)), 0) & ", 
                                " & AgL.Chk_Text(mNarr) & ",
                                '" & SaleInvoiceTableList(0).V_Type & "',
                                " & Val(SaleInvoiceTableList(0).V_No) & ", 
                                '" & SaleInvoiceTableList(0).V_Prefix & "',
                                '" & SaleInvoiceTableList(0).Site_Code & "',
                                '" & SaleInvoiceTableList(0).Div_Code & "')"
                        AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)
                    End If


                    mQry = "Select * From Ledger With (NoLock) Where DocId = '" & SaleInvoiceTableList(0).DocID & "' 
                            And SubCode = '" & SaleInvoiceTableList(0).BillToPartyCode & "'
                            And IfNull(AmtDr,0) > 0 "
                    Dim DtInvoice As DataTable = AgL.FillData(mQry, IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).Tables(0)

                    mQry = " Select * From SaleInvoicePayment With (NoLock) Where DocId = '" & SaleInvoiceTableList(0).DocID & "' 
                            And PaymentMode <> '" & PaymentMode.Credit & "'"
                    Dim DtSaleInvoicePayment As DataTable = AgL.FillData(mQry, IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).Tables(0)

                    For M As Integer = 0 To DtSaleInvoicePayment.Rows.Count - 1
                        mQry = "Select * From Ledger With (NoLock) Where DocId = '" & SaleInvoiceTableList(0).DocID & "' 
                                And SubCode = '" & DtSaleInvoicePayment.Rows(M)("PostToAc") & "'
                                And IfNull(AmtDr,0) > 0 "
                        Dim DtReceipt As DataTable = AgL.FillData(mQry, IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).Tables(0)
                        For N As Integer = 0 To DtReceipt.Rows.Count - 1
                            mQry = "Insert Into LedgerAdj(Vr_DocID, Vr_V_SNo, Adj_DocID, Adj_V_SNo, Amount, Site_Code, Div_Code, Adj_Type,ReferenceDocID)
                            Values (" & AgL.Chk_Text(DtInvoice.Rows(0)("DocId")) & ",
                            " & AgL.Chk_Text(DtInvoice.Rows(0)("V_SNo")) & ", 
                            " & AgL.Chk_Text(DtReceipt.Rows(N)("DocId")) & ", 
                            " & AgL.Chk_Text(DtReceipt.Rows(N)("V_SNo")) & ", 
                            " & Val(DtReceipt.Rows(N)("AmtDr")) & ", 
                            " & AgL.Chk_Text(DtReceipt.Rows(N)("Site_Code")) & ", 
                            " & AgL.Chk_Text(DtReceipt.Rows(N)("DivCode")) & ", 
                            'Adjustment', " & AgL.Chk_Text(SaleInvoiceTableList(0).DocID) & ") "
                            AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)
                        Next
                    Next
                End If
            End If

            AgL.UpdateVoucherCounter(SaleInvoiceTableList(0).DocID, CDate(SaleInvoiceTableList(0).V_Date), AgL.GCn, AgL.ECmd,
                                     SaleInvoiceTableList(0).Div_Code, SaleInvoiceTableList(0).Site_Code)
            'End If
        End If
        Return SaleInvoiceTableList(0).DocID
    End Function

    Private Sub Dgl1_CellLeave(sender As Object, e As DataGridViewCellEventArgs) Handles Dgl1.CellLeave
        'If e.ColumnIndex = Dgl1.Columns(Col1Item).Index Then
        '    If Dgl1.Item(Col1Item, e.RowIndex).Value = "" Then
        '        TxtAgent.Focus()
        '    End If
        'End If
    End Sub

    Public Structure StructSaleInvoice
        Dim DocID As String
        Dim V_Type As String
        Dim V_Prefix As String
        Dim V_Date As String
        Dim V_No As String
        Dim Div_Code As String
        Dim Site_Code As String
        Dim ManualRefNo As String
        Dim SettingGroup As String
        Dim SaleToParty As String
        Dim BillToPartyCode As String
        Dim BillToPartyName As String
        Dim AgentCode As String
        Dim AgentName As String
        Dim SaleToPartyName As String
        Dim SaleToPartyAddress As String
        Dim SaleToPartyPinCode As String
        Dim SaleToPartyCityCode As String
        Dim SaleToPartyCityName As String
        Dim SaleToPartyState As String
        Dim SaleToPartyMobile As String
        Dim SaleToPartySalesTaxNo As String
        Dim ShipToPartyCode As String
        Dim ShipToAddress As String
        Dim RateType As String
        Dim SalesTaxGroupParty As String
        Dim PlaceOfSupply As String
        Dim StructureCode As String
        Dim CustomFields As String
        Dim SaleToPartyDocNo As String
        Dim SaleToPartyDocDate As String
        Dim ReferenceDocId As String
        Dim Remarks As String
        Dim Tags As String
        Dim TermsAndConditions As String
        Dim Gross_Amount As Double
        Dim SpecialDiscount_Per As Double
        Dim SpecialDiscount As Double
        Dim SpecialAddition_Per As Double
        Dim SpecialAddition As Double
        Dim Taxable_Amount As Double
        Dim Tax1_Per As Double
        Dim Tax1 As Double
        Dim Tax2_Per As Double
        Dim Tax2 As Double
        Dim Tax3_Per As Double
        Dim Tax3 As Double
        Dim Tax4_Per As Double
        Dim Tax4 As Double
        Dim Tax5_Per As Double
        Dim Tax5 As Double
        Dim SubTotal1 As Double
        Dim Deduction_Per As Double
        Dim Deduction As Double
        Dim Other_Charge_Per As Double
        Dim Other_Charge As Double
        Dim Other_Charge1_Per As Double
        Dim Other_Charge1 As Double
        Dim Round_Off As Double
        Dim Net_Amount As Double
        Dim PaidAmt As String
        Dim CreditLimit As String
        Dim CreditDays As String
        Dim Status As String
        Dim EntryBy As String
        Dim EntryDate As String
        Dim ApproveBy As String
        Dim ApproveDate As String
        Dim MoveToLog As String
        Dim MoveToLogDate As String
        Dim UploadDate As String
        Dim LockText As String
        Dim GenDocId As String
        Dim OmsId As String

        '''''''''''''''''''''''''''''''''Line Detail''''''''''''''''''''''''''''''''''
        Dim Line_Sr As Integer
        Dim Line_ItemCategoryCode As String
        Dim Line_ItemGroupCode As String
        Dim Line_ItemName As String
        Dim Line_ItemCode As String
        Dim Line_Barcode As String
        Dim Line_Specification As String
        Dim Line_ReferenceNo As String
        Dim Line_SalesTaxGroupItem As String
        Dim Line_DocQty As String
        Dim Line_FreeQty As String
        Dim Line_Qty As String
        Dim Line_Unit As String
        Dim Line_SalesRepresentative As String
        Dim Line_Pcs As String
        Dim Line_UnitMultiplier As String
        Dim Line_DealUnit As String
        Dim Line_DocDealQty As String
        Dim Line_Cost As String
        Dim Line_Rate As String
        Dim Line_DiscountPer As String
        Dim Line_DiscountAmount As String
        Dim Line_AdditionalDiscountPer As String
        Dim Line_AdditionalDiscountAmount As String
        Dim Line_ExtraDiscountPer As String
        Dim Line_ExtraDiscountAmount As String
        Dim Line_AdditionPer As String
        Dim Line_AdditionAmount As String
        Dim Line_Amount As String
        Dim Line_Remark As String
        Dim Line_BaleNo As String
        Dim Line_LotNo As String
        Dim Line_CatalogCode As String
        Dim Line_CatalogName As String
        Dim Line_MRP As String
        Dim Line_Deal As String
        Dim Line_Expiry As String
        Dim Line_PurchaseRate As String
        Dim Line_PurchaseDiscountPer As String
        Dim Line_PurchaseAdditionalDiscountPer As String
        Dim Line_PurchaseDeal As String
        Dim Line_ReconcileDateTime As String
        Dim Line_ReferenceDocId As String
        Dim Line_ReferenceDocIdSr As String
        Dim Line_SaleInvoice As String
        Dim Line_SaleInvoiceSr As String
        Dim Line_V_Nature As String
        Dim Line_GrossWeight As String
        Dim Line_NetWeight As String
        Dim Line_OmsId As String
        Dim Line_Gross_Amount As Double
        Dim Line_SpecialDiscount_Per As Double
        Dim Line_SpecialDiscount As Double
        Dim Line_SpecialAddition_Per As Double
        Dim Line_SpecialAddition As Double
        Dim Line_Taxable_Amount As Double
        Dim Line_Tax1_Per As Double
        Dim Line_Tax1 As Double
        Dim Line_Tax2_Per As Double
        Dim Line_Tax2 As Double
        Dim Line_Tax3_Per As Double
        Dim Line_Tax3 As Double
        Dim Line_Tax4_Per As Double
        Dim Line_Tax4 As Double
        Dim Line_Tax5_Per As Double
        Dim Line_Tax5 As Double
        Dim Line_SubTotal1 As Double
        Dim Line_Deduction_Per As Double
        Dim Line_Deduction As Double
        Dim Line_Other_Charge_Per As Double
        Dim Line_Other_Charge As Double
        Dim Line_Other_Charge1_Per As Double
        Dim Line_Other_Charge1 As Double
        Dim Line_Round_Off As Double
        Dim Line_Net_Amount As Double
    End Structure
    Public Structure StructSaleInvoiceDimensionDetail
        Dim TSr As Integer
        Dim Sr As Integer
        Dim Specification As String
        Dim Pcs As Integer
        Dim Qty As Double
        Dim TotalQty As Double
    End Structure
    Public Structure StructSaleInvoicePayment
        Dim DocId As String
        Dim Sr As Integer
        Dim PaymentMode As String
        Dim Amount As Double
        Dim PostToAc As String
    End Structure

    'Private Sub FCreateJSONFileOld()
    'Dim EWayDocumentDetail As New EWayDocumentDetail()
    'EWayDocumentDetail.userGstin = "Captopril"
    'Dim EWayItemDetail As New EWayItemDetail()
    'EWayItemDetail.itemNo = "1"
    'EWayItemDetail.productName = "Hello"
    'EWayDocumentDetail.itemList.Add(EWayItemDetail)
    'Dim jsonString As String = EWayDocumentDetail.ToString()
    'End Sub

    Private Sub FCreateJSONFile()
        mQry = "Select H.ManualRefNo, H.V_Date, I.Description As ItemDesc, I.Specification As ItemSpecification, 
                Sg.DispName As SaleToPartyName, H.SaleToPartyAddress, H.SaleToPartyPinCode As SaleToPartyPinCode,
                S.ManualCode As SaleToPartyStateCode, 
                IfNull(VReg.SalesTaxNo,'URP') As SaleToPartySalesTaxNo,  H.Div_Code, IfNull(VDist.Distance,0) As transDistance,
                TSg.DispName As TransporterName, VTranReg.SalesTaxNo As TransporterSalesTaxNo,
                Sit.LRNo As TransDocNo, IfNull(Sit.LRDate,H.V_Date) As TransDocDate,
                Ic.Description As ItemCategoryDesc, I.ManualCode As ItemCode, L.Qty, L.Sr,
                L.Tax1_Per As LineTax1_Per, L.Tax1 As LineTax1, 
                L.Tax2_Per As LineTax2_Per, L.Tax2 As LineTax2, 
                L.Tax3_Per As LineTax3_Per, L.Tax3 As LineTax3, 
                L.Tax4_Per As LineTax4_Per, L.Tax4 As LineTax4, 
                L.Tax5_Per As LineTax5_Per, L.Tax5 As LineTax5, L.Taxable_Amount As LineTaxable_Amount,
                I.HSN, (Case When L.Unit='Meter' Then 'MTR' Else L.Unit End) as Unit, H.Net_Amount As TotalInvoiceValue,
                H.Tax1_Per As HeaderTax1_Per, H.Tax1 As HeaderTax1, 
                H.Tax2_Per As HeaderTax2_Per, H.Tax2 As HeaderTax2, 
                H.Tax3_Per As HeaderTax3_Per, H.Tax3 As HeaderTax3, 
                H.Tax4_Per As HeaderTax4_Per, H.Tax4 As HeaderTax4, 
                H.Tax5_Per As HeaderTax5_Per, H.Tax5 As HeaderTax5, H.Taxable_Amount As HeaderTaxable_Amount, H.Gross_Amount,
                0 As TotNonAdvolVal, 0 As OthValue, 0 As cessNonAdvol
                From SaleInvoice H  With (NoLock)
                LEFT JOIN City C  With (NoLock) On H.SaleToPartyCity = C.CityCode
                LEFT JOIN State S  With (NoLock) On C.State = S.Code
                LEFT JOIN SubGroup Sg  With (NoLock) On H.SaleToParty = Sg.SubCode
                LEFT JOIN SaleInvoiceDetail L  With (NoLock) On H.DocId = L.DocID
                LEFT JOIN Item I  With (NoLock) ON L.Item = I.Code
                LEFT JOIN ItemCategory Ic  With (NoLock) On I.ItemCategory = Ic.Code
                LEFT JOIN SaleInvoiceTransport Sit  With (NoLock) On H.DocId = Sit.DocId
                LEFT JOIN (Select SubCode, Max(Transporter) Transporter 
                            From SubgroupSiteDivisionDetail  With (NoLock)
                            Group By SubCode) As Hlt On H.SaleToParty = Hlt.SubCode
                LEFT JOIN SubGroup TSg  With (NoLock) ON IfNull(Sit.Transporter,Hlt.Transporter) = TSg.SubCode
                LEFT JOIN (Select Subcode, RegistrationNo As SalesTaxNo
                            From SubgroupRegistration  With (NoLock) 
                            Where RegistrationType = 'Sales Tax No') As VReg On H.SaleToParty = VReg.SubCode
                LEFT JOIN (Select Subcode, RegistrationNo As SalesTaxNo
                            From SubgroupRegistration  With (NoLock)
                            Where RegistrationType = 'Sales Tax No') As VTranReg On TSg.SubCode = VTranReg.SubCode
                LEFT JOIN (Select SubCode, Distance
                            From SubgroupSiteDivisionDetail With (NoLock)
                            Where Site_Code = '" & AgL.PubSiteCode & "'
                            And Div_Code = '" & AgL.PubDivCode & "') As VDist On H.SaleToParty = VDist.SubCode
                Where H.DocId = '" & mSearchCode & "'"
        Dim DTInvoiceDetail As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)


        mQry = "Select I.HSN, Count(*) As CntHSN
                From SaleInvoiceDetail L  With (NoLock)
                LEFT JOIN Item I  With (NoLock) On L.Item = I.Code
                Where DocId = '" & mSearchCode & "'
                GROUP By I.HSN 
                Order By CntHSN Desc "
        Dim DTMainHSN As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)

        ClsMain.FCreateJSONFile(DTInvoiceDetail, DTMainHSN)

        'mQry = " Select VReg.SalesTaxNo As DivisionSalesTaxNo, Sg.DispName As DivisionName, Sg.Address As DivisionAddress,
        '        Sg.PIN As DivisionPinCode, S.ManualCode As DivisionStateCode
        '        From Division D
        '        LEFT JOIN SubGroup Sg On D.SubCode = Sg.SubCode
        '        LEFT JOIN City C On Sg.CityCode = C.CityCode
        '        LEFT JOIN State S On C.State = S.Code
        '        LEFT JOIN (Select Subcode, RegistrationNo As SalesTaxNo
        '                    From SubgroupRegistration 
        '                    Where RegistrationType = 'Sales Tax No') As VReg On D.SubCode = VReg.SubCode
        '        Where D.Div_Code = '" & DTInvoiceDetail.Rows(0)("Div_Code") & "'"
        'Dim DTDivisionDetail As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)

        'If AgL.XNull(DTInvoiceDetail.Rows(0)("SaleToPartyPinCode")) = "" Then
        '    MsgBox("Party Pincode is blank.", MsgBoxStyle.Exclamation)
        '    Exit Sub
        'End If


        ''Dim strFile As String = My.Application.Info.DirectoryPath + "\" + "Ewaybill_" + DTInvoiceDetail.Rows(0)("ManualRefNo") + "_" + CDate(DTInvoiceDetail.Rows(0)("V_Date")).ToString("ddMMyyyy") + ".json"
        'Dim FilePath As String = ""
        'Dim SaveFileDialogBox As SaveFileDialog
        'Dim sFilePath As String = ""
        'SaveFileDialogBox = New SaveFileDialog

        'SaveFileDialogBox.Title = "File Name"
        'FilePath = My.Computer.FileSystem.SpecialDirectories.Desktop
        'SaveFileDialogBox.InitialDirectory = FilePath
        ''SaveFileDialogBox.DefaultExt = ".json"
        'SaveFileDialogBox.FilterIndex = 1
        'SaveFileDialogBox.FileName = "Ewaybill_" + DTInvoiceDetail.Rows(0)("ManualRefNo") + "_" + CDate(DTInvoiceDetail.Rows(0)("V_Date")).ToString("ddMMyyyy") + ".json"
        'If SaveFileDialogBox.ShowDialog = Windows.Forms.DialogResult.Cancel Then Exit Sub
        'sFilePath = SaveFileDialogBox.FileName

        'Dim fileExists As Boolean = File.Exists(sFilePath)
        'Dim StringTabPresses As String = ""
        'Using sw As New StreamWriter(File.Open(sFilePath, FileMode.OpenOrCreate))
        '    sw.WriteLine("{")
        '    sw.WriteLine(ControlChars.Tab + """version"": ""1.0.0501"",")
        '    sw.WriteLine(ControlChars.Tab + """billLists"": [")
        '    sw.WriteLine(ControlChars.Tab + ControlChars.Tab + "{")
        '    sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """userGstin"": """ & DTDivisionDetail.Rows(0)("DivisionSalesTaxNo") & """, ")
        '    sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """supplyType"": ""O"", ")
        '    sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """subSupplyType"": 1, ")
        '    sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """docType"": ""INV"", ")
        '    sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """docNo"": """ & DTInvoiceDetail.Rows(0)("ManualRefNo") & """, ")
        '    sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """docDate"": """ & CDate(DTInvoiceDetail.Rows(0)("V_Date")).ToString("dd'/'MM'/'yyyy") & """, ")
        '    sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """fromGstin"": """ & DTDivisionDetail.Rows(0)("DivisionSalesTaxNo") & """, ")
        '    sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """fromTrdName"": """ & DTDivisionDetail.Rows(0)("DivisionName") & """, ")
        '    sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """fromAddr1"": """ & DTDivisionDetail.Rows(0)("DivisionAddress") & """, ")
        '    sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """fromAddr2"": """", ")
        '    sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """fromPlace"": """", ")
        '    sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """fromPincode"": " & DTDivisionDetail.Rows(0)("DivisionPinCode") & ", ")
        '    sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """fromStateCode"": " & Val(DTDivisionDetail.Rows(0)("DivisionStateCode")) & ", ")
        '    sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """actualFromStateCode"": " & Val(DTDivisionDetail.Rows(0)("DivisionStateCode")) & ", ")
        '    sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """toGstin"": """ & DTInvoiceDetail.Rows(0)("SaleToPartySalesTaxNo") & """, ")
        '    sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """toTrdName"": """ & DTInvoiceDetail.Rows(0)("SaleToPartyName") & """, ")
        '    sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """toAddr1"": """ & DTInvoiceDetail.Rows(0)("SaleToPartyAddress") & """, ")
        '    sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """toAddr2"": """", ")
        '    sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """toPlace"": """", ")
        '    sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """toPincode"": " & DTInvoiceDetail.Rows(0)("SaleToPartyPinCode") & ", ")
        '    sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """toStateCode"": " & Val(DTInvoiceDetail.Rows(0)("SaleToPartyStateCode")) & ", ")
        '    sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """actualToStateCode"": " & Val(DTInvoiceDetail.Rows(0)("SaleToPartyStateCode")) & ", ")
        '    sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """totalValue"": " & DTInvoiceDetail.Rows(0)("Gross_Amount") & ", ")
        '    sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """cgstValue"": " & DTInvoiceDetail.Rows(0)("HeaderTax2") & ", ")
        '    sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """sgstValue"": " & DTInvoiceDetail.Rows(0)("HeaderTax3") & ", ")
        '    sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """igstValue"": " & DTInvoiceDetail.Rows(0)("HeaderTax1") & ", ")
        '    sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """cessValue"": " & DTInvoiceDetail.Rows(0)("HeaderTax4") & ", ")
        '    sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """transMode"": 1, ")
        '    sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """transDistance"": " & DTInvoiceDetail.Rows(0)("transDistance") & ", ")
        '    sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """transporterName"": """ & AgL.XNull(DTInvoiceDetail.Rows(0)("TransporterName")) & """, ")
        '    sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """transporterId"": """ & AgL.XNull(DTInvoiceDetail.Rows(0)("TransporterSalesTaxNo")) & """, ")
        '    sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """transDocNo"": """ & AgL.XNull(DTInvoiceDetail.Rows(0)("TransDocNo")) & """, ")
        '    If AgL.XNull(DTInvoiceDetail.Rows(0)("TransDocDate")) <> "" Then
        '        sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """transDocDate"": """ & CDate(AgL.XNull(DTInvoiceDetail.Rows(0)("TransDocDate"))).ToString("dd'/'MM'/'yyyy") & """, ")
        '    Else
        '        sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """transDocDate"": """", ")
        '    End If
        '    sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """vehicleNo"": """", ")
        '    sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """vehicleType"": ""R"",")
        '    sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """totInvValue"": " & DTInvoiceDetail.Rows(0)("TotalInvoiceValue") & ", ")
        '    sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """mainHsnCode"": " & AgL.XNull(DTMainHSN.Rows(0)("HSN")) & ", ")
        '    sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """itemList"": [")

        '    For I As Integer = 0 To DTInvoiceDetail.Rows.Count - 1
        '        sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + "{")
        '        sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """itemNo"": " & DTInvoiceDetail.Rows(I)("Sr") & ", ")
        '        sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """productName"": """ & DTInvoiceDetail.Rows(I)("ItemSpecification") & """, ")
        '        sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """productDesc"": """ & DTInvoiceDetail.Rows(I)("ItemCategoryDesc") & """, ")
        '        sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """hsnCode"": " & DTInvoiceDetail.Rows(I)("HSN") & ", ")
        '        sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """quantity"": " & DTInvoiceDetail.Rows(I)("Qty") & ", ")
        '        sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """qtyUnit"": """ & DTInvoiceDetail.Rows(I)("Unit") & """, ")
        '        sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """taxableAmount"": " & DTInvoiceDetail.Rows(I)("LineTaxable_Amount") & ", ")
        '        sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """sgstRate"": " & DTInvoiceDetail.Rows(I)("LineTax3_Per") & ", ")
        '        sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """cgstRate"": " & DTInvoiceDetail.Rows(I)("LineTax2_Per") & ", ")
        '        sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """igstRate"": " & DTInvoiceDetail.Rows(I)("LineTax1_Per") & ", ")
        '        sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + """cessRate"": " & DTInvoiceDetail.Rows(I)("LineTax4_Per") & "")
        '        sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + "}" + IIf(I < DTInvoiceDetail.Rows.Count - 1, ",", ""))
        '    Next

        '    sw.WriteLine(ControlChars.Tab + ControlChars.Tab + ControlChars.Tab + "]")
        '    sw.WriteLine(ControlChars.Tab + ControlChars.Tab + "}")
        '    sw.WriteLine(ControlChars.Tab + "]")
        '    sw.WriteLine("}")
        'End Using
        ''System.Diagnostics.Process.Start("notepad.exe", strFile)
    End Sub

    Public Structure StructEWayBill
        Dim DocID As String
        Dim V_Type As String
        Dim V_Prefix As String
        Dim V_Date As String
        Dim V_No As String
        Dim Div_Code As String
        Dim Site_Code As String
        Dim ManualRefNo As String
        Dim SaleToParty As String
        Dim BillToPartyCode As String
        Dim BillToPartyName As String
        Dim AgentCode As String
        Dim AgentName As String
        Dim SaleToPartyName As String
        Dim SaleToPartyAddress As String
        Dim SaleToPartyCity As String
        Dim SaleToPartyMobile As String
        Dim SaleToPartySalesTaxNo As String
        Dim ShipToAddress As String
        Dim RateType As String
        Dim SalesTaxGroupParty As String
        Dim PlaceOfSupply As String
        Dim StructureCode As String
        Dim CustomFields As String
        Dim SaleToPartyDocNo As String
        Dim SaleToPartyDocDate As String
        Dim ReferenceDocId As String
        Dim Remarks As String
        Dim TermsAndConditions As String
        Dim Gross_Amount As Double
        Dim Taxable_Amount As Double
        Dim Tax1_Per As Double
        Dim Tax1 As Double
        Dim Tax2_Per As Double
        Dim Tax2 As Double
        Dim Tax3_Per As Double
        Dim Tax3 As Double
        Dim Tax4_Per As Double
        Dim Tax4 As Double
        Dim Tax5_Per As Double
        Dim Tax5 As Double
        Dim SubTotal1 As Double
        Dim Deduction_Per As Double
        Dim Deduction As Double
        Dim Other_Charge_Per As Double
        Dim Other_Charge As Double
        Dim Round_Off As Double
        Dim Net_Amount As Double
        Dim PaidAmt As String
        Dim CreditLimit As String
        Dim CreditDays As String
        Dim Status As String
        Dim EntryBy As String
        Dim EntryDate As String
        Dim ApproveBy As String
        Dim ApproveDate As String
        Dim MoveToLog As String
        Dim MoveToLogDate As String
        Dim UploadDate As String
    End Structure

    Private Sub FReconcileBill()
        Dim FrmObj As New FrmSaleInvoiceReconciliation_WithDimension
        FrmObj.Text = "Reconcile Sale Bill"
        FrmObj.LblDocNo.Text = "Invoice No : " + DglMain.Item(Col1Value, rowReferenceNo).Value
        FrmObj.LblParty.Text = "Party : " + DglMain.Item(Col1Value, rowSaleToParty).Value
        FrmObj.DtV_TypeSettings = DtV_TypeSettings

        FrmObj.SearchCode = mSearchCode
        FrmObj.StartPosition = FormStartPosition.CenterScreen
        FrmObj.ShowDialog()
    End Sub

    Private Sub FPrintBulk(SearchCode As String)
        Dim dtTemp As DataTable
        Dim I As Integer
        Dim FrmObj As New FrmPrintDialog
        FrmObj.IniGrid()
        FrmObj.Dgl1.Item(FrmPrintDialog.Col1Value, FrmPrintDialog.rowFromNo).Value = DglMain.Item(Col1Value, rowReferenceNo).Value
        FrmObj.Dgl1.Item(FrmPrintDialog.Col1Value, FrmPrintDialog.rowToNo).Value = DglMain.Item(Col1Value, rowReferenceNo).Value
        FrmObj.StartPosition = FormStartPosition.CenterParent
        FrmObj.ShowDialog()

        If FrmObj.mOkButtonPressed Then
            mQry = "SELECT H.DocID FROM SaleInvoice H WHERE H.V_Type = '" & DglMain.Item(Col1Value, rowV_Type).Tag & "' 
                    And H.Div_Code = '" & TxtDivision.Tag & "' And H.Site_Code = '" & DglMain.Item(Col1Value, rowSite_Code).Tag & "'"
            If FrmObj.Dgl1.Item(FrmPrintDialog.Col1Value, FrmPrintDialog.rowFromNo).Value <> "" Then
                mQry += " AND Cast(H.ManualRefNo AS BIGINT) >= " & Val(FrmObj.Dgl1.Item(FrmPrintDialog.Col1Value, FrmPrintDialog.rowFromNo).Value) & " "
            End If
            If FrmObj.Dgl1.Item(FrmPrintDialog.Col1Value, FrmPrintDialog.rowToNo).Value <> "" Then
                mQry += " AND Cast(H.ManualRefNo AS BIGINT) <= " & Val(FrmObj.Dgl1.Item(FrmPrintDialog.Col1Value, FrmPrintDialog.rowToNo).Value) & ""
            End If
            If FrmObj.Dgl1.Item(FrmPrintDialog.Col1Value, FrmPrintDialog.rowFromDate).Value <> "" Then
                mQry += " AND H.V_Date >= " & AgL.Chk_Date(CDate(FrmObj.Dgl1.Item(FrmPrintDialog.Col1Value, FrmPrintDialog.rowFromDate).Value).ToString("s")) & ""
            End If
            If FrmObj.Dgl1.Item(FrmPrintDialog.Col1Value, FrmPrintDialog.rowToDate).Value <> "" Then
                mQry += " AND H.V_Date <= " & AgL.Chk_Date(CDate(FrmObj.Dgl1.Item(FrmPrintDialog.Col1Value, FrmPrintDialog.rowToDate).Value).ToString("s")) & ""
            End If

            If FrmObj.Dgl1.Item(FrmPrintDialog.Col1Value, FrmPrintDialog.rowFromDate).Value = "" Or
                FrmObj.Dgl1.Item(FrmPrintDialog.Col1Value, FrmPrintDialog.rowToDate).Value = "" Then
                mQry += " AND Date(H.V_Date) >= " & AgL.Chk_Date(CDate(AgL.PubStartDate).ToString("s")) & ""
                mQry += " AND Date(H.V_Date) <= " & AgL.Chk_Date(CDate(AgL.PubEndDate).ToString("s")) & ""
            End If

            'FGetPrint(SearchCode, ClsMain.PrintFor.DocumentPrint,, mQry)



            dtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)
            If dtTemp.Rows.Count > 0 Then
                For I = 0 To dtTemp.Rows.Count - 1
                    FGetPrint(AgL.XNull(dtTemp.Rows(I)("DocID")), ClsMain.PrintFor.DocumentPrint, True, "")
                Next
            End If
        End If
    End Sub

    Private Sub FGetPrintSSRS(mPrintFor As ClsMain.PrintFor)
        Dim dsMain As DataTable
        Dim dsCompany As DataTable
        Dim mPrintTitle As String
        Dim PrintingCopies() As String
        Dim I As Integer, J As Integer

        If mPrintFor = ClsMain.PrintFor.EMail Or mPrintFor = ClsMain.PrintFor.QA Then
            PrintingCopies = ("").Split(",")
        Else
            'PrintingCopies = AgL.XNull(DtV_TypeSettings.Rows(0)("PrintingCopyCaptions")).ToString.Split(",")
            PrintingCopies = FGetSettings(SettingFields.PrintingCopyCaptions, SettingType.General).ToString.Split(",")
        End If

        If LblV_Type.Tag = Ncat.SaleReturn Then
            mPrintTitle = DglMain.Item(Col1Value, rowV_Type).Value & " (Credit Note)"
        Else
            mPrintTitle = DglMain.Item(Col1Value, rowV_Type).Value  ' "TAX INVOICE"        
        End If

        mQry = ""
        For I = 1 To PrintingCopies.Length
            If mQry <> "" Then mQry = mQry + " Union All "
            mQry = mQry + "
                Select '" & I & "' as Copies, '" & AgL.XNull(PrintingCopies(I - 1)) & "' as CopyPrintingCaption, H.DocID, L.Sr, H.V_Date, VT.Description as Voucher_Type, VT.NCat, 
                '" & IIf(AgL.PubPrintDivisionShortNameOnDocumentsYn, AgL.PubDivShortName, "") & IIf(AgL.PubPrintSiteShortNameOnDocumentsYn, AgL.PubSiteShortName, "") & "' || (Case When VT.Short_Name Is Not Null Then VT.Short_Name Else '' End) || H.ManualRefNo as InvoiceNo, 
                IfNull(RT.Description,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("SaleRate_Caption")) & "') as RateType, Agent.DispName as AgentName, '" & AgL.PubDtEnviro.Rows(0)("Caption_SalesAgent") & "' as AgentCaption,
                (Case When BP.Nature = 'Cash' Then BP.DispName || ' - ' || IsNull(H.SaleToPartyName,'') Else H.SaletoPartyName End) as SaleToPartyName, H.SaleToPartyAddress, C.CityName as CityName, State.ManualCode as StateCode, State.Description as StateName, 
                H.SaleToPartyMobile, Sg.ContactPerson, IfNull(H.SaleToPartySalesTaxNo,'') as SaleToPartySalesTaxNo, 
                IfNull(H.SaleToPartyAadharNo,'') as SaleToPartyAadharNo, IfNull(H.SaleToPartyPanNo,'') as PanNo,
                H.ShipToAddress, H.TermsAndConditions, Transporter.Name as TransporterName, TD.LrNo, TD.LrDate, TD.PrivateMark, TD.Weight, TD.Freight, TD.PaymentType as FreightType, TD.RoadPermitNo, TD.RoadPermitDate, IfNull(L.ReferenceNo,'') as ReferenceNo,
                I.Description as ItemName, " & IIf(mPrintFor = ClsMain.PrintFor.QA, "IG.Description", "IfNull(IG.PrintingDescription,IG.Description)") & " as ItemGroupName, IC.Description as ItemCatName, I.Specification as ItemSpecification, L.Specification as InvoiceLineSpecification, I.HSN, I.MaintainStockYn,
                L.SalesTaxGroupItem, STGI.GrossTaxRate, (Case when IfNull(I.MaintainStockYn,1) =1 Then L.Pcs Else 0 End) as Pcs, (Case when IfNull(I.MaintainStockYn,1) =1 Then abs(L.Qty) Else 0 End) as Qty, L.Rate, L.Unit, U.DecimalPlaces as UnitDecimalPlaces, TS.DiscountCalculationPattern, L.DiscountPer, L.DiscountAmount, L.AdditionalDiscountPer, L.AdditionalDiscountAmount, 
                abs(L.Amount) as Amount,Abs(L.Taxable_Amount) as Taxable_Amount,Abs(L.Tax1_Per) as Tax1_Per, abs(L.Tax1) as Tax1, abs(L.Tax2_Per) as Tax2_Per, abs(L.Tax2) as Tax2, abs(L.Tax3_Per) as Tax3_Per, abs(L.Tax3) as Tax3, abs(L.Tax4_Per) as Tax4_Per, abs(L.Tax4) as Tax4, abs(L.Tax5_Per) as Tax5_Per, abs(L.Tax5) as Tax5, abs(L.Net_Amount) as Net_Amount, L.Remark as LRemarks, H.Remarks as HRemarks,
                abs(H.Gross_Amount) as H_Gross_Amount, H.SpecialDiscount_Per as H_SpecialDiscount_Per, H.SpecialDiscount as H_SpecialDiscount, Abs(H.Taxable_Amount) as H_Taxable_Amount,Abs(H.Tax1_Per) as H_Tax1_Per, Abs(H.Tax1) as H_Tax1, 
                H.Tax2_Per as H_Tax2_Per, abs(H.Tax2) as H_Tax2, H.Tax3_Per as H_Tax3_Per, abs(H.Tax3) as H_Tax3, H.Tax4_Per as H_Tax4_Per, abs(H.Tax4) as H_Tax4, 
                H.Tax5_Per as H_Tax5_Per, abs(H.Tax5) as H_Tax5, H.Deduction_Per as H_Deduction_Per, H.Deduction as H_Deduction, H.Other_Charge_Per as H_Other_Charge_Per, H.Other_Charge as H_Other_Charge, H.Round_Off, abs(H.Net_Amount) as H_Net_Amount, '" & AgL.XNull(AgL.PubDtEnviro.Rows(0)("Default_BankAccountDetail")) & "' as Default_BankAccountDetail,
                '" & AgL.VNull(AgL.PubDtEnviro.Rows(0)("IsCenterAlignedCompanyInfoOnDocuments")) & "' as IsCenterAlignedCompanyInfoOnDocuments, IfNull(L.DimensionDetail,'') as DimDetail,
                '" & AgL.PubUserName & "' as PrintedByUser, '" & mPrintTitle & "' as PrintTitle
                from (Select * From SaleInvoice  With (NoLock) Where DocID = '" & mSearchCode & "') as H
                Left Join SaleInvoiceTrnSetting TS  With (NoLock) On H.DocId = TS.DocID
                Left Join SaleInvoiceDetail L  With (NoLock) On H.DocID = L.DocID
                Left Join Item I  With (NoLock) On L.Item = I.Code
                Left Join Unit U  With (NoLock) On I.Unit = U.Code
                Left Join ItemGroup IG  With (NoLock) On I.ItemGroup = IG.Code
                Left Join ItemCategory IC  With (NoLock) On I.ItemCategory = IC.Code
                Left Join City C  With (NoLock) On H.SaleToPartyCity = C.CityCode
                Left Join State  With (NoLock) On C.State = State.Code
                Left Join SaleInvoiceTransport TD  With (NoLock) On H.DocID = TD.DocID
                Left Join ViewHelpSubgroup Transporter  With (NoLock) On TD.Transporter= Transporter.Code
                Left Join PostingGroupSalesTaxItem STGI  With (NoLock) On L.SalesTaxGroupItem = STGI.Description
                Left Join Subgroup Sg  With (NoLock) On H.SaleToParty = Sg.Subcode
                Left Join Subgroup BP With (NoLock) On H.BillToParty = BP.Subcode
                Left Join RateType RT  With (NoLock) on H.RateType = Rt.Code
                Left Join Subgroup Agent  With (NoLock) On H.Agent = Agent.Subcode
                Left Join Voucher_Type Vt  With (NoLock) On H.V_Type = Vt.V_Type
                Left Join DocumentPrefix DP On VT.Category = DP.Category And H.Div_Code = DP.Div_Code                
                "

        Next
        mQry = mQry + " Order By Copies, H.DocID, L.Sr "

        dsMain = AgL.FillData(mQry, AgL.GCn).Tables(0)


        FReplaceInvoiceVariables(dsMain, TxtDivision.Tag, DglMain.Item(Col1Value, rowSite_Code).Tag)

        dsCompany = ClsMain.GetDocumentHeaderDataTable(TxtDivision.Tag, DglMain.Item(Col1Value, rowSite_Code).Tag, DglMain.Item(Col1Value, rowV_Type).Tag)

        Dim objRepPrint As Object

        If mPrintFor = ClsMain.PrintFor.EMail Then
            objRepPrint = New AgLibrary.FrmMailCompose(AgL)
            objRepPrint.TxtToEmail.Text = AgL.XNull(AgL.Dman_Execute("Select Sg.Email
                    From SaleInvoice H  With (NoLock)
                    LEFT JOIN SubGroup Sg  With (NoLock) On H.SaleToParty = Sg.SubCode
                    Where H.DocId = '" & mSearchCode & "'", AgL.GCn).ExecuteScalar())
            objRepPrint.TxtCcEmail.Text = AgL.XNull(AgL.Dman_Execute("Select Sg.Email
                    From SaleInvoice H  With (NoLock)
                    LEFT JOIN SubGroup Sg  With (NoLock) On H.Agent = Sg.SubCode
                    Where H.DocId = '" & mSearchCode & "'", AgL.GCn).ExecuteScalar())
            objRepPrint.AttachmentName = "Invoice"

            objRepPrint.reportViewer1.SetDisplayMode(DisplayMode.PrintLayout)
            objRepPrint.reportViewer1.ZoomMode = ZoomMode.Percent
            objRepPrint.reportViewer1.ZoomPercent = 50
        Else

            objRepPrint = New FrmRepPrint(AgL)


        End If

        objRepPrint.reportViewer1.Visible = True
        Dim id As Integer = 0
        objRepPrint.reportViewer1.ProcessingMode = ProcessingMode.Local

        If AgL.PubUserName.ToUpper = "SUPER" Then
            dsMain = ClsMain.RemoveNullFromDataTable(dsMain)
            dsCompany = ClsMain.RemoveNullFromDataTable(dsCompany)
            dsMain.WriteXml(AgL.PubReportPath + "\SaleInvoice_DsMain.xml")
            dsCompany.WriteXml(AgL.PubReportPath + "\SaleInvoice_DsCompany.xml")
        End If

        If AgL.XNull(DtV_TypeSettings.Rows(0)("ReportFileName")) <> "" Then
            objRepPrint.reportViewer1.LocalReport.ReportPath = AgL.PubReportPath + "\" + AgL.XNull(DtV_TypeSettings.Rows(0)("ReportFileName"))
        Else

            If ClsMain.IsScopeOfWorkContains("+CLOTH TRADING WHOLESALE") Then
                objRepPrint.reportViewer1.LocalReport.ReportPath = AgL.PubReportPath + "\SaleInvoice_Cloth.rdl"
            Else
                objRepPrint.reportViewer1.LocalReport.ReportPath = AgL.PubReportPath + "\SaleInvoice.rdl"
            End If
        End If

        If (dsMain.Rows.Count = 0) Then
            MsgBox("No records found to print.")
        End If
        Dim rds As New ReportDataSource("DsMain", dsMain)
        Dim rdsCompany As New ReportDataSource("DsCompany", dsCompany)



        objRepPrint.reportViewer1.LocalReport.DataSources.Clear()
        objRepPrint.reportViewer1.LocalReport.DataSources.Add(rds)
        objRepPrint.reportViewer1.LocalReport.DataSources.Add(rdsCompany)


        objRepPrint.reportViewer1.LocalReport.Refresh()
        objRepPrint.reportViewer1.RefreshReport()
        objRepPrint.MdiParent = Me.MdiParent
        objRepPrint.Show()
    End Sub

    Private Sub FSendSms(SendWithUI As Boolean)
        Dim FrmObj As FrmSendSms
        FrmObj = New FrmSendSms(AgL)

        FGetSmsConfiguration(FrmObj, mSearchCode)

        If SendWithUI Then
            FrmObj.StartPosition = FormStartPosition.CenterScreen
            FrmObj.ShowDialog()
        Else
            FrmObj.FSendSms()
        End If
    End Sub

    Private Function GetFieldAliasName(bImportFor As ImportFor, bFieldName As String)
        Dim bAliasName As String = bFieldName
        If bImportFor = ImportFor.Dos Then
            Select Case bFieldName
                Case "V_TYPE"
                    bAliasName = "V_TYPE"
                Case "V_NO"
                    bAliasName = "V_NO"
                Case "V_Date"
                    bAliasName = "V_DATE"
                Case "Invoice No"
                    bAliasName = "INVOICE_NO"
                Case "Sale To Party"
                    bAliasName = "SALE_PARTY"
                Case "Sale To Party Address"
                    bAliasName = "PARTY_ADD"
                Case "Sale To Party City"
                    bAliasName = "PARTY_CITY"
                Case "Sale To Party Pincode"
                    bAliasName = "PINCODE"
                Case "Sale To Party Sales Tax No"
                    bAliasName = "GSTIN"
                Case "Bill To Party"
                    bAliasName = "BILL_PARTY"
                Case "Agent"
                    bAliasName = "AGENT"
                Case "Transporter"
                    bAliasName = "TRANSPORT"
                Case "Transporter Sales Tax No"
                    bAliasName = "TR_GSTIN"
                Case "Rate Type"
                    bAliasName = "RATE_TYPE"
                Case "Sales Tax Group Party"
                    bAliasName = "TAX_GROUP"
                Case "Place Of Supply"
                    bAliasName = "PLACE_SUPP"
                Case "Sale To Party Doc No"
                    bAliasName = "Sale To Party Doc No"
                Case "Sale To Party Doc Date"
                    bAliasName = "Sale To Party Doc Date"
                Case "Remark"
                    bAliasName = "REMARK"
                Case "Terms And Conditions"
                    bAliasName = "TERMS"
                Case "Credit Limit"
                    bAliasName = "CR_LIMIT"
                Case "Credit Days"
                    bAliasName = "CR_DAYS"
                Case "SubTotal1"
                    bAliasName = "SUBTOTAL1"
                Case "Deduction_Per"
                    bAliasName = "DED_PER"
                Case "Deduction"
                    bAliasName = "DEDUCTION"
                Case "Other_Charge_Per"
                    bAliasName = "OT_CH_PER"
                Case "Other_Charge"
                    bAliasName = "OT_CHARGE"
                Case "Round_Off"
                    bAliasName = "ROUND_OFF"
                Case "Net_Amount"
                    bAliasName = "NET_AMOUNT"


                Case "TSr"
                    bAliasName = "TSR"
                Case "Item Name"
                    bAliasName = "ITEM_NAME"
                Case "Item Group"
                    bAliasName = "make_name"
                Case "Item Category"
                    bAliasName = "catagory"
                Case "Specification"
                    bAliasName = "SPECIFIC"
                Case "Sales Tax Group Item"
                    bAliasName = "TAX_GROUP"
                Case "Qty"
                    bAliasName = "QTY"
                Case "Unit"
                    bAliasName = "UNIT"
                Case "Pcs"
                    bAliasName = "PCS"
                Case "Unit Multiplier"
                    bAliasName = "Unit Multiplier"
                Case "Deal Unit"
                    bAliasName = "Deal Unit"
                Case "Deal Qty"
                    bAliasName = "Deal Qty"
                Case "Rate"
                    bAliasName = "Rate"
                Case "Discount Per"
                    bAliasName = "DISC_PER"
                Case "Discount Amount"
                    bAliasName = "DISC_AMT"
                Case "Additional Discount Per"
                    bAliasName = "ADISP_PER"
                Case "Additional Discount Amount"
                    bAliasName = "ADISC_AMT"
                Case "Amount"
                    bAliasName = "AMOUNT"
                Case "Remark"
                    bAliasName = "REMARK"
                Case "Bale No"
                    bAliasName = "BALE_NO"
                Case "Lot No"
                    bAliasName = "LOT_NO"
                Case "Gross_Amount"
                    bAliasName = "GROSS_AMT"
                Case "Taxable_Amount"
                    bAliasName = "TAXABLEAMT"
                Case "Tax1_Per"
                    bAliasName = "TAX1_PER"
                Case "Tax1"
                    bAliasName = "TAX1"
                Case "Tax2_Per"
                    bAliasName = "TAX2_PER"
                Case "Tax2"
                    bAliasName = "TAX2"
                Case "Tax3_Per"
                    bAliasName = "TAX3_PER"
                Case "Tax3"
                    bAliasName = "TAX3"
                Case "Tax4_Per"
                    bAliasName = "TAX4_PER"
                Case "Tax4"
                    bAliasName = "TAX4"
                Case "Tax5_Per"
                    bAliasName = "TAX5_PER"
                Case "Tax5"
                    bAliasName = "TAX5"

                Case "TotalQty"
                    bAliasName = "totqty"
            End Select

            Return bAliasName
        Else
            Return bFieldName
        End If
    End Function

    Private Sub FrmSaleInvoiceDirect_BaseFunction_FIniList() Handles Me.BaseFunction_FIniList
        mQry = "Select * From ItemTypeSetting"
        DtItemTypeSettingsAll = AgL.FillData(mQry, AgL.GCn).Tables(0)

        mQry = "SELECT Ir.*, I.V_Type As ItemV_Type, RI.V_Type As RelatedItemV_Type 
                FROM ItemRelation Ir 
                LEFT JOIN Item I On Ir.Item = I.Code 
                LEFT JOIN Item RI On Ir.RelatedItem = Ri.Code "
        DtItemRelation = AgL.FillData(mQry, AgL.GCn).Tables(0)

        mQry = "Select H.* from EntryHeaderUISetting H Where EntryName='" & Me.Name & "'"
        DtEntryHeaderUISetting = AgL.FillData(mQry, AgL.GCn).Tables(0)

        mQry = "Select H.* from EntryLineUISetting H Where EntryName='" & Me.Name & "'"
        DtEntryLineUISetting = AgL.FillData(mQry, AgL.GCn).Tables(0)
    End Sub

    Private Sub MnuPrintQACopy_Click(sender As Object, e As EventArgs) Handles MnuPrintQACopy.Click
        FGetPrint(mSearchCode, ClsMain.PrintFor.QA)
    End Sub
    'Private Sub DglMain_CellEnter(sender As Object, e As DataGridViewCellEventArgs) Handles DglMain.CellEnter
    '    MakeGridCurrentCellNothing(sender.Name)
    '    Debug.Print(Me.Name & " - " & sender.Name & "  Cell Enter Column Index " & sender.CurrentCell.ColumnIndex.ToString & " : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString)
    'End Sub
    Private Sub Dgl2_CellEnter(sender As Object, e As DataGridViewCellEventArgs) Handles Dgl2.CellEnter
        Try
            If Dgl2.CurrentCell Is Nothing Or isInitializingGrids Then Exit Sub

            Dim mRow As Integer = Dgl2.CurrentCell.RowIndex
            Dim mCol As Integer = Dgl2.CurrentCell.ColumnIndex

            MakeGridCurrentCellNothing(sender.Name)

            Debug.Print(Me.Name & " - " & sender.Name & "  Cell Enter Column Index " & sender.CurrentCell.ColumnIndex.ToString & ", Row Index " & sender.CurrentCell.RowIndex.ToString & " : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString)

            If Me.Visible And sender.ReadOnly = False Then
                If sender.CurrentCell.ColumnIndex = sender.Columns(Col1Head).Index Then
                    If sender.CurrentCell.OwningColumn.Visible Then
                        Debug.Print(Me.Name & " - " & sender.name & " Cell Enter Tab Column Index " & sender.CurrentCell.ColumnIndex.ToString & " : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString)
                        'Dgl2.FProcessDataGridViewKey()
                        'SendKeys.Send("{Tab}")
                    End If
                End If

                If sender.CurrentCell.ColumnIndex = sender.Columns(Col1BtnDetail).Index Then
                    If sender.CurrentCell.OwningColumn.Visible Then
                        If TypeOf (sender.currentcell) IsNot DataGridViewButtonCell Then
                            Debug.Print(Me.Name & " - " & sender.name & " Cell Enter Tab Column Index " & sender.CurrentCell.ColumnIndex.ToString & " : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString)
                            'sender.FProcessDataGridViewKey()
                        End If
                    End If
                End If
            End If
            If Dgl2.CurrentCell.ColumnIndex = Dgl2.Columns(Col1Value).Index Then
                Dgl2.AgHelpDataSet(Dgl2.CurrentCell.ColumnIndex) = Nothing
                CType(Dgl2.Columns(Col1Value), AgControls.AgTextColumn).AgValueType = AgControls.AgTextColumn.TxtValueType.Text_Value
                CType(Dgl2.Columns(Col1Value), AgControls.AgTextColumn).MaxInputLength = 0

                Select Case Dgl2.CurrentCell.RowIndex
                    Case rowPartyDocDate, rowDeliveryDate, rowMinDeliveryDate, rowAmsDocDate
                        CType(Dgl2.Columns(Col1Value), AgControls.AgTextColumn).AgValueType = AgControls.AgTextColumn.TxtValueType.Date_Value

                End Select
            End If
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try


        'Dim LastCell As DataGridViewCell = LastDisplayedCell(Dgl2)
        'If Dgl2.CurrentCell.RowIndex = LastCell.RowIndex And Dgl2.CurrentCell.ColumnIndex = Dgl2.Columns(Col1BtnDetail).Index Then
        '    If TxtBarcode.Visible = True And TxtBarcode.Enabled = True Then
        '        TxtBarcode.Focus()
        '    ElseIf Dgl1.Visible Then
        '        Dgl1.CurrentCell = Dgl1.FirstDisplayedCell
        '        Dgl1.Focus() : MakeGridCurrentCellNothing(Dgl1.Name)
        '    End If
        'End If
    End Sub

    Private Sub Dgl3_CellEnter(sender As Object, e As DataGridViewCellEventArgs) Handles Dgl3.CellEnter
        Try
            If Dgl3.CurrentCell Is Nothing Or isInitializingGrids Then Exit Sub
            If Topctrl1.Mode = "BROWSE" Then
                Dgl3.CurrentCell.ReadOnly = True
            End If


            If Me.Visible And sender.ReadOnly = False And sender.CurrentCell.RowIndex > 0 Then
                If sender.CurrentCell.ColumnIndex = sender.Columns(Col1Head).Index Or
                    sender.CurrentCell.ColumnIndex = sender.Columns(Col1Mandatory).Index Then
                    sender.FProcessDataGridViewKey()
                End If
            End If
            If Dgl3.CurrentCell.ColumnIndex <> Dgl3.Columns(Col1Value).Index Then Exit Sub


            Dgl3.AgHelpDataSet(Dgl3.CurrentCell.ColumnIndex) = Nothing
            CType(Dgl3.Columns(Col1Value), AgControls.AgTextColumn).AgValueType = AgControls.AgTextColumn.TxtValueType.Text_Value
            CType(Dgl3.Columns(Col1Value), AgControls.AgTextColumn).MaxInputLength = 0

            Select Case Dgl3.CurrentCell.RowIndex
                Case rowCreditDays
                    CType(Dgl3.Columns(Col1Value), AgControls.AgTextColumn).AgValueType = AgControls.AgTextColumn.TxtValueType.Number_Value
                    CType(Dgl3.Columns(Col1Value), AgControls.AgTextColumn).AgNumberLeftPlaces = 3
                    CType(Dgl3.Columns(Col1Value), AgControls.AgTextColumn).AgNumberRightPlaces = 0

                Case rowTags
                    Dgl3.Item(Col1Value, rowTags).ReadOnly = True
            End Select
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try

    End Sub


    Private Sub Dgl2_EditingControl_KeyDown(sender As Object, e As KeyEventArgs) Handles Dgl2.EditingControl_KeyDown
        Dim bRowIndex As Integer = 0, bColumnIndex As Integer = 0
        Dim bItemCode As String = ""
        Dim DrTemp As DataRow() = Nothing
        Try
            If Dgl2.CurrentCell Is Nothing Then Exit Sub

            bRowIndex = Dgl2.CurrentCell.RowIndex
            bColumnIndex = Dgl2.CurrentCell.ColumnIndex

            'If e.KeyCode = Keys.Enter Then Exit Sub
            If bColumnIndex <> Dgl2.Columns(Col1Value).Index Then Exit Sub

            Select Case Dgl2.CurrentCell.RowIndex
                Case rowPartyDocNo
                    If FDivisionNameForCustomization(13) = "JAIN BROTHERS" Or FDivisionNameForCustomization(11) = "BOOK SHOPEE" Or
                        (FDivisionNameForCustomization(5) = "LIBAS" And LblV_Type.Tag = Ncat.SaleReturn) Then
                        If e.KeyCode <> Keys.Enter Then
                            If Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag Is Nothing Then
                                mQry = "SELECT H.DocID As DocId, H.ManualRefNo AS InvoiceNo, H.V_Type as DocType,
                                    H.V_Date As InvoiceDate, H.Net_Amount AS InvoiceAmount
                                    FROM SaleInvoice H                                     
                                    LEFT JOIN Voucher_Type Vt ON H.V_Type = Vt.V_Type
                                    Where Vt.NCat = '" & Ncat.SaleInvoice & "'
                                    And H.Div_Code='" & TxtDivision.Tag & "' and H.site_code = '" & DglMain.Item(Col1Value, rowSite_Code).Tag & "'
                                    "
                                Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag = AgL.FillData(mQry, AgL.GCn)
                            End If

                            If Dgl2.AgHelpDataSet(Col1Value) Is Nothing Then
                                Dgl2.AgHelpDataSet(Col1Value,, TabControl1.Top + TP1.Top, TabControl1.Left + TP1.Left) = Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag
                            End If
                        End If
                    End If

                Case rowRateType
                    If e.KeyCode <> Keys.Enter Then
                        If Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag Is Nothing Then
                            mQry = "SELECT Code, Description FROM RateType With (NoLock) Order By Description "
                            Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag = AgL.FillData(mQry, AgL.GCn)
                        End If

                        If Dgl2.AgHelpDataSet(Col1Value) Is Nothing Then
                            Dgl2.AgHelpDataSet(Col1Value,, TabControl1.Top + TP1.Top, TabControl1.Left + TP1.Left) = Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag
                        End If
                    End If
                Case rowSalesTaxApplicable
                    If e.KeyCode <> Keys.Enter Then
                        If Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag Is Nothing Then
                            mQry = "SELECT 'Yes' as  Code, 'Yes' as  Description Union All Select 'No' as Code, 'No' as Description "
                            Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag = AgL.FillData(mQry, AgL.GCn)
                        End If

                        If Dgl2.AgHelpDataSet(Col1Value) Is Nothing Then
                            Dgl2.AgHelpDataSet(Col1Value,, TabControl1.Top + TP1.Top, TabControl1.Left + TP1.Left) = Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag
                        End If
                    End If
                Case rowGodown
                    If e.KeyCode <> Keys.Enter Then
                        If Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag Is Nothing Then
                            mQry = "SELECT Code, Name From viewHelpSubgroup Sg  With (NoLock) Where SubgroupType ='" & SubgroupType.Godown & "' Order By Name"
                            Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag = AgL.FillData(mQry, AgL.GCn)
                        End If

                        If Dgl2.AgHelpDataSet(Col1Value) Is Nothing Then
                            Dgl2.AgHelpDataSet(Col1Value,, TabControl1.Top + TP1.Top, TabControl1.Left + TP1.Left) = Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag
                        End If
                    End If

                Case rowReferenceSaleInvoiceNo
                    If CType(AgL.VNull(FGetSettings(SettingFields.ShowReferenceNoHeaderHelpYn, SettingType.General)), Boolean) = True Then
                        If e.KeyCode <> Keys.Enter Then
                            If Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag Is Nothing Then
                                mQry = "SELECT DocID, 
                                    '" & IIf(AgL.PubPrintDivisionShortNameOnDocumentsYn, AgL.PubDivShortName, "") & IIf(AgL.PubPrintSiteShortNameOnDocumentsYn, AgL.PubSiteShortName, "") & "' || (Case When VT.Short_Name Is Not Null Then VT.Short_Name Else '' End) || H.ManualRefNo  as DocNo                                     
                                    FROM SaleInvoice H With (NoLock)                                     
                                    Left Join Voucher_Type Vt on H.V_Type = VT.V_Type
                                    Where H.Site_Code = '" & DglMain.Item(Col1Value, rowSite_Code).Tag & "' And Div_Code = '" & TxtDivision.Tag & "' And H.V_Type = '" & DglMain.Item(Col1Value, rowV_Type).Tag & "'
                                    Order By '" & IIf(AgL.PubPrintDivisionShortNameOnDocumentsYn, AgL.PubDivShortName, "") & IIf(AgL.PubPrintSiteShortNameOnDocumentsYn, AgL.PubSiteShortName, "") & "' || (Case When VT.Short_Name Is Not Null Then VT.Short_Name Else '' End) || H.ManualRefNo "
                                Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag = AgL.FillData(mQry, AgL.GCn)
                            End If

                            If Dgl2.AgHelpDataSet(Col1Value) Is Nothing Then
                                Dgl2.AgHelpDataSet(Col1Value,, TabControl1.Top + TP1.Top, TabControl1.Left + TP1.Left) = Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag
                            End If
                        End If
                    End If

                Case rowShipToParty
                    If e.KeyCode = Keys.Insert Then
                        Dim bSearchCode As String
                        bSearchCode = ClsMain.FOpenPartyMaster(SubgroupType.Customer)
                        If bSearchCode <> "" Then
                            Dgl1.Item(Col1Head, rowShipToParty).Tag = Nothing
                            Dgl1(Col1Value, rowShipToParty).Tag = bSearchCode
                            Dgl1(Col1Value, rowShipToParty).Value = AgL.XNull(AgL.Dman_Execute("Select Name From viewHelpSubgroup Where Code = '" & bSearchCode & "'", AgL.GCn).ExecuteScalar)
                            SendKeys.Send("{Enter}")
                        End If
                    ElseIf e.KeyCode <> Keys.Enter Then
                        If Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag Is Nothing Then
                            Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag = FCreateHelpSubgroup()
                        End If

                        If Dgl2.AgHelpDataSet(Col1Value) Is Nothing Then
                            Dgl2.AgHelpDataSet(Col1Value, 6, TabControl1.Top + TP1.Top, TabControl1.Left + TP1.Left) = Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag
                        End If
                    End If


                Case rowSalesRepresentative
                    If e.KeyCode <> Keys.Enter Then
                        If Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag Is Nothing Then
                            mQry = "SELECT Sg.Code, Sg.Name From viewHelpSubgroup Sg  With (NoLock) Left Join HRM_Employee Emp On Sg.Code = Emp.Subcode Where sg.SubgroupType ='" & SubgroupType.Employee & "' And Emp.RelievingDate Is Null And Emp.Designation='SREP' And Site_Code = '" & DglMain.Item(Col1Value, rowSite_Code).Tag & "' Order By sg.Name "
                            Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag = AgL.FillData(mQry, AgL.GCn)
                        End If

                        If Dgl2.AgHelpDataSet(Col1Value) Is Nothing Then
                            Dgl2.AgHelpDataSet(Col1Value,, TabControl1.Top + TP1.Top, TabControl1.Left + TP1.Left) = Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag
                        End If
                    End If

                Case rowCatalog
                    If e.KeyCode <> Keys.Enter Then
                        If Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag Is Nothing Then
                            mQry = "SELECT Code, Description FROM Catalog 
                                    Where  " & IIf(AgL.PubIsHo, "1=1", "Site_Code = '" & DglMain.Item(Col1Value, rowSite_Code).Tag & "'") & "  
                                    Order By Description "
                            mQry = "SELECT Code, Description FROM Catalog 
                                    Where 1=1
                                    Order By Description "

                            Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag = AgL.FillData(mQry, AgL.GCn)
                        End If

                        If Dgl2.AgHelpDataSet(Col1Value) Is Nothing Then
                            Dgl2.AgHelpDataSet(Col1Value,, TabControl1.Top + TP1.Top, TabControl1.Left + TP1.Left) = Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag
                        End If
                    End If
            End Select
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try

        'Try
        '    If e.KeyCode = Keys.Enter Then
        '        Dim LastCell As DataGridViewCell = LastDisplayedCell(Dgl2)
        '        If Dgl2.CurrentCell.RowIndex = LastCell.RowIndex And Dgl2.CurrentCell.ColumnIndex = LastCell.ColumnIndex Then
        '            'e.Handled = True
        '            'If TxtBarcode.Visible = True And TxtBarcode.Enabled = True Then
        '            '    TxtBarcode.Focus()
        '            'ElseIf Dgl1.Visible Then
        '            '    Dgl1.CurrentCell = Dgl1.FirstDisplayedCell
        '            '    Dgl1.Focus() : MakeGridCurrentCellNothing(Dgl1.Name)
        '            'End If
        '        End If
        '    End If
        'Catch ex As Exception
        '    MsgBox(ex.Message)
        'End Try

    End Sub

    Private Sub Dgl3_EditingControl_KeyDown(sender As Object, e As KeyEventArgs) Handles Dgl3.EditingControl_KeyDown
        Dim bRowIndex As Integer = 0, bColumnIndex As Integer = 0
        Dim bItemCode As String = ""
        Dim DrTemp As DataRow() = Nothing
        Try
            bRowIndex = Dgl3.CurrentCell.RowIndex
            bColumnIndex = Dgl3.CurrentCell.ColumnIndex

            If e.KeyCode = Keys.Enter Then Exit Sub
            If bColumnIndex <> Dgl3.Columns(Col1Value).Index Then Exit Sub

            Select Case Dgl3.CurrentCell.RowIndex
                Case rowAgent
                    If e.KeyCode <> Keys.Enter Then
                        If Dgl3.Item(Col1Head, Dgl3.CurrentCell.RowIndex).Tag Is Nothing Then
                            mQry = "SELECT Code, Name From viewHelpSubgroup Sg  With (NoLock) Where SubgroupType ='" & SubgroupType.SalesAgent & "' Order By Name"
                            Dgl3.Item(Col1Head, Dgl3.CurrentCell.RowIndex).Tag = AgL.FillData(mQry, AgL.GCn)
                        End If

                        If Dgl3.AgHelpDataSet(Col1Value) Is Nothing Then
                            Dgl3.AgHelpDataSet(Col1Value) = Dgl3.Item(Col1Head, Dgl3.CurrentCell.RowIndex).Tag
                        End If
                    End If

                Case rowResponsiblePerson
                    If e.KeyCode <> Keys.Enter Then
                        If Dgl3.Item(Col1Head, Dgl3.CurrentCell.RowIndex).Tag Is Nothing Then
                            mQry = "SELECT Sg.Code, Sg.Name From viewHelpSubgroup Sg  With (NoLock) Left Join HRM_Employee Emp On Sg.Code = Emp.Subcode Where sg.SubgroupType ='" & SubgroupType.Employee & "' And Emp.RelievingDate Is Null And Site_Code = '" & DglMain.Item(Col1Value, rowSite_Code).Tag & "' "
                            If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterResponsiblePersonDesignation")) <> "" Then
                                mQry += " And CharIndex('+' || Emp.Designation,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterResponsiblePersonDesignation")) & "') > 0 "
                                mQry += " And CharIndex('-' || Emp.Designation,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterResponsiblePersonDesignation")) & "') <= 0 "
                            End If
                            mQry += " Order By sg.Name "

                            Dgl3.Item(Col1Head, Dgl3.CurrentCell.RowIndex).Tag = AgL.FillData(mQry, AgL.GCn)
                        End If

                        If Dgl3.AgHelpDataSet(Col1Value) Is Nothing Then
                            Dgl3.AgHelpDataSet(Col1Value) = Dgl3.Item(Col1Head, Dgl3.CurrentCell.RowIndex).Tag
                        End If
                    End If

                Case rowTransporter
                    If e.KeyCode <> Keys.Enter Then
                        If Dgl3.Item(Col1Head, Dgl3.CurrentCell.RowIndex).Tag Is Nothing Then
                            mQry = "SELECT Code, Name From viewHelpSubgroup Sg  With (NoLock) Where SubgroupType ='" & SubgroupType.Transporter & "' Order By Name"
                            Dgl3.Item(Col1Head, Dgl3.CurrentCell.RowIndex).Tag = AgL.FillData(mQry, AgL.GCn)
                        End If

                        If Dgl3.AgHelpDataSet(Col1Value) Is Nothing Then
                            Dgl3.AgHelpDataSet(Col1Value) = Dgl3.Item(Col1Head, Dgl3.CurrentCell.RowIndex).Tag
                        End If
                    End If


                Case rowRemarks
                    If e.KeyCode = Keys.Enter Then
                        If MsgBox("Do you want to save?", MsgBoxStyle.YesNo + MsgBoxStyle.DefaultButton2, "Save") = MsgBoxResult.Yes Then
                            Topctrl1.FButtonClick(13)
                        End If
                    End If
            End Select
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub

    Private Sub Dgl2_EditingControl_Validating(sender As Object, e As CancelEventArgs) Handles Dgl2.EditingControl_Validating
        Dim mRow As Integer
        Dim mColumn As Integer
        mRow = Dgl2.CurrentCell.RowIndex
        mColumn = Dgl2.CurrentCell.ColumnIndex
        If mColumn = Dgl2.Columns(Col1Value).Index Then
            If Dgl2.Item(Col1Mandatory, mRow).Value <> "" Then
                If Dgl2(Col1Value, mRow).Value = "" Then
                    MsgBox(Dgl2(Col1Head, mRow).Value & " can not be blank.")
                    e.Cancel = True
                    Exit Sub
                End If
            End If
        End If

        Try
            If mColumn <> Dgl2.Columns(Col1Value).Index Then Exit Sub

            Select Case Dgl2.CurrentCell.RowIndex
                Case rowCatalog
                    If AgL.XNull(Dgl2.Item(Col1Value, Dgl2.CurrentCell.RowIndex).Tag) <> "" Then
                        FFillCatalogItems(Dgl2.Item(Col1Value, Dgl2.CurrentCell.RowIndex).Tag)
                    End If
                Case rowAmsDocNo
                    Dim isDuplicate As Boolean
                    isDuplicate = Not AgTemplate.ClsMain.FCheckDuplicateRefNo("AmsDocNo", "SaleInvoice",
                        DglMain.Item(Col1Value, rowV_Type).Tag, DglMain.Item(Col1Value, rowV_Date).Value, TxtDivision.AgSelectedValue,
                        DglMain.Item(Col1Value, rowSite_Code).Tag, Topctrl1.Mode,
                        Dgl2.Item(Col1Value, rowAmsDocNo).Value, mSearchCode, True)
                    If isDuplicate Then
                        If MsgBox("Ams Doc. No. Already exist. Do you want to continue?", vbYesNo, MessageBoxIcon.Question + MessageBoxDefaultButton.Button2) = vbNo Then
                            Dgl2.Item(Col1Value, rowAmsDocNo).Value = ""
                            e.Cancel = isDuplicate
                        End If
                    End If
                Case rowPartyDocNo
                    FSaleInvoiceSelectionWindowForReturnOneInvoice()
            End Select
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try


        'Dim LastCell As DataGridViewCell = LastDisplayedCell(Dgl2)
        'If Dgl2.CurrentCell.RowIndex = LastCell.RowIndex And Dgl2.CurrentCell.ColumnIndex = LastCell.ColumnIndex Then
        '    If TxtBarcode.Visible = True And TxtBarcode.Enabled = True Then

        '        TxtBarcode.Focus()
        '    ElseIf Dgl1.Visible Then

        '        Dgl1.CurrentCell = Dgl1.FirstDisplayedCell
        '        Dgl1.Focus() : MakeGridCurrentCellNothing(Dgl1.Name)
        '    End If
        'End If
    End Sub

    Private Sub ShowAttachments()
        Dim FrmObj As New AgLibrary.FrmAttachmentViewer(AgL)
        FrmObj.LblDocNo.Text = "Document No. : " + DglMain.Item(Col1Value, rowReferenceNo).Value
        FrmObj.SearchCode = mSearchCode
        FrmObj.TableName = "SubGroupAttachments"
        FrmObj.StartPosition = FormStartPosition.CenterParent
        FrmObj.ShowDialog()
        FrmObj.Dispose()
        FrmObj = Nothing
        SetAttachmentCaption()
    End Sub

    Private Sub SetAttachmentCaption()
        Dim AttachmentPath As String = PubAttachmentPath + mSearchCode + "\"
        If Directory.Exists(AttachmentPath) Then
            Dim FileCount As Integer = Directory.GetFiles(AttachmentPath).Count
            If FileCount > 0 Then Dgl2.Item(Col1Value, rowBtnAttachments).Value = FileCount.ToString + IIf(FileCount = 1, " Attachment", " Attachments") Else Dgl2.Item(Col1Value, rowBtnAttachments).Value = ""
        Else
            Dgl2.Item(Col1Value, rowBtnAttachments).Value = ""
        End If
    End Sub
    Private Sub Dgl3_KeyDown(sender As Object, e As KeyEventArgs) Handles Dgl3.KeyDown
        Dim bRowIndex As Integer = 0
        Dim bColumnIndex As Integer = 0
        Try
            If Dgl3.CurrentCell Is Nothing Then Exit Sub

            bRowIndex = Dgl3.CurrentCell.RowIndex
            bColumnIndex = Dgl3.CurrentCell.ColumnIndex

            If ClsMain.IsSpecialKeyPressed(e) Then Exit Sub
            If Topctrl1.Mode = "Browse" Then Exit Sub
            If bColumnIndex <> Dgl3.Columns(Col1Value).Index Then Exit Sub
            If e.KeyCode = Keys.Delete Then Dgl3.CurrentCell.Value = "" : Dgl3.CurrentCell.Tag = "" : Exit Sub

            Select Case Dgl3.CurrentCell.RowIndex
                Case rowTags
                    If e.KeyCode <> Keys.Enter Then
                        FHPGD_Tags()
                    End If

                Case rowTermsAndConditions
                    If e.KeyCode = Keys.Enter Then
                        If MsgBox("Do you want to save?", MsgBoxStyle.YesNo + MsgBoxStyle.DefaultButton2, "Save") = MsgBoxResult.Yes Then
                            Topctrl1.FButtonClick(13)
                        End If
                    End If
            End Select

            If e.KeyCode = Keys.Enter Then
                Dim LastCell As DataGridViewCell = ClsMain.LastDisplayedCell(Dgl3)
                If Dgl3.CurrentCell IsNot Nothing Then
                    If Dgl3.CurrentCell.RowIndex = LastCell.RowIndex Then
                        If DglPurchase.Visible = True Then
                            DglPurchase.CurrentCell = DglPurchase.FirstDisplayedCell
                            DglPurchase.Focus() : MakeGridCurrentCellNothing(DglPurchase.Name)
                        Else
                            If MsgBox("Do you want to save?", MsgBoxStyle.YesNo + MsgBoxStyle.DefaultButton1 + MsgBoxStyle.Question, "Save") = MsgBoxResult.Yes Then
                                Topctrl1.FButtonClick(13)
                            End If
                        End If
                    End If
                End If
            End If
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub
    Private Sub FHPGD_Tags()
        Dim FRH_Multiple As DMHelpGrid.FrmHelpGrid_Multi
        Dim StrRtn As String = ""
        Dim mLineCond As String = ""
        Dim DtTemp As DataTable

        mQry = " Select 'o' As Tick, T.Description, T.Description As Tag From Tag T "
        DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)

        FRH_Multiple = New DMHelpGrid.FrmHelpGrid_Multi(New DataView(DtTemp), "", 300, 230, , , False)
        FRH_Multiple.FFormatColumn(0, "Tick", 40, DataGridViewContentAlignment.MiddleCenter, True)
        FRH_Multiple.FFormatColumn(1, , 0, , False)
        FRH_Multiple.FFormatColumn(2, "Tag", 100, DataGridViewContentAlignment.MiddleLeft)
        FRH_Multiple.StartPosition = FormStartPosition.CenterScreen
        FRH_Multiple.ShowDialog()

        If FRH_Multiple.BytBtnValue = 0 Then
            Dgl3.Item(Col1Value, rowTags).Value = "+" + FRH_Multiple.FFetchData(2, "", "", "+")
        End If

        FRH_Multiple = Nothing
    End Sub

    Public Shared Sub FGetCalculationData(mSearchCode As String, Conn As Object, Cmd As Object)
        Dim mQry As String = ""
        mQry = "SELECT Sd.* 
                FROM SaleInvoice H With (NoLock)
                LEFT JOIN StructureDetail Sd With (NoLock) ON H.Structure = Sd.Code
                WHERE H.DocID = '" & mSearchCode & "'"
        Dim DtCalcHeaderData As DataTable = AgL.FillData(mQry, IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).Tables(0)

        mQry = "Select * From SaleInvoice With (NoLock) Where DocId = '" & mSearchCode & "'"
        Dim DtTransactionDetail As DataTable = AgL.FillData(mQry, IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).Tables(0)

        For I As Integer = 0 To DtCalcHeaderData.Rows.Count - 1
            For J As Integer = 0 To DtTransactionDetail.Columns.Count - 1
                If DtCalcHeaderData.Rows(I)("HeaderAmtField") = DtTransactionDetail.Columns(J).ColumnName Then
                    DtCalcHeaderData.Rows(I)("Amount") = DtTransactionDetail.Rows(0)(DtTransactionDetail.Columns(J).ColumnName)
                End If
            Next
        Next

        mQry = " SELECT H.SalesTaxGroupParty, H.PlaceOfSupply, L.SalesTaxGroupItem, L.Sr,
                Sd.Charges, Pst.*
                FROM SaleInvoice H With (NoLock)
                LEFT JOIN SaleInvoiceDetail L With (NoLock) ON H.DocID = L.DocID
                LEFT JOIN PostingGroupSalesTax Pst With (NoLock) ON H.SalesTaxGroupParty = Pst.PostingGroupSalesTaxParty
	                AND H.PlaceOfSupply = Pst.PlaceOfSupply
	                AND L.SalesTaxGroupItem = Pst.PostingGroupSalesTaxItem
	                AND Pst.Process = 'Sales'
                LEFT JOIN StructureDetail Sd ON H.Structure = Sd.Code
	                AND Pst.ChargeType = Sd.Charge_Type
                WHERE H.DocID = '" & mSearchCode & "'"
        Dim DtPostingGroupSalesTax As DataTable = AgL.FillData(mQry, IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).Tables(0)



        mQry = "Select Sr,"
        For I As Integer = 0 To DtCalcHeaderData.Rows.Count - 1
            mQry += AgL.XNull(DtCalcHeaderData.Rows(I)("LineAmtField")) + " As [" + GetColName(DtCalcHeaderData.Rows(I)("Charges")) + "],"
            mQry += " 0.00  As [" + GetColNamePer(DtCalcHeaderData.Rows(I)("Charges")) + "],"
            mQry += " '' As [" + GetColNamePostAc(DtCalcHeaderData.Rows(I)("Charges")) + "],"
            mQry += AgL.Chk_Text(AgL.XNull(DtCalcHeaderData.Rows(I)("ContraAc"))) + " As [" + GetColNameContraAc(DtCalcHeaderData.Rows(I)("Charges")) + "]" + IIf(I = DtCalcHeaderData.Rows.Count - 1, "", ",")
        Next
        mQry += " From SaleInvoiceDetail With (NoLock) Where DocId = '" & mSearchCode & "'"
        Dim DtCalcLineData As DataTable = AgL.FillData(mQry, IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).Tables(0)

        For I As Integer = 0 To DtCalcLineData.Rows.Count - 1
            For J As Integer = 0 To DtCalcLineData.Columns.Count - 1
                For K As Integer = 0 To DtPostingGroupSalesTax.Rows.Count - 1
                    If DtCalcLineData.Columns(J).ColumnName = GetColNamePostAc(DtPostingGroupSalesTax.Rows(K)("Charges")) And AgL.VNull(DtCalcLineData.Rows(I)("Sr")) = AgL.VNull(DtPostingGroupSalesTax.Rows(K)("Sr")) Then
                        DtCalcLineData.Rows(I)(J) = AgL.XNull(DtPostingGroupSalesTax.Rows(K)("LedgerAc"))
                    ElseIf DtCalcLineData.Columns(J).ColumnName = GetColNamePer(DtPostingGroupSalesTax.Rows(K)("Charges")) And AgL.VNull(DtCalcLineData.Rows(I)("Sr")) = AgL.VNull(DtPostingGroupSalesTax.Rows(K)("Sr")) Then
                        DtCalcLineData.Rows(I)(J) = AgL.VNull(DtPostingGroupSalesTax.Rows(K)("Percentage"))
                    End If
                Next
            Next
        Next


        'mQry = " Select '" & DtCalcLineData.Rows(0)("CGSTPostAc") & "' As Val UNION ALL "
        'mQry += " Select '" & DtCalcLineData.Rows(1)("CGSTPostAc") & "' As Val UNION ALL  "
        'mQry += " Select '" & DtCalcLineData.Rows(2)("CGSTPostAc") & "' As Val UNION ALL  "
        'mQry += " Select '" & DtCalcLineData.Rows(3)("CGSTPostAc") & "' As Val UNION ALL  "
        'mQry += " Select '" & DtCalcLineData.Rows(4)("CGSTPostAc") & "' As Val UNION ALL  "
        'mQry += " Select '" & DtCalcLineData.Rows(5)("CGSTPostAc") & "' As Val  "


        Dim mMultiplyWithMinus As Boolean = False
        Dim mNarrationParty As String
        Dim mNarration As String
        If AgL.XNull(AgL.Dman_Execute("Select NCat 
                        From Voucher_Type 
                        Where V_Type = '" & AgL.XNull(DtTransactionDetail.Rows(0)("V_Type")) & "'", IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar) = Ncat.SaleReturn Then
            mNarrationParty = AgL.XNull(DtTransactionDetail.Rows(0)("V_Type"))
            mNarrationParty += ", " + AgL.XNull(DtTransactionDetail.Rows(0)("Remarks"))
            mNarration = AgL.XNull(DtTransactionDetail.Rows(0)("V_Type")) & " : " & DtTransactionDetail.Rows(0)("SaleToPartyName") & ""
            mNarration += ", " + AgL.XNull(DtTransactionDetail.Rows(0)("Remarks"))
            'mMultiplyWithMinus = True
        Else
            If DtTransactionDetail.Rows(0)("ManualRefNo") <> "" Then
                mNarrationParty = AgL.XNull(DtTransactionDetail.Rows(0)("V_Type")) & " : " & DtTransactionDetail.Rows(0)("ManualRefNo") & " Dated " & DtTransactionDetail.Rows(0)("V_Date")
                mNarrationParty += ", " + AgL.XNull(DtTransactionDetail.Rows(0)("Remarks"))
                mNarration = AgL.XNull(DtTransactionDetail.Rows(0)("V_Type")) & " : " & DtTransactionDetail.Rows(0)("SaleToPartyName") & " Invoice No. " & DtTransactionDetail.Rows(0)("ManualRefNo") & " Dated " & DtTransactionDetail.Rows(0)("V_Date")
                mNarration += ", " + AgL.XNull(DtTransactionDetail.Rows(0)("Remarks"))
            Else
                mNarrationParty = AgL.XNull(DtTransactionDetail.Rows(0)("V_Type"))
                mNarrationParty += ", " + AgL.XNull(DtTransactionDetail.Rows(0)("Remarks"))
                mNarration = AgL.XNull(DtTransactionDetail.Rows(0)("V_Type")) & " : " & DtTransactionDetail.Rows(0)("SaleToPartyName") & ""
                mNarration += ", " + AgL.XNull(DtTransactionDetail.Rows(0)("Remarks"))
            End If
            mMultiplyWithMinus = False
        End If

        Dim DtSettings As DataTable
        mQry = "Select * from SaleInvoiceSetting  With (NoLock)  Where V_Type = '" & AgL.XNull(DtTransactionDetail.Rows(0)("V_Type")) & "' And Div_Code = '" & AgL.PubDivCode & "' And Site_Code='" & AgL.PubSiteCode & "' "
        DtSettings = AgL.FillData(mQry, IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).Tables(0)
        If DtSettings.Rows.Count = 0 Then
            mQry = "Select * from SaleInvoiceSetting  With (NoLock)  Where V_Type = '" & AgL.XNull(DtTransactionDetail.Rows(0)("V_Type")) & "' And Div_Code = '" & AgL.PubDivCode & "' And Site_Code Is Null "
            DtSettings = AgL.FillData(mQry, IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).Tables(0)
            If DtSettings.Rows.Count = 0 Then
                mQry = "Select * from SaleInvoiceSetting  With (NoLock)  Where V_Type = '" & AgL.XNull(DtTransactionDetail.Rows(0)("V_Type")) & "' And Div_Code  Is Null And Site_Code='" & AgL.PubSiteCode & "' "
                DtSettings = AgL.FillData(mQry, IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).Tables(0)
                If DtSettings.Rows.Count = 0 Then
                    mQry = "Select * from SaleInvoiceSetting  With (NoLock)  Where V_Type = '" & AgL.XNull(DtTransactionDetail.Rows(0)("V_Type")) & "' And Div_Code  Is Null And Site_Code Is Null "
                    DtSettings = AgL.FillData(mQry, IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).Tables(0)
                    If DtSettings.Rows.Count = 0 Then
                        mQry = "Select * from SaleInvoiceSetting  With (NoLock)  Where V_Type Is Null And Div_Code  Is Null And Site_Code Is Null "
                        DtSettings = AgL.FillData(mQry, IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).Tables(0)
                    End If
                End If
            End If
        End If



        Dim bPartyLedgerPostingAc As String = ""
        Dim bLinkedPartyAc As String = ""
        If AgL.StrCmp(AgL.XNull(DtSettings.Rows(0)("LedgerPostingPartyAcType")), SaleInvoiceLedgerPostingPartyAcType.SaleToParty) Then
            bPartyLedgerPostingAc = AgL.XNull(DtTransactionDetail.Rows(0)("SaleToParty"))
            bLinkedPartyAc = AgL.XNull(DtTransactionDetail.Rows(0)("LinkedParty"))
        Else
            bPartyLedgerPostingAc = AgL.XNull(DtTransactionDetail.Rows(0)("BillToParty"))
            bLinkedPartyAc = AgL.XNull(DtTransactionDetail.Rows(0)("LinkedParty"))
        End If

        ClsMain.PostStructureLineToAccounts(DtCalcHeaderData, DtCalcLineData, mNarrationParty, mNarration, mSearchCode, AgL.XNull(DtTransactionDetail.Rows(0)("Div_Code")),
                                    AgL.XNull(DtTransactionDetail.Rows(0)("Site_Code")),
                                    AgL.XNull(DtTransactionDetail.Rows(0)("V_Type")), AgL.XNull(DtTransactionDetail.Rows(0)("V_Prefix")), AgL.VNull(DtTransactionDetail.Rows(0)("V_No")),
                                    AgL.XNull(DtTransactionDetail.Rows(0)("ManualRefNo")), bPartyLedgerPostingAc,
                                    AgL.XNull(DtTransactionDetail.Rows(0)("V_Date")), Conn, Cmd,, mMultiplyWithMinus, bLinkedPartyAc)
    End Sub

    Private Sub FrmSaleInvoiceDirect_BaseEvent_Topctrl_tbMore() Handles Me.BaseEvent_Topctrl_tbMore
        MnuOptions.Show(Topctrl1, Topctrl1.btbSite.Rectangle.X, Topctrl1.btbSite.Rectangle.Y + Topctrl1.btbSite.Rectangle.Size.Height)
    End Sub
    Private Sub Dgl2_KeyDown(sender As Object, e As KeyEventArgs) Handles Dgl2.KeyDown
        Try
            If Dgl2.CurrentCell Is Nothing Then Exit Sub
            If e.KeyCode = Keys.Enter Then
                Dim LastCell As DataGridViewCell = LastDisplayedCell(Dgl2)
                If Dgl2.CurrentCell.RowIndex = LastCell.RowIndex And Dgl2.CurrentCell.ColumnIndex = LastCell.ColumnIndex Then
                    If TxtBarcode.Visible = True And TxtBarcode.Enabled = True Then
                        TxtBarcode.Focus()
                    ElseIf Dgl1.Visible Then
                        Dgl1.CurrentCell = Dgl1.FirstDisplayedCell
                        Dgl1.Focus() : MakeGridCurrentCellNothing(Dgl1.Name)
                    End If
                End If
            End If
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub
    Private Function LastDisplayedCell(Dgl As AgControls.AgDataGrid) As DataGridViewCell
        Dim bColumnIndex As Integer = 0
        Dim bRowIndex As Integer = 0

        For I As Integer = Dgl.Columns.Count - 1 To 0 Step -1
            If Dgl.Columns(I).Visible = True And Dgl.Columns(I).Name <> Col1BtnDetail Then
                bColumnIndex = I
                Exit For
            End If
        Next

        For I As Integer = Dgl.Rows.Count - 1 To 0 Step -1
            If Dgl.Rows(I).Visible = True Then
                bRowIndex = I
                Exit For
            End If
        Next
        LastDisplayedCell = Dgl.Item(bColumnIndex, bRowIndex)
    End Function
    Private Sub FShowRefrentialEntries(bDocId As String)
        Dim FrmObj As New FrmReferenceEntries()
        FrmObj.SearchCode = bDocId
        FrmObj.LblDocNo.Text = "Entry No : " + DglMain.Item(Col1Value, rowReferenceNo).Value
        FrmObj.StartPosition = FormStartPosition.CenterParent
        FrmObj.MdiParent = Me.MdiParent
        FrmObj.Show()
    End Sub
    Private Sub FGetMailConfiguration(objRepPrint As Object, SearchCode As String)
        AgL.PubTempStr = AgL.PubTempStr & "Start Feching Mail configuration data from Header Table : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf
        Dim DtMailData As DataTable = AgL.FillData("Select Sg.DispName As DivisionName, 
                    Party.DispName As PartyName, Party.EMail As PartyEMail,
                    Agent.DispName As AgentName, Agent.EMail As AgentEMail
                    From SaleInvoice H 
                    LEFT JOIN Division D On H.Div_Code = D.Div_Code
                    LEFT JOIN SubGroup Sg On D.SubCode = Sg.SubCode
                    LEFT JOIN SubGroup Party On H.SaleToParty = Party.SubCode
                    LEFT JOIN SubGroup Agent On H.Agent = Agent.SubCode
                    Where H.DocId = '" & SearchCode & "'", AgL.GCn).Tables(0)
        AgL.PubTempStr = AgL.PubTempStr & "End Feching Mail configuration data from Header Table : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf

        AgL.PubTempStr = AgL.PubTempStr & "Start replacing values for email  : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf
        objRepPrint.TxtToEmail.Text = FGetSettings(SettingFields.MailTo, SettingType.General)
        objRepPrint.TxtToEmail.Text = objRepPrint.TxtToEmail.Text.Replace("<PartyEMail>", AgL.XNull(DtMailData.Rows(0)("PartyEMail"))).
                Replace("<AgentEMail>", AgL.XNull(DtMailData.Rows(0)("AgentEMail")))

        objRepPrint.TxtCcEmail.Text = FGetSettings(SettingFields.MailCc, SettingType.General)
        objRepPrint.TxtCcEmail.Text = objRepPrint.TxtCcEmail.Text.Replace("<PartyEMail>", AgL.XNull(DtMailData.Rows(0)("PartyEMail"))).
                Replace("<AgentEMail>", AgL.XNull(DtMailData.Rows(0)("AgentEMail")))

        objRepPrint.TxtSubject.Text =
        objRepPrint.TxtSubject.Text = objRepPrint.TxtSubject.Text.Replace("<PartyName>", AgL.XNull(DtMailData.Rows(0)("PartyName"))).
                Replace("<EntryNo>", DglMain.Item(Col1Value, rowReferenceNo).Value).Replace("<EntryDate>", DglMain.Item(Col1Value, rowV_Date).Value).
                Replace("<DivisionName>", AgL.XNull(DtMailData.Rows(0)("DivisionName"))).
                Replace("<AgentName>", AgL.XNull(DtMailData.Rows(0)("AgentName")))

        objRepPrint.TxtMessage.Text = FGetSettings(SettingFields.MailMessage, SettingType.General)
        objRepPrint.TxtMessage.Text = objRepPrint.TxtMessage.Text.Replace("<PartyName>", AgL.XNull(DtMailData.Rows(0)("PartyName"))).
                Replace("<EntryNo>", DglMain.Item(Col1Value, rowReferenceNo).Value).Replace("<EntryDate>", DglMain.Item(Col1Value, rowV_Date).Value).
                Replace("<DivisionName>", AgL.XNull(DtMailData.Rows(0)("DivisionName"))).
                Replace("<AgentName>", AgL.XNull(DtMailData.Rows(0)("AgentName")))
        objRepPrint.AttachmentName = DglMain.Item(Col1Value, rowReferenceNo).Value

        AgL.PubTempStr = AgL.PubTempStr & "End replacing values for email  : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString & vbCrLf
    End Sub


    Private Sub FGetSmsConfiguration(objFrmSendSms As Object, SearchCode As String)
        Dim mDocNoPrefix As String = FGetSettings(SettingFields.DocumentPrintEntryNoPrefix, SettingType.General)

        Dim DtDocData As DataTable = AgL.FillData("Select 
                    Sg.DispName As DivisionName, 
                    (Case When IfNull(H.SaleToPartyName,'')='' Then 'Customer' Else IfNull(H.SaleToPartyName,'') End) As PartyName, H.SaleToPartyMobile As PartyMobile,
                    Agent.DispName As AgentName, Agent.Mobile As AgentMobile, H.Net_Amount,
                    Tranport.DispName As TransporterName, Sit.LrNo, Sit.LrDate 
                    From SaleInvoice H 
                    LEFT JOIN Division D On H.Div_Code = D.Div_Code
                    LEFT JOIN SubGroup Sg On D.SubCode = Sg.SubCode
                    LEFT JOIN SubGroup Party On H.SaleToParty = Party.SubCode
                    LEFT JOIN SubGroup Agent On H.Agent = Agent.SubCode
                    LEFT JOIN SaleInvoiceTransport Sit ON H.DocId = Sit.DocId
                    LEFT JOIN SubGroup Tranport On Sit.Transporter = Tranport.SubCode
                    Where H.DocId = '" & SearchCode & "'", AgL.GCn).Tables(0)


        objFrmSendSms.TxtToMobile.text = AgL.XNull(DtDocData.Rows(0)("PartyMobile"))
        objFrmSendSms.TxtMessage.Text = FGetSettings(SettingFields.SmsMessage, SettingType.General)
        objFrmSendSms.TxtMessage.Text = objFrmSendSms.TxtMessage.Text.
                Replace("<PartyName>", AgL.XNull(DtDocData.Rows(0)("PartyName"))).
                Replace("<EntryNo>", mDocNoPrefix & DglMain.Item(Col1Value, rowReferenceNo).Value).Replace("<EntryDate>", DglMain.Item(Col1Value, rowV_Date).Value).
                Replace("<DivisionName>", AgL.XNull(DtDocData.Rows(0)("DivisionName"))).
                Replace("<AgentName>", AgL.XNull(DtDocData.Rows(0)("AgentName"))).
                Replace("<TransporterName>", AgL.XNull(DtDocData.Rows(0)("TransporterName"))).
                Replace("<LrNo>", AgL.XNull(DtDocData.Rows(0)("LrNo"))).
                Replace("<LrDate>", AgL.XNull(DtDocData.Rows(0)("LrDate"))).
                Replace("<NetAmount>", Format(AgL.VNull(DtDocData.Rows(0)("Net_Amount")), "0.00")).
                Replace("&", "And")
    End Sub
    Private Sub FGetWhatsappConfiguration(objFrmSendWhatsapp As Object, SearchCode As String)
        Dim mDocNoPrefix As String = FGetSettings(SettingFields.DocumentPrintEntryNoPrefix, SettingType.General)

        Dim DtDocData As DataTable = AgL.FillData("Select 
                    Sg.DispName As DivisionName, 
                    (Case When IfNull(H.SaleToPartyName,'')='' Then 'Customer' Else IfNull(H.SaleToPartyName,'') End) As PartyName, H.SaleToPartyMobile As PartyMobile,
                    Agent.DispName As AgentName, Agent.Mobile As AgentMobile, H.Net_Amount,
                    Tranport.DispName As TransporterName, Sit.LrNo, Sit.LrDate 
                    From SaleInvoice H 
                    LEFT JOIN Division D On H.Div_Code = D.Div_Code
                    LEFT JOIN SubGroup Sg On D.SubCode = Sg.SubCode
                    LEFT JOIN SubGroup Party On H.SaleToParty = Party.SubCode
                    LEFT JOIN SubGroup Agent On H.Agent = Agent.SubCode
                    LEFT JOIN SaleInvoiceTransport Sit ON H.DocId = Sit.DocId
                    LEFT JOIN SubGroup Tranport On Sit.Transporter = Tranport.SubCode
                    Where H.DocId = '" & SearchCode & "'", AgL.GCn).Tables(0)


        objFrmSendWhatsapp.TxtToMobile.text = AgL.XNull(DtDocData.Rows(0)("PartyMobile"))
        objFrmSendWhatsapp.TxtMessage.Text = FGetSettings(SettingFields.SmsMessage, SettingType.General)
        objFrmSendWhatsapp.TxtMessage.Text = objFrmSendWhatsapp.TxtMessage.Text.
                Replace("<PartyName>", AgL.XNull(DtDocData.Rows(0)("PartyName"))).
                Replace("<EntryNo>", mDocNoPrefix & DglMain.Item(Col1Value, rowReferenceNo).Value).Replace("<EntryDate>", DglMain.Item(Col1Value, rowV_Date).Value).
                Replace("<DivisionName>", AgL.XNull(DtDocData.Rows(0)("DivisionName"))).
                Replace("<AgentName>", AgL.XNull(DtDocData.Rows(0)("AgentName"))).
                Replace("<TransporterName>", AgL.XNull(DtDocData.Rows(0)("TransporterName"))).
                Replace("<LrNo>", AgL.XNull(DtDocData.Rows(0)("LrNo"))).
                Replace("<LrDate>", AgL.XNull(DtDocData.Rows(0)("LrDate"))).
                Replace("<NetAmount>", Format(AgL.VNull(DtDocData.Rows(0)("Net_Amount")), "0.00")).
                Replace("&", "And")
        objFrmSendWhatsapp.AttachmentName = DglMain.Item(Col1Value, rowReferenceNo).Value
    End Sub

    Private Sub FrmSaleInvoiceDirect_BaseEvent_Save_PostTrans(SearchCode As String) Handles Me.BaseEvent_Save_PostTrans
        Dim I As Integer
        Dim mConn As Object = Nothing
        If AgL.PubServerName = "" Then
            mConn = New SQLite.SQLiteConnection(AgL.GCn.ConnectionString.ToString)
        Else
            mConn = New SqlClient.SqlConnection(AgL.GCn.ConnectionString)
        End If
        mConn.Open()
        mQry = " Select * From SaleInvoicePayment With (NoLock) Where DocId = '" & mSearchCode & "' 
                    And PaymentMode = '" & PaymentMode.Credit & "'"
        Dim DtSaleInvoicePayment As DataTable = AgL.FillData(mQry, IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).Tables(0)

        For I = 0 To DtSaleInvoicePayment.Rows.Count - 1
            mQry = "SELECT H.DispName SaleToPartyName, H.Address as SaleToPartyAddress, H.CityCode as SaleToPartyCity, C.CityName, C.State, S.ManualCode as StateManualCode, 
                    H.Pin as SaleToPartyPincode, H.Mobile SaleToPartyMobile, H.SalesTaxPostingGroup,
                    (Select RegistrationNo From SubgroupRegistration SR  With (NoLock) Where SR.Subcode = H.Subcode and SR.RegistrationType = '" & SubgroupRegistrationType.SalesTaxNo & "') as SaleToPartySalesTaxNo,
                    (Select RegistrationNo From SubgroupRegistration SR  With (NoLock) Where SR.Subcode = H.Subcode and SR.RegistrationType = '" & SubgroupRegistrationType.AadharNo & "') as SaleToPartyAadharNo,
                    (Select RegistrationNo From SubgroupRegistration SR  With (NoLock) Where SR.Subcode = H.Subcode and SR.RegistrationType = '" & SubgroupRegistrationType.PanNo & "') as SaleToPartyPanNo
                    FROM Subgroup H  With (NoLock)                     
                    Left Join City C With (NoLock) On H.CityCode = C.CityCode    
                    Left Join State S With (NoLock) On C.State = S.Code                    
                    WHERE H.Subcode = '" & AgL.XNull(DtSaleInvoicePayment.Rows(I)("PostToAc")) & "' "
            Dim DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)
            mQry = "Update SaleInvoice Set 
                    SalesTaxGroupParty=" & AgL.Chk_Text(AgL.XNull(DtTemp.Rows(0)("SalesTaxPostingGroup"))) & ",
                    SaleToPartyName=" & AgL.Chk_Text(AgL.XNull(DtTemp.Rows(0)("SaleToPartyName"))) & ",
                    SaleToPartyAddress=" & AgL.Chk_Text(AgL.XNull(DtTemp.Rows(0)("SaleToPartyAddress"))) & ",
                    PlaceOfSupply=" & AgL.Chk_Text(ClsFunction.GetPlaceOfSupply(AgL.XNull(DtTemp.Rows(0)("SaleToPartyCity")), "")) & ",
                    SaleToPartySalesTaxNo=" & AgL.Chk_Text(AgL.XNull(DtTemp.Rows(0)("SaleToPartySalesTaxNo"))) & ",
                    SaleToPartyCity=" & AgL.Chk_Text(AgL.XNull(DtTemp.Rows(0)("SaleToPartyCity"))) & "
                    Where DocId = '" & SearchCode & "'"
            AgL.Dman_ExecuteNonQry(mQry, mConn)
        Next
        mConn.close()

        If AgL.StrCmp(Topctrl1.Mode, "Add") Then
            If FGetSettings(SettingFields.ActionToPrintOnAdd, SettingType.General) = ActionToPrint.AskAndPrintOnScreen Then
                If MsgBox("Do you want to print ? ", MsgBoxStyle.Question + MsgBoxStyle.YesNo) = MsgBoxResult.Yes Then
                    FGetPrint(SearchCode, ClsMain.PrintFor.DocumentPrint)
                End If
            ElseIf FGetSettings(SettingFields.ActionToPrintOnAdd, SettingType.General) = ActionToPrint.AskAndPrintToPrinter Then
                If MsgBox("Do you want to print ? ", MsgBoxStyle.Question + MsgBoxStyle.YesNo) = MsgBoxResult.Yes Then
                    FGetPrint(SearchCode, ClsMain.PrintFor.DocumentPrint, True)
                End If
            ElseIf FGetSettings(SettingFields.ActionToPrintOnAdd, SettingType.General) = ActionToPrint.PrintOnScreen Then
                FGetPrint(SearchCode, ClsMain.PrintFor.DocumentPrint)
            ElseIf FGetSettings(SettingFields.ActionToPrintOnAdd, SettingType.General) = ActionToPrint.PrintToPrinter Then
                FGetPrint(SearchCode, ClsMain.PrintFor.DocumentPrint, True)
            End If


            If FGetSettings(SettingFields.ActionToSmsOnAdd, SettingType.General) = ActionToSms.AskAndOpenDialogue Then
                If MsgBox("Do you want to send SMS? ", MsgBoxStyle.Question + MsgBoxStyle.YesNo) = MsgBoxResult.Yes Then
                    FSendSms(True)
                End If
            ElseIf FGetSettings(SettingFields.ActionToSmsOnAdd, SettingType.General) = ActionToSms.AskAndSend Then
                If MsgBox("Do you want to send SMS ? ", MsgBoxStyle.Question + MsgBoxStyle.YesNo) = MsgBoxResult.Yes Then
                    FSendSms(False)
                End If
            ElseIf FGetSettings(SettingFields.ActionToSmsOnAdd, SettingType.General) = ActionToSms.Send Then
                FSendSms(False)
            End If
        End If


    End Sub
    Private Sub Dgl2_CellBeginEdit(sender As Object, e As DataGridViewCellCancelEventArgs) Handles Dgl2.CellBeginEdit
        Try
            If Dgl2.CurrentCell Is Nothing Then Exit Sub

            Select Case Dgl2.CurrentCell.RowIndex
                Case rowSalesTaxNo, rowAadharNo
                    e.Cancel = True
                Case rowPartyDocNo, rowPartyDocDate
                    If Dgl2.Item(Col1Value, rowPartyDocNo).Tag <> "" Then
                        If FDivisionNameForCustomization(13) = "JAIN BROTHERS" Or FDivisionNameForCustomization(11) = "BOOK SHOPEE" Then
                        Else
                            e.Cancel = True
                        End If
                    End If
            End Select
            Dgl2.Item(Col1LastValue, Dgl2.CurrentCell.RowIndex).Tag = Dgl2.Item(Col1Value, Dgl2.CurrentCell.RowIndex).Tag
            Dgl2.Item(Col1LastValue, Dgl2.CurrentCell.RowIndex).Value = Dgl2.Item(Col1Value, Dgl2.CurrentCell.RowIndex).Value
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub

    Private Sub FrmSaleInvoiceDirect_BaseEvent_Topctrl_tbDel(ByRef Passed As Boolean) Handles Me.BaseEvent_Topctrl_tbDel
        If ClsMain.IsEntryLockedWithLockText("SaleInvoice", "DocId", mSearchCode) = True Then
            Passed = False
            Exit Sub
        End If

        Passed = Not FGetRelationalData()

        mQry = " SELECT Count(*) AS Cnt FROM TransactionReferences T 
                    WHERE T.ReferenceDocId = '" & mSearchCode & "' 
                    AND IfNull(T.IsDeletingAllowed,0) = 0 "
        If AgL.Dman_Execute(mQry, AgL.GCn).ExecuteScalar() > 0 Then
            MsgBox("Some Refrential Entries Exist For This Entry.Can't Delete.", MsgBoxStyle.Information)
            Passed = False
            Exit Sub
        End If
    End Sub
    Private Sub FGeterateSkuName(bRowIndex As Integer)
        If CType(AgL.VNull(ClsMain.FGetSettings(SettingFields.SkuManagementApplicableYN, SettingType.General, AgL.PubDivCode, AgL.PubSiteCode, Dgl1.Item(Col1ItemType, bRowIndex).Tag, "", ItemV_Type.SKU, "", "")), Boolean) = True Then
            If Dgl1.Item(Col1ItemCategory, bRowIndex).Value <> "" Or
                Dgl1.Item(Col1ItemGroup, bRowIndex).Value <> "" Or
                Dgl1.Item(Col1Item, bRowIndex).Value <> "" Or
                Dgl1.Item(Col1Dimension1, bRowIndex).Value <> "" Or
                Dgl1.Item(Col1Dimension2, bRowIndex).Value <> "" Or
                Dgl1.Item(Col1Dimension3, bRowIndex).Value <> "" Or
                Dgl1.Item(Col1Dimension4, bRowIndex).Value <> "" Or
                Dgl1.Item(Col1Size, bRowIndex).Value <> "" Then
                Dgl1.Item(Col1SKU, bRowIndex).Value = Dgl1.Item(Col1ItemCategory, bRowIndex).Value + " " +
                                    Dgl1.Item(Col1ItemGroup, bRowIndex).Value + " " +
                                    Dgl1.Item(Col1Item, bRowIndex).Value + " " +
                                    Dgl1.Item(Col1Dimension1, bRowIndex).Value + " " +
                                    Dgl1.Item(Col1Dimension2, bRowIndex).Value + " " +
                                    Dgl1.Item(Col1Dimension3, bRowIndex).Value + " " +
                                    Dgl1.Item(Col1Dimension4, bRowIndex).Value + " " +
                                    Dgl1.Item(Col1Size, bRowIndex).Value
                Dim DrSKU As DataRow() = AgL.PubDtItem.Select(" IsNull(ItemCategory,'') = '" & Dgl1.Item(Col1ItemCategory, bRowIndex).Tag & "'
                                    And IsNull(ItemGroup,'') = '" & Dgl1.Item(Col1ItemGroup, bRowIndex).Tag & "'
                                    And IsNull(BaseItem,'') = '" & Dgl1.Item(Col1Item, bRowIndex).Tag & "'
                                    And IsNull(Dimension1,'') = '" & Dgl1.Item(Col1Dimension1, bRowIndex).Tag & "'
                                    And IsNull(Dimension2,'') = '" & Dgl1.Item(Col1Dimension2, bRowIndex).Tag & "'
                                    And IsNull(Dimension3,'') = '" & Dgl1.Item(Col1Dimension3, bRowIndex).Tag & "'
                                    And IsNull(Dimension4,'') = '" & Dgl1.Item(Col1Dimension4, bRowIndex).Tag & "'
                                    And IsNull(Size,'') = '" & Dgl1.Item(Col1Size, bRowIndex).Tag & "'")
                If DrSKU.Length > 0 Then
                    Dgl1.Item(Col1SKU, bRowIndex).Tag = AgL.XNull(DrSKU(0)("Code"))
                    FShowTransactionHistory(Dgl1.Item(Col1SKU, bRowIndex).Tag, bRowIndex)
                End If
            Else
                Dgl1.Item(Col1SKU, bRowIndex).Tag = ""
                Dgl1.Item(Col1SKU, bRowIndex).Value = ""
            End If
        Else
            Dgl1.Item(Col1SKU, bRowIndex).Tag = Dgl1.Item(Col1Item, bRowIndex).Tag
            Dgl1.Item(Col1SKU, bRowIndex).Value = Dgl1.Item(Col1Item, bRowIndex).Value
        End If
    End Sub
    Private Sub FOpenMultiLineUI(mRow As Integer)
        Dim dtTemp As DataTable
        Dim FrmObj As FrmSaleInvoiceMultiLineUI_WithDimension = New FrmSaleInvoiceMultiLineUI_WithDimension
        FrmObj.DglRow = Dgl1.Rows(mRow)
        FrmObj.EntryMode = Topctrl1.Mode
        FrmObj.SiteCode = DglMain.Item(Col1Value, rowSite_Code).Tag
        FrmObj.DivCode = TxtDivision.Tag
        FrmObj.SettingGroup = DglMain.Item(Col1Value, rowSettingGroup).Tag
        FrmObj.PartyCode = DglMain.Item(Col1Value, rowSaleToParty).Tag
        FrmObj.GodownCode = Dgl2.Item(Col1Value, rowGodown).Tag
        FrmObj.V_Date = DglMain.Item(Col1Value, rowV_Date).Tag
        FrmObj.VType = DglMain.Item(Col1Value, rowV_Type).Tag
        FrmObj.RateType = Dgl2.Item(Col1Value, rowRateType).Tag
        FrmObj.DtV_TypeSettings = DtV_TypeSettings
        FrmObj.IniGrid(mSearchCode)
        FrmObj.StartPosition = FormStartPosition.CenterScreen
        FrmObj.ShowDialog()

        If FrmObj.mOkButtonPressed = True Then
            Dim DglCurrentRow As DataGridViewRow = Dgl1.Rows(mRow)

            If FrmObj.Dgl1.Rows.Count > 0 Then
                Dgl1.Rows(mRow).Visible = False

                Dgl1.Rows.Insert(mRow, FrmObj.Dgl1.Rows.Count - 1)
                For I As Integer = 0 To FrmObj.Dgl1.Rows.Count - 1
                    Dgl1.Item(Col1ItemType, mRow + I).Tag = AgL.XNull(DglCurrentRow.Cells(Col1ItemType).Tag)
                    Dgl1.Item(Col1ItemType, mRow + I).Value = AgL.XNull(DglCurrentRow.Cells(Col1ItemType).Value)

                    Dgl1.Item(Col1ItemCategory, mRow + I).Tag = AgL.XNull(DglCurrentRow.Cells(Col1ItemCategory).Tag)
                    Dgl1.Item(Col1ItemCategory, mRow + I).Value = AgL.XNull(DglCurrentRow.Cells(Col1ItemCategory).Value)

                    Dgl1.Item(Col1ItemGroup, mRow + I).Tag = AgL.XNull(DglCurrentRow.Cells(Col1ItemGroup).Tag)
                    Dgl1.Item(Col1ItemGroup, mRow + I).Value = AgL.XNull(DglCurrentRow.Cells(Col1ItemGroup).Value)

                    Dgl1.Item(Col1Item, mRow + I).Tag = AgL.XNull(DglCurrentRow.Cells(Col1Item).Tag)
                    Dgl1.Item(Col1Item, mRow + I).Value = AgL.XNull(DglCurrentRow.Cells(Col1Item).Value)

                    Dgl1.Item(Col1Dimension1, mRow + I).Tag = AgL.XNull(DglCurrentRow.Cells(Col1Dimension1).Tag)
                    Dgl1.Item(Col1Dimension1, mRow + I).Value = AgL.XNull(DglCurrentRow.Cells(Col1Dimension1).Value)

                    Dgl1.Item(Col1Dimension2, mRow + I).Tag = AgL.XNull(DglCurrentRow.Cells(Col1Dimension2).Tag)
                    Dgl1.Item(Col1Dimension2, mRow + I).Value = AgL.XNull(DglCurrentRow.Cells(Col1Dimension2).Value)

                    Dgl1.Item(Col1Dimension3, mRow + I).Tag = AgL.XNull(DglCurrentRow.Cells(Col1Dimension3).Tag)
                    Dgl1.Item(Col1Dimension3, mRow + I).Value = AgL.XNull(DglCurrentRow.Cells(Col1Dimension3).Value)

                    Dgl1.Item(Col1Dimension4, mRow + I).Tag = AgL.XNull(DglCurrentRow.Cells(Col1Dimension4).Tag)
                    Dgl1.Item(Col1Dimension4, mRow + I).Value = AgL.XNull(DglCurrentRow.Cells(Col1Dimension4).Value)


                    Dim DrItemTypeSetting As DataRow
                    DrItemTypeSetting = FItemTypeSettings(Dgl1(Col1ItemType, mRow + I).Tag)
                    Dgl1(Col1DiscountCalculationPattern, mRow + I).Value = AgL.XNull(DrItemTypeSetting("DiscountCalculationPatternSale"))
                    Dgl1(Col1AdditionalDiscountCalculationPattern, mRow + I).Value = AgL.XNull(DrItemTypeSetting("AdditionalDiscountCalculationPatternSale"))
                    Dgl1(Col1AdditionCalculationPattern, mRow + I).Value = AgL.XNull(DrItemTypeSetting("AdditionCalculationPatternSale"))


                    Dgl1.Item(Col1Unit, mRow + I).Value = AgL.XNull(DglCurrentRow.Cells(Col1Unit).Value)

                    Dgl1.Item(Col1SalesTaxGroup, mRow + I).Tag = AgL.XNull(DglCurrentRow.Cells(Col1SalesTaxGroup).Tag)
                    Dgl1.Item(Col1SalesTaxGroup, mRow + I).Value = AgL.XNull(DglCurrentRow.Cells(Col1SalesTaxGroup).Value)

                    Dgl1.Item(Col1DiscountPer, mRow + I).Value = AgL.VNull(DglCurrentRow.Cells(Col1DiscountPer).Value)

                    Dgl1.Item(Col1Size, mRow + I).Tag = FrmObj.Dgl1.Item(FrmSaleInvoiceMultiLineUI_WithDimension.Col1Size, I).Tag
                    Dgl1.Item(Col1Size, mRow + I).Value = FrmObj.Dgl1.Item(FrmSaleInvoiceMultiLineUI_WithDimension.Col1Size, I).Value

                    If FDivisionNameForCustomization(15) = "AGARWAL UNIFORM" Then
                        mQry = "Select IfNull(Length,0) From ItemSize Where Code = '" & Dgl1.Item(Col1Size, mRow + I).Tag & "' "
                        Dgl1.Item(Col1UnitMultiplier, mRow + I).Value = AgL.VNull(AgL.Dman_Execute(mQry, AgL.GCn).ExecuteScalar())

                        mQry = "Select Top 1 L.AdditionPer 
                        From SaleInvoice H With (NoLock)
                        Left Join SaleInvoiceDetail L With (NoLock) On H.DocID = L.DocId
                        Left Join Item SKU With (NoLock) On L.Item = SKU.Code
                        Where Sku.Dimension3 = '" & Dgl1.Item(Col1Dimension3, mRow + I).Tag & "' 
                        Order By H.V_Date Desc "
                        dtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)
                        If dtTemp.Rows.Count > 0 Then
                            Dgl1.Item(Col1AdditionPer, mRow + I).Value = AgL.VNull(dtTemp.Rows(0)(0))
                        End If
                    End If

                    Dgl1.Item(Col1DocQty, mRow + I).Value = FrmObj.Dgl1.Item(FrmSaleInvoiceMultiLineUI_WithDimension.Col1Qty, I).Value
                    Dgl1.Item(Col1Qty, mRow + I).Value = Dgl1.Item(Col1DocQty, mRow + I).Value

                    Dgl1.Item(Col1Rate, mRow + I).Value = FrmObj.Dgl1.Item(FrmSaleInvoiceMultiLineUI_WithDimension.Col1Rate, I).Value

                    Dgl1.Item(Col1MaintainStockYn, mRow + I).Value = AgL.VNull(DglCurrentRow.Cells(Col1MaintainStockYn).Value)
                Next

                For I As Integer = 0 To Dgl1.Rows.Count - 1
                    Dgl1.Item(ColSNo, I).Value = I + 1

                    FGeterateSkuName(I)
                Next
                Calculation()
            End If
        End If
        Dgl1.CurrentCell = Dgl1.Item(Dgl1.FirstDisplayedCell.ColumnIndex, Dgl1.Rows.Count - 1)
    End Sub
    Private Sub FrmSaleInvoiceDirect_BaseEvent_DglMainContentClick(sender As Object, e As DataGridViewCellEventArgs) Handles Me.BaseEvent_DglMainContentClick
        Try
            Select Case DglMain.Columns(e.ColumnIndex).Name
                Case Col1BtnDetail
                    If Topctrl1.Mode = "Add" Then
                        ShowSaleInvoiceParty("", DglMain.Item(Col1Value, rowSaleToParty).Tag, TxtNature.Text, True)
                    Else
                        ShowSaleInvoiceParty(mSearchCode, "", TxtNature.Text, True)
                    End If
            End Select
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub
    Private Sub FrmSaleInvoiceDirect_BaseEvent_DglMainKeyDown(sender As Object, e As KeyEventArgs) Handles Me.BaseEvent_DglMainKeyDown
        Try
            If DglMain.CurrentCell IsNot Nothing Then
                If e.KeyCode = Keys.Enter Then
                    Dim LastCell As DataGridViewCell = ClsMain.LastDisplayedCell(DglMain)
                    If DglMain.CurrentCell.RowIndex = LastCell.RowIndex Then
                        If Dgl2.Visible Then
                            Dgl2.CurrentCell = Dgl2.Item(Col1Value, Dgl2.FirstDisplayedCell.RowIndex)
                            Dgl2.Focus() : MakeGridCurrentCellNothing(Dgl2.Name)
                        Else

                            Dgl1.CurrentCell = Dgl1.FirstDisplayedCell
                            Dgl1.Focus() : MakeGridCurrentCellNothing(Dgl1.Name)
                        End If
                    End If
                End If
            End If
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub
    Private Sub Dgl3_CellContentClick(sender As Object, e As DataGridViewCellEventArgs) Handles Dgl3.CellContentClick
        If e.ColumnIndex = Dgl3.Columns(Col1Value).Index And TypeOf (Dgl3(Col1Value, e.RowIndex)) Is DataGridViewButtonCell Then
            Select Case e.RowIndex
                Case rowBtnTransportDetail
                    ShowSaleInvoiceHeader()
            End Select
        End If
    End Sub
    Private Function FGetRelationalData() As Boolean
        Dim DtRelationalData As DataTable
        Try
            mQry = " Select Vt.Description || '-' || H.ManualRefNo As DocNo
                        From SaleInvoiceDetail L
                        LEFT JOIN SaleInvoice H On L.DocId = H.DocId
                        LEFT JOIN Voucher_Type Vt On H.V_Type = Vt.V_Type
                        Where L.SaleInvoice = '" & mSearchCode & "' 
                        And L.SaleInvoice <> L.DocId "
            DtRelationalData = AgL.FillData(mQry, AgL.GCn).Tables(0)
            If DtRelationalData.Rows.Count > 0 Then
                MsgBox("Data Exists For " & DglMain(Col1Value, rowV_Type).Value + "-" + DglMain(Col1Value, rowReferenceNo).Value & " In " + DtRelationalData.Rows(0)("DocNo") + ".Can't Delete Entry", MsgBoxStyle.Information)
                FGetRelationalData = True
                Exit Function
            End If
        Catch ex As Exception
            MsgBox(ex.Message & " in FGetRelationalData")
            FGetRelationalData = True
        End Try
    End Function
    Private Sub FGetRateConsideringAllDimensions(mRowIndex As Integer)
        If FDivisionNameForCustomization(14) = "PRATHAM APPARE" Or
            FDivisionNameForCustomization(15) = "AGARWAL UNIFORM" Then
            Dgl1.Item(Col1Rate, mRowIndex).Value = ClsMain.FGetRateWithRatePattern("", DglMain.Item(Col1Value, rowSaleToParty).Tag, DglMain.Item(Col1Value, rowSettingGroup).Tag, TxtDivision.Tag, DglMain.Item(Col1Value, rowSite_Code).Tag, Process.Sales, DglMain.Item(Col1Value, rowV_Type).Tag,
                    Dgl2.Item(Col1Value, rowRateType).Tag,
                    AgL.XNull(Dgl1.Item(Col1ItemCategory, mRowIndex).Tag),
                    AgL.XNull(Dgl1.Item(Col1ItemGroup, mRowIndex).Tag),
                    AgL.XNull(Dgl1.Item(Col1Item, mRowIndex).Tag),
                    AgL.XNull(Dgl1.Item(Col1Dimension1, mRowIndex).Tag),
                    AgL.XNull(Dgl1.Item(Col1Dimension2, mRowIndex).Tag),
                    AgL.XNull(Dgl1.Item(Col1Dimension3, mRowIndex).Tag),
                    AgL.XNull(Dgl1.Item(Col1Dimension4, mRowIndex).Tag),
                    AgL.XNull(Dgl1.Item(Col1Size, mRowIndex).Tag))

            If Val(Dgl1.Item(Col1Rate, mRowIndex).Value) > 0 Then
                Dgl1.Item(Col1Rate, mRowIndex).Value = Val(Dgl1.Item(Col1Rate, mRowIndex).Value) +
                    ClsMain.FGetRateWithRatePattern(RateCategory.RateAddition, DglMain.Item(Col1Value, rowSaleToParty).Tag, DglMain.Item(Col1Value, rowSettingGroup).Tag, TxtDivision.Tag, DglMain.Item(Col1Value, rowSite_Code).Tag, Process.Sales, DglMain.Item(Col1Value, rowV_Type).Tag,
                        Dgl2.Item(Col1Value, rowRateType).Tag,
                        AgL.XNull(Dgl1.Item(Col1ItemCategory, mRowIndex).Tag),
                        AgL.XNull(Dgl1.Item(Col1ItemGroup, mRowIndex).Tag),
                        AgL.XNull(Dgl1.Item(Col1Item, mRowIndex).Tag),
                        AgL.XNull(Dgl1.Item(Col1Dimension1, mRowIndex).Tag),
                        AgL.XNull(Dgl1.Item(Col1Dimension2, mRowIndex).Tag),
                        AgL.XNull(Dgl1.Item(Col1Dimension3, mRowIndex).Tag),
                        AgL.XNull(Dgl1.Item(Col1Dimension4, mRowIndex).Tag),
                        AgL.XNull(Dgl1.Item(Col1Size, mRowIndex).Tag))
            End If
        End If
    End Sub
    Private Sub Dgl3_CellBeginEdit(sender As Object, e As DataGridViewCellCancelEventArgs) Handles Dgl3.CellBeginEdit
        Try
            If Dgl3.CurrentCell Is Nothing Then Exit Sub
            Dgl3.Item(Col1LastValue, Dgl3.CurrentCell.RowIndex).Tag = Dgl3.Item(Col1Value, Dgl3.CurrentCell.RowIndex).Tag
            Dgl3.Item(Col1LastValue, Dgl3.CurrentCell.RowIndex).Value = Dgl3.Item(Col1Value, Dgl3.CurrentCell.RowIndex).Value
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub
    Private Function FGetLastSaleRate(mRow As Integer) As Double
        mQry = "SELECT " & IIf(AgL.PubServerName = "", "", "Top 1") & " L.Rate
                FROM SaleInvoice H 
                LEFT JOIN SaleInvoiceDetail L ON H.DocID = L.DocID
                LEFT JOIN Voucher_Type Vt ON H.V_Type = Vt.V_Type
                WHERE Vt.NCat = '" & Ncat.SaleInvoice & "' 
                And H.SaleToParty = '" & DglMain.Item(Col1Value, rowSaleToParty).Tag & "'
                AND L.Item = '" & Dgl1.Item(Col1Item, mRow).Tag & "' 
                ORDER BY H.V_Date DESC " & IIf(AgL.PubServerName = "", "Limit 1", "") & "	"
        Dim DtRate As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)

        If DtRate.Rows.Count > 0 Then
            FGetLastSaleRate = AgL.VNull(DtRate.Rows(0)("Rate"))
        Else
            FGetLastSaleRate = 0
        End If
    End Function
    Private Sub Dgl2_CellContentClick(sender As Object, e As DataGridViewCellEventArgs) Handles Dgl2.CellContentClick
        If e.ColumnIndex = Dgl2.Columns(Col1Value).Index And TypeOf (Dgl2(Col1Value, e.RowIndex)) Is DataGridViewButtonCell Then
            Select Case e.RowIndex
                Case rowBtnAttachments
                    ShowAttachments()
                Case rowBtnMoneyReceived
                    ShowSaleInvoiceReceipt()
                Case rowBtnPendingSaleOrder
                    If ClsMain.IsScopeOfWorkContains(IndustryType.SubIndustryType.FallPico) Then
                        FOpenSaleOrderForSaleInvoice_FallPico(-1)
                    Else
                        FOpenSaleOrderForSaleInvoice(-1)
                    End If
                Case rowBtnPendingSaleInvoiceForOrder
                    FOpenSaleInvoiceForSaleOrder(-1)
            End Select
        End If

        If e.ColumnIndex = Dgl2.Columns(Col1BtnDetail).Index And TypeOf (Dgl2(Col1BtnDetail, e.RowIndex)) Is DataGridViewButtonCell Then
            Select Case e.RowIndex
                Case rowPartyDocNo
                    FGetSaleInvoiceBalances()
                Case rowReferenceSaleInvoiceNo
                    FFillForFallPico()
            End Select
        End If
    End Sub
    Private Sub GetTemporaryCreditLimit(SubCode As String)
        Dim TemporaryLimit As Double = AgL.VNull(AgL.Dman_Execute("SELECT L.Amount As TemporaryCreditLimit  
                    FROM SubgroupTemporaryCreditLimit L With (NoLock)
                    WHERE L.Subcode = '" & SubCode & "' 
                    AND L.FromDate = '" & DglMain.Item(Col1Value, rowV_Date).Value & "'
                    And Date(L.FromDate) = " & AgL.Chk_Date(CDate(DglMain.Item(Col1Value, rowV_Date).Value).ToString("s")) & "", AgL.GCn).ExecuteScalar())
        TxtCreditLimit.Text = Val(TxtCreditLimit.Text) + TemporaryLimit
    End Sub
    Private Sub FGetSaleInvoiceBalances()
        If AgL.StrCmp(Topctrl1.Mode, "Browse") Then Exit Sub

        mQry = "SELECT L.SaleInvoice As DocId, Max(H.V_Type + '-' + H.ManualRefNo) AS InvoiceNo, 
                Max(H.V_Date) As InvoiceDate, IsNull(I.HSN, Ic.HSN) AS HSN, Sum(L.Qty) AS InvoiceQty, Sum(L.Amount) AS InvoiceAmount
                FROM SaleInvoice H 
                LEFT JOIN SaleInvoiceDetail L ON H.DocID = L.DocID
                LEFT JOIN Voucher_Type Vt ON H.V_Type = Vt.V_Type
                LEFT JOIN Item I ON L.Item = I.Code
                LEFT JOIN ItemCategory Ic ON I.ItemCategory = Ic.Code
                LEFT JOIN SaleInvoice Si On L.SaleInvoice = Si.DocId
                LEFT JOIN Voucher_Type Vt1 On Si.V_Type = Vt1.V_Type
                WHERE H.SaleToParty = '" & DglMain.Item(Col1Value, rowSaleToParty).Tag & "'
                And Vt.NCat IN ('" & Ncat.SaleInvoice & "','" & Ncat.SaleReturn & "')
                And Vt1.NCat = '" & Ncat.SaleInvoice & "'
                GROUP BY L.SaleInvoice, IsNull(I.HSN, Ic.HSN) "
        Dim DtInvoice As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)


        Dim FRH_Single As DMHelpGrid.FrmHelpGrid
        FRH_Single = New DMHelpGrid.FrmHelpGrid(New DataView(DtInvoice), "", 350, 600, 150, 520, False)
        FRH_Single.FFormatColumn(0, , 0, , False)
        FRH_Single.FFormatColumn(1, "Invoice No", 100, DataGridViewContentAlignment.MiddleLeft)
        FRH_Single.FFormatColumn(2, "Invoice Date", 100, DataGridViewContentAlignment.MiddleLeft)
        FRH_Single.FFormatColumn(2, "HSN", 100, DataGridViewContentAlignment.MiddleLeft)
        FRH_Single.FFormatColumn(3, "Balance Qty", 100, DataGridViewContentAlignment.MiddleRight)
        FRH_Single.FFormatColumn(4, "Balance Amount", 100, DataGridViewContentAlignment.MiddleRight)
        FRH_Single.StartPosition = FormStartPosition.Manual
        FRH_Single.ShowDialog()

        Dim bCode As String = ""
        If FRH_Single.BytBtnValue = 0 Then
            Dgl2.Item(Col1Value, rowPartyDocNo).Tag = AgL.XNull(FRH_Single.DRReturn("DocId"))
            Dgl2.Item(Col1Value, rowPartyDocNo).Value = AgL.XNull(FRH_Single.DRReturn("InvoiceNo"))
            Dgl2.Item(Col1Value, rowPartyDocDate).Value = AgL.XNull(FRH_Single.DRReturn("InvoiceDate"))

            Dgl2.Item(Col1Value, rowPartyDocNo).ReadOnly = True
            Dgl2.Item(Col1Value, rowPartyDocDate).ReadOnly = True
        End If
    End Sub
    Private Sub Validating_SkuCode(SkuCode As String, ByVal mColumn As Integer, ByVal mRow As Integer)
        Try
            mQry = "Select Sku.Code As SkuCode, Sku.Description As SkuDescription, 
                        It.Code As ItemType, It.Name As ItemTypeDesc,
                        IG.Description As ItemGroupDesc, IC.Description As ItemCategoryDesc, 
                        Sku.BaseItem As ItemCode, Sku.ItemCategory, Sku.ItemGroup, 
                        Sku.Dimension1, Sku.Dimension2, 
                        Sku.Dimension3, Sku.Dimension4, Sku.Size, 
                        I.Specification As ItemDesc,
                        D1.Specification as Dimension1Desc, D2.Specification as Dimension2Desc,
                        D3.Specification as Dimension3Desc, D4.Specification as Dimension4Desc, 
                        Size.Specification as SizeDesc
                        From Item Sku 
                        LEFT JOIN ItemType It On Sku.ItemType = It.Code
                        Left Join Item IC On Sku.ItemCategory = IC.Code
                        Left Join Item IG On Sku.ItemGroup = IG.Code
                        LEFT JOIN Item I ON I.Code = Sku.BaseItem
                        LEFT JOIN Item D1 ON Sku.Dimension1 = D1.Code
                        LEFT JOIN Item D2 ON Sku.Dimension2 = D2.Code
                        LEFT JOIN Item D3 ON Sku.Dimension3 = D3.Code
                        LEFT JOIN Item D4 ON Sku.Dimension4 = D4.Code
                        LEFT JOIN Item Size ON Sku.Size = Size.Code
                        Where Sku.V_Type = '" & ItemV_Type.SKU & "'
                        And Sku.Code = '" & SkuCode & "'"
            Dim DtSku As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)
            If DtSku.Rows.Count > 0 Then
                If AgL.XNull(DtSku.Rows(0)("ItemCode")) <> "" Then
                    Dgl1.Item(Col1Item, mRow).Tag = AgL.XNull(DtSku.Rows(0)("ItemCode"))
                    Dgl1.Item(Col1Item, mRow).Value = AgL.XNull(DtSku.Rows(0)("ItemDesc"))
                Else
                    Dgl1.Item(Col1Item, mRow).Tag = AgL.XNull(DtSku.Rows(0)("SkuCode"))
                    Dgl1.Item(Col1Item, mRow).Value = AgL.XNull(DtSku.Rows(0)("SkuDescription"))
                End If
                Dgl1.Item(Col1ItemCategory, mRow).Tag = AgL.XNull(DtSku.Rows(0)("ItemCategory"))
                Dgl1.Item(Col1ItemCategory, mRow).Value = AgL.XNull(DtSku.Rows(0)("ItemCategoryDesc"))
                Dgl1.Item(Col1ItemGroup, mRow).Tag = AgL.XNull(DtSku.Rows(0)("ItemGroup"))
                Dgl1.Item(Col1ItemGroup, mRow).Value = AgL.XNull(DtSku.Rows(0)("ItemGroupDesc"))
                Dgl1.Item(Col1Dimension1, mRow).Tag = AgL.XNull(DtSku.Rows(0)("Dimension1"))
                Dgl1.Item(Col1Dimension1, mRow).Value = AgL.XNull(DtSku.Rows(0)("Dimension1Desc"))
                Dgl1.Item(Col1Dimension2, mRow).Tag = AgL.XNull(DtSku.Rows(0)("Dimension2"))
                Dgl1.Item(Col1Dimension2, mRow).Value = AgL.XNull(DtSku.Rows(0)("Dimension2Desc"))
                Dgl1.Item(Col1Dimension3, mRow).Tag = AgL.XNull(DtSku.Rows(0)("Dimension3"))
                Dgl1.Item(Col1Dimension3, mRow).Value = AgL.XNull(DtSku.Rows(0)("Dimension3Desc"))
                Dgl1.Item(Col1Dimension4, mRow).Tag = AgL.XNull(DtSku.Rows(0)("Dimension4"))
                Dgl1.Item(Col1Dimension4, mRow).Value = AgL.XNull(DtSku.Rows(0)("Dimension4Desc"))
                Dgl1.Item(Col1Size, mRow).Tag = AgL.XNull(DtSku.Rows(0)("Size"))
                Dgl1.Item(Col1Size, mRow).Value = AgL.XNull(DtSku.Rows(0)("SizeDesc"))
            End If
        Catch ex As Exception
            MsgBox(ex.Message & " On Validating_SkuCode Function ")
        End Try
    End Sub
    Private Sub FOpenStockIn(mRow As Integer)
        mQry = "SELECT L.DocID , L.TSr, L.Sr, L.Div_Code || '-' || L.Site_Code || '-' || L.V_Type || '-' || L.RecId AS DocNo, 
                L.V_Date AS StockInDate, 
                L.LotNo, L.ExpiryDate, L.MRP, L.Sale_Rate, L.SalesTaxGroupItem,  
                L.Rate As PurchaseRate, L.DiscountPer As PurchaseDiscountPer,
                L.AdditionalDiscountPer As PurchaseAdditionalDiscountPer, L.Deal As PurchaseDeal,
                L.Qty_Rec - IsNull(VAdj.AdjQty,0) AS BalanceQty, L.V_Type, L.Div_Code, D.Div_Name As Div_Name
                FROM Stock L 
                LEFT JOIN (
	                SELECT Sad.StockInDocID, Sad.StockInTSr, Sad.StockInSr, Sum(Sad.AdjQty) AS AdjQty
	                FROM StockAdj Sad
	                GROUP BY Sad.StockInDocID, Sad.StockInTSr, Sad.StockInSr
                ) AS VAdj ON L.DocID = VAdj.StockInDocID AND L.TSr = VAdj.StockInTSr AND L.Sr = VAdj.StockInSr 
                LEFT JOIN Division D On L.Div_Code = D.Div_Code
                Where L.Item = '" & Dgl1.Item(Col1Item, mRow).Tag & "'  
                And L.Qty_Rec - IsNull(VAdj.AdjQty,0) > 0 "
        Dim DtStock As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)

        Dim FRH_Single As DMHelpGrid.FrmHelpGrid
        FRH_Single = New DMHelpGrid.FrmHelpGrid(New DataView(DtStock), "", 350, 900, 150, 320, False)
        FRH_Single.FFormatColumn(0, , 0, , False)
        FRH_Single.FFormatColumn(1, , 0, , False)
        FRH_Single.FFormatColumn(2, , 0, , False)
        FRH_Single.FFormatColumn(3, "Stock In No", 100, DataGridViewContentAlignment.MiddleLeft)
        FRH_Single.FFormatColumn(4, "Stock In Date", 100, DataGridViewContentAlignment.MiddleLeft)
        FRH_Single.FFormatColumn(5, "Batch No", 100, DataGridViewContentAlignment.MiddleLeft)
        FRH_Single.FFormatColumn(6, "Expiry Date", 100, DataGridViewContentAlignment.MiddleLeft)
        FRH_Single.FFormatColumn(7, "MRP", 100, DataGridViewContentAlignment.MiddleLeft)
        FRH_Single.FFormatColumn(8, "Sale Rate", 100, DataGridViewContentAlignment.MiddleLeft)
        FRH_Single.FFormatColumn(9, "Sales Tax Group", 100, DataGridViewContentAlignment.MiddleLeft)
        FRH_Single.FFormatColumn(10, "Purch Rate", 0, DataGridViewContentAlignment.MiddleRight, False)
        FRH_Single.FFormatColumn(11, "Purch Disc %", 0, DataGridViewContentAlignment.MiddleRight, False)
        FRH_Single.FFormatColumn(12, "Purch Add Disc %", 0, DataGridViewContentAlignment.MiddleRight, False)
        FRH_Single.FFormatColumn(13, "Purch Deal", 0, DataGridViewContentAlignment.MiddleLeft, False)
        FRH_Single.FFormatColumn(14, "Balance Qty", 100, DataGridViewContentAlignment.MiddleRight)
        FRH_Single.FFormatColumn(15, , 0, , False)
        FRH_Single.FFormatColumn(16, , 0, , False)
        FRH_Single.FFormatColumn(17, , 0, , False)
        FRH_Single.StartPosition = FormStartPosition.Manual
        FRH_Single.ShowDialog()

        Dim bCode As String = ""
        If FRH_Single.BytBtnValue = 0 Then
            Dgl1.Item(Col1StockInDocId, mRow).Tag = AgL.XNull(FRH_Single.DRReturn("DocId"))
            Dgl1.Item(Col1StockInDocId, mRow).Value = AgL.XNull(FRH_Single.DRReturn("DocNo"))
            Dgl1.Item(Col1StockInTSr, mRow).Value = AgL.XNull(FRH_Single.DRReturn("TSr"))
            Dgl1.Item(Col1StockInSr, mRow).Value = AgL.XNull(FRH_Single.DRReturn("Sr"))
            Dgl1.Item(Col1DocQty, mRow).Value = AgL.XNull(FRH_Single.DRReturn("BalanceQty"))
            Dgl1.Item(Col1Qty, mRow).Value = Dgl1.Item(Col1DocQty, mRow).Value
            Dgl1.Item(Col1LotNo, mRow).Value = AgL.XNull(FRH_Single.DRReturn("LotNo"))
            Dgl1.Item(Col1ExpiryDate, mRow).Value = AgL.XNull(FRH_Single.DRReturn("ExpiryDate"))
            Dgl1.Item(Col1MRP, mRow).Value = AgL.XNull(FRH_Single.DRReturn("MRP"))
            Dgl1.Item(Col1Rate, mRow).Value = AgL.XNull(FRH_Single.DRReturn("Sale_Rate"))
            Dgl1.Item(Col1SalesTaxGroup, mRow).Tag = AgL.XNull(FRH_Single.DRReturn("SalesTaxGroupItem"))
            Dgl1.Item(Col1SalesTaxGroup, mRow).Value = AgL.XNull(FRH_Single.DRReturn("SalesTaxGroupItem"))


            Dgl1.Item(Col1PurchaseRate, mRow).Value = AgL.VNull(FRH_Single.DRReturn("PurchaseRate"))
            Dgl1.Item(Col1PurchaseDiscountPer, mRow).Value = AgL.VNull(FRH_Single.DRReturn("PurchaseDiscountPer"))
            Dgl1.Item(Col1PurchaseAdditionalDiscountPer, mRow).Value = AgL.VNull(FRH_Single.DRReturn("PurchaseAdditionalDiscountPer"))
            Dgl1.Item(Col1PurchaseDeal, mRow).Value = AgL.XNull(FRH_Single.DRReturn("PurchaseDeal"))
            Dgl1.Item(Col1StockInDiv_Code, mRow).Tag = AgL.XNull(FRH_Single.DRReturn("Div_Code"))
            Dgl1.Item(Col1StockInDiv_Code, mRow).Value = AgL.XNull(FRH_Single.DRReturn("Div_Name"))

            FGeterateSkuName(mRow)
            Calculation()
        Else
            mQry = "SELECT Div_Code AS Code, Div_Name AS Name FROM Division"
            Dim DtDivision As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)

            Dim FRH_Single_Division As DMHelpGrid.FrmHelpGrid
            FRH_Single_Division = New DMHelpGrid.FrmHelpGrid(New DataView(DtDivision), "", 350, 300, 150, 320, False)
            FRH_Single_Division.FFormatColumn(0, , 0, , False)
            FRH_Single_Division.FFormatColumn(1, "Division", 100, DataGridViewContentAlignment.MiddleLeft)
            FRH_Single_Division.StartPosition = FormStartPosition.Manual
            FRH_Single_Division.ShowDialog()

            If FRH_Single_Division.BytBtnValue = 0 Then
                Dgl1.Item(Col1StockInDiv_Code, mRow).Tag = AgL.XNull(FRH_Single_Division.DRReturn("Code"))
                Dgl1.Item(Col1StockInDiv_Code, mRow).Value = AgL.XNull(FRH_Single_Division.DRReturn("Name"))
            End If
        End If
    End Sub
    Public Sub FSplitSale(SearchCode As String, Conn As Object, Cmd As Object)
        Dim mTrans As String = ""
        Dim ErrorLog As String = ""
        Dim DtMain As DataTable = Nothing
        Dim I As Integer
        Dim J As Integer

        mQry = "Select DocId, ManualRefNo, Div_Code From SaleInvoice With (NoLock) Where GenDocId = '" & SearchCode & "'"
        Dim DtGeneratedEntries As DataTable = AgL.FillData(mQry, IIf(AgL.PubServerName = "", Conn, AgL.GcnRead)).Tables(0)

        FDeleteGeneratedSales(SearchCode, Conn, Cmd)

        mQry = " Delete From Ledger Where DocId = '" & SearchCode & "'"
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

        mQry = " Select Distinct IfNull(S.Div_Code, L.StockInDiv_Code) As Div_Code_StockIn, H.*
                From SaleInvoice H With (NoLock)
                LEFT JOIN SaleInvoiceDetail L With (NoLock) ON H.DocId = L.DocId 
                LEFT JOIN Stock S With (NoLock) On L.StockInDocId = S.DocId 
                        And L.StockInTSr = S.TSr 
                        And L.StockInSr = S.Sr
                Where H.DocId = '" & SearchCode & "'"
        Dim DtHeaderSource As DataTable = AgL.FillData(mQry, IIf(AgL.PubServerName = "", Conn, AgL.GcnRead)).Tables(0)

        mQry = " SELECT IfNull(S.Div_Code, L.StockInDiv_Code) As Div_Code_StockIn, 
                L.*, Lv.PurchaseRate, Lv.PurchaseDiscountPer, 
                Lv.PurchaseAdditionalDiscountPer, Lv.PurchaseDeal,
                Ls.ItemCategory, Ls.ItemGroup
                FROM SaleInvoiceDetail L With (NoLock)
                LEFT JOIN SaleInvoiceDetailSku Ls With (NoLock) On L.DocId = Ls.DocId And L.Sr = Ls.Sr
                LEFT JOIN Stock S With (NoLock) On L.StockInDocId = S.DocId 
                        And L.StockInTSr = S.TSr 
                        And L.StockInSr = S.Sr
                LEFT JOIN SaleInvoiceDetailHelpValues Lv With (NoLock) On L.DocId = Lv.DocId 
                        And L.Sr = Lv.Sr
                Where L.DocId = '" & SearchCode & "'"
        Dim DtLineDetailSource As DataTable = AgL.FillData(mQry, IIf(AgL.PubServerName = "", Conn, AgL.GcnRead)).Tables(0)

        For I = 0 To DtHeaderSource.Rows.Count - 1
            Dim Tot_Gross_Amount As Double = 0
            Dim Tot_Taxable_Amount As Double = 0
            Dim Tot_Tax1 As Double = 0
            Dim Tot_Tax2 As Double = 0
            Dim Tot_Tax3 As Double = 0
            Dim Tot_Tax4 As Double = 0
            Dim Tot_Tax5 As Double = 0
            Dim Tot_SubTotal1 As Double = 0
            Dim Tot_Other_Charge As Double = 0
            Dim Tot_Deduction As Double = 0

            Dim SaleInvoiceTableList(0) As FrmSaleInvoiceDirect_WithDimension.StructSaleInvoice
            Dim SaleInvoiceTable As New FrmSaleInvoiceDirect_WithDimension.StructSaleInvoice

            SaleInvoiceTable.DocID = ""
            If mCustomUI = mCustomUI_Retail Then
                SaleInvoiceTable.V_Type = "SIR"
            Else
                SaleInvoiceTable.V_Type = "SI"
            End If
            SaleInvoiceTable.V_Prefix = AgL.XNull(DtHeaderSource.Rows(I)("V_Prefix"))
            SaleInvoiceTable.Site_Code = AgL.XNull(DtHeaderSource.Rows(I)("Site_Code"))
            SaleInvoiceTable.Div_Code = AgL.XNull(DtHeaderSource.Rows(I)("Div_Code_StockIn"))
            SaleInvoiceTable.V_No = 0
            SaleInvoiceTable.V_Date = AgL.XNull(DtHeaderSource.Rows(I)("V_Date"))

            If DtGeneratedEntries.Rows.Count > 0 Then
                Dim DtRowGeneratedEntries As DataRow() = DtGeneratedEntries.Select("Div_Code = " + AgL.Chk_Text(AgL.XNull(DtHeaderSource.Rows(I)("Div_Code_StockIn"))))
                If DtRowGeneratedEntries.Length > 0 Then
                    SaleInvoiceTable.ManualRefNo = AgL.XNull(DtRowGeneratedEntries(0)("ManualRefNo"))
                End If
            Else
                SaleInvoiceTable.ManualRefNo = ""
            End If

            SaleInvoiceTable.SaleToParty = AgL.XNull(DtHeaderSource.Rows(I)("SaleToParty"))
            SaleInvoiceTable.SaleToPartyName = AgL.XNull(DtHeaderSource.Rows(I)("SaleToPartyName"))
            SaleInvoiceTable.AgentCode = AgL.XNull(DtHeaderSource.Rows(I)("Agent"))
            SaleInvoiceTable.AgentName = ""
            SaleInvoiceTable.BillToPartyCode = AgL.XNull(DtHeaderSource.Rows(I)("BillToParty"))
            SaleInvoiceTable.BillToPartyName = ""
            SaleInvoiceTable.SaleToPartyAddress = AgL.XNull(DtHeaderSource.Rows(I)("SaleToPartyAddress"))
            SaleInvoiceTable.SaleToPartyCityCode = AgL.XNull(DtHeaderSource.Rows(I)("SaleToPartyCity"))
            SaleInvoiceTable.SaleToPartyMobile = AgL.XNull(DtHeaderSource.Rows(I)("SaleToPartyMobile"))
            SaleInvoiceTable.SaleToPartySalesTaxNo = AgL.XNull(DtHeaderSource.Rows(I)("SaleToPartySalesTaxNo"))
            SaleInvoiceTable.ShipToAddress = AgL.XNull(DtHeaderSource.Rows(I)("ShipToAddress"))
            SaleInvoiceTable.SalesTaxGroupParty = AgL.XNull(DtHeaderSource.Rows(I)("SalesTaxGroupParty"))
            SaleInvoiceTable.PlaceOfSupply = AgL.XNull(DtHeaderSource.Rows(I)("PlaceOfSupply"))
            SaleInvoiceTable.StructureCode = AgL.XNull(DtHeaderSource.Rows(I)("Structure"))
            SaleInvoiceTable.CustomFields = AgL.XNull(DtHeaderSource.Rows(I)("CustomFields"))
            SaleInvoiceTable.SaleToPartyDocNo = AgL.XNull(DtHeaderSource.Rows(I)("SaleToPartyDocNo"))
            SaleInvoiceTable.SaleToPartyDocDate = AgL.XNull(DtHeaderSource.Rows(I)("SaleToPartyDocDate"))
            SaleInvoiceTable.ReferenceDocId = ""
            SaleInvoiceTable.Tags = AgL.XNull(DtHeaderSource.Rows(I)("Tags"))
            SaleInvoiceTable.Remarks = AgL.XNull(DtHeaderSource.Rows(I)("Remarks"))
            SaleInvoiceTable.Status = "Active"
            SaleInvoiceTable.EntryBy = AgL.PubUserName
            SaleInvoiceTable.EntryDate = AgL.GetDateTime(AgL.GcnRead)
            SaleInvoiceTable.ApproveBy = ""
            SaleInvoiceTable.ApproveDate = ""
            SaleInvoiceTable.MoveToLog = ""
            SaleInvoiceTable.MoveToLogDate = ""
            SaleInvoiceTable.UploadDate = ""
            SaleInvoiceTable.GenDocId = SearchCode
            SaleInvoiceTable.OmsId = ""
            SaleInvoiceTable.LockText = "Generated from Overlay Invoice.If you want to change something make changes in Overlay invoice."

            Dim DtSaleInvoiceDetail_ForHeader As New DataTable
            For M As Integer = 0 To DtLineDetailSource.Columns.Count - 1
                Dim DColumn As New DataColumn
                DColumn.ColumnName = DtLineDetailSource.Columns(M).ColumnName
                DtSaleInvoiceDetail_ForHeader.Columns.Add(DColumn)
            Next

            Dim DtRowSaleInvoiceDetail_ForHeader As DataRow() = DtLineDetailSource.Select("DocId = " + AgL.Chk_Text(AgL.XNull(DtHeaderSource.Rows(I)("DocId"))) + " 
                                And Div_Code_StockIn = " + AgL.Chk_Text(AgL.XNull(DtHeaderSource.Rows(I)("Div_Code_StockIn"))))
            If DtRowSaleInvoiceDetail_ForHeader.Length > 0 Then
                For M As Integer = 0 To DtRowSaleInvoiceDetail_ForHeader.Length - 1
                    DtSaleInvoiceDetail_ForHeader.Rows.Add()
                    For N As Integer = 0 To DtSaleInvoiceDetail_ForHeader.Columns.Count - 1
                        DtSaleInvoiceDetail_ForHeader.Rows(M)(N) = DtRowSaleInvoiceDetail_ForHeader(M)(N)
                    Next
                Next
            End If


            For J = 0 To DtSaleInvoiceDetail_ForHeader.Rows.Count - 1
                SaleInvoiceTable.Line_Sr = AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Sr"))
                SaleInvoiceTable.Line_ItemCategoryCode = AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("ItemCategory"))
                SaleInvoiceTable.Line_ItemGroupCode = AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("ItemGroup"))
                SaleInvoiceTable.Line_ItemCode = AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Item"))
                SaleInvoiceTable.Line_ItemName = ""
                SaleInvoiceTable.Line_Specification = AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Specification"))
                SaleInvoiceTable.Line_SalesTaxGroupItem = AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("SalesTaxGroupItem"))
                SaleInvoiceTable.Line_ReferenceNo = AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("ReferenceNo"))
                SaleInvoiceTable.Line_DocQty = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("DocQty"))
                SaleInvoiceTable.Line_FreeQty = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("FreeQty"))
                SaleInvoiceTable.Line_Qty = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Qty"))
                SaleInvoiceTable.Line_Unit = AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Unit"))
                SaleInvoiceTable.Line_Pcs = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Pcs"))
                SaleInvoiceTable.Line_UnitMultiplier = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("UnitMultiplier"))
                SaleInvoiceTable.Line_DealUnit = AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("DealUnit"))
                SaleInvoiceTable.Line_DocDealQty = AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("DocDealQty"))
                SaleInvoiceTable.Line_OmsId = ""
                SaleInvoiceTable.Line_Rate = AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Rate"))
                SaleInvoiceTable.Line_DiscountPer = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("DiscountPer"))
                SaleInvoiceTable.Line_DiscountAmount = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("DiscountAmount"))
                SaleInvoiceTable.Line_AdditionalDiscountPer = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("AdditionalDiscountPer"))
                SaleInvoiceTable.Line_AdditionalDiscountAmount = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("AdditionalDiscountAmount"))
                SaleInvoiceTable.Line_Amount = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Amount"))
                SaleInvoiceTable.Line_Remark = AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Remark"))
                SaleInvoiceTable.Line_BaleNo = AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("BaleNo"))
                SaleInvoiceTable.Line_LotNo = AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("LotNo"))

                SaleInvoiceTable.Line_Deal = AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Deal"))
                SaleInvoiceTable.Line_MRP = AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("MRP"))
                SaleInvoiceTable.Line_Expiry = AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("ExpiryDate"))

                SaleInvoiceTable.Line_PurchaseRate = AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("PurchaseRate"))
                SaleInvoiceTable.Line_PurchaseDiscountPer = AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("PurchaseDiscountPer"))
                SaleInvoiceTable.Line_PurchaseAdditionalDiscountPer = AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("PurchaseAdditionalDiscountPer"))
                SaleInvoiceTable.Line_PurchaseDeal = AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("PurchaseDeal"))




                SaleInvoiceTable.Line_ReferenceDocId = AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("ReferenceDocId"))
                SaleInvoiceTable.Line_GrossWeight = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("GrossWeight"))
                SaleInvoiceTable.Line_NetWeight = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("NetWeight"))
                SaleInvoiceTable.Line_Gross_Amount = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Gross_Amount"))
                SaleInvoiceTable.Line_Taxable_Amount = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Taxable_Amount"))
                SaleInvoiceTable.Line_Tax1_Per = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Tax1_Per"))
                SaleInvoiceTable.Line_Tax1 = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Tax1"))
                SaleInvoiceTable.Line_Tax2_Per = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Tax2_Per"))
                SaleInvoiceTable.Line_Tax2 = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Tax2"))
                SaleInvoiceTable.Line_Tax3_Per = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Tax3_Per"))
                SaleInvoiceTable.Line_Tax3 = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Tax3"))
                SaleInvoiceTable.Line_Tax4_Per = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Tax4_Per"))
                SaleInvoiceTable.Line_Tax4 = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Tax4"))
                SaleInvoiceTable.Line_Tax5_Per = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Tax5_Per"))
                SaleInvoiceTable.Line_Tax5 = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Tax5"))
                SaleInvoiceTable.Line_SubTotal1 = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("SubTotal1"))
                SaleInvoiceTable.Line_Other_Charge = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Other_Charge"))
                SaleInvoiceTable.Line_Deduction = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Deduction"))
                SaleInvoiceTable.Line_Round_Off = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Round_Off"))
                SaleInvoiceTable.Line_Net_Amount = AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Net_Amount"))

                'For Header Values
                Tot_Gross_Amount += SaleInvoiceTable.Line_Gross_Amount
                Tot_Taxable_Amount += SaleInvoiceTable.Line_Taxable_Amount
                Tot_Tax1 += SaleInvoiceTable.Line_Tax1
                Tot_Tax2 += SaleInvoiceTable.Line_Tax2
                Tot_Tax3 += SaleInvoiceTable.Line_Tax3
                Tot_Tax4 += SaleInvoiceTable.Line_Tax4
                Tot_Tax5 += SaleInvoiceTable.Line_Tax5
                Tot_SubTotal1 += SaleInvoiceTable.Line_SubTotal1
                Tot_Other_Charge += SaleInvoiceTable.Line_Other_Charge
                Tot_Deduction += SaleInvoiceTable.Line_Deduction

                SaleInvoiceTableList(UBound(SaleInvoiceTableList)) = SaleInvoiceTable
                ReDim Preserve SaleInvoiceTableList(UBound(SaleInvoiceTableList) + 1)
            Next

            SaleInvoiceTableList(0).Gross_Amount = Tot_Gross_Amount
            SaleInvoiceTableList(0).Taxable_Amount = Tot_Taxable_Amount
            SaleInvoiceTableList(0).Tax1 = Tot_Tax1
            SaleInvoiceTableList(0).Tax2 = Tot_Tax2
            SaleInvoiceTableList(0).Tax3 = Tot_Tax3
            SaleInvoiceTableList(0).Tax4 = Tot_Tax4
            SaleInvoiceTableList(0).Tax5 = Tot_Tax5
            SaleInvoiceTableList(0).SubTotal1 = Tot_SubTotal1
            SaleInvoiceTableList(0).Other_Charge = Tot_Other_Charge
            SaleInvoiceTableList(0).Deduction = Tot_Deduction
            SaleInvoiceTableList(0).Round_Off = Math.Round(Math.Round(SaleInvoiceTableList(0).SubTotal1) - SaleInvoiceTableList(0).SubTotal1, 2)
            SaleInvoiceTableList(0).Net_Amount = Math.Round(SaleInvoiceTableList(0).SubTotal1)


            'Dim Tot_Other_Charge As Double = 0
            'Dim Tot_Deduction As Double = 0
            Dim Tot_RoundOff As Double = 0
            Dim Tot_NetAmount As Double = 0
            For J = 0 To SaleInvoiceTableList.Length - 1
                'SaleInvoiceTableList(J).Line_Other_Charge = Math.Round(SaleInvoiceTableList(0).Other_Charge * SaleInvoiceTableList(J).Line_Gross_Amount / SaleInvoiceTableList(0).Gross_Amount, 2)
                'SaleInvoiceTableList(J).Line_Deduction = Math.Round(SaleInvoiceTableList(0).Deduction * SaleInvoiceTableList(J).Line_Gross_Amount / SaleInvoiceTableList(0).Gross_Amount, 2)

                SaleInvoiceTableList(J).Line_Round_Off = Math.Round(SaleInvoiceTableList(0).Round_Off * SaleInvoiceTableList(J).Line_Gross_Amount / SaleInvoiceTableList(0).Gross_Amount, 2)
                'SaleInvoiceTableList(J).Line_Net_Amount = Math.Round(SaleInvoiceTableList(0).Net_Amount * SaleInvoiceTableList(J).Line_Gross_Amount / SaleInvoiceTableList(0).Gross_Amount, 2)
                SaleInvoiceTableList(J).Line_Net_Amount = Math.Round(SaleInvoiceTableList(J).Line_Net_Amount - SaleInvoiceTableList(J).Line_Round_Off, 2)

                'Tot_Other_Charge += SaleInvoiceTableList(J).Line_Other_Charge
                'Tot_Deduction += SaleInvoiceTableList(J).Line_Deduction
                Tot_RoundOff += SaleInvoiceTableList(J).Line_Round_Off
                Tot_NetAmount += SaleInvoiceTableList(J).Line_Net_Amount
            Next

            Tot_RoundOff = Math.Round(Tot_RoundOff, 2)

            'If Tot_Other_Charge <> SaleInvoiceTableList(0).Other_Charge Then
            '    SaleInvoiceTableList(0).Line_Other_Charge = SaleInvoiceTableList(0).Line_Other_Charge + (SaleInvoiceTableList(0).Other_Charge - Tot_Other_Charge)
            'End If
            'If Tot_Deduction <> SaleInvoiceTableList(0).Deduction Then
            '    SaleInvoiceTableList(0).Line_Deduction = SaleInvoiceTableList(0).Line_Deduction + (SaleInvoiceTableList(0).Deduction - Tot_Deduction)
            'End If
            If Tot_RoundOff <> SaleInvoiceTableList(0).Round_Off Then
                SaleInvoiceTableList(0).Line_Round_Off = SaleInvoiceTableList(0).Line_Round_Off + (SaleInvoiceTableList(0).Round_Off - Tot_RoundOff)
            End If
            If Tot_NetAmount <> SaleInvoiceTableList(0).Net_Amount Then
                SaleInvoiceTableList(0).Line_Net_Amount = SaleInvoiceTableList(0).Line_Net_Amount + (SaleInvoiceTableList(0).Net_Amount - Tot_NetAmount)
            End If

            Dim bDocId As String = InsertSaleInvoice(SaleInvoiceTableList)

            FSaveSalesTaxSummaryStr(bDocId, Conn, Cmd)

            mQry = " Delete From Stock Where DocId = '" & bDocId & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
        Next
    End Sub
    Private Sub FDeleteGeneratedSales(SearchCode As String, Conn As Object, Cmd As Object)
        mQry = "Select DocId From SaleInvoice With (NoLock) Where GenDocId = '" & SearchCode & "'"
        Dim DtGeneratedEntries As DataTable = AgL.FillData(mQry, IIf(AgL.PubServerName = "", Conn, AgL.GcnRead)).Tables(0)
        For I As Integer = 0 To DtGeneratedEntries.Rows.Count - 1
            mQry = " Delete From SaleInvoiceTrnSetting Where DocId = '" & AgL.XNull(DtGeneratedEntries.Rows(I)("DocId")) & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            mQry = " Delete From StockAdj Where StockOutDocId = '" & AgL.XNull(DtGeneratedEntries.Rows(I)("DocId")) & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            mQry = " Delete From Stock Where DocId = '" & AgL.XNull(DtGeneratedEntries.Rows(I)("DocId")) & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            mQry = " Delete From Ledger Where DocId = '" & AgL.XNull(DtGeneratedEntries.Rows(I)("DocId")) & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            mQry = " Delete From SaleInvoicePayment Where DocId = '" & AgL.XNull(DtGeneratedEntries.Rows(I)("DocId")) & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            mQry = " Delete From SaleInvoiceDimensionDetail Where DocId = '" & AgL.XNull(DtGeneratedEntries.Rows(I)("DocId")) & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            mQry = "Delete from SaleInvoiceDimensionDetailSku where DocID='" & AgL.XNull(DtGeneratedEntries.Rows(I)("DocId")) & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            mQry = "Delete from SaleInvoiceBarcodeLastTransactionValues where DocID='" & AgL.XNull(DtGeneratedEntries.Rows(I)("DocId")) & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            mQry = "Delete from SaleInvoiceTransport where DocID='" & AgL.XNull(DtGeneratedEntries.Rows(I)("DocId")) & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            mQry = "Delete from SaleInvoiceDetailHelpValues where DocID='" & AgL.XNull(DtGeneratedEntries.Rows(I)("DocId")) & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            mQry = "Delete from SaleInvoiceDetailSku where DocID='" & AgL.XNull(DtGeneratedEntries.Rows(I)("DocId")) & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            mQry = "Delete from SaleInvoiceDetail where DocID='" & AgL.XNull(DtGeneratedEntries.Rows(I)("DocId")) & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            mQry = "Delete from SaleInvoice where DocID='" & AgL.XNull(DtGeneratedEntries.Rows(I)("DocId")) & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
        Next
    End Sub
    Private Sub FSaveSalesTaxSummaryStr(bDocId As String, Conn As Object, Cmd As Object)
        Dim SalesTaxSummaryStrColumns As String = ""
        SalesTaxSummaryStrColumns = FGetSettings(SettingFields.SalesTaxSummaryStrColumns, SettingType.General)
        If SalesTaxSummaryStrColumns <> "" Then
            mQry = " Select L.DocID "
            If SalesTaxSummaryStrColumns.Contains("HSN") Then
                mQry += " ,IfNull(I.HSN,Ic.HSN) As HSN "
            End If
            If SalesTaxSummaryStrColumns.Contains("SALES TAX GROUP") Then
                mQry += " ,L.SalesTaxGroupItem "
            End If
            mQry += " ,Sum(L.Taxable_Amount) As Taxable_Amount, 
                Sum(L.Tax1) As Tax1, Sum(L.Tax2) As Tax2, Sum(L.Tax3) As Tax3
                From SaleInvoiceDetail L  With (NoLock)
                LEFT JOIN Item I With (NoLock) ON L.Item = I.Code
                LEFT JOIN ItemCategory Ic  With (NoLock) On I.ItemCategory = Ic.Code
                Where L.DocId = '" & bDocId & "'
                Group By L.DocId "
            If SalesTaxSummaryStrColumns.Contains("HSN") Then
                mQry += " ,IfNull(I.HSN,Ic.HSN) "
            End If
            If SalesTaxSummaryStrColumns.Contains("SALES TAX GROUP") Then
                mQry += " ,L.SalesTaxGroupItem "
            End If
            Dim DtSalesTaxSummary As DataTable = AgL.FillData(mQry, IIf(AgL.PubServerName = "", Conn, AgL.GcnRead)).Tables(0)

            Dim SalesTaxSummaryStr As String = ""
            For I As Integer = 0 To DtSalesTaxSummary.Rows.Count - 1
                If SalesTaxSummaryStrColumns.Contains("HSN") Then SalesTaxSummaryStr += AgL.XNull(DtSalesTaxSummary.Rows(I)("HSN"))
                If SalesTaxSummaryStrColumns.Contains("SALES TAX GROUP") Then SalesTaxSummaryStr += " " & AgL.XNull(DtSalesTaxSummary.Rows(I)("SalesTaxGroupItem"))
                If SalesTaxSummaryStrColumns.Contains("TAXABLE AMOUNT") Then SalesTaxSummaryStr += " Taxable Amt : " & AgL.XNull(DtSalesTaxSummary.Rows(I)("Taxable_Amount"))
                If SalesTaxSummaryStrColumns.Contains("TAX AMOUNT") Then SalesTaxSummaryStr += " Tax Amt : " & (AgL.VNull(DtSalesTaxSummary.Rows(I)("Tax1")) + AgL.VNull(DtSalesTaxSummary.Rows(I)("Tax2")) + AgL.VNull(DtSalesTaxSummary.Rows(I)("Tax3"))).ToString()
                SalesTaxSummaryStr += ", "
            Next

            mQry = " UPDATE SaleInvoice Set SalesTaxSummaryStr = '" & SalesTaxSummaryStr & "'
                Where DocId = '" & bDocId & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
        End If
    End Sub


    ''' ''''''''''''''''''''''''''Start Logic for Aadhat''''''''''''''''''''''
    Public Sub Ini_Grid_Purchase()
        If FGetSettings(SettingFields.GeneratedEntryV_TypeForAadhat, SettingType.General) <> "" Then
            DglPurchase.ColumnCount = 0
            With AgCL
                .AddAgTextColumn(DglPurchase, ColSNo, 40, 5, ColSNo, False, True, False)
                .AddAgTextColumn(DglPurchase, Col5ItemGroup, 130, 0, Col5ItemGroup, False, True)
                .AddAgTextColumn(DglPurchase, Col5ParentSupplier, 130, 0, Col5ParentSupplier, False, True)
                .AddAgTextColumn(DglPurchase, Col5Supplier, 150, 0, Col5Supplier, True, True)
                .AddAgTextColumn(DglPurchase, Col5PlaceOfSupply, 130, 0, Col5PlaceOfSupply, False, True)
                .AddAgTextColumn(DglPurchase, Col5PurchInvoiceNo, 70, 0, Col5PurchInvoiceNo, True, False)
                .AddAgDateColumn(DglPurchase, Col5PurchInvoiceDate, 80, Col5PurchInvoiceDate, True, False)

                '.AddAgTextColumn(DglPurchase, Col5GrossAmount, 80, 0, Col5GrossAmount, True, True)
                '.AddAgTextColumn(DglPurchase, Col5TotalTax, 80, 0, Col5TotalTax, True, False)
                '.AddAgTextColumn(DglPurchase, Col5OtherCharge, 80, 0, Col5OtherCharge, True, False)
                '.AddAgTextColumn(DglPurchase, Col5OtherCharge1, 80, 0, Col5OtherCharge1, True, False)
                '.AddAgTextColumn(DglPurchase, Col5Deduction, 80, 0, Col5Deduction, True, False)
                '.AddAgTextColumn(DglPurchase, Col5NetAmount, 80, 0, Col5NetAmount, True, True)
                '.AddAgTextColumn(DglPurchase, Col5CommissionAmount, 80, 0, Col5CommissionAmount, True, True)
                '.AddAgTextColumn(DglPurchase, Col5AdditionalCommissionAmount, 80, 0, Col5AdditionalCommissionAmount, True, True)


                .AddAgNumberColumn(DglPurchase, Col5GrossAmount, 70, 8, 4, True, Col5GrossAmount, True, False, True)
                .AddAgNumberColumn(DglPurchase, Col5TotalTax, 70, 8, 4, True, Col5TotalTax, True, False, True)
                .AddAgNumberColumn(DglPurchase, Col5OtherCharge, 70, 8, 4, True, Col5OtherCharge, True, False, True)
                .AddAgNumberColumn(DglPurchase, Col5OtherCharge1, 70, 8, 4, True, Col5OtherCharge1, True, False, True)
                .AddAgNumberColumn(DglPurchase, Col5Deduction, 70, 8, 4, True, Col5Deduction, True, False, True)
                .AddAgNumberColumn(DglPurchase, Col5NetAmount, 70, 8, 4, True, Col5NetAmount, True, False, True)
                .AddAgNumberColumn(DglPurchase, Col5CommissionAmount, 70, 8, 4, True, Col5CommissionAmount, True, False, True)
                .AddAgNumberColumn(DglPurchase, Col5AdditionalCommissionAmount, 70, 8, 4, True, Col5AdditionalCommissionAmount, True, False, True)




                .AddAgTextColumn(DglPurchase, Col5AmsDocNo, 70, 0, Col5AmsDocNo, True, False)
                .AddAgDateColumn(DglPurchase, Col5AmsDocDate, 80, Col5AmsDocDate, True, False)
                .AddAgNumberColumn(DglPurchase, Col5AmsDocAmount, 70, 8, 4, True, Col5AmsDocAmount, True, False, True)
            End With
            AgL.AddAgDataGrid(DglPurchase, PnlPurchase)
            DglPurchase.EnableHeadersVisualStyles = False
            DglPurchase.ColumnHeadersHeight = 55
            DglPurchase.AgSearchMethod = AgControls.AgLib.TxtSearchMethod.Simple
            AgL.GridDesign(DglPurchase)

            DglPurchase.AllowUserToAddRows = False
            DglPurchase.AgSkipReadOnlyColumns = True
            DglPurchase.AllowUserToOrderColumns = True
            DglPurchase.Anchor = AnchorStyles.Bottom + AnchorStyles.Left + AnchorStyles.Right
            DglPurchase.BorderStyle = BorderStyle.None
            DglPurchase.BackgroundColor = Me.BackColor
            DglPurchase.Name = "DglPurchase"

            DglPurchase.AgSearchMethod = AgControls.AgLib.TxtSearchMethod.Simple
            AgCL.GridSetiingShowXml(Me.Text & DglPurchase.Name & AgL.PubCompCode & AgL.PubDivCode & AgL.PubSiteCode, DglPurchase, False)
            DglPurchase.BringToFront()
            DglPurchase.Top = Dgl3.Top
            DglPurchase.Height = AgCalcGrid1.Height


            DglPurchase.Left = Dgl3.Right + 5
            DglPurchase.Width = AgCalcGrid1.Left - Dgl3.Width - 12
            DglPurchase.Visible = True

            AgCL.GridSetiingShowXml(Me.Text & DglPurchase.Name & AgL.PubCompCode & AgL.PubDivCode & AgL.PubSiteCode, Dgl1, False)
        Else
            PnlPurchase.Visible = False
        End If
    End Sub
    Public Sub FPostPurchaseData(Conn As Object, Cmd As Object)
        Dim ErrorLog As String = ""
        Dim DtMain As DataTable = Nothing
        Dim I As Integer
        Dim J As Integer
        Dim StrErrLog As String = ""

        FDeleteGeneratedPurchase(mSearchCode, Conn, Cmd)

        For I = 0 To DglPurchase.Rows.Count - 1
            Dim Tot_Commission_Amount As Double = 0
            Dim Tot_Additional_Commission_Amount As Double = 0
            Dim Tot_Gross_Amount As Double = 0
            Dim Tot_Taxable_Amount As Double = 0
            Dim Tot_Tax1 As Double = 0
            Dim Tot_Tax2 As Double = 0
            Dim Tot_Tax3 As Double = 0
            Dim Tot_Tax4 As Double = 0
            Dim Tot_Tax5 As Double = 0
            Dim Tot_SubTotal1 As Double = 0



            Dim PurchInvoiceTableList(0) As FrmPurchInvoiceDirect_WithDimension.StructPurchInvoice
            Dim PurchInvoiceTable As New FrmPurchInvoiceDirect_WithDimension.StructPurchInvoice


            PurchInvoiceTable.DocID = ""
            PurchInvoiceTable.V_Type = FGetSettings(SettingFields.GeneratedEntryV_TypeForAadhat, SettingType.General)
            PurchInvoiceTable.V_Prefix = ""
            PurchInvoiceTable.Site_Code = AgL.PubSiteCode
            PurchInvoiceTable.Div_Code = AgL.PubDivCode
            PurchInvoiceTable.V_No = 0
            PurchInvoiceTable.V_Date = DglPurchase.Item(Col5PurchInvoiceDate, I).Value
            PurchInvoiceTable.ManualRefNo = ""
            PurchInvoiceTable.Vendor = DglPurchase.Item(Col5Supplier, I).Tag
            PurchInvoiceTable.AgentCode = ""
            PurchInvoiceTable.AgentName = ""
            PurchInvoiceTable.VendorName = ""
            PurchInvoiceTable.BillToPartyCode = DglPurchase.Item(Col5ParentSupplier, I).Tag
            PurchInvoiceTable.BillToPartyName = ""
            PurchInvoiceTable.VendorAddress = ""
            PurchInvoiceTable.VendorCity = ""
            PurchInvoiceTable.VendorMobile = ""
            PurchInvoiceTable.VendorSalesTaxNo = ""

            mQry = "  SELECT CASE WHEN C.State <> '" & AgL.PubSiteStateCode & "' THEN '" & PlaceOfSupplay.OutsideState & "' 
                                  ELSE '" & PlaceOfSupplay.WithinState & "' END As PlaceOfSupply, 
                        Sg.SalesTaxPostingGroup
                        FROM Subgroup Sg 
                        LEFT JOIN City C ON Sg.CityCode = C.CityCode
                        Where Sg.SubCode = '" & PurchInvoiceTable.Vendor & "' "
            Dim DtPartyDetail As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)

            PurchInvoiceTable.SalesTaxGroupParty = AgL.XNull(DtPartyDetail.Rows(0)("SalesTaxPostingGroup"))
            PurchInvoiceTable.PlaceOfSupply = AgL.XNull(DtPartyDetail.Rows(0)("PlaceOfSupply"))

            If TxtStructure.Tag = "GstSaleMrp" Then
                PurchInvoiceTable.StructureCode = "GstPurMrp"
            Else
                PurchInvoiceTable.StructureCode = ""
            End If

            PurchInvoiceTable.CustomFields = ""
            PurchInvoiceTable.VendorDocNo = DglPurchase.Item(Col5PurchInvoiceNo, I).Value
            PurchInvoiceTable.VendorDocDate = DglPurchase.Item(Col5PurchInvoiceDate, I).Value
            PurchInvoiceTable.AmsDocNo = DglPurchase.Item(Col5AmsDocNo, I).Value
            PurchInvoiceTable.AmsDocDate = DglPurchase.Item(Col5AmsDocDate, I).Value
            PurchInvoiceTable.AmsDocAmount = DglPurchase.Item(Col5AmsDocDate, I).Value
            PurchInvoiceTable.ReferenceDocId = ""
            PurchInvoiceTable.GenDocId = mSearchCode
            PurchInvoiceTable.GenDocIdSr = ""
            PurchInvoiceTable.Tags = ""
            PurchInvoiceTable.Remarks = ""
            PurchInvoiceTable.LockText = "This entry is generated from Sale Invoice. It can be edited from Sale Invoice."
            PurchInvoiceTable.Status = "Active"
            PurchInvoiceTable.EntryBy = AgL.PubUserName
            PurchInvoiceTable.EntryDate = AgL.GetDateTime(AgL.GcnRead)
            PurchInvoiceTable.ApproveBy = ""
            PurchInvoiceTable.ApproveDate = ""
            PurchInvoiceTable.MoveToLog = ""
            PurchInvoiceTable.MoveToLogDate = ""
            PurchInvoiceTable.UploadDate = ""

            PurchInvoiceTable.Deduction_Per = 0
            PurchInvoiceTable.Deduction = 0
            PurchInvoiceTable.Other_Charge_Per = 0
            PurchInvoiceTable.Other_Charge = 0
            PurchInvoiceTable.Round_Off = 0
            PurchInvoiceTable.Net_Amount = 0

            mQry = " SELECT Ls.ItemCategory As ItemCategoryCode, Ls.ItemGroup As ItemGroupCode, 
                        Lv.PurchaseDiscountPer, Lv.PurchaseAdditionalDiscountPer, I.SalesTaxPostingGroup As SalesTaxGroup_BaseRate, L.*
                        FROM SaleInvoiceDetail L With (NoLock)
                        LEFT JOIN SaleInvoiceDetailSku Ls With (NoLock) On L.DocId = Ls.DocId And L.Sr = Ls.Sr
                        LEFT JOIN SaleInvoiceDetailHelpValues Lv ON L.DocID = Lv.DocId And L.Sr = Lv.Sr
                        LEFT JOIN Item I On L.Item = I.Code
                        WHERE L.DocID = '" & mSearchCode & "'
                        And Ls.ItemGroup = '" & DglPurchase.Item(Col5ItemGroup, I).Tag & "'"
            Dim DtTemp As DataTable = AgL.FillData(mQry, IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).Tables(0)


            For J = 0 To DtTemp.Rows.Count - 1
                PurchInvoiceTable.Line_Sr = J + 1
                PurchInvoiceTable.Line_ItemCategoryCode = AgL.XNull(DtTemp.Rows(J)("ItemCategoryCode"))
                PurchInvoiceTable.Line_ItemGroupCode = AgL.XNull(DtTemp.Rows(J)("ItemGroupCode"))

                PurchInvoiceTable.Line_ItemCode = AgL.XNull(DtTemp.Rows(J)("Item"))
                PurchInvoiceTable.Line_ItemName = ""
                PurchInvoiceTable.Line_Specification = ""

                PurchInvoiceTable.Line_ReferenceNo = ""
                PurchInvoiceTable.Line_DocQty = AgL.VNull(DtTemp.Rows(J)("DocQty"))
                PurchInvoiceTable.Line_FreeQty = 0
                PurchInvoiceTable.Line_Qty = AgL.VNull(DtTemp.Rows(J)("Qty"))
                PurchInvoiceTable.Line_Unit = AgL.XNull(DtTemp.Rows(J)("Unit"))
                PurchInvoiceTable.Line_Pcs = AgL.VNull(DtTemp.Rows(J)("Pcs"))
                PurchInvoiceTable.Line_UnitMultiplier = AgL.VNull(DtTemp.Rows(J)("UnitMultiplier"))
                PurchInvoiceTable.Line_DealUnit = AgL.XNull(DtTemp.Rows(J)("DealUnit"))
                PurchInvoiceTable.Line_DocDealQty = AgL.XNull(DtTemp.Rows(J)("DocDealQty"))
                PurchInvoiceTable.Line_Rate = AgL.XNull(DtTemp.Rows(J)("Rate"))
                PurchInvoiceTable.Line_DiscountPer = 0
                PurchInvoiceTable.Line_AdditionalDiscountPer = 0
                PurchInvoiceTable.Line_DiscountAmount = 0
                PurchInvoiceTable.Line_AdditionalDiscountAmount = 0

                If CType(AgL.VNull(FGetSettings(SettingFields.TreatRateAsAmountYn, SettingType.General)), Boolean) = True Then
                    'PurchInvoiceTable.Line_DiscountAmount = Math.Round(((1 * PurchInvoiceTable.Line_Rate)) * PurchInvoiceTable.Line_DiscountPer / 100, 2)
                    'PurchInvoiceTable.Line_AdditionalDiscountAmount = Math.Round(((1 * PurchInvoiceTable.Line_Rate) - PurchInvoiceTable.Line_DiscountAmount) * PurchInvoiceTable.Line_AdditionalDiscountPer / 100, 2)
                    If PurchInvoiceTable.Line_Qty < 0 Then
                        PurchInvoiceTable.Line_Amount = Math.Round((-1 * PurchInvoiceTable.Line_Rate) - PurchInvoiceTable.Line_DiscountAmount - PurchInvoiceTable.Line_AdditionalDiscountAmount, 2)
                    Else
                        PurchInvoiceTable.Line_Amount = Math.Round((1 * PurchInvoiceTable.Line_Rate) - PurchInvoiceTable.Line_DiscountAmount - PurchInvoiceTable.Line_AdditionalDiscountAmount, 2)
                    End If
                Else
                    'PurchInvoiceTable.Line_DiscountAmount = Math.Round(((PurchInvoiceTable.Line_Qty * PurchInvoiceTable.Line_Rate)) * PurchInvoiceTable.Line_DiscountPer / 100, 2)
                    'PurchInvoiceTable.Line_AdditionalDiscountAmount = Math.Round(((PurchInvoiceTable.Line_Qty * PurchInvoiceTable.Line_Rate) - PurchInvoiceTable.Line_DiscountAmount) * PurchInvoiceTable.Line_AdditionalDiscountPer / 100, 2)
                    PurchInvoiceTable.Line_Amount = Math.Round((PurchInvoiceTable.Line_Qty * PurchInvoiceTable.Line_Rate) - PurchInvoiceTable.Line_DiscountAmount - PurchInvoiceTable.Line_AdditionalDiscountAmount, 2)
                End If

                PurchInvoiceTable.Line_CommissionPer = AgL.XNull(DtTemp.Rows(J)("PurchaseDiscountPer"))
                'PurchInvoiceTable.Line_CommissionAmount = PurchInvoiceTable.Line_Amount * PurchInvoiceTable.Line_CommissionPer / 100
                PurchInvoiceTable.Line_CommissionAmount = Format(PurchInvoiceTable.Line_Qty * PurchInvoiceTable.Line_CommissionPer, "0.00")
                PurchInvoiceTable.Line_AdditionalCommissionPer = AgL.XNull(DtTemp.Rows(J)("PurchaseAdditionalDiscountPer"))
                PurchInvoiceTable.Line_AdditionalCommissionAmount = (PurchInvoiceTable.Line_Amount - PurchInvoiceTable.Line_CommissionAmount) * PurchInvoiceTable.Line_AdditionalCommissionPer / 100


                Dim bSalesTaxGroupItem As String = FGetSalesTaxGroupItemForPurchase(PurchInvoiceTable.Line_ItemCode, PurchInvoiceTable.Line_Amount,
                                                 PurchInvoiceTable.Line_Qty, PurchInvoiceTable.V_Date, AgL.XNull(DtTemp.Rows(0)("SalesTaxGroup_BaseRate")))

                PurchInvoiceTable.Line_SalesTaxGroupItem = bSalesTaxGroupItem

                PurchInvoiceTable.Line_Remark = ""

                PurchInvoiceTable.Line_BaleNo = AgL.XNull(DtTemp.Rows(J)("BaleNo"))
                PurchInvoiceTable.Line_LotNo = AgL.XNull(DtTemp.Rows(J)("LotNo"))
                PurchInvoiceTable.Line_ReferenceDocId = ""
                PurchInvoiceTable.Line_ReferenceSr = ""
                PurchInvoiceTable.Line_PurchInvoice = ""
                PurchInvoiceTable.Line_PurchInvoiceSr = ""
                PurchInvoiceTable.Line_GrossWeight = 0
                PurchInvoiceTable.Line_NetWeight = 0
                PurchInvoiceTable.Line_Gross_Amount = PurchInvoiceTable.Line_Amount


                If FDivisionNameForCustomization(12) = "MAA KI KRIPA" Or
                        FDivisionNameForCustomization(16) = "KAMAKHYA TRADERS" Or
                    FDivisionNameForCustomization(22) = "W SHYAMA SHYAM FABRICS" Or ClsMain.FDivisionNameForCustomization(27) = "W SHYAMA SHYAM VENTURES LLP" Then
                    PurchInvoiceTable.Line_Taxable_Amount = PurchInvoiceTable.Line_Amount
                    PurchInvoiceTable.Line_Tax1_Per = 0
                    PurchInvoiceTable.Line_Tax1 = 0
                    PurchInvoiceTable.Line_Tax2_Per = 0
                    PurchInvoiceTable.Line_Tax2 = 0
                    PurchInvoiceTable.Line_Tax3_Per = 0
                    PurchInvoiceTable.Line_Tax3 = 0
                    PurchInvoiceTable.Line_Tax4_Per = 0
                    PurchInvoiceTable.Line_Tax4 = 0
                    PurchInvoiceTable.Line_Tax5_Per = 0
                    PurchInvoiceTable.Line_Tax5 = 0
                    PurchInvoiceTable.Line_SubTotal1 = 0
                    PurchInvoiceTable.Line_Round_Off = 0
                    PurchInvoiceTable.Line_Net_Amount = 0


                    'For Header Values
                    Tot_Commission_Amount += PurchInvoiceTable.Line_CommissionAmount
                    Tot_Additional_Commission_Amount += PurchInvoiceTable.Line_AdditionalCommissionAmount
                    Tot_Gross_Amount += PurchInvoiceTable.Line_Gross_Amount
                    Tot_Taxable_Amount += PurchInvoiceTable.Line_Taxable_Amount
                    Tot_Tax1 = Val(DglPurchase.Item(Col5TotalTax, I).Value)
                    Tot_Tax2 = 0
                    Tot_Tax3 = 0
                    Tot_Tax4 = 0
                    Tot_Tax5 = 0
                    Tot_SubTotal1 = Tot_Taxable_Amount + Tot_Tax1
                Else
                    Dim Tax1_Per As Double = 0
                    Dim Tax2_Per As Double = 0
                    Dim Tax3_Per As Double = 0
                    Dim PlaceOfSupply As String = ""

                    FGetTaxRateForPurchase(Tax1_Per, Tax2_Per, Tax3_Per, PlaceOfSupply, PurchInvoiceTable.Line_SalesTaxGroupItem,
                                       PurchInvoiceTable.Vendor)


                    If TxtStructure.Tag = "GstSaleMrp" Then
                        PurchInvoiceTable.Line_Taxable_Amount = Math.Round(Val(PurchInvoiceTable.Line_Amount) * 100 / (100 + Tax1_Per + Tax2_Per + Tax3_Per), 2)
                    Else
                        PurchInvoiceTable.Line_Taxable_Amount = PurchInvoiceTable.Line_Amount
                    End If

                    PurchInvoiceTable.Line_Tax1_Per = Tax1_Per
                    PurchInvoiceTable.Line_Tax1 = Math.Round(PurchInvoiceTable.Line_Taxable_Amount * PurchInvoiceTable.Line_Tax1_Per / 100, 2)
                    PurchInvoiceTable.Line_Tax2_Per = Tax2_Per
                    PurchInvoiceTable.Line_Tax2 = Math.Round(PurchInvoiceTable.Line_Taxable_Amount * PurchInvoiceTable.Line_Tax2_Per / 100, 2)
                    PurchInvoiceTable.Line_Tax3_Per = Tax3_Per
                    PurchInvoiceTable.Line_Tax3 = Math.Round(PurchInvoiceTable.Line_Taxable_Amount * PurchInvoiceTable.Line_Tax3_Per / 100, 2)
                    PurchInvoiceTable.Line_Tax4_Per = 0
                    PurchInvoiceTable.Line_Tax4 = 0
                    PurchInvoiceTable.Line_Tax5_Per = 0
                    PurchInvoiceTable.Line_Tax5 = 0
                    PurchInvoiceTable.Line_SubTotal1 = Math.Round(PurchInvoiceTable.Line_Taxable_Amount +
                                                    PurchInvoiceTable.Line_Tax1 +
                                                    PurchInvoiceTable.Line_Tax2 +
                                                    PurchInvoiceTable.Line_Tax3 +
                                                    PurchInvoiceTable.Line_Tax4 +
                                                    PurchInvoiceTable.Line_Tax5, 2)

                    PurchInvoiceTable.Line_Round_Off = 0
                    PurchInvoiceTable.Line_Net_Amount = PurchInvoiceTable.Line_SubTotal1


                    'For Header Values
                    Tot_Commission_Amount += PurchInvoiceTable.Line_CommissionAmount
                    Tot_Additional_Commission_Amount += PurchInvoiceTable.Line_AdditionalCommissionAmount
                    Tot_Gross_Amount += PurchInvoiceTable.Line_Gross_Amount
                    Tot_Taxable_Amount += PurchInvoiceTable.Line_Taxable_Amount
                    Tot_Tax1 += PurchInvoiceTable.Line_Tax1
                    Tot_Tax2 += PurchInvoiceTable.Line_Tax2
                    Tot_Tax3 += PurchInvoiceTable.Line_Tax3
                    Tot_Tax4 += PurchInvoiceTable.Line_Tax4
                    Tot_Tax5 += PurchInvoiceTable.Line_Tax5
                    Tot_SubTotal1 += PurchInvoiceTable.Line_SubTotal1
                End If




                PurchInvoiceTableList(UBound(PurchInvoiceTableList)) = PurchInvoiceTable
                ReDim Preserve PurchInvoiceTableList(UBound(PurchInvoiceTableList) + 1)
            Next


            PurchInvoiceTableList(0).CommissionAmount = Tot_Commission_Amount
            PurchInvoiceTableList(0).AdditionalCommissionAmount = Tot_Additional_Commission_Amount
            PurchInvoiceTableList(0).Gross_Amount = Tot_Gross_Amount
            PurchInvoiceTableList(0).Taxable_Amount = Tot_Taxable_Amount
            PurchInvoiceTableList(0).Tax1 = Tot_Tax1
            PurchInvoiceTableList(0).Tax2 = Tot_Tax2
            PurchInvoiceTableList(0).Tax3 = Tot_Tax3
            PurchInvoiceTableList(0).Tax4 = Tot_Tax4
            PurchInvoiceTableList(0).Tax5 = Tot_Tax5
            PurchInvoiceTableList(0).SubTotal1 = Tot_SubTotal1

            If FDivisionNameForCustomization(12) = "MAA KI KRIPA" Or
                    FDivisionNameForCustomization(16) = "KAMAKHYA TRADERS" Or
                FDivisionNameForCustomization(22) = "W SHYAMA SHYAM FABRICS" Or ClsMain.FDivisionNameForCustomization(27) = "W SHYAMA SHYAM VENTURES LLP" Then
                PurchInvoiceTableList(0).Other_Charge = Val(DglPurchase.Item(Col5OtherCharge, I).Value)
                PurchInvoiceTableList(0).Other_Charge1 = Val(DglPurchase.Item(Col5OtherCharge1, I).Value)
                PurchInvoiceTableList(0).Deduction = Val(DglPurchase.Item(Col5Deduction, I).Value)
                PurchInvoiceTableList(0).Round_Off = 0
                PurchInvoiceTableList(0).Net_Amount = PurchInvoiceTableList(0).SubTotal1 +
                    PurchInvoiceTableList(0).Other_Charge +
                    PurchInvoiceTableList(0).Other_Charge1 -
                    PurchInvoiceTableList(0).Deduction

                For J = 0 To PurchInvoiceTableList.Length - 1
                    PurchInvoiceTableList(J).Line_Tax1 = Math.Round(PurchInvoiceTableList(0).Tax1 * PurchInvoiceTableList(J).Line_Gross_Amount / PurchInvoiceTableList(0).Gross_Amount, 2)
                    PurchInvoiceTableList(J).Line_SubTotal1 = Math.Round(PurchInvoiceTableList(0).SubTotal1 * PurchInvoiceTableList(J).Line_Gross_Amount / PurchInvoiceTableList(0).Gross_Amount, 2)
                    PurchInvoiceTableList(J).Line_Other_Charge = Math.Round(PurchInvoiceTableList(0).Other_Charge * PurchInvoiceTableList(J).Line_Gross_Amount / PurchInvoiceTableList(0).Gross_Amount, 2)
                    PurchInvoiceTableList(J).Line_Other_Charge1 = Math.Round(PurchInvoiceTableList(0).Other_Charge1 * PurchInvoiceTableList(J).Line_Gross_Amount / PurchInvoiceTableList(0).Gross_Amount, 2)
                    PurchInvoiceTableList(J).Line_Deduction = Math.Round(PurchInvoiceTableList(0).Deduction * PurchInvoiceTableList(J).Line_Gross_Amount / PurchInvoiceTableList(0).Gross_Amount, 2)
                    PurchInvoiceTableList(J).Line_Net_Amount = Math.Round(PurchInvoiceTableList(0).Net_Amount * PurchInvoiceTableList(J).Line_Gross_Amount / PurchInvoiceTableList(0).Gross_Amount, 2)
                Next
            Else
                PurchInvoiceTableList(0).Round_Off = Math.Round(Math.Round(PurchInvoiceTableList(0).SubTotal1) - PurchInvoiceTableList(0).SubTotal1, 2)
                PurchInvoiceTableList(0).Net_Amount = Math.Round(PurchInvoiceTableList(0).SubTotal1)

                Dim Tot_RoundOff As Double = 0
                Dim Tot_NetAmount As Double = 0
                For J = 0 To PurchInvoiceTableList.Length - 1
                    PurchInvoiceTableList(J).Line_Round_Off = Math.Round(PurchInvoiceTableList(0).Round_Off * PurchInvoiceTableList(J).Line_Gross_Amount / PurchInvoiceTableList(0).Gross_Amount, 2)
                    PurchInvoiceTableList(J).Line_Net_Amount = Math.Round(PurchInvoiceTableList(0).Net_Amount * PurchInvoiceTableList(J).Line_Gross_Amount / PurchInvoiceTableList(0).Gross_Amount, 2)
                    Tot_RoundOff += PurchInvoiceTableList(J).Line_Round_Off
                    Tot_NetAmount += PurchInvoiceTableList(J).Line_Net_Amount
                Next

                Tot_RoundOff = Math.Round(Tot_RoundOff, 2)

                If Tot_RoundOff <> PurchInvoiceTableList(0).Round_Off Then
                    PurchInvoiceTableList(0).Line_Round_Off = PurchInvoiceTableList(0).Line_Round_Off + (PurchInvoiceTableList(0).Round_Off - Tot_RoundOff)
                End If

                If Tot_NetAmount <> PurchInvoiceTableList(0).Net_Amount Then
                    PurchInvoiceTableList(0).Line_Net_Amount = PurchInvoiceTableList(0).Line_Net_Amount + (PurchInvoiceTableList(0).Net_Amount - Tot_NetAmount)
                End If
            End If




            Dim bDocId As String = FrmPurchInvoiceDirect_WithDimension.InsertPurchInvoice(PurchInvoiceTableList)

            mQry = "INSERT INTO PurchInvoiceTransport (DocID, Transporter, LrNo, LrDate, PrivateMark, Weight, Freight, PaymentType, RoadPermitNo, RoadPermitDate, UploadDate, NoOfBales)
                    SELECT " & AgL.Chk_Text(bDocId) & " DocID, Transporter, LrNo, LrDate, PrivateMark, Weight, Freight, PaymentType, RoadPermitNo, RoadPermitDate, UploadDate, NoOfBales
                    FROM SaleInvoiceTransport With (NoLock)
                    WHERE DocID = '" & mSearchCode & "'
                    "
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

            mQry = "Insert Into TransactionReferences (DocID, ReferenceDocID, IsEditingAllowed, IsDeletingAllowed) 
                    Values (" & AgL.Chk_Text(mSearchCode) & ", '" & bDocId & "', 1, 1) "
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
        Next

        If AgL.StrCmp(AgL.PubUserName, AgLibrary.ClsConstant.PubSuperUserName) Or AgL.StrCmp(AgL.PubUserName, "sa") Then
            AgCL.GridSetiingWriteXml(Me.Text & DglPurchase.Name & AgL.PubCompCode & AgL.PubDivCode & AgL.PubSiteCode, DglPurchase)
        End If
    End Sub
    Private Sub FGetTaxRateForPurchase(ByRef Tax1_Per As Double, ByRef Tax2_Per As Double,
                                            ByRef Tax3_Per As Double, ByRef PlaceOfSupply As String, SalesTaxGroupItem As String, SubCode As String)
        mQry = " SELECT 
                Max(CASE WHEN Ps.ChargeType = 'TAX1' THEN Ps.Percentage ELSE 0 END) AS Tax1_Per,
                Max(CASE WHEN Ps.ChargeType = 'TAX2' THEN Ps.Percentage ELSE 0 END) AS Tax2_Per,
                Max(CASE WHEN Ps.ChargeType = 'TAX3' THEN Ps.Percentage ELSE 0 END) AS Tax3_Per,
                Max(Ps.PlaceOfSupply) As PlaceOfSupply
                FROM Subgroup Sg 
                LEFT JOIN PostingGroupSalesTaxParty Pgs ON Sg.SalesTaxPostingGroup = Pgs.Description
                LEFT JOIN City C ON Sg.CityCode = C.CityCode
                LEFT JOIN PostingGroupSalesTax Ps ON 
	                (CASE WHEN C.State <> '" & AgL.PubSiteStateCode & "' THEN '" & PlaceOfSupplay.OutsideState & "' 
                            ELSE '" & PlaceOfSupplay.WithinState & "' END) = Ps.PlaceOfSupply
	                AND Sg.SalesTaxPostingGroup = Ps.PostingGroupSalesTaxParty
	                AND Ps.PostingGroupSalesTaxItem = '" & SalesTaxGroupItem & "'
	                AND Ps.Process = 'PURCH' 
                Where Sg.SubCode = '" & SubCode & "'"
        Dim DtTaxRates As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)

        If DtTaxRates.Rows.Count > 0 Then
            Tax1_Per = AgL.VNull(DtTaxRates.Rows(0)("Tax1_Per"))
            Tax2_Per = AgL.VNull(DtTaxRates.Rows(0)("Tax2_Per"))
            Tax3_Per = AgL.VNull(DtTaxRates.Rows(0)("Tax3_Per"))
            PlaceOfSupply = AgL.XNull(DtTaxRates.Rows(0)("PlaceOfSupply"))
        Else
            Tax1_Per = 0
            Tax2_Per = 0
            Tax3_Per = 0
            PlaceOfSupply = ""
        End If
    End Sub
    Private Function FGetSalesTaxGroupItemForPurchase(bItemCode As String, bAmount As Double, bQty As Double, bV_Date As String, bSalesTaxGroup_Default As String)
        Dim bSalesTaxGroupItem As String = ""

        If bAmount <> 0 And bQty <> 0 Then
            If AgL.Dman_Execute(" Select ItemType From Item I Where I.Code = '" & bItemCode & "'", AgL.GCn).ExecuteScalar() = ItemTypeCode.ServiceProduct Then

                Dim mMaxPurchaseTaxRate As Double = 0

                For I As Integer = 0 To Dgl1.Rows.Count - 1
                    If Dgl1.Item(Col1Item, I).Value <> "" Then
                        If AgL.Dman_Execute(" Select ItemType From Item I Where I.Code = '" & Dgl1.Item(Col1Item, I).Tag & "'", AgL.GCn).ExecuteScalar() <> ItemTypeCode.ServiceProduct Then
                            'Dim bSalesTaxGroupForItem As String = FGetSalesTaxGroupItemForPurchase(Dgl1.Item(Col1Item, I).Tag, Dgl1.Item(Col1PurchaseAmount, I).Value,
                            '        Dgl1.Item(Col1Qty, I).Value, DglMain.Item(Col1Value, rowV_Date).Value, Dgl1.Item(Col1SalesTaxGroup_BaseRate, I).Tag)
                            Dim bSalesTaxGroupForItem As String = FGetSalesTaxGroupItemForPurchase(Dgl1.Item(Col1Item, I).Tag, Dgl1.Item(Col1PurchaseAmount, I).Value,
                                    Dgl1.Item(Col1Qty, I).Value, DglMain.Item(Col1Value, rowV_Date).Value, Dgl1.Item(Col1SalesTaxGroup, I).Tag)

                            Dim bSalesTaxGroupForItemRate As Double = AgL.VNull(AgL.Dman_Execute(" Select GrossTaxRate From PostingGroupSalesTaxItem Where Description = '" & bSalesTaxGroupForItem & "'", AgL.GcnRead).ExecuteScalar())

                            If mMaxPurchaseTaxRate < bSalesTaxGroupForItemRate Then
                                mMaxPurchaseTaxRate = bSalesTaxGroupForItemRate
                            End If
                        End If
                    End If
                Next
                bSalesTaxGroupItem = AgL.XNull(AgL.Dman_Execute(" Select Description From PostingGroupSalesTaxItem Where GrossTaxRate = " & mMaxPurchaseTaxRate & "", AgL.GcnRead).ExecuteScalar())
            Else
                Dim bRateAfterDiscount As Double = bAmount / bQty
                mQry = "Select " & IIf(AgL.PubServerName <> "", "Top 1", "") & " SalesTaxGroupItem 
                        From Item I With (NoLock) 
                        LEFT JOIN ItemCategorySalesTax St With (NoLock) On I.ItemCategory = St.Code
                        Where I.Code ='" & bItemCode & "' 
                        And RateGreaterThan < " & Val(bRateAfterDiscount) & " 
                        And Date(WEF) <= " & AgL.Chk_Date(CDate(bV_Date).ToString("s")) & " 
                        Order By WEF Desc, RateGreaterThan Desc " & IIf(AgL.PubServerName = "", "Limit 1", "")
                Dim DtMain As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)
                If DtMain.Rows.Count > 0 Then
                    bSalesTaxGroupItem = AgL.XNull(DtMain.Rows(0)("SalesTaxGroupItem"))
                End If
            End If
        End If

        If bSalesTaxGroupItem = "" Then
            bSalesTaxGroupItem = bSalesTaxGroup_Default
        End If

        Return bSalesTaxGroupItem
    End Function
    Private Sub FCalculationForPurchase(bRow As Integer)
        If CType(AgL.VNull(FGetSettings(SettingFields.TreatRateAsAmountYn, SettingType.General)), Boolean) = True Then
            Dgl1.Item(Col1PurchaseAmount, bRow).Value = Format(1 * Val(Dgl1.Item(Col1Rate, bRow).Value), "0.00")
        Else
            Dgl1.Item(Col1PurchaseAmount, bRow).Value = Format(Val(Dgl1.Item(Col1DocQty, bRow).Value) * Val(Dgl1.Item(Col1Rate, bRow).Value), "0.00")
        End If

        If Val(Dgl1.Item(Col1PurchaseDiscountPer, bRow).Value) > 0 Then
            Dim bDiscountCalculationPattern_Purchase As String = ""
            bDiscountCalculationPattern_Purchase = AgL.XNull(AgL.Dman_Execute(" Select It.DiscountCalculationPatternPurchase
                        From Item I 
                        LEFT JOIN ItemTypeSetting It On I.ItemType = It.ItemType
                        Where I.Code = '" & Dgl1.Item(Col1Item, bRow).Tag & "'", AgL.GCn).ExecuteScalar())
            If bDiscountCalculationPattern_Purchase.ToUpper = DiscountCalculationPattern.RatePerQty.ToUpper Then
                Dgl1.Item(Col1PurchaseDiscountAmount, bRow).Value = Format(Val(Dgl1.Item(Col1DocQty, bRow).Value) * Val(Dgl1.Item(Col1PurchaseDiscountPer, bRow).Value), "0.00")
            Else
                Dgl1.Item(Col1PurchaseDiscountAmount, bRow).Value = Format(Val(Dgl1.Item(Col1PurchaseAmount, bRow).Value) * Val(Dgl1.Item(Col1PurchaseDiscountPer, bRow).Value) / 100, "0.00")
            End If
        Else
            Dgl1.Item(Col1PurchaseDiscountAmount, bRow).Value = 0
        End If


        If Val(Dgl1.Item(Col1PurchaseAdditionalDiscountPer, bRow).Value) > 0 Then
            Dim bDiscountCalculationPattern_Purchase As String = ""
            bDiscountCalculationPattern_Purchase = AgL.XNull(AgL.Dman_Execute(" Select It.AdditionalDiscountCalculationPatternPurchase
                        From Item I 
                        LEFT JOIN ItemTypeSetting It On I.ItemType = It.ItemType
                        Where I.Code = '" & Dgl1.Item(Col1Item, bRow).Tag & "'", AgL.GCn).ExecuteScalar())
            If bDiscountCalculationPattern_Purchase.ToUpper = DiscountCalculationPattern.RatePerQty.ToUpper Then
                Dgl1.Item(Col1PurchaseAdditionalDiscountAmount, bRow).Value = Format(Val(Dgl1.Item(Col1DocQty, bRow).Value) * Val(Dgl1.Item(Col1PurchaseAdditionalDiscountPer, bRow).Value), "0.00")
            Else
                Dgl1.Item(Col1PurchaseAdditionalDiscountAmount, bRow).Value = Format((Val(Dgl1.Item(Col1PurchaseAmount, bRow).Value) - Val(Dgl1.Item(Col1PurchaseDiscountAmount, bRow).Value)) * Val(Dgl1.Item(Col1PurchaseAdditionalDiscountPer, bRow).Value) / 100, "0.00")
            End If
        Else
            Dgl1.Item(Col1PurchaseAdditionalDiscountAmount, bRow).Value = 0
        End If
        'Dgl1.Item(Col1PurchaseAmount, bRow).Value = Format(Val(Dgl1.Item(Col1PurchaseAmount, bRow).Value) - Val(Dgl1.Item(Col1PurchaseDiscountAmount, bRow).Value) - Val(Dgl1.Item(Col1PurchaseAdditionalDiscountAmount, bRow).Value), "0.00")
    End Sub
    Public Sub FLoadPurchaseDataFromSaleInvoice()
        Dim I As Integer = 0
        Dim J As Integer = 0

        Dim DtTemp As DataTable

        Dim Col1Item As String = "Item"
        Dim Col1SaleInvoice As String = "Sale Invoice DocID"
        Dim Col1GrossAmount As String = "Gross Amount"

        Dim Tax1_Per As Double = 0
        Dim Tax2_Per As Double = 0
        Dim Tax3_Per As Double = 0
        Dim PlaceOfSupply As String = ""


        Dim mConn As Object = Nothing
        If AgL.PubServerName = "" Then
            mConn = New SQLite.SQLiteConnection(AgL.GCn.ConnectionString.ToString)
        Else
            mConn = New SqlClient.SqlConnection(AgL.GCn.ConnectionString)
        End If
        mConn.Open()

        If FDivisionNameForCustomization(12) = "MAA KI KRIPA" Or
                FDivisionNameForCustomization(16) = "KAMAKHYA TRADERS" Or
            FDivisionNameForCustomization(22) = "W SHYAMA SHYAM FABRICS" Or ClsMain.FDivisionNameForCustomization(27) = "W SHYAMA SHYAM VENTURES LLP" Then
            mQry = " CREATE " & IIf(AgL.PubServerName = "", "Temp", "") & " TABLE [#TempSaleInvoicePurchaseSummary](
                Serial Integer,
                ItemGroup NVARCHAR(10),
                Supplier NVARCHAR(10),
                GrossAmount Float,
                CommissionAmount Float,
                AdditionalCommissionAmount Float
                ); "
            AgL.Dman_ExecuteNonQry(mQry, mConn)

            For I = 0 To Dgl1.Rows.Count - 1
                If Dgl1.Item(Col1ItemGroup, I).Value <> "" And
                    Dgl1.Item(Col1SKU, I).Value <> "" And
                    Dgl1.Rows(I).Visible = True Then

                    Dim bSupplier As String = AgL.XNull(AgL.Dman_Execute(" Select DefaultSupplier From ItemGroup 
                        Where Code = '" & Dgl1.Item(Col1ItemGroup, I).Tag & "'", IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar())

                    Dgl1.Item(Col1PurchaseTaxableAmount, I).Value = Val(Dgl1.Item(Col1PurchaseAmount, I).Value)


                    mQry = " INSERT INTO [#TempSaleInvoicePurchaseSummary](Serial, ItemGroup, Supplier, GrossAmount, CommissionAmount, AdditionalCommissionAmount) "
                    mQry += " Select " & Val(Dgl1.Item(ColSNo, I).Value) & " As Serial, 
                        " & AgL.Chk_Text(Dgl1.Item(Col1ItemGroup, I).Tag) & " As ItemGroup, 
                        " & AgL.Chk_Text(bSupplier) & " As Supplier, 
                        " & Val(Dgl1.Item(Col1PurchaseAmount, I).Value) & " As GrossAmount,
                        " & Val(Dgl1.Item(Col1PurchaseDiscountAmount, I).Value) & " As CommissionAmount,
                        " & Val(Dgl1.Item(Col1PurchaseAdditionalDiscountAmount, I).Value) & " As AdditionalCommissionAmount "
                    AgL.Dman_ExecuteNonQry(mQry, mConn)
                End If
            Next

            mQry = " Select Min(Serial) As Serial, H.ItemGroup, H.Supplier, Max(Sg.Name) As SupplierName, Sum(H.GrossAmount) As GrossAmount,
                    Sum(H.CommissionAmount) As CommissionAmount, Sum(H.AdditionalCommissionAmount) As AdditionalCommissionAmount
                    From [#TempSaleInvoicePurchaseSummary] H
                    LEFT JOIN ViewHelpSubGroup Sg On H.Supplier = Sg.Code
                    Group By H.ItemGroup, H.Supplier 
                    Order By Serial "
            DtTemp = AgL.FillData(mQry, mConn).Tables(0)

            If DtTemp.Rows.Count > 0 Then
                DglPurchase.RowCount = 1 : DglPurchase.Rows.Clear()
                For I = 0 To DtTemp.Rows.Count - 1
                    DglPurchase.Rows.Add()
                    DglPurchase.Item(ColSNo, I).Value = DglPurchase.Rows.Count
                    DglPurchase.Item(Col5PurchInvoiceDate, I).Value = DglMain.Item(Col1Value, rowV_Date).Value
                    DglPurchase.Item(Col5PlaceOfSupply, I).Value = PlaceOfSupply
                    DglPurchase.Item(Col5ItemGroup, I).Tag = AgL.XNull(DtTemp.Rows(I)("ItemGroup"))
                    DglPurchase.Item(Col5Supplier, I).Tag = AgL.XNull(DtTemp.Rows(I)("Supplier"))
                    DglPurchase.Item(Col5Supplier, I).Value = AgL.XNull(DtTemp.Rows(I)("SupplierName"))
                    DglPurchase.Item(Col5GrossAmount, I).Value = AgL.VNull(DtTemp.Rows(I)("GrossAmount"))
                    DglPurchase.Item(Col5CommissionAmount, I).Value = AgL.VNull(DtTemp.Rows(I)("CommissionAmount"))
                    DglPurchase.Item(Col5AdditionalCommissionAmount, I).Value = AgL.VNull(DtTemp.Rows(I)("AdditionalCommissionAmount"))

                    If mDtPurchaseData IsNot Nothing Then
                        If mDtPurchaseData.Rows.Count > 0 Then
                            Dim mDrPurchase As DataRow() = mDtPurchaseData.Select("Supplier = '" & DglPurchase.Item(Col5Supplier, I).Tag & "' 
                                        And ItemGroup = '" & DglPurchase.Item(Col5ItemGroup, I).Tag & "'")
                            If mDrPurchase.Length > 0 Then
                                DglPurchase.Item(Col5PurchInvoiceNo, I).Value = AgL.XNull(mDrPurchase(0)("PurchInvoiceNo"))
                                DglPurchase.Item(Col5PurchInvoiceDate, I).Value = AgL.XNull(mDrPurchase(0)("PurchInvoiceDate"))
                                DglPurchase.Item(Col5TotalTax, I).Value = AgL.XNull(mDrPurchase(0)("TotalTax"))
                                DglPurchase.Item(Col5OtherCharge, I).Value = AgL.XNull(mDrPurchase(0)("OtherCharge"))
                                DglPurchase.Item(Col5OtherCharge1, I).Value = AgL.XNull(mDrPurchase(0)("OtherCharge1"))
                                DglPurchase.Item(Col5Deduction, I).Value = AgL.XNull(mDrPurchase(0)("Deduction"))
                                DglPurchase.Item(Col5AmsDocNo, I).Value = AgL.XNull(mDrPurchase(0)("AmsDocNo"))
                                DglPurchase.Item(Col5AmsDocDate, I).Value = AgL.XNull(mDrPurchase(0)("AmsDocDate"))
                                DglPurchase.Item(Col5AmsDocAmount, I).Value = AgL.VNull(mDrPurchase(0)("AmsDocAmount"))
                            End If
                        End If
                    End If

                    DglPurchase.Item(Col5NetAmount, I).Value = DglPurchase.Item(Col5GrossAmount, I).Value +
                                DglPurchase.Item(Col5TotalTax, I).Value +
                                DglPurchase.Item(Col5OtherCharge, I).Value +
                                DglPurchase.Item(Col5OtherCharge1, I).Value -
                                DglPurchase.Item(Col5Deduction, I).Value
                Next I
            End If
        Else
            mQry = " CREATE " & IIf(AgL.PubServerName = "", "Temp", "") & " TABLE [#TempSaleInvoicePurchaseSummary](
                ItemGroup NVARCHAR(10),
                Supplier NVARCHAR(10),
                GrossAmount Float,
                TotalTax Float,
                NetAmount Float
                ); "
            AgL.Dman_ExecuteNonQry(mQry, mConn)


            For I = 0 To Dgl1.Rows.Count - 1
                If Dgl1.Item(Col1ItemGroup, I).Value <> "" And
                    Dgl1.Item(Col1SKU, I).Value <> "" And
                    Dgl1.Rows(I).Visible = True Then
                    Dim bSalesTaxGroup As String = FGetSalesTaxGroupItemForPurchase(Dgl1.Item(Col1Item, I).Tag, Val(Dgl1.Item(Col1PurchaseAmount, I).Value),
                                                 Dgl1.Item(Col1Qty, I).Value, DglMain.Item(Col1Value, rowV_Date).Value, Dgl1.Item(Col1SalesTaxGroup, I).Tag)

                    Dgl1.Item(Col1PurchaseSalesTaxGroup, I).Tag = bSalesTaxGroup
                    Dgl1.Item(Col1PurchaseSalesTaxGroup, I).Value = bSalesTaxGroup

                    Dim bSupplier As String = AgL.XNull(AgL.Dman_Execute(" Select DefaultSupplier From ItemGroup 
                        Where Code = '" & Dgl1.Item(Col1ItemGroup, I).Tag & "'", IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar())

                    FGetTaxRateForPurchase(Tax1_Per, Tax2_Per, Tax3_Per, PlaceOfSupply, bSalesTaxGroup, bSupplier)

                    If TxtStructure.Tag = "GstSaleMrp" Then
                        Dgl1.Item(Col1PurchaseTaxableAmount, I).Value = Math.Round(Val(Dgl1.Item(Col1PurchaseAmount, I).Value) * 100 / (100 + Tax1_Per + Tax2_Per + Tax3_Per), 2)
                    Else
                        Dgl1.Item(Col1PurchaseTaxableAmount, I).Value = Val(Dgl1.Item(Col1PurchaseAmount, I).Value)
                    End If


                    mQry = " INSERT INTO [#TempSaleInvoicePurchaseSummary](ItemGroup, Supplier, GrossAmount, TotalTax, Netamount) "
                    mQry += " Select " & AgL.Chk_Text(Dgl1.Item(Col1ItemGroup, I).Tag) & " As ItemGroup, 
                    " & AgL.Chk_Text(bSupplier) & " As Supplier, 
                    " & Val(Dgl1.Item(Col1PurchaseAmount, I).Value) & " As GrossAmount, 
                    " & Math.Round(Val(Dgl1.Item(Col1PurchaseTaxableAmount, I).Value) * Tax1_Per / 100, 2) +
                              Math.Round(Val(Dgl1.Item(Col1PurchaseTaxableAmount, I).Value) * Tax2_Per / 100, 2) +
                              Math.Round(Val(Dgl1.Item(Col1PurchaseTaxableAmount, I).Value) * Tax3_Per / 100, 2) & " As TotalTax, 
                    " & Val(Dgl1.Item(Col1PurchaseTaxableAmount, I).Value) +
                            Math.Round(Val(Dgl1.Item(Col1PurchaseTaxableAmount, I).Value) * Tax1_Per / 100, 2) +
                              Math.Round(Val(Dgl1.Item(Col1PurchaseTaxableAmount, I).Value) * Tax2_Per / 100, 2) +
                              Math.Round(Val(Dgl1.Item(Col1PurchaseTaxableAmount, I).Value) * Tax3_Per / 100, 2) & " As NetAmount "
                    AgL.Dman_ExecuteNonQry(mQry, mConn)
                End If
            Next

            mQry = " Select H.ItemGroup, H.Supplier, Max(Sg.Name) As SupplierName, Sum(H.GrossAmount) As GrossAmount,
                    Sum(H.TotalTax) As TotalTax, Sum(H.NetAmount) As NetAmount
                    From [#TempSaleInvoicePurchaseSummary] H
                    LEFT JOIN ViewHelpSubGroup Sg On H.Supplier = Sg.Code
                    Group By H.ItemGroup, H.Supplier "
            DtTemp = AgL.FillData(mQry, mConn).Tables(0)

            If DtTemp.Rows.Count > 0 Then
                DglPurchase.RowCount = 1 : DglPurchase.Rows.Clear()
                For I = 0 To DtTemp.Rows.Count - 1
                    DglPurchase.Rows.Add()
                    DglPurchase.Item(ColSNo, I).Value = DglPurchase.Rows.Count
                    DglPurchase.Item(Col5PlaceOfSupply, I).Value = PlaceOfSupply
                    DglPurchase.Item(Col5ItemGroup, I).Tag = AgL.XNull(DtTemp.Rows(I)("ItemGroup"))
                    DglPurchase.Item(Col5Supplier, I).Tag = AgL.XNull(DtTemp.Rows(I)("Supplier"))
                    DglPurchase.Item(Col5Supplier, I).Value = AgL.XNull(DtTemp.Rows(I)("SupplierName"))
                    DglPurchase.Item(Col5GrossAmount, I).Value = AgL.VNull(DtTemp.Rows(I)("GrossAmount"))
                    DglPurchase.Item(Col5TotalTax, I).Value = AgL.VNull(DtTemp.Rows(I)("TotalTax"))
                    DglPurchase.Item(Col5NetAmount, I).Value = Math.Round(AgL.VNull(DtTemp.Rows(I)("NetAmount")), 0)

                    If mDtPurchaseData IsNot Nothing Then
                        If mDtPurchaseData.Rows.Count > 0 Then
                            Dim mDrPurchase As DataRow() = mDtPurchaseData.Select("Supplier = '" & DglPurchase.Item(Col5Supplier, I).Tag & "' 
                                        And ItemGroup = '" & DglPurchase.Item(Col5ItemGroup, I).Tag & "'")
                            If mDrPurchase.Length > 0 Then
                                DglPurchase.Item(Col5PurchInvoiceNo, I).Value = AgL.XNull(mDrPurchase(0)("PurchInvoiceNo"))
                                DglPurchase.Item(Col5PurchInvoiceDate, I).Value = AgL.XNull(mDrPurchase(0)("PurchInvoiceDate"))
                                DglPurchase.Item(Col5TotalTax, I).Value = AgL.XNull(mDrPurchase(0)("TotalTax"))
                                DglPurchase.Item(Col5OtherCharge, I).Value = AgL.XNull(mDrPurchase(0)("OtherCharge"))
                                DglPurchase.Item(Col5OtherCharge1, I).Value = AgL.XNull(mDrPurchase(0)("OtherCharge1"))
                                DglPurchase.Item(Col5Deduction, I).Value = AgL.XNull(mDrPurchase(0)("Deduction"))
                                DglPurchase.Item(Col5AmsDocNo, I).Value = AgL.XNull(mDrPurchase(0)("AmsDocNo"))
                                DglPurchase.Item(Col5AmsDocDate, I).Value = AgL.XNull(mDrPurchase(0)("AmsDocDate"))
                                DglPurchase.Item(Col5AmsDocAmount, I).Value = AgL.VNull(mDrPurchase(0)("AmsDocAmount"))
                            End If
                        End If
                    End If
                    DglPurchase.Item(Col5NetAmount, I).Value = DglPurchase.Item(Col5GrossAmount, I).Value +
                            DglPurchase.Item(Col5TotalTax, I).Value +
                            DglPurchase.Item(Col5OtherCharge, I).Value +
                            DglPurchase.Item(Col5OtherCharge1, I).Value -
                            DglPurchase.Item(Col5Deduction, I).Value
                Next I
            End If
        End If
        mConn.Close()
    End Sub
    Private Sub DglPurchase_EditingControl_Validating(sender As Object, e As CancelEventArgs) Handles DglPurchase.EditingControl_Validating
        If Topctrl1.Mode = "Browse" Then Exit Sub
        Dim mRowIndex As Integer, mColumnIndex As Integer
        Dim DrTemp As DataRow() = Nothing
        Dim bQry As String = ""
        Try
            mRowIndex = DglPurchase.CurrentCell.RowIndex
            mColumnIndex = DglPurchase.CurrentCell.ColumnIndex
            If DglPurchase.Item(mColumnIndex, mRowIndex).Value Is Nothing Then DglPurchase.Item(mColumnIndex, mRowIndex).Value = ""

            FFillPurchasePrevData()

            For I As Integer = 0 To DglPurchase.Rows.Count - 1
                DglPurchase.Item(Col5NetAmount, I).Value = Val(DglPurchase.Item(Col5GrossAmount, I).Value) +
                            Val(DglPurchase.Item(Col5TotalTax, I).Value) +
                            Val(DglPurchase.Item(Col5OtherCharge, I).Value) +
                            Val(DglPurchase.Item(Col5OtherCharge1, I).Value) -
                            Val(DglPurchase.Item(Col5Deduction, I).Value)
            Next
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub
    Private Sub FFillPurchasePrevData()
        Dim bQry As String = ""
        For I As Integer = 0 To DglPurchase.Rows.Count - 1
            If bQry <> "" Then bQry += " UNION ALL "
            bQry += "Select '" & DglPurchase.Item(Col5Supplier, I).Tag & "' As Supplier, 
                    '" & DglPurchase.Item(Col5ItemGroup, I).Tag & "' As ItemGroup, 
                    '" & DglPurchase.Item(Col5PurchInvoiceNo, I).Value & "' As PurchInvoiceNo,
                    '" & DglPurchase.Item(Col5PurchInvoiceDate, I).Value & "' As PurchInvoiceDate, 
                    " & Val(DglPurchase.Item(Col5TotalTax, I).Value) & " As TotalTax, 
                    " & Val(DglPurchase.Item(Col5OtherCharge, I).Value) & " As OtherCharge, 
                    " & Val(DglPurchase.Item(Col5OtherCharge1, I).Value) & " As OtherCharge1, 
                    " & Val(DglPurchase.Item(Col5Deduction, I).Value) & " As Deduction, 
                    '" & DglPurchase.Item(Col5AmsDocNo, I).Value & "' As AmsDocNo,
                    '" & DglPurchase.Item(Col5AmsDocDate, I).Value & "' As AmsDocDate, 
                    " & Val(DglPurchase.Item(Col5AmsDocAmount, I).Value) & " As AmsDocAmount
                    "
        Next
        If bQry <> "" Then mDtPurchaseData = AgL.FillData(bQry, AgL.GCn).Tables(0)
    End Sub
    Private Sub FMovRecPurchaseData()
        mQry = "SELECT H.DocID, Max(H.PlaceOfSupply) AS PlaceOfSupply, 
                Max(H.VendorDocNo) AS PurchInvoiceNo, Max(H.VendorDocDate) AS PurchInvoiceDate,
                Max(H.Vendor) AS Supplier, Max(Sg1.Name) AS SupplierName, 
                Max(H.BillToParty) AS ParentSupplier, Max(Sg2.Name) AS ParentSupplierName, 
                Max(Ig.Code) AS ItemGroup, Max(Ig.Description) AS ItemGroupDesc, 
                Max(H.Gross_Amount) AS GrossAmount,
                Max(H.Tax1 + H.Tax2 + H.Tax3 + H.Tax4 + H.Tax5) AS TotalTax, 
                Max(H.Other_Charge) AS Other_Charge, Max(H.Other_Charge1) AS Other_Charge1, 
                Max(H.Deduction) AS Deduction, Max(H.Net_Amount) AS NetAmount,
                Max(H.Commission) AS CommissionAmount, Max(H.AdditionalCommission) AS AdditionalCommissionAmount,
                Max(H.AmsDocNo) As AmsDocNo, Max(H.AmsDocDate) As AmsDocDate, Max(H.AmsDocNetAmount) As AmsDocAmount
                FROM PurchInvoice H
                LEFT JOIN PurchInvoiceDetail L On H.DocId = L.DocId
                LEFT JOIN PurchInvoiceDetailSku Ls ON L.DocId = Ls.DocId And L.Sr = Ls.Sr
                LEFT JOIN Item I ON L.Item = I.Code
                LEFT JOIN Item Ig On IfNull(I.ItemGroup, Ls.ItemGroup) = Ig.Code
                LEFT JOIN ViewHelpSubgroup Sg1 ON H.Vendor = Sg1.Code
                LEFT JOIN ViewHelpSubgroup Sg2 ON H.BillToParty = Sg2.Code 
                WHERE H.GenDocId = '" & mSearchCode & "'  
                GROUP BY H.DocID
                Order By H.DocId "
        Dim DtTemp As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)
        With DtTemp
            DglPurchase.RowCount = 1
            DglPurchase.Rows.Clear()
            If .Rows.Count > 0 Then
                For I As Integer = 0 To DtTemp.Rows.Count - 1
                    DglPurchase.Rows.Add()
                    DglPurchase.Item(ColSNo, I).Value = DglPurchase.Rows.Count - 1
                    DglPurchase.Item(Col5PurchInvoiceNo, I).Value = AgL.XNull(DtTemp.Rows(I)("PurchInvoiceNo"))
                    DglPurchase.Item(Col5PurchInvoiceDate, I).Value = ClsMain.FormatDate(AgL.XNull(DtTemp.Rows(I)("PurchInvoiceDate")))
                    DglPurchase.Item(Col5PlaceOfSupply, I).Value = AgL.XNull(DtTemp.Rows(I)("PlaceOfSupply"))
                    DglPurchase.Item(Col5Supplier, I).Tag = AgL.XNull(DtTemp.Rows(I)("Supplier"))
                    DglPurchase.Item(Col5Supplier, I).Value = AgL.XNull(DtTemp.Rows(I)("SupplierName"))
                    DglPurchase.Item(Col5ItemGroup, I).Tag = AgL.XNull(DtTemp.Rows(I)("ItemGroup"))
                    DglPurchase.Item(Col5ItemGroup, I).Value = AgL.XNull(DtTemp.Rows(I)("ItemGroupDesc"))
                    DglPurchase.Item(Col5GrossAmount, I).Value = Math.Abs(AgL.VNull(DtTemp.Rows(I)("GrossAmount")))
                    DglPurchase.Item(Col5TotalTax, I).Value = Math.Abs(AgL.VNull(DtTemp.Rows(I)("TotalTax")))
                    DglPurchase.Item(Col5OtherCharge, I).Value = Math.Abs(AgL.VNull(DtTemp.Rows(I)("Other_Charge")))
                    DglPurchase.Item(Col5OtherCharge1, I).Value = Math.Abs(AgL.VNull(DtTemp.Rows(I)("Other_Charge1")))
                    DglPurchase.Item(Col5Deduction, I).Value = Math.Abs(AgL.VNull(DtTemp.Rows(I)("Deduction")))
                    DglPurchase.Item(Col5NetAmount, I).Value = Math.Abs(AgL.VNull(DtTemp.Rows(I)("NetAmount")))
                    DglPurchase.Item(Col5CommissionAmount, I).Value = Math.Abs(AgL.VNull(DtTemp.Rows(I)("CommissionAmount")))
                    DglPurchase.Item(Col5AdditionalCommissionAmount, I).Value = Math.Abs(AgL.VNull(DtTemp.Rows(I)("AdditionalCommissionAmount")))
                    DglPurchase.Item(Col5AmsDocNo, I).Value = AgL.XNull(DtTemp.Rows(I)("AmsDocNo"))
                    DglPurchase.Item(Col5AmsDocDate, I).Value = ClsMain.FormatDate(AgL.XNull(DtTemp.Rows(I)("AmsDocDate")))
                    DglPurchase.Item(Col5AmsDocAmount, I).Value = AgL.VNull(DtTemp.Rows(I)("AmsDocAmount"))
                Next
            End If
        End With
        FFillPurchasePrevData()
    End Sub
    Private Sub FDeleteGeneratedPurchase(SearchCode As String, Conn As Object, Cmd As Object)
        mQry = "Select DocId From PurchInvoice Where GenDocId = '" & SearchCode & "'"
        Dim DtGeneratedEntries As DataTable = AgL.FillData(mQry, IIf(AgL.PubServerName = "", Conn, AgL.GcnRead)).Tables(0)
        For I As Integer = 0 To DtGeneratedEntries.Rows.Count - 1
            mQry = " Delete From StockAdj Where StockInDocId = '" & AgL.XNull(DtGeneratedEntries.Rows(I)("DocId")) & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            mQry = " Delete From Stock Where DocId = '" & AgL.XNull(DtGeneratedEntries.Rows(I)("DocId")) & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            mQry = " Delete From Ledger Where DocId = '" & AgL.XNull(DtGeneratedEntries.Rows(I)("DocId")) & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            mQry = " Delete From PurchInvoicePayment Where DocId = '" & AgL.XNull(DtGeneratedEntries.Rows(I)("DocId")) & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            mQry = " Delete From PurchInvoiceDimensionDetail Where DocId = '" & AgL.XNull(DtGeneratedEntries.Rows(I)("DocId")) & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            mQry = "Delete from PurchInvoiceDimensionDetailSku where DocID='" & AgL.XNull(DtGeneratedEntries.Rows(I)("DocId")) & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            mQry = "Delete from PurchInvoiceBarcodeLastTransactionValues where DocID='" & AgL.XNull(DtGeneratedEntries.Rows(I)("DocId")) & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            mQry = "Delete from PurchInvoiceTransport where DocID='" & AgL.XNull(DtGeneratedEntries.Rows(I)("DocId")) & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            mQry = "Delete from PurchInvoiceDetailHelpValues where DocID='" & AgL.XNull(DtGeneratedEntries.Rows(I)("DocId")) & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            mQry = "Delete from PurchInvoiceDetailSku where DocID='" & AgL.XNull(DtGeneratedEntries.Rows(I)("DocId")) & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            mQry = "Delete from PurchInvoiceDetail where DocID='" & AgL.XNull(DtGeneratedEntries.Rows(I)("DocId")) & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            mQry = "Delete from LedgerHead where DocID='" & AgL.XNull(DtGeneratedEntries.Rows(I)("DocId")) & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            mQry = "Delete from PurchInvoice where DocID='" & AgL.XNull(DtGeneratedEntries.Rows(I)("DocId")) & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
        Next
    End Sub

    Private Sub DglPurchase_CellEnter(sender As Object, e As DataGridViewCellEventArgs) Handles DglPurchase.CellEnter

    End Sub
    ''''''''''''''''''''''''''''''End Logic for Aadhat''''''''''''''''''''''
    Private Sub MakeGridCurrentCellNothing(GridName As String)
        Try
            If GridName <> DglMain.Name Then DglMain.CurrentCell = Nothing
        Catch ex As Exception
        End Try
        Try
            If GridName <> Dgl1.Name Then Dgl1.CurrentCell = Nothing
        Catch ex As Exception
        End Try
        Try
            If GridName <> Dgl2.Name Then Dgl2.CurrentCell = Nothing
        Catch ex As Exception
        End Try
        Try
            If GridName <> Dgl3.Name Then Dgl3.CurrentCell = Nothing
        Catch ex As Exception
        End Try
        Try
            If GridName <> DglPurchase.Name Then DglPurchase.CurrentCell = Nothing
        Catch ex As Exception
        End Try
        Try
            If GridName <> AgCalcGrid1.Name Then AgCalcGrid1.CurrentCell = Nothing
        Catch ex As Exception
        End Try
    End Sub
    Private Sub FGetSettingVariableValuesForAddAndEdit()
        SettingFields_GeneratedEntryV_TypeForAadhat = FGetSettings(SettingFields.GeneratedEntryV_TypeForAadhat, SettingType.General)
        SettingFields_MaximumItemLimit = AgL.VNull(FGetSettings(SettingFields.MaximumItemLimit, SettingType.General))
        SettingFields_TreatRateAsAmountYn = CType(AgL.VNull(FGetSettings(SettingFields.TreatRateAsAmountYn, SettingType.General)), Boolean)
        SettingFields_ShowItemCategorySummaryYn = CType(AgL.VNull(FGetSettings(SettingFields.ShowItemCategorySummaryYn, SettingType.General)), Boolean)
        SettingFields_ShowOtherChargesAccountGridYn = CType(AgL.VNull(FGetSettings(SettingFields.ShowOtherChargesAccountGridYn, SettingType.General)), Boolean)
        SettingFields_CalculateAmountOn = FGetSettings(SettingFields.CalculateAmountOn, SettingType.General)
    End Sub

    Private Sub Dgl2_LostFocus(sender As Object, e As EventArgs) Handles Dgl2.LostFocus
        'Debug.Print(Me.Name & " " & sender.Name & "  Lost Focus Column Index " & sender.CurrentCell.ColumnIndex.ToString & ", Row Index " & sender.CurrentCell.RowIndex.ToString & " : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString)
    End Sub

    Private Sub TxtBarcode_GotFocus(sender As Object, e As EventArgs) Handles TxtBarcode.GotFocus
        'Debug.Print(Me.Name & " " & sender.Name & "  Got Focus : " & AgL.PubStopWatch.ElapsedMilliseconds.ToString)
    End Sub
    Private Sub FrmSaleInvoiceDirect_WithDimension_BaseEvent_DglMainCellEnter(sender As Object, e As DataGridViewCellEventArgs) Handles Me.BaseEvent_DglMainCellEnter
        Try
            If DglMain.CurrentCell Is Nothing Then Exit Sub
            If Topctrl1.Mode = "BROWSE" Then DglMain.CurrentCell.ReadOnly = True

            Select Case DglMain.CurrentCell.RowIndex
                'Case rowSaleToPartyName
                '    DglMain.Item(Col1Value, DglMain.CurrentCell.RowIndex).ReadOnly = True
            End Select
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub
    Public Sub Ini_Grid_ItemCategorySummary()
        If CType(AgL.VNull(FGetSettings(SettingFields.ShowItemCategorySummaryYn, SettingType.General)), Boolean) = True Then
            DglItemCategorySummary.ColumnCount = 0
            With AgCL
                .AddAgTextColumn(DglItemCategorySummary, ColSNo, 40, 5, ColSNo, True, True, False)
                .AddAgTextColumn(DglItemCategorySummary, Col6ItemCategory, 130, 0, Col6ItemCategory, True, True)
                .AddAgNumberColumn(DglItemCategorySummary, Col6Qty, 70, 8, 4, True, Col6Qty, True, True, True)
                .AddAgNumberColumn(DglItemCategorySummary, Col6Amount, 70, 8, 4, True, Col6Amount, True, True, True)
                .AddAgTextColumn(DglItemCategorySummary, Col6Select, 35, 0, " ", True, True, False)
            End With
            AgL.AddAgDataGrid(DglItemCategorySummary, PnlItemCategorySummary)
            DglItemCategorySummary.EnableHeadersVisualStyles = False
            DglItemCategorySummary.ColumnHeadersHeight = 55
            DglItemCategorySummary.AgSearchMethod = AgControls.AgLib.TxtSearchMethod.Simple
            AgL.GridDesign(DglItemCategorySummary)

            DglItemCategorySummary.AllowUserToAddRows = False
            DglItemCategorySummary.AgSkipReadOnlyColumns = True
            DglItemCategorySummary.AllowUserToOrderColumns = True
            DglItemCategorySummary.Anchor = AnchorStyles.Bottom + AnchorStyles.Left + AnchorStyles.Right
            DglItemCategorySummary.BorderStyle = BorderStyle.None
            DglItemCategorySummary.BackgroundColor = Me.BackColor
            DglItemCategorySummary.Name = "DglItemCategorySummary"

            DglItemCategorySummary.AgSearchMethod = AgControls.AgLib.TxtSearchMethod.Simple
            AgCL.GridSetiingShowXml(Me.Text & DglItemCategorySummary.Name & AgL.PubCompCode & AgL.PubDivCode & AgL.PubSiteCode, DglItemCategorySummary, False)
            DglItemCategorySummary.BringToFront()
            DglItemCategorySummary.Top = Dgl3.Top
            DglItemCategorySummary.Height = AgCalcGrid1.Height
            DglItemCategorySummary.Columns(Col6Select).DefaultCellStyle.Font = New Font(New FontFamily("wingdings"), 14)

            DglItemCategorySummary.Left = Dgl3.Right + 5
            DglItemCategorySummary.Width = AgCalcGrid1.Left - Dgl3.Width - 12
            DglItemCategorySummary.Visible = True

            AgCL.GridSetiingShowXml(Me.Text & DglPurchase.Name & AgL.PubCompCode & AgL.PubDivCode & AgL.PubSiteCode, Dgl1, False)
        Else
            PnlItemCategorySummary.Visible = False
        End If
    End Sub

    Public Sub Ini_Grid_OtherCharges()
        If CType(AgL.VNull(FGetSettings(SettingFields.ShowOtherChargesAccountGridYn, SettingType.General)), Boolean) = True Then
            DglOtherCharges.ColumnCount = 0
            With AgCL
                .AddAgTextColumn(DglOtherCharges, ColSNo, 40, 5, ColSNo, True, True, False)
                .AddAgTextColumn(DglOtherCharges, Col7ChargeSubocde, 130, 0, Col7ChargeSubocde, True, False)
                .AddAgNumberColumn(DglOtherCharges, Col7Amount, 70, 8, 4, True, Col7Amount, True, False, True)
                .AddAgTextColumn(DglOtherCharges, Col7ChargeType, 130, 0, Col7ChargeType, True, False)
            End With
            AgL.AddAgDataGrid(DglOtherCharges, Pnl7)
            DglOtherCharges.EnableHeadersVisualStyles = False
            DglOtherCharges.ColumnHeadersHeight = 55
            DglOtherCharges.AgSearchMethod = AgControls.AgLib.TxtSearchMethod.Simple
            AgL.GridDesign(DglOtherCharges)


            DglOtherCharges.AgSkipReadOnlyColumns = True
            DglOtherCharges.AllowUserToOrderColumns = True
            DglOtherCharges.Anchor = AnchorStyles.Bottom + AnchorStyles.Left + AnchorStyles.Right
            DglOtherCharges.BorderStyle = BorderStyle.None
            DglOtherCharges.BackgroundColor = Me.BackColor
            DglOtherCharges.Name = "DglOtherCharges"

            DglOtherCharges.AgSearchMethod = AgControls.AgLib.TxtSearchMethod.Simple
            'AgCL.GridSetiingShowXml(Me.Text & DglOtherCharges.Name & AgL.PubCompCode & AgL.PubDivCode & AgL.PubSiteCode, DglOtherCharges, False)
            DglOtherCharges.BringToFront()
            DglOtherCharges.Top = Dgl3.Top
            DglOtherCharges.Height = AgCalcGrid1.Height


            DglOtherCharges.Left = Dgl3.Right + 5
            DglOtherCharges.Width = AgCalcGrid1.Left - Dgl3.Width - 12
            Pnl7.Visible = True
            DglOtherCharges.Visible = True

            'AgCL.GridSetiingShowXml(Me.Text & DglOtherCharges.Name & AgL.PubCompCode & AgL.PubDivCode & AgL.PubSiteCode, DglOtherCharges, False)
        Else
            PnlItemCategorySummary.Visible = False
        End If
    End Sub

    Public Sub FLoadItemCategorySummary()
        If CType(AgL.VNull(FGetSettings(SettingFields.ShowItemCategorySummaryYn, SettingType.General)), Boolean) = True Then
            Dim I As Integer = 0
            Dim J As Integer = 0

            Dim DtTemp As DataTable
            Dim mConn As Object = Nothing
            If AgL.PubServerName = "" Then
                mConn = New SQLite.SQLiteConnection(AgL.GCn.ConnectionString.ToString)
            Else
                mConn = New SqlClient.SqlConnection(AgL.GCn.ConnectionString)
            End If
            mConn.Open()

            mQry = " CREATE " & IIf(AgL.PubServerName = "", "Temp", "") & " TABLE [#TempSaleInvoiceItemCategorySummary](
                Serial Integer,
                ItemCategory NVARCHAR(10),
                Qty Float,
                Amount Float,
                IsVisible Int
                ); "
            AgL.Dman_ExecuteNonQry(mQry, mConn)



            For I = 0 To Dgl1.Rows.Count - 1
                If Dgl1.Rows(I).Visible = True Then
                    If Dgl1.Item(Col1ItemCategory, I).Value <> "" And
                            Dgl1.Item(Col1SKU, I).Value <> "" Then
                        mQry = " INSERT INTO [#TempSaleInvoiceItemCategorySummary](Serial, ItemCategory, Qty, Amount, IsVisible) "
                        mQry += " Select " & Val(Dgl1.Item(ColSNo, I).Value) & " As Serial, 
                        " & AgL.Chk_Text(Dgl1.Item(Col1ItemCategory, I).Tag) & " As ItemCategory, 
                        " & Val(Dgl1.Item(Col1Qty, I).Value) & " As Qty,
                        " & Val(Dgl1.Item(Col1Amount, I).Value) & " As Amount,
                        " & IIf(Dgl1.Rows(I).Visible = True, "1", "0") & " As IsVisible "
                        AgL.Dman_ExecuteNonQry(mQry, mConn)
                    End If
                End If
            Next

            mQry = " Select Min(Serial) As Serial, H.ItemCategory, 
                    Max(Ic.Description) As ItemCategoryDesc, Sum(H.Qty) As Qty,
                    Sum(H.Amount) As Amount, Max(H.IsVisible) As IsVisible
                    From [#TempSaleInvoiceItemCategorySummary] H
                    LEFT JOIN Item Ic On H.ItemCategory = Ic.Code
                    Group By H.ItemCategory
                    Order By Serial "
            DtTemp = AgL.FillData(mQry, mConn).Tables(0)
            DglItemCategorySummary.RowCount = 1 : DglItemCategorySummary.Rows.Clear()
            For I = 0 To DtTemp.Rows.Count - 1
                DglItemCategorySummary.Rows.Add()
                DglItemCategorySummary.Item(ColSNo, I).Value = DglItemCategorySummary.Rows.Count
                DglItemCategorySummary.Item(Col6Select, I).Value = AgLibrary.ClsConstant.StrCheckedValue
                DglItemCategorySummary.Item(Col6ItemCategory, I).Tag = AgL.XNull(DtTemp.Rows(I)("ItemCategory"))
                DglItemCategorySummary.Item(Col6ItemCategory, I).Value = AgL.XNull(DtTemp.Rows(I)("ItemCategoryDesc"))
                DglItemCategorySummary.Item(Col6Qty, I).Value = AgL.VNull(DtTemp.Rows(I)("Qty"))
                DglItemCategorySummary.Item(Col6Amount, I).Value = AgL.VNull(DtTemp.Rows(I)("Amount"))
                If AgL.VNull(DtTemp.Rows(I)("IsVisible")) = 0 Then
                    DglItemCategorySummary.Item(Col6Select, I).Value = AgLibrary.ClsConstant.StrUnCheckedValue
                Else
                    DglItemCategorySummary.Item(Col6Select, I).Value = AgLibrary.ClsConstant.StrCheckedValue
                End If
            Next I
            mConn.Close()
        End If
    End Sub

    Public Sub FMovRecOtherCharges()
        If CType(AgL.VNull(FGetSettings(SettingFields.ShowOtherChargesAccountGridYn, SettingType.General)), Boolean) = True Then
            Dim I As Integer = 0
            Dim J As Integer = 0

            Dim DtTemp As DataTable

            mQry = " Select L.*, Sg.Name as OtherChargeName
                    From SaleInvoiceOtherCharges L
                    Left join Subgroup Sg On L.ChargeSubcode = Sg.Subcode
                    Where L.DocId = '" & mSearchCode & "'
                    Order By L.Sr "
            DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)
            DglOtherCharges.RowCount = 1 : DglOtherCharges.Rows.Clear()
            For I = 0 To DtTemp.Rows.Count - 1
                DglOtherCharges.Rows.Add()
                DglOtherCharges.Item(ColSNo, I).Value = DglOtherCharges.Rows.Count
                DglOtherCharges.Item(Col7ChargeSubocde, I).Tag = AgL.XNull(DtTemp.Rows(I)("ChargeSubcode"))
                DglOtherCharges.Item(Col7ChargeSubocde, I).Value = AgL.XNull(DtTemp.Rows(I)("OtherChargeName"))
                DglOtherCharges.Item(Col7Amount, I).Value = AgL.VNull(DtTemp.Rows(I)("Amount"))
                DglOtherCharges.Item(Col7ChargeType, I).Value = AgL.XNull(DtTemp.Rows(I)("ChargeType"))
            Next I
        End If
    End Sub


    Public Sub FMovRecItemCategorySummary()
        If CType(AgL.VNull(FGetSettings(SettingFields.ShowItemCategorySummaryYn, SettingType.General)), Boolean) = True Then
            Dim I As Integer = 0
            Dim J As Integer = 0

            Dim DtTemp As DataTable

            mQry = " Select Max(L.Sr) As Serial, Ls.ItemCategory,  Max(Ic.Description) As ItemCategoryDesc, 
                    Sum(L.Qty) As Qty, Sum(L.Amount) As Amount
                    From SaleInvoiceDetail L
                    LEFT JOIN SaleInvoiceDetailSku Ls ON L.DocId = Ls.DocId And L.Sr = Ls.Sr
                    LEFT JOIN Item Ic On Ls.ItemCategory = Ic.Code
                    Where L.DocId = '" & mSearchCode & "'
                    Group By Ls.ItemCategory
                    Order By Serial "
            DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)
            DglItemCategorySummary.RowCount = 1 : DglItemCategorySummary.Rows.Clear()
            For I = 0 To DtTemp.Rows.Count - 1
                DglItemCategorySummary.Rows.Add()
                DglItemCategorySummary.Item(ColSNo, I).Value = DglItemCategorySummary.Rows.Count
                DglItemCategorySummary.Item(Col6Select, I).Value = AgLibrary.ClsConstant.StrCheckedValue
                DglItemCategorySummary.Item(Col6ItemCategory, I).Tag = AgL.XNull(DtTemp.Rows(I)("ItemCategory"))
                DglItemCategorySummary.Item(Col6ItemCategory, I).Value = AgL.XNull(DtTemp.Rows(I)("ItemCategoryDesc"))
                DglItemCategorySummary.Item(Col6Qty, I).Value = AgL.VNull(DtTemp.Rows(I)("Qty"))
                DglItemCategorySummary.Item(Col6Amount, I).Value = AgL.VNull(DtTemp.Rows(I)("Amount"))
                DglItemCategorySummary.Item(Col6Select, I).Value = AgLibrary.ClsConstant.StrCheckedValue
            Next I
        End If
    End Sub
    Private Sub FFillCatalogItems(CatalogCodeStr As String)
        mQry = " Select H.Code As CatalogCode, H.Description As Catalog,
                It.Name As ItemType, Ic.Description As ItemCategory, 
                Ig.Description As ItemGroup, I.Description As Item,
                D1.Description As Dimension1, D2.Description As Dimension2, 
                D3.Description As Dimension3, D4.Description As Dimension4,
                Ic.Code As ItemCategoryCode, Ig.Code As ItemGroupCode, I.Code As ItemCode,
                D1.Code As Dimension1Code, D2.Code As Dimension2Code, 
                D3.Code As Dimension3Code, D4.Code As Dimension4Code,
                Size.Code As SizeCode, It.Code As ItemTypeCode,
                Size.Description As Size, I.SalesTaxPostingGroup, L.Qty, L.Unit, L.Rate, 
                L.DiscountPer, L.AdditionalDiscountPer, L.AdditionPer, 
                Sku.Div_Code As StockInDiv_Code, D.Div_Name As StockInDiv_Name,
                L.ItemState As ItemStateCode, ItemState.Description As ItemState                
                FROM CatalogDetail L
                LEFT JOIN Catalog H ON L.Code = H.Code	
                LEFT JOIN Item Sku ON Sku.Code = L.Item
                LEFT JOIN Item I ON I.Code = IsNull(Sku.BaseItem,Sku.Code) And I.V_Type <> '" & ItemV_Type.SKU & "'
                LEFT JOIN ItemType It On Sku.ItemType = It.Code
                LEFT JOIN Item IC On Sku.ItemCategory = IC.Code
                LEFT JOIN Item IG On Sku.ItemGroup = IG.Code
                LEFT JOIN Item D1 ON D1.Code = Sku.Dimension1  
                LEFT JOIN Item D2 ON D2.Code = Sku.Dimension2
                LEFT JOIN Item D3 ON D3.Code = Sku.Dimension3
                LEFT JOIN Item D4 ON D4.Code = Sku.Dimension4
                LEFT JOIN Size Size ON Size.Code = Sku.Size 
                LEFT JOIN Item ItemState On L.ItemState = ItemState.Code
                LEFT JOIN Division D On Sku.Div_Code = D.Div_Code
                Where L.Code In ('" & CatalogCodeStr.Replace(",", "','") & "')"
        Dim DtTemp As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)

        Dim mRow As Integer = 0

        If Dgl1.Rows.Count > 1 Then
            If MsgBox("Do you want to overwrite existing data in grid ? ", MsgBoxStyle.Question + MsgBoxStyle.YesNo) = MsgBoxResult.Yes Then
                For I As Integer = 0 To Dgl1.Rows.Count - 1
                    If Dgl1.Item(Col1IsRecordLocked, I).Value = 0 Then
                        If Not Dgl1.Rows(I).IsNewRow Then
                            Dgl1.Rows(I).Visible = False
                        End If
                    End If
                Next
                mRow = Dgl1.Rows.Count - 1
            Else
                mRow = Dgl1.Rows.Count - 1
            End If
        Else
            mRow = 0
        End If

        If Dgl1.Rows(mRow).IsNewRow = False Then
            Dgl1.Rows.Remove(Dgl1.Rows(mRow))
        End If

        Dgl1.Rows.Insert(mRow, DtTemp.Rows.Count)
        For I As Integer = 0 To DtTemp.Rows.Count - 1
            Dgl1.Item(ColSNo, mRow + I).Value = I + 1

            Dgl1.Item(Col1Catalog, mRow + I).Tag = AgL.XNull(DtTemp.Rows(I)("CatalogCode"))
            Dgl1.Item(Col1Catalog, mRow + I).Value = AgL.XNull(DtTemp.Rows(I)("Catalog"))

            Dgl1.Item(Col1ItemType, mRow + I).Tag = AgL.XNull(DtTemp.Rows(I)("ItemTypeCode"))
            Dgl1.Item(Col1ItemType, mRow + I).Value = AgL.XNull(DtTemp.Rows(I)("ItemType"))

            Dgl1.Item(Col1ItemCategory, mRow + I).Tag = AgL.XNull(DtTemp.Rows(I)("ItemCategoryCode"))
            Dgl1.Item(Col1ItemCategory, mRow + I).Value = AgL.XNull(DtTemp.Rows(I)("ItemCategory"))

            Dgl1.Item(Col1ItemGroup, mRow + I).Tag = AgL.XNull(DtTemp.Rows(I)("ItemGroupCode"))
            Dgl1.Item(Col1ItemGroup, mRow + I).Value = AgL.XNull(DtTemp.Rows(I)("ItemGroup"))

            Dgl1.Item(Col1Item, mRow + I).Tag = AgL.XNull(DtTemp.Rows(I)("ItemCode"))
            Dgl1.Item(Col1Item, mRow + I).Value = AgL.XNull(DtTemp.Rows(I)("Item"))

            Dgl1.Item(Col1Dimension1, mRow + I).Tag = AgL.XNull(DtTemp.Rows(I)("Dimension1Code"))
            Dgl1.Item(Col1Dimension1, mRow + I).Value = AgL.XNull(DtTemp.Rows(I)("Dimension1"))

            Dgl1.Item(Col1Dimension2, mRow + I).Tag = AgL.XNull(DtTemp.Rows(I)("Dimension2Code"))
            Dgl1.Item(Col1Dimension2, mRow + I).Value = AgL.XNull(DtTemp.Rows(I)("Dimension2"))

            Dgl1.Item(Col1Dimension3, mRow + I).Tag = AgL.XNull(DtTemp.Rows(I)("Dimension3Code"))
            Dgl1.Item(Col1Dimension3, mRow + I).Value = AgL.XNull(DtTemp.Rows(I)("Dimension3"))

            Dgl1.Item(Col1Dimension4, mRow + I).Tag = AgL.XNull(DtTemp.Rows(I)("Dimension4Code"))
            Dgl1.Item(Col1Dimension4, mRow + I).Value = AgL.XNull(DtTemp.Rows(I)("Dimension4"))

            Dgl1.Item(Col1Size, mRow + I).Tag = AgL.XNull(DtTemp.Rows(I)("SizeCode"))
            Dgl1.Item(Col1Size, mRow + I).Value = AgL.XNull(DtTemp.Rows(I)("Size"))

            Dgl1.Item(Col1ItemState, mRow + I).Tag = AgL.XNull(DtTemp.Rows(I)("ItemStateCode"))
            Dgl1.Item(Col1ItemState, mRow + I).Value = AgL.XNull(DtTemp.Rows(I)("ItemState"))

            Dgl1.Item(Col1SalesTaxGroup, mRow + I).Tag = AgL.XNull(DtTemp.Rows(I)("SalesTaxPostingGroup"))
            Dgl1.Item(Col1SalesTaxGroup, mRow + I).Value = AgL.XNull(DtTemp.Rows(I)("SalesTaxPostingGroup"))


            Dgl1.Item(Col1Qty, mRow + I).Value = AgL.VNull(DtTemp.Rows(I)("Qty"))
            Dgl1.Item(Col1DocQty, mRow + I).Value = AgL.VNull(DtTemp.Rows(I)("Qty"))

            Dgl1.Item(Col1Rate, mRow + I).Value = AgL.VNull(DtTemp.Rows(I)("Rate"))
            Dgl1.Item(Col1DiscountPer, mRow + I).Value = AgL.VNull(DtTemp.Rows(I)("DiscountPer"))
            Dgl1.Item(Col1AdditionalDiscountPer, mRow + I).Value = AgL.VNull(DtTemp.Rows(I)("AdditionalDiscountPer"))
            Dgl1.Item(Col1AdditionPer, mRow + I).Value = AgL.VNull(DtTemp.Rows(I)("AdditionPer"))

            Dgl1.Item(Col1Unit, mRow + I).Value = AgL.XNull(DtTemp.Rows(I)("Unit"))

            Dgl1.Item(Col1StockInDiv_Code, mRow + I).Tag = AgL.XNull(DtTemp.Rows(I)("StockInDiv_Code"))
            Dgl1.Item(Col1StockInDiv_Code, mRow + I).Value = AgL.XNull(DtTemp.Rows(I)("StockInDiv_Name"))

            If FDivisionNameForCustomization(13) = "JAIN BROTHERS" Or FDivisionNameForCustomization(11) = "BOOK SHOPEE" Then
                If Dgl1.Item(Col1ItemState, mRow + I).Tag = "OOStock" Then
                    Dgl1.Rows(mRow + I).DefaultCellStyle.BackColor = Color.Aqua
                End If
            End If

            FGeterateSkuName(mRow + I)
        Next

        Calculation()

        Dgl1.CurrentCell = Dgl1.FirstDisplayedCell
        Dgl1.Focus()
    End Sub
    Private Sub Dgl1_CellBeginEdit(sender As Object, e As DataGridViewCellCancelEventArgs) Handles Dgl1.CellBeginEdit
        Try
            If Dgl1.CurrentCell Is Nothing Then Exit Sub

            Select Case Dgl1.Columns(Dgl1.CurrentCell.ColumnIndex).Name
                Case Col1ItemCategory, Col1ItemGroup, Col1Item, Col1Rate
                    If My.Computer.Keyboard.CtrlKeyDown Then e.Cancel = True : Exit Sub
                    If AgL.XNull(Dgl1.Item(Col1Catalog, Dgl1.CurrentCell.RowIndex).Tag) <> "" Then
                        e.Cancel = True
                        MsgBox("Items are linked with catalog. It can not be change.", MsgBoxStyle.Information)
                        Exit Sub
                    End If
            End Select
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub
    Private Sub DglItemCategorySummary_MouseUp(sender As Object, e As MouseEventArgs) Handles DglItemCategorySummary.MouseUp
        Dim mRowIndex As Integer = DglItemCategorySummary.CurrentCell.RowIndex
        Dim mColumnIndex As Integer = DglItemCategorySummary.CurrentCell.ColumnIndex
        Try
            If AgL.StrCmp(Topctrl1.Mode, "Browse") Then Exit Sub
            Select Case DglItemCategorySummary.Columns(DglItemCategorySummary.CurrentCell.ColumnIndex).Name
                Case Col6Select
                    If e.Button = Windows.Forms.MouseButtons.Left Then
                        If DglItemCategorySummary.CurrentCell.ColumnIndex = DglItemCategorySummary.Columns(Col6Select).Index Then
                            ClsMain.FManageTick(DglItemCategorySummary, DglItemCategorySummary.CurrentCell.ColumnIndex, DglItemCategorySummary.Columns(Col6ItemCategory).Index)
                            FRemoveAndReAssignItemsAsPerCatagory(mRowIndex)
                        End If
                    End If
            End Select
        Catch ex As Exception
            MsgBox("System Exception : " & vbCrLf & ex.Message, MsgBoxStyle.Exclamation)
        End Try
    End Sub
    Private Sub DglItemCategorySummary_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles DglItemCategorySummary.KeyDown
        If DglItemCategorySummary.CurrentCell Is Nothing Then Exit Sub
        Dim mRowIndex As Integer = DglItemCategorySummary.CurrentCell.RowIndex
        Dim mColumnIndex As Integer = DglItemCategorySummary.CurrentCell.ColumnIndex
        Try
            If AgL.StrCmp(Topctrl1.Mode, "Browse") Then Exit Sub
            Select Case DglItemCategorySummary.Columns(DglItemCategorySummary.CurrentCell.ColumnIndex).Name
                Case Col6Select
                    If e.KeyCode = Keys.Space Then
                        ClsMain.FManageTick(DglItemCategorySummary, DglItemCategorySummary.CurrentCell.ColumnIndex, DglItemCategorySummary.Columns(Col6ItemCategory).Index)
                        FRemoveAndReAssignItemsAsPerCatagory(mRowIndex)
                    End If
            End Select
        Catch ex As Exception
            MsgBox("System Exception : " & vbCrLf & ex.Message, MsgBoxStyle.Exclamation)
        End Try
    End Sub
    Private Sub FRemoveAndReAssignItemsAsPerCatagory(mRowIndex As Integer)
        For I As Integer = 0 To DglItemCategorySummary.Rows.Count - 1
            For J As Integer = 0 To Dgl1.Rows.Count - 1
                If AgL.XNull(DglItemCategorySummary.Item(Col6ItemCategory, I).Tag) = AgL.XNull(Dgl1.Item(Col1ItemCategory, J).Tag) Then
                    If AgL.XNull(DglItemCategorySummary.Item(Col6Select, I).Value) = AgLibrary.ClsConstant.StrCheckedValue Then
                        'Dgl1.Rows(J).Visible = True
                    Else
                        Dgl1.Rows(J).Visible = False
                    End If
                End If
            Next
        Next
        Calculation()
        AgCalcGrid1.Calculation()
        AgCalcGrid1.Calculation()

        Try
            DglItemCategorySummary.CurrentCell = DglItemCategorySummary.Item(Col6Select, mRowIndex)
            DglItemCategorySummary.Focus()
        Catch ex As Exception
        End Try
    End Sub
    Private Sub DglItemCategorySummary_CellEnter(sender As Object, e As DataGridViewCellEventArgs) Handles DglItemCategorySummary.CellEnter
        Try
            If DglItemCategorySummary.CurrentCell Is Nothing Then Exit Sub
            Select Case DglItemCategorySummary.Columns(DglItemCategorySummary.CurrentCell.ColumnIndex).Name
                Case Col6Select
                    DglItemCategorySummary.Columns(Col6Select).ReadOnly = True
            End Select
        Catch ex As Exception
        End Try
    End Sub

    Private Sub DglPurchase_EditingControl_KeyDown(sender As Object, e As KeyEventArgs) Handles DglPurchase.EditingControl_KeyDown
    End Sub

    Private Sub DglPurchase_CellBeginEdit(sender As Object, e As DataGridViewCellCancelEventArgs) Handles DglPurchase.CellBeginEdit
        Try
            If DglPurchase.CurrentCell Is Nothing Or isInitializingGrids Then Exit Sub
            Select Case DglPurchase.Columns(DglPurchase.CurrentCell.ColumnIndex).Name
                Case Col5GrossAmount, Col5NetAmount, Col5CommissionAmount, Col5AdditionalCommissionAmount
                    e.Cancel = True
                Case Col5Supplier
                    e.Cancel = True
            End Select
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub
    Private Sub FOpenSaleOrderForSaleInvoice(mRow As Integer)
        Dim DtTemp As DataTable
        Dim StrRtn As String = ""
        Dim bPendingOrderQry As String = ""

        If AgL.StrCmp(Topctrl1.Mode, "Browse") Then Exit Sub

        bPendingOrderQry = " SELECT VOrder.SaleOrder, VOrder.SaleOrderSr, IsNull(VOrder.OrderQty,0) - IsNull(VInvoice.InvoiceQty,0) AS BalanceQty
                FROM (
                    SELECT L.SaleOrder, L.SaleOrderSr, Sum(L.Qty) AS OrderQty
                    FROM SaleOrder H 
                    LEFT JOIN SaleOrderDetail L ON H.DocID = L.DocID
                    LEFT JOIN Voucher_Type Vt ON H.V_Type = Vt.V_Type
                    Where H.SaleToParty = '" & DglMain.Item(Col1Value, rowSaleToParty).Tag & "'
	                GROUP BY L.SaleOrder, L.SaleOrderSr
                ) AS VOrder
                LEFT JOIN (
                    SELECT L.SaleOrder, L.SaleOrderSr, Sum(L.Qty) AS InvoiceQty
                    FROM SaleBillDetail L 
                    GROUP BY L.SaleOrder, L.SaleOrderSr	
                ) AS VInvoice ON VOrder.SaleOrder = VInvoice.SaleOrder AND VOrder.SaleOrderSr = VInvoice.SaleOrderSr 
                WHERE 1=1 
                And IsNull(VOrder.OrderQty,0) - IsNull(VInvoice.InvoiceQty,0) > 0 "

        mQry = " Select 'o' As Tick, L.DocID || '#' || Cast(L.Sr as Varchar) As SearchKey, 
                H.V_Type || '-' || H.ManualRefNo As SaleOrderNo, H.V_Date As SaleOrderDate, 
                Ic.Description As ItemCategory, Ig.Description As ItemGroup, I.Description As Item,
                D1.Description As Dimension1, D2.Description As Dimension2, 
                D3.Description As Dimension3, D4.Description As Dimension4,
                Size.Description As Size, VPendingOrder.BalanceQty, L.Unit, L.Rate,
                Ic.Code As ItemCategoryCode, Ig.Code As ItemGroupCode, I.Code As ItemCode,
                D1.Code As Dimension1Code, D2.Code As Dimension2Code, 
                D3.Code As Dimension3Code, D4.Code As Dimension4Code, I.SalesTaxPostingGroup,
                Size.Code As SizeCode, It.Code As ItemTypeCode, It.Name As ItemType, 
                VPendingOrder.SaleOrder, VPendingOrder.SaleOrderSr,
                Case When IfNull(U.ShowDimensionDetailInSales,0) = 1 Or IfNull(Ic.ShowDimensionDetailInSales,0) = 1 Then 1
                        Else 0 End As ShowDimensionDetailInSales, 
                U.DecimalPlaces as QtyDecimalPlaces, DU.DecimalPlaces as DealQtyDecimalPlaces, I.DealUnit
                FROM (" & bPendingOrderQry & ") As VPendingOrder
                LEFT JOIN SaleOrderDetail L On VPendingOrder.SaleOrder = L.DocId And VPendingOrder.SaleOrderSr = L.Sr 
                LEFT JOIN SaleOrder H On L.DocId = H.DocId 
                LEFT JOIN Item Sku ON Sku.Code = L.Item
                LEFT JOIN Item I ON I.Code = IsNull(Sku.BaseItem,Sku.Code) And I.V_Type <> '" & ItemV_Type.SKU & "'
                LEFT JOIN ItemType It On Sku.ItemType = It.Code
                LEFT JOIN Item IC On IsNull(Sku.ItemCategory,Sku.code) = IC.Code
                LEFT JOIN Item IG On Sku.ItemGroup = IG.Code
                LEFT JOIN Item D1 ON D1.Code = Sku.Dimension1  
                LEFT JOIN Item D2 ON D2.Code = Sku.Dimension2
                LEFT JOIN Item D3 ON D3.Code = Sku.Dimension3
                LEFT JOIN Item D4 ON D4.Code = Sku.Dimension4
                LEFT JOIN Item Size ON Size.Code = Sku.Size 
                Left Join Unit U  With (NoLock) On I.Unit = U.Code 
                LEFT JOIN Unit Du With (NoLock) On I.DealUnit = Du.Code 
                Where 1=1 "

        If mRow >= 0 Then
            If AgL.XNull(Dgl1.Item(Col1ItemCategory, mRow).Tag) <> "" Then
                mQry += " And Ic.Code = '" & Dgl1.Item(Col1ItemCategory, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1ItemGroup, mRow).Tag) <> "" Then
                mQry += " And Ig.Code = '" & Dgl1.Item(Col1ItemGroup, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Item, mRow).Tag) <> "" Then
                mQry += " And I.Code = '" & Dgl1.Item(Col1Item, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Dimension1, mRow).Tag) <> "" Then
                mQry += " And D1.Code = '" & Dgl1.Item(Col1Dimension1, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Dimension2, mRow).Tag) <> "" Then
                mQry += " And D2.Code = '" & Dgl1.Item(Col1Dimension2, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Dimension3, mRow).Tag) <> "" Then
                mQry += " And D3.Code = '" & Dgl1.Item(Col1Dimension3, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Dimension4, mRow).Tag) <> "" Then
                mQry += " And D4.Code = '" & Dgl1.Item(Col1Dimension4, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Size, mRow).Tag) <> "" Then
                mQry += " And Size.Code = '" & Dgl1.Item(Col1Size, mRow).Tag & "'"
            End If
        End If

        DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)

        Dim FRH_Multiple As DMHelpGrid.FrmHelpGrid_Multi
        FRH_Multiple = New DMHelpGrid.FrmHelpGrid_Multi(New DataView(DtTemp), "", 400, 990, , , False)
        FRH_Multiple.FFormatColumn(0, "Tick", 40, DataGridViewContentAlignment.MiddleCenter, True)
        FRH_Multiple.FFormatColumn(1, , 0, , False)
        FRH_Multiple.FFormatColumn(2, "Order No.", 90, DataGridViewContentAlignment.MiddleLeft)
        FRH_Multiple.FFormatColumn(3, "Order Date", 100, DataGridViewContentAlignment.MiddleLeft)
        FRH_Multiple.FFormatColumn(4, AgL.PubCaptionItemCategory, 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[ItemCategory] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(5, AgL.PubCaptionItemGroup, 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[ItemGroup] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(6, AgL.PubCaptionItem, 180, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Item] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(7, AgL.PubCaptionDimension1, 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension1] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(8, AgL.PubCaptionDimension2, 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension2] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(9, AgL.PubCaptionDimension3, 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension3] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(10, AgL.PubCaptionDimension4, 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension4] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(11, "Size", 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Size] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(12, "Bal Qty", 90, DataGridViewContentAlignment.MiddleRight)
        FRH_Multiple.FFormatColumn(13, "Unit", 70, DataGridViewContentAlignment.MiddleLeft)
        FRH_Multiple.FFormatColumn(14, "Rate", 70, DataGridViewContentAlignment.MiddleLeft)

        FRH_Multiple.FFormatColumn(15, , 0, , False)
        FRH_Multiple.FFormatColumn(16, , 0, , False)
        FRH_Multiple.FFormatColumn(17, , 0, , False)
        FRH_Multiple.FFormatColumn(18, , 0, , False)
        FRH_Multiple.FFormatColumn(19, , 0, , False)
        FRH_Multiple.FFormatColumn(20, , 0, , False)
        FRH_Multiple.FFormatColumn(21, , 0, , False)
        FRH_Multiple.FFormatColumn(22, , 0, , False)
        FRH_Multiple.FFormatColumn(23, , 0, , False)
        FRH_Multiple.FFormatColumn(24, , 0, , False)
        FRH_Multiple.FFormatColumn(25, , 0, , False)
        FRH_Multiple.FFormatColumn(26, , 0, , False)
        FRH_Multiple.FFormatColumn(27, , 0, , False)
        FRH_Multiple.FFormatColumn(28, , 0, , False)
        FRH_Multiple.FFormatColumn(29, , 0, , False)
        FRH_Multiple.FFormatColumn(30, , 0, , False)
        FRH_Multiple.FFormatColumn(31, , 0, , False)

        FRH_Multiple.StartPosition = FormStartPosition.CenterScreen
        FRH_Multiple.ShowDialog()

        If FRH_Multiple.BytBtnValue = 0 Then
            StrRtn = FRH_Multiple.FFetchData(1, "'", "'", ",", True)
        End If

        Dim DrSelected As DataRow()
        If StrRtn <> "" Then
            DrSelected = DtTemp.Select("SearchKey In (" & StrRtn & ")")

            If mRow < 0 Then
                If Dgl1.Rows.Count > 1 Then
                    If MsgBox("Do you want to overwrite existing data in grid ? ", MsgBoxStyle.Question + MsgBoxStyle.YesNo) = MsgBoxResult.Yes Then
                        'Dgl1.Rows.Clear() : Dgl1.RowCount = 1 : mRow = 0
                        For I As Integer = 0 To Dgl1.Rows.Count - 1
                            If Dgl1.Item(Col1IsRecordLocked, I).Value = 0 Then
                                If Not Dgl1.Rows(I).IsNewRow Then
                                    Dgl1.Rows(I).Visible = False
                                End If
                            End If
                        Next
                        mRow = Dgl1.Rows.Count - 1
                    Else
                        mRow = Dgl1.Rows.Count - 1
                    End If
                Else
                    mRow = 0
                End If
            End If

            If Dgl1.Rows(mRow).IsNewRow = False Then
                Dgl1.Rows.Remove(Dgl1.Rows(mRow))
            End If
            Dgl1.Rows.Insert(mRow, DrSelected.Length)
            For I As Integer = 0 To DrSelected.Length - 1
                Dgl1.Item(Col1ItemType, mRow + I).Tag = AgL.XNull(DrSelected(I)("ItemTypeCode"))
                Dgl1.Item(Col1ItemType, mRow + I).Value = AgL.XNull(DrSelected(I)("ItemType"))

                Dgl1.Item(Col1ItemCategory, mRow + I).Tag = AgL.XNull(DrSelected(I)("ItemCategoryCode"))
                Dgl1.Item(Col1ItemCategory, mRow + I).Value = AgL.XNull(DrSelected(I)("ItemCategory"))

                Dgl1.Item(Col1ItemGroup, mRow + I).Tag = AgL.XNull(DrSelected(I)("ItemGroupCode"))
                Dgl1.Item(Col1ItemGroup, mRow + I).Value = AgL.XNull(DrSelected(I)("ItemGroup"))

                Dgl1.Item(Col1Item, mRow + I).Tag = AgL.XNull(DrSelected(I)("ItemCode"))
                Dgl1.Item(Col1Item, mRow + I).Value = AgL.XNull(DrSelected(I)("Item"))

                Dgl1.Item(Col1Dimension1, mRow + I).Tag = AgL.XNull(DrSelected(I)("Dimension1Code"))
                Dgl1.Item(Col1Dimension1, mRow + I).Value = AgL.XNull(DrSelected(I)("Dimension1"))

                Dgl1.Item(Col1Dimension2, mRow + I).Tag = AgL.XNull(DrSelected(I)("Dimension2Code"))
                Dgl1.Item(Col1Dimension2, mRow + I).Value = AgL.XNull(DrSelected(I)("Dimension2"))

                Dgl1.Item(Col1Dimension3, mRow + I).Tag = AgL.XNull(DrSelected(I)("Dimension3Code"))
                Dgl1.Item(Col1Dimension3, mRow + I).Value = AgL.XNull(DrSelected(I)("Dimension3"))

                Dgl1.Item(Col1Dimension4, mRow + I).Tag = AgL.XNull(DrSelected(I)("Dimension4Code"))
                Dgl1.Item(Col1Dimension4, mRow + I).Value = AgL.XNull(DrSelected(I)("Dimension4"))

                Dgl1.Item(Col1Size, mRow + I).Tag = AgL.XNull(DrSelected(I)("SizeCode"))
                Dgl1.Item(Col1Size, mRow + I).Value = AgL.XNull(DrSelected(I)("Size"))

                Dgl1.Item(Col1SalesTaxGroup, mRow + I).Tag = AgL.XNull(DrSelected(I)("SalesTaxPostingGroup"))
                Dgl1.Item(Col1SalesTaxGroup, mRow + I).Value = AgL.XNull(DrSelected(I)("SalesTaxPostingGroup"))

                Dgl1.Item(Col1SaleInvoice, mRow + I).Tag = AgL.XNull(DrSelected(I)("SaleOrder"))
                Dgl1.Item(Col1SaleInvoice, mRow + I).Value = AgL.XNull(DrSelected(I)("SaleOrderNo"))
                Dgl1.Item(Col1SaleInvoiceSr, mRow + I).Value = AgL.VNull(DrSelected(I)("SaleOrderSr"))

                Dgl1.Item(Col1ReferenceNo, mRow + I).Value = AgL.XNull(DrSelected(I)("SaleOrderNo"))
                Dgl1.Item(Col1ReferenceDocId, mRow + I).Value = AgL.XNull(DrSelected(I)("SaleOrder"))
                Dgl1.Item(Col1ReferenceDocIdTSr, mRow + I).Value = AgL.VNull(DrSelected(I)("SaleOrderSr"))
                Dgl1.Item(Col1ReferenceDocIdSr, mRow + I).Value = AgL.VNull(DrSelected(I)("SaleOrderSr"))


                Dgl1.Item(Col1Qty, mRow + I).Value = AgL.XNull(DrSelected(I)("BalanceQty"))
                Dgl1.Item(Col1DocQty, mRow + I).Value = AgL.XNull(DrSelected(I)("BalanceQty"))

                Dgl1.Item(Col1QtyDecimalPlaces, mRow + I).Value = AgL.VNull(DrSelected(I)("QtyDecimalPlaces"))
                Dgl1.Item(Col1DealQtyDecimalPlaces, mRow + I).Value = AgL.VNull(DrSelected(I)("DealQtyDecimalPlaces"))

                Dgl1.Item(Col1Rate, mRow + I).Value = AgL.XNull(DrSelected(I)("Rate"))

                Dgl1.Item(Col1Unit, mRow + I).Value = AgL.XNull(DrSelected(I)("Unit"))
                Dgl1.Item(Col1Unit, mRow + I).Tag = AgL.VNull(DrSelected(I)("ShowDimensionDetailInSales"))

                Dgl1.Item(Col1DealUnit, mRow + I).Value = AgL.XNull(DrSelected(I)("DealUnit"))

                If ClsMain.IsScopeOfWorkContains(IndustryType.SubIndustryType.FallPico) Then
                    DglMain.Item(Col1Value, rowSaleToPartyName).Value = AgL.XNull(DrSelected(I)("SaleToPartyName"))
                    DglMain.Item(Col1Value, rowSaleToPartyMobile).Value = AgL.XNull(DrSelected(I)("SaleToPartyMobile"))
                End If


                FGetRateConsideringAllDimensions(mRow + I)
            Next

            For I As Integer = 0 To Dgl1.Rows.Count - 1
                Dgl1.Item(ColSNo, I).Value = I + 1
                FGeterateSkuName(I)
            Next
        End If
        Calculation()
    End Sub
    Private Sub FOpenStockGroupWise(mRow As Integer)
        Dim bGroupOn As String = ""
        Dim DtTemp As DataTable
        bGroupOn = "L.Item"

        mQry = "SELECT " & bGroupOn & " As SearchKey, 
                Max(G.SubCode) As GodownCode, Max(G.Name) As Godown,
                Max(L.LotNo) As LotNo,
                Max(It.Code) As ItemTypeCode, Max(It.Name) As ItemType, 
                Max(IC.Code) as ItemCategoryCode, Max(IC.Description) as ItemCategory,
                Max(IG.Code) as ItemGroupCode, Max(IG.Description) as ItemGroup,
                Max(Case When Sku.V_Type = '" & ItemV_Type.SKU & "' Then I.Code Else Sku.Code End) as ItemCode,
                Max(Case When Sku.V_Type = '" & ItemV_Type.SKU & "' Then I.Specification Else Sku.Specification End) as Item, 
                Max(D1.Code) as Dimension1Code, Max(D1.Specification) as Dimension1, 
                Max(D2.Code) as Dimension2Code, Max(D2.Specification) as Dimension2, 
                Max(D3.Code) as Dimension3Code, Max(D3.Specification) as Dimension3, 
                Max(D4.Code) as Dimension4Code, Max(D4.Specification) as Dimension4, 
                Max(Size.Code) as SizeCode, Max(Size.Description) as Size,
                IfNull(Sum(L.Qty_Rec),0) - IfNull(Sum(L.Qty_Iss),0) As BalanceQty,
                Max(L.Unit) As Unit
                FROM Stock L 
                LEFT JOIN Item Sku ON L.Item = Sku.Code
                LEFT JOIN ItemType It On Sku.ItemType = It.Code
                LEFT JOIN Item IC On IsNull(Sku.ItemCategory,Sku.code) = IC.Code
                LEFT JOIN Item IG On Sku.ItemGroup = IG.Code
                LEFT JOIN Item I ON IsNull(Sku.BaseItem, Sku.Code) = I.Code
                LEFT JOIN Item D1 ON Sku.Dimension1 = D1.Code
                LEFT JOIN Item D2 ON Sku.Dimension2 = D2.Code
                LEFT JOIN Item D3 ON Sku.Dimension3 = D3.Code
                LEFT JOIN Item D4 ON Sku.Dimension4 = D4.Code
                LEFT JOIN Item Size ON Sku.Size = Size.Code
                LEFT JOIN SubGroup G On L.Godown = G.SubCode
                Where L.Item = '" & Dgl1.Item(Col1SKU, mRow).Tag & "'
                GROUP BY " & bGroupOn &
                " Having IfNull(Sum(L.Qty_Rec),0) - IfNull(Sum(L.Qty_Iss),0) <> 0 "

        DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)

        Dim FRH_Single As DMHelpGrid.FrmHelpGrid
        FRH_Single = New DMHelpGrid.FrmHelpGrid(New DataView(DtTemp), "", 400, 990, , , False)
        FRH_Single.FFormatColumn(0, , 0, , False)
        FRH_Single.FFormatColumn(1, "", 0, , False)
        FRH_Single.FFormatColumn(2, "Godown", 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Godown] <> '' ").Length = 0, False, True))
        FRH_Single.FFormatColumn(3, AgL.PubCaptionLotNo, 100, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[LotNo] <> '' ").Length = 0, False, True))
        FRH_Single.FFormatColumn(4, "", 0, , False)
        FRH_Single.FFormatColumn(5, "Item Type", 90, DataGridViewContentAlignment.MiddleLeft, False)
        FRH_Single.FFormatColumn(6, "", 90, DataGridViewContentAlignment.MiddleLeft, False)
        FRH_Single.FFormatColumn(7, AgL.PubCaptionItemCategory, 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[ItemCategory] <> '' ").Length = 0, False, True))
        FRH_Single.FFormatColumn(8, "", 180, DataGridViewContentAlignment.MiddleLeft, False)
        FRH_Single.FFormatColumn(9, AgL.PubCaptionItemGroup, 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[ItemGroup] <> '' ").Length = 0, False, True))
        FRH_Single.FFormatColumn(10, "", 90, DataGridViewContentAlignment.MiddleLeft, False)
        FRH_Single.FFormatColumn(11, AgL.PubCaptionItem, 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Item] <> '' ").Length = 0, False, True))
        FRH_Single.FFormatColumn(12, "", 90, DataGridViewContentAlignment.MiddleLeft, False)
        FRH_Single.FFormatColumn(13, AgL.PubCaptionDimension1, 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension1] <> '' ").Length = 0, False, True))
        FRH_Single.FFormatColumn(14, "", 90, DataGridViewContentAlignment.MiddleRight, False)
        FRH_Single.FFormatColumn(15, AgL.PubCaptionDimension2, 70, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension2] <> '' ").Length = 0, False, True))
        FRH_Single.FFormatColumn(16, "", 70, DataGridViewContentAlignment.MiddleLeft, False)
        FRH_Single.FFormatColumn(17, AgL.PubCaptionDimension3, 70, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension3] <> '' ").Length = 0, False, True))
        FRH_Single.FFormatColumn(18, "", 70, DataGridViewContentAlignment.MiddleLeft, False)
        FRH_Single.FFormatColumn(19, AgL.PubCaptionDimension4, 70, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension4] <> '' ").Length = 0, False, True))
        FRH_Single.FFormatColumn(20, "", 70, DataGridViewContentAlignment.MiddleLeft, False)
        FRH_Single.FFormatColumn(21, "Size", 70, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Size] <> '' ").Length = 0, False, True))
        FRH_Single.FFormatColumn(22, "Balance Qty", 70, DataGridViewContentAlignment.MiddleRight, True)
        FRH_Single.FFormatColumn(23, "Unit", 70, DataGridViewContentAlignment.MiddleRight, True)

        FRH_Single.StartPosition = FormStartPosition.CenterScreen
        FRH_Single.ShowDialog()

        If FRH_Single.DRReturn IsNot Nothing Then
            If FRH_Single.DRReturn("SearchKey") <> "" Then
                If ClsMain.IsScopeOfWorkContains(IndustryType.KiranaIndustry) Then
                    Dgl1.Item(Col1Godown, mRow).Tag = AgL.XNull(FRH_Single.DRReturn("GodownCode"))
                    Dgl1.Item(Col1Godown, mRow).Value = AgL.XNull(FRH_Single.DRReturn("Godown"))

                    Dgl1.Item(Col1LotNo, mRow).Value = AgL.XNull(FRH_Single.DRReturn("LotNo"))
                Else
                    Dgl1.Item(Col1ItemType, mRow).Tag = AgL.XNull(FRH_Single.DRReturn("ItemTypeCode"))
                    Dgl1.Item(Col1ItemType, mRow).Value = AgL.XNull(FRH_Single.DRReturn("ItemType"))

                    Dgl1.Item(Col1ItemCategory, mRow).Tag = AgL.XNull(FRH_Single.DRReturn("ItemCategoryCode"))
                    Dgl1.Item(Col1ItemCategory, mRow).Value = AgL.XNull(FRH_Single.DRReturn("ItemCategory"))

                    Dgl1.Item(Col1ItemGroup, mRow).Tag = AgL.XNull(FRH_Single.DRReturn("ItemGroupCode"))
                    Dgl1.Item(Col1ItemGroup, mRow).Value = AgL.XNull(FRH_Single.DRReturn("ItemGroup"))

                    Dgl1.Item(Col1Item, mRow).Tag = AgL.XNull(FRH_Single.DRReturn("ItemCode"))
                    Dgl1.Item(Col1Item, mRow).Value = AgL.XNull(FRH_Single.DRReturn("Item"))

                    Dgl1.Item(Col1Dimension1, mRow).Tag = AgL.XNull(FRH_Single.DRReturn("Dimension1Code"))
                    Dgl1.Item(Col1Dimension1, mRow).Value = AgL.XNull(FRH_Single.DRReturn("Dimension1"))

                    Dgl1.Item(Col1Dimension2, mRow).Tag = AgL.XNull(FRH_Single.DRReturn("Dimension2Code"))
                    Dgl1.Item(Col1Dimension2, mRow).Value = AgL.XNull(FRH_Single.DRReturn("Dimension2"))

                    Dgl1.Item(Col1Dimension3, mRow).Tag = AgL.XNull(FRH_Single.DRReturn("Dimension3Code"))
                    Dgl1.Item(Col1Dimension3, mRow).Value = AgL.XNull(FRH_Single.DRReturn("Dimension3"))

                    Dgl1.Item(Col1Dimension4, mRow).Tag = AgL.XNull(FRH_Single.DRReturn("Dimension4Code"))
                    Dgl1.Item(Col1Dimension4, mRow).Value = AgL.XNull(FRH_Single.DRReturn("Dimension4"))

                    Dgl1.Item(Col1Size, mRow).Tag = AgL.XNull(FRH_Single.DRReturn("SizeCode"))
                    Dgl1.Item(Col1Size, mRow).Value = AgL.XNull(FRH_Single.DRReturn("Size"))

                    Dgl1.Item(Col1Qty, mRow).Value = AgL.XNull(FRH_Single.DRReturn("BalanceQty"))
                    Dgl1.Item(Col1DocQty, mRow).Value = AgL.XNull(FRH_Single.DRReturn("BalanceQty"))

                    Dgl1.Item(Col1Unit, mRow).Value = AgL.XNull(FRH_Single.DRReturn("Unit"))
                End If
                Calculation()
            End If
        End If
    End Sub
    Private Sub FOpenPartyMaster()
        Dim DrTemp As DataRow() = Nothing
        Dim bPartyCode$ = ""
        Dim objMdi As New MDIMain
        Dim StrUserPermission As String
        Dim DTUP As DataTable

        StrUserPermission = AgIniVar.FunGetUserPermission(ClsMain.ModuleName, objMdi.MnuItemMaster.Name, objMdi.MnuItemMaster.Text, DTUP)

        Dim frmObj As FrmPerson

        frmObj = New FrmPerson(StrUserPermission, DTUP, SubgroupType.Customer)
        frmObj.EntryPointIniMode = AgTemplate.ClsMain.EntryPointIniMode.Insertion
        frmObj.StartPosition = FormStartPosition.CenterParent
        frmObj.IniGrid()
        frmObj.ShowDialog()
        bPartyCode = frmObj.mSearchCode
        frmObj = Nothing

        DglMain.Item(Col1Value, rowSaleToParty).Value = ""
        DglMain.Item(Col1Value, rowSaleToParty).Tag = ""
        DglMain.CurrentCell = DglMain.Item(Col1Value, rowSaleToParty)

        DglMain.Item(Col1Head, DglMain.CurrentCell.RowIndex).Tag = FCreateHelpSubgroup()
        DrTemp = DglMain.Item(Col1Head, DglMain.CurrentCell.RowIndex).Tag.Tables(0).Select("Code = '" & bPartyCode & "'")
        DglMain.Item(Col1Value, rowSaleToParty).Tag = bPartyCode
        DglMain.Item(Col1Value, rowSaleToParty).Value = AgL.XNull(AgL.Dman_Execute("Select SubCode From Subgroup Where SubCode = '" & DglMain.Item(Col1Value, rowSaleToParty).Tag & "'", AgL.GCn).ExecuteScalar)
        DglMain.CurrentCell = DglMain.Item(Col1Value, rowSaleToParty)
        SendKeys.Send("{Enter}")
    End Sub







    Private Sub FOpenSaleInvoiceForSaleOrder(mRow As Integer)
        Dim DtTemp As DataTable
        Dim StrRtn As String = ""
        Dim bPendingOrderQry As String = ""

        If AgL.StrCmp(Topctrl1.Mode, "Browse") Then Exit Sub

        bPendingOrderQry = " SELECT VInvoice.SaleInvoice, VInvoice.SaleInvoiceSr, IsNull(VInvoice.InvoiceQty,0) - IsNull(VOrder.OrderQty,0) AS BalanceQty
                FROM (
                    SELECT L.SaleInvoice, L.SaleInvoiceSr, Sum(L.Qty) AS InvoiceQty
                    FROM SaleInvoice H 
                    LEFT JOIN SaleInvoiceDetail L ON H.DocID = L.DocID
                    LEFT JOIN Voucher_Type Vt ON H.V_Type = Vt.V_Type
                    Where Vt.NCat = '" & NCatNature.Invoice & "'
                    And H.SaleToParty = '" & DglMain.Item(Col1Value, rowSaleToParty).Tag & "'
	                GROUP BY L.SaleInvoice, L.SaleInvoiceSr
                ) AS VInvoice
                LEFT JOIN (
                    SELECT L.SaleInvoice, L.SaleInvoiceSr, Sum(L.Qty) AS OrderQty
                    FROM SaleInvoice H 
                    LEFT JOIN SaleInvoiceDetail L ON H.DocID = L.DocID
                    LEFT JOIN Voucher_Type Vt ON H.V_Type = Vt.V_Type
                    Where Vt.NCat = '" & NCatNature.Order & "'
                    GROUP BY L.SaleInvoice, L.SaleInvoiceSr	
                ) AS VOrder ON VInvoice.SaleInvoice = VOrder.SaleInvoice AND VInvoice.SaleInvoiceSr = VOrder.SaleInvoiceSr
                WHERE 1=1 
                And IsNull(VInvoice.InvoiceQty,0) - IsNull(VOrder.OrderQty,0) > 0 "

        mQry = " Select 'o' As Tick, L.DocID || '#' || Cast(L.Sr as Varchar) As SearchKey, 
                H.V_Type || '-' || H.ManualRefNo As SaleInvoiceNo, H.V_Date As SaleInvoiceDate, 
                Ic.Description As ItemCategory, Ig.Description As ItemGroup, I.Description As Item,
                D1.Description As Dimension1, D2.Description As Dimension2, 
                D3.Description As Dimension3, D4.Description As Dimension4,
                Size.Description As Size, VPendingInvoice.BalanceQty, L.Unit, L.Rate,
                Ic.Code As ItemCategoryCode, Ig.Code As ItemGroupCode, I.Code As ItemCode,
                D1.Code As Dimension1Code, D2.Code As Dimension2Code, 
                D3.Code As Dimension3Code, D4.Code As Dimension4Code, I.SalesTaxPostingGroup,
                Size.Code As SizeCode, It.Code As ItemTypeCode, It.Name As ItemType, 
                VPendingInvoice.SaleInvoice, VPendingInvoice.SaleInvoiceSr,
                Case When IfNull(U.ShowDimensionDetailInSales,0) = 1 Or IfNull(Ic.ShowDimensionDetailInSales,0) = 1 Then 1
                        Else 0 End As ShowDimensionDetailInSales, 
                U.DecimalPlaces as QtyDecimalPlaces, DU.DecimalPlaces as DealQtyDecimalPlaces, I.DealUnit
                FROM (" & bPendingOrderQry & ") As VPendingInvoice
                LEFT JOIN SaleInvoiceDetail L On VPendingInvoice.SaleInvoice = L.DocId And VPendingInvoice.SaleInvoiceSr = L.Sr 
                LEFT JOIN SaleInvoice H On L.DocId = H.DocId 
                LEFT JOIN Item Sku ON Sku.Code = L.Item
                LEFT JOIN Item I ON I.Code = IsNull(Sku.BaseItem,Sku.Code) And I.V_Type <> '" & ItemV_Type.SKU & "'
                LEFT JOIN ItemType It On Sku.ItemType = It.Code
                LEFT JOIN Item IC On IsNull(Sku.ItemCategory,Sku.code) = IC.Code
                LEFT JOIN Item IG On Sku.ItemGroup = IG.Code
                LEFT JOIN Item D1 ON D1.Code = Sku.Dimension1  
                LEFT JOIN Item D2 ON D2.Code = Sku.Dimension2
                LEFT JOIN Item D3 ON D3.Code = Sku.Dimension3
                LEFT JOIN Item D4 ON D4.Code = Sku.Dimension4
                LEFT JOIN Item Size ON Size.Code = Sku.Size 
                Left Join Unit U  With (NoLock) On I.Unit = U.Code 
                LEFT JOIN Unit Du With (NoLock) On I.DealUnit = Du.Code 
                Where 1=1 "

        If mRow >= 0 Then
            If AgL.XNull(Dgl1.Item(Col1ItemCategory, mRow).Tag) <> "" Then
                mQry += " And Ic.Code = '" & Dgl1.Item(Col1ItemCategory, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1ItemGroup, mRow).Tag) <> "" Then
                mQry += " And Ig.Code = '" & Dgl1.Item(Col1ItemGroup, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Item, mRow).Tag) <> "" Then
                mQry += " And I.Code = '" & Dgl1.Item(Col1Item, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Dimension1, mRow).Tag) <> "" Then
                mQry += " And D1.Code = '" & Dgl1.Item(Col1Dimension1, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Dimension2, mRow).Tag) <> "" Then
                mQry += " And D2.Code = '" & Dgl1.Item(Col1Dimension2, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Dimension3, mRow).Tag) <> "" Then
                mQry += " And D3.Code = '" & Dgl1.Item(Col1Dimension3, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Dimension4, mRow).Tag) <> "" Then
                mQry += " And D4.Code = '" & Dgl1.Item(Col1Dimension4, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Size, mRow).Tag) <> "" Then
                mQry += " And Size.Code = '" & Dgl1.Item(Col1Size, mRow).Tag & "'"
            End If
        End If

        DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)

        Dim FRH_Multiple As DMHelpGrid.FrmHelpGrid_Multi
        FRH_Multiple = New DMHelpGrid.FrmHelpGrid_Multi(New DataView(DtTemp), "", 400, 990, , , False)
        FRH_Multiple.FFormatColumn(0, "Tick", 40, DataGridViewContentAlignment.MiddleCenter, True)
        FRH_Multiple.FFormatColumn(1, , 0, , False)
        FRH_Multiple.FFormatColumn(2, "Invoice No.", 90, DataGridViewContentAlignment.MiddleLeft)
        FRH_Multiple.FFormatColumn(3, "Invoice Date", 100, DataGridViewContentAlignment.MiddleLeft)
        FRH_Multiple.FFormatColumn(4, AgL.PubCaptionItemCategory, 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[ItemCategory] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(5, AgL.PubCaptionItemGroup, 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[ItemGroup] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(6, AgL.PubCaptionItem, 180, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Item] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(7, AgL.PubCaptionDimension1, 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension1] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(8, AgL.PubCaptionDimension2, 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension2] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(9, AgL.PubCaptionDimension3, 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension3] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(10, AgL.PubCaptionDimension4, 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension4] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(11, "Size", 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Size] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(12, "Bal Qty", 90, DataGridViewContentAlignment.MiddleRight)
        FRH_Multiple.FFormatColumn(13, "Unit", 70, DataGridViewContentAlignment.MiddleLeft)
        FRH_Multiple.FFormatColumn(14, "Rate", 70, DataGridViewContentAlignment.MiddleLeft)

        FRH_Multiple.FFormatColumn(15, , 0, , False)
        FRH_Multiple.FFormatColumn(16, , 0, , False)
        FRH_Multiple.FFormatColumn(17, , 0, , False)
        FRH_Multiple.FFormatColumn(18, , 0, , False)
        FRH_Multiple.FFormatColumn(19, , 0, , False)
        FRH_Multiple.FFormatColumn(20, , 0, , False)
        FRH_Multiple.FFormatColumn(21, , 0, , False)
        FRH_Multiple.FFormatColumn(22, , 0, , False)
        FRH_Multiple.FFormatColumn(23, , 0, , False)
        FRH_Multiple.FFormatColumn(24, , 0, , False)
        FRH_Multiple.FFormatColumn(25, , 0, , False)
        FRH_Multiple.FFormatColumn(26, , 0, , False)
        FRH_Multiple.FFormatColumn(27, , 0, , False)
        FRH_Multiple.FFormatColumn(28, , 0, , False)
        FRH_Multiple.FFormatColumn(29, , 0, , False)
        FRH_Multiple.FFormatColumn(30, , 0, , False)
        FRH_Multiple.FFormatColumn(31, , 0, , False)

        FRH_Multiple.StartPosition = FormStartPosition.CenterScreen
        FRH_Multiple.ShowDialog()

        If FRH_Multiple.BytBtnValue = 0 Then
            StrRtn = FRH_Multiple.FFetchData(1, "'", "'", ",", True)
        End If

        Dim DrSelected As DataRow()
        If StrRtn <> "" Then
            DrSelected = DtTemp.Select("SearchKey In (" & StrRtn & ")")

            If mRow < 0 Then
                If Dgl1.Rows.Count > 1 Then
                    If MsgBox("Do you want to overwrite existing data in grid ? ", MsgBoxStyle.Question + MsgBoxStyle.YesNo) = MsgBoxResult.Yes Then
                        'Dgl1.Rows.Clear() : Dgl1.RowCount = 1 : mRow = 0
                        For I As Integer = 0 To Dgl1.Rows.Count - 1
                            If Dgl1.Item(Col1IsRecordLocked, I).Value = 0 Then
                                If Not Dgl1.Rows(I).IsNewRow Then
                                    Dgl1.Rows(I).Visible = False
                                End If
                            End If
                        Next
                        mRow = Dgl1.Rows.Count - 1
                    Else
                        mRow = Dgl1.Rows.Count - 1
                    End If
                Else
                    mRow = 0
                End If
            End If

            If Dgl1.Rows(mRow).IsNewRow = False Then
                Dgl1.Rows.Remove(Dgl1.Rows(mRow))
            End If
            Dgl1.Rows.Insert(mRow, DrSelected.Length)
            For I As Integer = 0 To DrSelected.Length - 1
                Dgl1.Item(Col1ItemType, mRow + I).Tag = AgL.XNull(DrSelected(I)("ItemTypeCode"))
                Dgl1.Item(Col1ItemType, mRow + I).Value = AgL.XNull(DrSelected(I)("ItemType"))

                Dgl1.Item(Col1ItemCategory, mRow + I).Tag = AgL.XNull(DrSelected(I)("ItemCategoryCode"))
                Dgl1.Item(Col1ItemCategory, mRow + I).Value = AgL.XNull(DrSelected(I)("ItemCategory"))

                Dgl1.Item(Col1ItemGroup, mRow + I).Tag = AgL.XNull(DrSelected(I)("ItemGroupCode"))
                Dgl1.Item(Col1ItemGroup, mRow + I).Value = AgL.XNull(DrSelected(I)("ItemGroup"))

                Dgl1.Item(Col1Item, mRow + I).Tag = AgL.XNull(DrSelected(I)("ItemCode"))
                Dgl1.Item(Col1Item, mRow + I).Value = AgL.XNull(DrSelected(I)("Item"))

                Dgl1.Item(Col1Dimension1, mRow + I).Tag = AgL.XNull(DrSelected(I)("Dimension1Code"))
                Dgl1.Item(Col1Dimension1, mRow + I).Value = AgL.XNull(DrSelected(I)("Dimension1"))

                Dgl1.Item(Col1Dimension2, mRow + I).Tag = AgL.XNull(DrSelected(I)("Dimension2Code"))
                Dgl1.Item(Col1Dimension2, mRow + I).Value = AgL.XNull(DrSelected(I)("Dimension2"))

                Dgl1.Item(Col1Dimension3, mRow + I).Tag = AgL.XNull(DrSelected(I)("Dimension3Code"))
                Dgl1.Item(Col1Dimension3, mRow + I).Value = AgL.XNull(DrSelected(I)("Dimension3"))

                Dgl1.Item(Col1Dimension4, mRow + I).Tag = AgL.XNull(DrSelected(I)("Dimension4Code"))
                Dgl1.Item(Col1Dimension4, mRow + I).Value = AgL.XNull(DrSelected(I)("Dimension4"))

                Dgl1.Item(Col1Size, mRow + I).Tag = AgL.XNull(DrSelected(I)("SizeCode"))
                Dgl1.Item(Col1Size, mRow + I).Value = AgL.XNull(DrSelected(I)("Size"))

                Dgl1.Item(Col1SalesTaxGroup, mRow + I).Tag = AgL.XNull(DrSelected(I)("SalesTaxPostingGroup"))
                Dgl1.Item(Col1SalesTaxGroup, mRow + I).Value = AgL.XNull(DrSelected(I)("SalesTaxPostingGroup"))

                Dgl1.Item(Col1SaleInvoice, mRow + I).Tag = AgL.XNull(DrSelected(I)("SaleInvoice"))
                Dgl1.Item(Col1SaleInvoice, mRow + I).Value = AgL.XNull(DrSelected(I)("SaleInvoiceNo"))
                Dgl1.Item(Col1SaleInvoiceSr, mRow + I).Value = AgL.VNull(DrSelected(I)("SaleInvoiceSr"))

                Dgl1.Item(Col1ReferenceNo, mRow + I).Value = AgL.XNull(DrSelected(I)("SaleInvoiceNo"))
                Dgl1.Item(Col1ReferenceDocId, mRow + I).Value = AgL.XNull(DrSelected(I)("SaleInvoice"))
                Dgl1.Item(Col1ReferenceDocIdTSr, mRow + I).Value = AgL.VNull(DrSelected(I)("SaleInvoiceSr"))
                Dgl1.Item(Col1ReferenceDocIdSr, mRow + I).Value = AgL.VNull(DrSelected(I)("SaleInvoiceSr"))


                Dgl1.Item(Col1Qty, mRow + I).Value = AgL.XNull(DrSelected(I)("BalanceQty"))
                Dgl1.Item(Col1DocQty, mRow + I).Value = AgL.XNull(DrSelected(I)("BalanceQty"))

                Dgl1.Item(Col1QtyDecimalPlaces, mRow + I).Value = AgL.VNull(DrSelected(I)("QtyDecimalPlaces"))
                Dgl1.Item(Col1DealQtyDecimalPlaces, mRow + I).Value = AgL.VNull(DrSelected(I)("DealQtyDecimalPlaces"))

                Dgl1.Item(Col1Rate, mRow + I).Value = AgL.XNull(DrSelected(I)("Rate"))

                Dgl1.Item(Col1Unit, mRow + I).Value = AgL.XNull(DrSelected(I)("Unit"))
                Dgl1.Item(Col1Unit, mRow + I).Tag = AgL.VNull(DrSelected(I)("ShowDimensionDetailInSales"))

                Dgl1.Item(Col1DealUnit, mRow + I).Value = AgL.XNull(DrSelected(I)("DealUnit"))


                FGetRateConsideringAllDimensions(mRow + I)
            Next

            For I As Integer = 0 To Dgl1.Rows.Count - 1
                Dgl1.Item(ColSNo, I).Value = I + 1
                FGeterateSkuName(I)
            Next
        End If
        Calculation()
    End Sub



    Private Sub FFillForFallPico()
        Dim DtTemp As DataTable
        Dim StrRtn As String = ""
        Dim bPendingOrderQry As String = ""
        Dim mRow As Integer = 0

        If AgL.StrCmp(Topctrl1.Mode, "Browse") Then Exit Sub

        Dim FrmObj As New FrmSaleInvoiceReferenceFilter
        FrmObj.IniGrid()
        FrmObj.ShowDialog()
        If FrmObj.mOkButtonPressed = False Then Exit Sub
        Dim DrSelected As DataRow() = FrmObj.DrSelected

        If DrSelected Is Nothing Then Exit Sub

        If mRow < 0 Then
            If Dgl1.Rows.Count > 1 Then
                If MsgBox("Do you want to overwrite existing data in grid ? ", MsgBoxStyle.Question + MsgBoxStyle.YesNo) = MsgBoxResult.Yes Then
                    'Dgl1.Rows.Clear() : Dgl1.RowCount = 1 : mRow = 0
                    For I As Integer = 0 To Dgl1.Rows.Count - 1
                        If Dgl1.Item(Col1IsRecordLocked, I).Value = 0 Then
                            If Not Dgl1.Rows(I).IsNewRow Then
                                Dgl1.Rows(I).Visible = False
                            End If
                        End If
                    Next
                    mRow = Dgl1.Rows.Count - 1
                Else
                    mRow = Dgl1.Rows.Count - 1
                End If
            Else
                mRow = 0
            End If
        End If

        If Dgl1.Rows(mRow).IsNewRow = False Then
            Dgl1.Rows.Remove(Dgl1.Rows(mRow))
        End If
        Dgl1.Rows.Insert(mRow, DrSelected.Length)
        For I As Integer = 0 To DrSelected.Length - 1
            Dgl1.Item(Col1ItemType, mRow + I).Tag = AgL.XNull(DrSelected(I)("ItemTypeCode"))
            Dgl1.Item(Col1ItemType, mRow + I).Value = AgL.XNull(DrSelected(I)("ItemType"))

            Dgl1.Item(Col1ItemCategory, mRow + I).Tag = AgL.XNull(DrSelected(I)("ItemCategoryCode"))
            Dgl1.Item(Col1ItemCategory, mRow + I).Value = AgL.XNull(DrSelected(I)("ItemCategory"))

            Dgl1.Item(Col1ItemGroup, mRow + I).Tag = AgL.XNull(DrSelected(I)("ItemGroupCode"))
            Dgl1.Item(Col1ItemGroup, mRow + I).Value = AgL.XNull(DrSelected(I)("ItemGroup"))

            Dgl1.Item(Col1Item, mRow + I).Tag = AgL.XNull(DrSelected(I)("ItemCode"))
            Dgl1.Item(Col1Item, mRow + I).Value = AgL.XNull(DrSelected(I)("Item"))

            Dgl1.Item(Col1SaleInvoice, mRow + I).Tag = AgL.XNull(DrSelected(I)("SaleInvoice"))
            Dgl1.Item(Col1SaleInvoice, mRow + I).Value = AgL.XNull(DrSelected(I)("SaleInvoiceNo"))
            Dgl1.Item(Col1SaleInvoiceSr, mRow + I).Value = AgL.VNull(DrSelected(I)("SaleInvoiceSr"))


            Dgl1.Item(Col1SalesTaxGroup, mRow + I).Tag = AgL.XNull(DrSelected(I)("SalesTaxPostingGroup"))
            Dgl1.Item(Col1SalesTaxGroup, mRow + I).Value = AgL.XNull(DrSelected(I)("SalesTaxPostingGroup"))


            Dgl1.Item(Col1Qty, mRow + I).Value = AgL.XNull(DrSelected(I)("Qty"))
            Dgl1.Item(Col1DocQty, mRow + I).Value = AgL.XNull(DrSelected(I)("Qty"))

            Dgl1.Item(Col1Unit, mRow + I).Value = AgL.XNull(DrSelected(I)("Unit"))
        Next

        For I As Integer = 0 To Dgl1.Rows.Count - 1
            Dgl1.Item(ColSNo, I).Value = I + 1
            FGeterateSkuName(I)
        Next
        Calculation()
    End Sub
    Private Sub FOpenSaleOrderForSaleInvoice_FallPico(mRow As Integer)
        Dim DtTemp As DataTable
        Dim StrRtn As String = ""
        Dim bPendingOrderQry As String = ""

        If AgL.StrCmp(Topctrl1.Mode, "Browse") Then Exit Sub

        bPendingOrderQry = " SELECT VOrder.SaleOrder, VOrder.SaleOrderSr, IsNull(VOrder.OrderQty,0) - IsNull(VInvoice.InvoiceQty,0) AS BalanceQty
                FROM (
                    SELECT L.DocId As SaleOrder, L.Sr As SaleOrderSr, Sum(L.Qty) AS OrderQty
                    FROM SaleOrder H 
                    LEFT JOIN SaleOrderDetail L ON H.DocID = L.DocID
                    LEFT JOIN Voucher_Type Vt ON H.V_Type = Vt.V_Type
                    Where H.SaleToParty = '" & DglMain.Item(Col1Value, rowSaleToParty).Tag & "'
	                GROUP BY L.DocId, L.Sr
                ) AS VOrder
                LEFT JOIN (
                    SELECT L.SaleOrder, L.SaleOrderSr, Sum(L.Qty) AS InvoiceQty
                    FROM SaleBillDetail L 
                    GROUP BY L.SaleOrder, L.SaleOrderSr	
                ) AS VInvoice ON VOrder.SaleOrder = VInvoice.SaleOrder AND VOrder.SaleOrderSr = VInvoice.SaleOrderSr 
                WHERE 1=1 
                And IsNull(VOrder.OrderQty,0) - IsNull(VInvoice.InvoiceQty,0) > 0 "


        mQry = " Select 'o' As Tick, L.DocID || '#' || Cast(L.Sr as Varchar) As SearchKey, 
                H.V_Type || '-' || H.ManualRefNo As SaleOrderNo, H.V_Date As SaleOrderDate, 
                H.SaleToPartyName, H.SaleToPartyMobile,
                Ic.Description As ItemCategory, Ig.Description As ItemGroup, I.Description As Item,
                D1.Description As Dimension1, D2.Description As Dimension2, 
                D3.Description As Dimension3, D4.Description As Dimension4,
                Size.Description As Size, VPendingOrder.BalanceQty, L.Unit, L.Rate,
                Ic.Code As ItemCategoryCode, Ig.Code As ItemGroupCode, I.Code As ItemCode,
                D1.Code As Dimension1Code, D2.Code As Dimension2Code, 
                D3.Code As Dimension3Code, D4.Code As Dimension4Code, I.SalesTaxPostingGroup,
                Size.Code As SizeCode, It.Code As ItemTypeCode, It.Name As ItemType, 
                VPendingOrder.SaleOrder, VPendingOrder.SaleOrderSr,
                Case When IfNull(U.ShowDimensionDetailInSales,0) = 1 Or IfNull(Ic.ShowDimensionDetailInSales,0) = 1 Then 1
                        Else 0 End As ShowDimensionDetailInSales, 
                U.DecimalPlaces as QtyDecimalPlaces, DU.DecimalPlaces as DealQtyDecimalPlaces, I.DealUnit,
                H.Process, P.Name As ProcessDesc, L.Remark 
                FROM (" & bPendingOrderQry & ") As VPendingOrder
                LEFT JOIN SaleOrderDetail L On VPendingOrder.SaleOrder = L.DocId And VPendingOrder.SaleOrderSr = L.Sr 
                LEFT JOIN SaleOrder H On L.DocId = H.DocId 
                LEFT JOIN SubGroup P With (NoLock) On H.Process = P.SubCode
                LEFT JOIN Item Sku ON Sku.Code = L.Item
                LEFT JOIN Item I ON I.Code = IsNull(Sku.BaseItem,Sku.Code) And I.V_Type <> '" & ItemV_Type.SKU & "'
                LEFT JOIN ItemType It On Sku.ItemType = It.Code
                LEFT JOIN Item IC On IsNull(Sku.ItemCategory,Sku.code) = IC.Code
                LEFT JOIN Item IG On Sku.ItemGroup = IG.Code
                LEFT JOIN Item D1 ON D1.Code = Sku.Dimension1  
                LEFT JOIN Item D2 ON D2.Code = Sku.Dimension2
                LEFT JOIN Item D3 ON D3.Code = Sku.Dimension3
                LEFT JOIN Item D4 ON D4.Code = Sku.Dimension4
                LEFT JOIN Item Size ON Size.Code = Sku.Size 
                Left Join Unit U  With (NoLock) On I.Unit = U.Code 
                LEFT JOIN Unit Du With (NoLock) On I.DealUnit = Du.Code 
                Where 1=1 "

        If mRow >= 0 Then
            If AgL.XNull(Dgl1.Item(Col1ItemCategory, mRow).Tag) <> "" Then
                mQry += " And Ic.Code = '" & Dgl1.Item(Col1ItemCategory, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1ItemGroup, mRow).Tag) <> "" Then
                mQry += " And Ig.Code = '" & Dgl1.Item(Col1ItemGroup, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Item, mRow).Tag) <> "" Then
                mQry += " And I.Code = '" & Dgl1.Item(Col1Item, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Dimension1, mRow).Tag) <> "" Then
                mQry += " And D1.Code = '" & Dgl1.Item(Col1Dimension1, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Dimension2, mRow).Tag) <> "" Then
                mQry += " And D2.Code = '" & Dgl1.Item(Col1Dimension2, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Dimension3, mRow).Tag) <> "" Then
                mQry += " And D3.Code = '" & Dgl1.Item(Col1Dimension3, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Dimension4, mRow).Tag) <> "" Then
                mQry += " And D4.Code = '" & Dgl1.Item(Col1Dimension4, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Size, mRow).Tag) <> "" Then
                mQry += " And Size.Code = '" & Dgl1.Item(Col1Size, mRow).Tag & "'"
            End If
        End If

        DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)

        Dim FRH_Multiple As DMHelpGrid.FrmHelpGrid_Multi
        FRH_Multiple = New DMHelpGrid.FrmHelpGrid_Multi(New DataView(DtTemp), "", 400, 990, , , False)
        FRH_Multiple.FFormatColumn(0, "Tick", 40, DataGridViewContentAlignment.MiddleCenter, True)
        FRH_Multiple.FFormatColumn(1, , 0, , False)
        FRH_Multiple.FFormatColumn(2, "Order No.", 90, DataGridViewContentAlignment.MiddleLeft)
        FRH_Multiple.FFormatColumn(3, "Order Date", 100, DataGridViewContentAlignment.MiddleLeft)
        FRH_Multiple.FFormatColumn(4, "Party", 90, DataGridViewContentAlignment.MiddleLeft)
        FRH_Multiple.FFormatColumn(5, "Phone", 90, DataGridViewContentAlignment.MiddleLeft)
        FRH_Multiple.FFormatColumn(6, AgL.PubCaptionItemCategory, 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[ItemCategory] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(7, AgL.PubCaptionItemGroup, 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[ItemGroup] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(8, AgL.PubCaptionItem, 180, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Item] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(9, AgL.PubCaptionDimension1, 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension1] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(10, AgL.PubCaptionDimension2, 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension2] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(11, AgL.PubCaptionDimension3, 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension3] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(12, AgL.PubCaptionDimension4, 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension4] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(13, "Size", 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Size] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(14, "Bal Qty", 90, DataGridViewContentAlignment.MiddleRight)
        FRH_Multiple.FFormatColumn(15, "Unit", 70, DataGridViewContentAlignment.MiddleLeft)
        FRH_Multiple.FFormatColumn(16, "Rate", 70, DataGridViewContentAlignment.MiddleLeft)

        FRH_Multiple.FFormatColumn(17, , 0, , False)
        FRH_Multiple.FFormatColumn(18, , 0, , False)
        FRH_Multiple.FFormatColumn(19, , 0, , False)
        FRH_Multiple.FFormatColumn(20, , 0, , False)
        FRH_Multiple.FFormatColumn(21, , 0, , False)
        FRH_Multiple.FFormatColumn(22, , 0, , False)
        FRH_Multiple.FFormatColumn(23, , 0, , False)
        FRH_Multiple.FFormatColumn(24, , 0, , False)
        FRH_Multiple.FFormatColumn(25, , 0, , False)
        FRH_Multiple.FFormatColumn(26, , 0, , False)
        FRH_Multiple.FFormatColumn(27, , 0, , False)
        FRH_Multiple.FFormatColumn(28, , 0, , False)
        FRH_Multiple.FFormatColumn(29, , 0, , False)
        FRH_Multiple.FFormatColumn(30, , 0, , False)
        FRH_Multiple.FFormatColumn(31, , 0, , False)
        FRH_Multiple.FFormatColumn(32, , 0, , False)
        FRH_Multiple.FFormatColumn(33, , 0, , False)

        FRH_Multiple.StartPosition = FormStartPosition.CenterScreen
        FRH_Multiple.ShowDialog()

        If FRH_Multiple.BytBtnValue = 0 Then
            StrRtn = FRH_Multiple.FFetchData(1, "'", "'", ",", True)
        End If

        Dim DrSelected As DataRow()
        If StrRtn <> "" Then
            DrSelected = DtTemp.Select("SearchKey In (" & StrRtn & ")")

            If mRow < 0 Then
                If Dgl1.Rows.Count > 1 Then
                    If MsgBox("Do you want to overwrite existing data in grid ? ", MsgBoxStyle.Question + MsgBoxStyle.YesNo) = MsgBoxResult.Yes Then
                        'Dgl1.Rows.Clear() : Dgl1.RowCount = 1 : mRow = 0
                        For I As Integer = 0 To Dgl1.Rows.Count - 1
                            If Dgl1.Item(Col1IsRecordLocked, I).Value = 0 Then
                                If Not Dgl1.Rows(I).IsNewRow Then
                                    Dgl1.Rows(I).Visible = False
                                End If
                            End If
                        Next
                        mRow = Dgl1.Rows.Count - 1
                    Else
                        mRow = Dgl1.Rows.Count - 1
                    End If
                Else
                    mRow = 0
                End If
            End If

            If Dgl1.Rows(mRow).IsNewRow = False Then
                Dgl1.Rows.Remove(Dgl1.Rows(mRow))
            End If
            Dgl1.Rows.Insert(mRow, DrSelected.Length)
            For I As Integer = 0 To DrSelected.Length - 1
                Dgl1.Item(Col1ItemType, mRow + I).Tag = AgL.XNull(DrSelected(I)("ItemTypeCode"))
                Dgl1.Item(Col1ItemType, mRow + I).Value = AgL.XNull(DrSelected(I)("ItemType"))

                Dgl1.Item(Col1ItemCategory, mRow + I).Tag = AgL.XNull(DrSelected(I)("ItemCategoryCode"))
                Dgl1.Item(Col1ItemCategory, mRow + I).Value = AgL.XNull(DrSelected(I)("ItemCategory"))

                Dgl1.Item(Col1ItemGroup, mRow + I).Tag = AgL.XNull(DrSelected(I)("ItemGroupCode"))
                Dgl1.Item(Col1ItemGroup, mRow + I).Value = AgL.XNull(DrSelected(I)("ItemGroup"))

                Dgl1.Item(Col1Item, mRow + I).Tag = AgL.XNull(DrSelected(I)("ItemCode"))
                Dgl1.Item(Col1Item, mRow + I).Value = AgL.XNull(DrSelected(I)("Item"))

                Dgl1.Item(Col1Dimension1, mRow + I).Tag = AgL.XNull(DrSelected(I)("Dimension1Code"))
                Dgl1.Item(Col1Dimension1, mRow + I).Value = AgL.XNull(DrSelected(I)("Dimension1"))

                Dgl1.Item(Col1Dimension2, mRow + I).Tag = AgL.XNull(DrSelected(I)("Dimension2Code"))
                Dgl1.Item(Col1Dimension2, mRow + I).Value = AgL.XNull(DrSelected(I)("Dimension2"))

                Dgl1.Item(Col1Dimension3, mRow + I).Tag = AgL.XNull(DrSelected(I)("Dimension3Code"))
                Dgl1.Item(Col1Dimension3, mRow + I).Value = AgL.XNull(DrSelected(I)("Dimension3"))

                Dgl1.Item(Col1Dimension4, mRow + I).Tag = AgL.XNull(DrSelected(I)("Dimension4Code"))
                Dgl1.Item(Col1Dimension4, mRow + I).Value = AgL.XNull(DrSelected(I)("Dimension4"))

                Dgl1.Item(Col1Size, mRow + I).Tag = AgL.XNull(DrSelected(I)("SizeCode"))
                Dgl1.Item(Col1Size, mRow + I).Value = AgL.XNull(DrSelected(I)("Size"))

                Dgl1.Item(Col1SalesTaxGroup, mRow + I).Tag = AgL.XNull(DrSelected(I)("SalesTaxPostingGroup"))
                Dgl1.Item(Col1SalesTaxGroup, mRow + I).Value = AgL.XNull(DrSelected(I)("SalesTaxPostingGroup"))

                Dgl1.Item(Col1SaleInvoice, mRow + I).Tag = AgL.XNull(DrSelected(I)("SaleOrder"))
                Dgl1.Item(Col1SaleInvoice, mRow + I).Value = AgL.XNull(DrSelected(I)("SaleOrderNo"))
                Dgl1.Item(Col1SaleInvoiceSr, mRow + I).Value = AgL.VNull(DrSelected(I)("SaleOrderSr"))

                Dgl1.Item(Col1ReferenceNo, mRow + I).Value = AgL.XNull(DrSelected(I)("SaleOrderNo"))
                Dgl1.Item(Col1ReferenceDocId, mRow + I).Value = AgL.XNull(DrSelected(I)("SaleOrder"))
                Dgl1.Item(Col1ReferenceDocIdTSr, mRow + I).Value = AgL.VNull(DrSelected(I)("SaleOrderSr"))
                Dgl1.Item(Col1ReferenceDocIdSr, mRow + I).Value = AgL.VNull(DrSelected(I)("SaleOrderSr"))


                Dgl1.Item(Col1Qty, mRow + I).Value = AgL.XNull(DrSelected(I)("BalanceQty"))
                Dgl1.Item(Col1DocQty, mRow + I).Value = AgL.XNull(DrSelected(I)("BalanceQty"))

                Dgl1.Item(Col1QtyDecimalPlaces, mRow + I).Value = AgL.VNull(DrSelected(I)("QtyDecimalPlaces"))
                Dgl1.Item(Col1DealQtyDecimalPlaces, mRow + I).Value = AgL.VNull(DrSelected(I)("DealQtyDecimalPlaces"))

                Dgl1.Item(Col1Rate, mRow + I).Value = AgL.XNull(DrSelected(I)("Rate"))

                Dgl1.Item(Col1Unit, mRow + I).Value = AgL.XNull(DrSelected(I)("Unit"))
                Dgl1.Item(Col1Unit, mRow + I).Tag = AgL.VNull(DrSelected(I)("ShowDimensionDetailInSales"))

                Dgl1.Item(Col1DealUnit, mRow + I).Value = AgL.XNull(DrSelected(I)("DealUnit"))

                Dgl1.Item(Col1Remark, mRow + I).Value = AgL.XNull(DrSelected(I)("Remark"))

                DglMain.Item(Col1Value, rowSaleToPartyName).Value = AgL.XNull(DrSelected(I)("SaleToPartyName"))
                DglMain.Item(Col1Value, rowSaleToPartyMobile).Value = AgL.XNull(DrSelected(I)("SaleToPartyMobile"))

                DglMain.Item(Col1Value, rowProcess).Tag = AgL.XNull(DrSelected(I)("Process"))
                DglMain.Item(Col1Value, rowProcess).Value = AgL.XNull(DrSelected(I)("ProcessDesc"))


                If DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag IsNot Nothing Then
                    CType(DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag, FrmSaleInvoiceParty_WithDimension).Dgl1.Item(FrmSaleInvoiceParty_WithDimension.Col1Value, FrmSaleInvoiceParty_WithDimension.rowPartyName).Value = DglMain.Item(Col1Value, rowSaleToPartyName).Value
                    CType(DglMain.Item(Col1BtnDetail, rowSaleToParty).Tag, FrmSaleInvoiceParty_WithDimension).Dgl1.Item(FrmSaleInvoiceParty_WithDimension.Col1Value, FrmSaleInvoiceParty_WithDimension.rowMobile).Value = DglMain.Item(Col1Value, rowSaleToPartyMobile).Value
                End If

                FGetRateConsideringAllDimensions(mRow + I)
            Next

            For I As Integer = 0 To Dgl1.Rows.Count - 1
                Dgl1.Item(ColSNo, I).Value = I + 1
                FGeterateSkuName(I)
            Next
        End If
        Calculation()
    End Sub
    Private Function FCreateHelpProcess() As DataSet
        Dim strCond As String = ""

        Dim FilterInclude_Process As String = FGetSettings(SettingFields.FilterInclude_Process, SettingType.General)
        If FilterInclude_Process <> "" Then
            strCond += " And (CharIndex('+' || Sg.Code,'" & FilterInclude_Process & "') > 0 Or
                                CharIndex('+' || Sg.Parent,'" & FilterInclude_Process & "') > 0) "
        End If

        mQry = "SELECT Code, Name From viewHelpSubgroup Sg  With (NoLock) 
                Where SubgroupType ='" & SubgroupType.Process & "' 
                And IfNull(Sg.Status,'" & AgTemplate.ClsMain.EntryStatus.Active & "') = '" & AgTemplate.ClsMain.EntryStatus.Active & "' " & strCond
        FCreateHelpProcess = AgL.FillData(mQry, AgL.GCn)
    End Function
    Private Sub ShowSaleInvoiceReceipt()
        If Dgl2.Item(Col1Value, rowBtnMoneyReceived).Tag IsNot Nothing Then
            Dgl2.Item(Col1Value, rowBtnMoneyReceived).Tag.objFrmSaleInvoice = Me
            Dgl2.Item(Col1Value, rowBtnMoneyReceived).Tag.EntryMode = Topctrl1.Mode
            Dgl2.Item(Col1Value, rowBtnMoneyReceived).Tag.ShowDialog()
        Else
            Dim FrmObj As FrmSaleInvoiceReceipt
            FrmObj = New FrmSaleInvoiceReceipt
            FrmObj.objFrmSaleInvoice = Me
            FrmObj.IniGrid(mSearchCode)
            FrmObj.EntryMode = Topctrl1.Mode
            Dgl2.Item(Col1Value, rowBtnMoneyReceived).Tag = FrmObj
            Dgl2.Item(Col1Value, rowBtnMoneyReceived).Tag.ShowDialog()
        End If
    End Sub

    Private Sub DglOtherCharges_EditingControl_KeyDown(sender As Object, e As KeyEventArgs) Handles DglOtherCharges.EditingControl_KeyDown
        Dim bRowIndex As Integer = 0, bColumnIndex As Integer = 0
        Dim bItemCode As String = ""
        Dim DrTemp As DataRow() = Nothing
        Try
            bRowIndex = DglOtherCharges.CurrentCell.RowIndex
            bColumnIndex = DglOtherCharges.CurrentCell.ColumnIndex

            If e.KeyCode = Keys.Enter Then Exit Sub



            Select Case DglOtherCharges.Columns(DglOtherCharges.CurrentCell.ColumnIndex).Name
                Case Col7ChargeSubocde
                    If e.KeyCode <> Keys.Enter And e.KeyCode <> Keys.Insert Then
                        If DglOtherCharges.AgHelpDataSet(Col7ChargeSubocde) Is Nothing Then
                            mQry = "Select Sg.SubCode, Sg.Name from Subgroup Sg Left Join AcGroup AG On Sg.groupCode = Ag.GroupCode Where  Ag.GroupNature in ('E','R') Order By Sg.Name "
                            DglOtherCharges.AgHelpDataSet(Col7ChargeSubocde) = AgL.FillData(mQry, AgL.GCn)
                        End If
                    End If
                Case Col7ChargeType
                    If e.KeyCode <> Keys.Enter And e.KeyCode <> Keys.Insert Then
                        If DglOtherCharges.AgHelpDataSet(Col7ChargeType) Is Nothing Then
                            mQry = "Select 'Addition' as Code, 'Addition' as Name
                                    Union All
                                    Select 'Deduction' as Code, 'Deduction' as Name"
                            DglOtherCharges.AgHelpDataSet(Col7ChargeType) = AgL.FillData(mQry, AgL.GCn)
                        End If
                    End If
            End Select
            Calculation()

        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub
End Class




