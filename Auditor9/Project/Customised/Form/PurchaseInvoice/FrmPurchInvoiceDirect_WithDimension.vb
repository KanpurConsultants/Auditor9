Imports CrystalDecisions.CrystalReports.Engine
Imports CrystalDecisions.Windows.Forms
Imports System.Data.SQLite
Imports AgLibrary.ClsMain.agConstants
Imports Microsoft.Reporting.WinForms
Imports System.Xml
Imports System.IO
Imports Customised.ClsMain
Imports System.Linq
Imports System.ComponentModel
Public Class FrmPurchInvoiceDirect_WithDimension
    Inherits AgTemplate.TempTransaction1
    Dim mQry$

    Public Event BaseFunction_MoveRecLine(ByVal SearchCode As String, ByVal Sr As Integer, ByVal mGridRow As Integer)
    Public Event BaseEvent_Save_InTransLine(ByVal SearchCode As String, ByVal Sr As Integer, ByVal mGridRow As Integer, ByVal Conn As Object, ByVal Cmd As Object)

    Public WithEvents AgCalcGrid1 As New AgStructure.AgCalcGrid
    Public WithEvents AgCustomGrid1 As New AgCustomFields.AgCustomGrid

    Public WithEvents Dgl1 As New AgControls.AgDataGrid
    Public Const ColSNo As String = "S.No."
    Public Const Col1Barcode As String = "Barcode"
    Public Const Col1ItemType As String = "Item Type"
    Public Const Col1SKU As String = "SKU"
    Public Const Col1ItemCategory As String = "Item Category"
    Public Const Col1ItemGroup As String = "Item Group"
    Public Const Col1ItemCode As String = "Item Code"
    Public Const Col1Item As String = "Item"
    Public Const Col1Dimension1 As String = "Dimension1"
    Public Const Col1Dimension2 As String = "Dimension2"
    Public Const Col1Dimension3 As String = "Dimension3"
    Public Const Col1Dimension4 As String = "Dimension4"
    Public Const Col1Size As String = "Size"
    Public Const Col1Specification As String = "Specification"
    Public Const Col1ItemState As String = "Item State"
    Public Const Col1BaleNo As String = "Bale No"
    Public Const Col1LotNo As String = "Lot No"
    Public Const Col1SalesTaxGroup As String = "Sales Tax Group Item"
    Public Const Col1DocQty As String = "Doc Qty"
    Public Const Col1FreeQty As String = "Free Qty"
    Public Const Col1RejQty As String = "Rej Qty"
    Public Const Col1LossQty As String = "Loss Qty"
    Public Const Col1Qty As String = "Qty"
    Public Const Col1Unit As String = "Unit"
    Public Const Col1QtyDecimalPlaces As String = "Qty Decimal Places"
    Public Const Col1Pcs As String = "Pcs"
    Public Const Col1UnitMultiplier As String = "Unit Multiplier"
    Public Const Col1PcsPerMeasure As String = "Pcs Per Measure"

    Public Const Col1DocDealQty As String = "Doc Deal Qty"
    Public Const Col1FreeDealQty As String = "Free Deal Qty"
    Public Const Col1LossDealQtyPer As String = "Loss Deal Qty @"
    Public Const Col1LossDealQty As String = "Loss Deal Qty"
    Public Const Col1DealQty As String = "Deal Qty"

    Public Const Col1DealUnit As String = "Deal Unit"
    Public Const Col1DealQtyDecimalPlaces As String = "Deal Qty Decimal Places"
    Public Const Col1StockUnitMultiplier As String = "Stock Unit Multiplier"
    Public Const Col1StockUnit As String = "Stock Unit"
    Public Const Col1StockQty As String = "Stock Qty"
    Public Const Col1StockQtyDecimalPlaces As String = "Stock Qty Decimal Places"
    Public Const Col1Rate As String = "Rate"
    Public Const Col1DiscountPer As String = "Disc. %"
    Public Const Col1DiscountAmount As String = "Disc. Amt"
    Public Const Col1AdditionalDiscountPer As String = "Add. Disc. %"
    Public Const Col1AdditionalDiscountAmount As String = "Add. Disc. Amt"
    Public Const Col1AdditionPer As String = "Addition %"
    Public Const Col1AdditionAmount As String = "Addition Amt"
    Public Const Col1Amount As String = "Amount"
    Public Const Col1ExpiryDate As String = "Expiry Date"
    Public Const Col1FromProcess As String = "From Process"
    Public Const Col1Catalog As String = "Catalog"
    Public Const Col1Remark As String = "Remark"
    Public Const Col1Godown As String = "Godown"
    Public Const Col1FromGodown As String = "From Godown"
    Public Const Col1ToGodown As String = "To Godown"
    Public Const Col1MRP As String = "MRP"
    Public Const Col1Deal As String = "Deal"
    Public Const Col1DealAmount As String = "Deal Amount"
    Public Const Col1ProfitMarginPer As String = "Profit Margin %"
    Public Const Col1SaleRate As String = "Sale Rate"
    Public Const Col1LRNo As String = "L.R. No."
    Public Const Col1LRDate As String = "L.R. Date"
    Public Const Col1HSN As String = "HSN"
    Public Const Col1ReferenceNo As String = "Reference No"
    Public Const Col1ReferenceDate As String = "Reference Date"
    Public Const Col1ReferenceDocID As String = "Reference DocID"
    Public Const Col1ReferenceTSr As String = "Reference TSr"
    Public Const Col1ReferenceSr As String = "Reference Sr"
    Public Const Col1ReferenceDocIdDate As String = "Reference DocID Date"
    Public Const Col1ReferenceDocIdBalanceQty As String = "Reference DocID Balance Qty"
    Public Const Col1PurchaseInvoice As String = "Purchase Invoice DocID"
    Public Const Col1PurchaseInvoiceSr As String = "Purchase Invoice Sr"
    Public Const Col1SaleInvoice As String = "Sale Invoice DocID"
    Public Const Col1SaleInvoiceSr As String = "Sale Invoice Sr"
    Public Const Col1PurchasePlan As String = "Purchase Plan DocID"
    Public Const Col1PurchasePlanSr As String = "Purchase Plan Sr"
    Public Const Col1StockProcess As String = "Stock Process DocID"
    Public Const Col1StockProcessTSr As String = "Stock Process TSr"
    Public Const Col1StockProcessSr As String = "Stock Process Sr"
    Public Const Col1DefaultDiscountPer As String = "Default Discount %"
    Public Const Col1DefaultAdditionalDiscountPer As String = "Default Additional Discount %"
    Public Const Col1DefaultAdditionPer As String = "Default Addition %"
    Public Const Col1PersonalDiscountPer As String = "Personal Discount %"
    Public Const Col1PersonalAdditionalDiscountPer As String = "Personal Additional Discount %"
    Public Const Col1PersonalAdditionPer As String = "Personal Addition %"
    Public Const Col1DiscountCalculationPattern As String = "Discount Calculation Pattern"
    Public Const Col1AdditionalDiscountCalculationPattern As String = "Additional Discount Calculation Pattern"
    Public Const Col1AdditionCalculationPattern As String = "Additional Calculation Pattern"
    Public Const Col1RawMaterial As String = "Raw Material"
    Public Const Col1RawMaterialConsumptionQty As String = "Raw Material Consumption Qty"
    Public Const Col1TransactionStockProcessSr As String = "Transaction Stock Process Sr"
    Public Const Col1TransactionStockSr As String = "Stock Sr"
    Public Const Col1IsNewItemAllowedPurch As String = "Is New Item Allowed"
    Public Const Col1IsNewDimension1AllowedPurch As String = "Is New Dimension1 Allowed Purch"
    Public Const Col1IsNewDimension2AllowedPurch As String = "Is New Dimension2 Allowed Purch"
    Public Const Col1IsNewDimension3AllowedPurch As String = "Is New Dimension3 Allowed Purch"
    Public Const Col1IsNewDimension4AllowedPurch As String = "Is New Dimension4 Allowed Purch"
    Public Const Col1BarcodeType As String = "Barcode Type"
    Public Const Col1BarcodePattern As String = "Barcode Pattern"
    Public Const Col1BarcodeGenDocId As String = "Barcode Gen DocId"
    Public Const Col1BarcodeGenSr As String = "Barcode Gen Sr"

    Public Const Col1IsRecordLocked As String = "Is Record Locked"

    Public Const Col1MItemCategory As String = "M Item Category"
    Public Const Col1MItemGroup As String = "M Item Group"
    Public Const Col1MItemSpecification As String = "M Item Specification"
    Public Const Col1MDimension1 As String = "M Dimension 1"
    Public Const Col1MDimension2 As String = "M Dimension 2"
    Public Const Col1MDimension3 As String = "M Dimension 3"
    Public Const Col1MDimension4 As String = "M Dimension 4"
    Public Const Col1MSize As String = "M Size"

    Dim WithEvents GridReportFrm As AgLibrary.FrmRepDisplay

    Dim IsSameUnit As Boolean = True
    Dim IsSameDealUnit As Boolean = True
    Dim IsSameDeliveryDealUnit As Boolean = True

    Dim intQtyDecimalPlaces As Integer = 0
    Dim intDealDecimalPlaces As Integer = 0
    Dim intDeliveryDealDecimalPlaces As Integer = 0

    Dim DtItemTypeSettingsAll As DataTable

    Dim UserMovedOverItemGroup As Boolean
    Dim UserMovedOverItemCategory As Boolean

    Dim DtItemRelation As DataTable
    Dim DtItemMargin As DataTable

    Public WithEvents Dgl2 As New AgControls.AgDataGrid

    Public rowProcess As Integer = 6
    Public rowPrevProcess As Integer = 7
    Public rowFirstProcessOfCombination As Integer = 8
    Public rowLastProcessOfCombination As Integer = 9
    Public rowVendor As Integer = 10
    Public rowBillToParty As Integer = 11
    Public rowLinkedParty As Integer = 12

    Public rowStructure As Integer = 0
    Public rowVendorDocNo As Integer = 1
    Public rowVendorDocDate As Integer = 2
    Public rowDeliveryDate As Integer = 3
    Public rowAgent As Integer = 4
    Public rowTags As Integer = 5
    Public rowGodown As Integer = 6
    Public rowFromGodown As Integer = 7
    Public rowToGodown As Integer = 8
    Public rowShipToParty As Integer = 9
    Public rowSalesTaxNo As Integer = 10
    Public rowRateType As Integer = 11
    Public rowFromProcess As Integer = 12
    Public rowCatalog As Integer = 13
    Public rowStockInNo As Integer = 14
    Public rowRemarks As Integer = 15
    Public rowBtnTransportDetail As Integer = 16
    Public rowBtnPendingPurchOrder As Integer = 17
    Public rowBtnPendingPurchPlan As Integer = 18
    Public rowBtnPendingStockReceive As Integer = 19
    Public rowBtnMaterialIssue As Integer = 20
    Public rowBtnStockBalance As Integer = 21
    Public rowBtnPendingSaleInvoiceForPurchInvoice As Integer = 22
    Public rowBtnAttachments As Integer = 23
    Public rowPaidAmount As Integer = 24


    Public Const hcProcess As String = "Process"
    Public Const hcPrevProcess As String = "Prev Process"
    Public Const hcFirstProcessOfCombination As String = "First Process Of Combination"
    Public Const hcLastProcessOfCombination As String = "Last Process Of Combination"
    Public Const hcVendor As String = "Vendor"
    Public Const hcBillToParty As String = "Bill To Party"
    Public Const hcLinkedParty As String = "Linked Party"

    Public Const hcStructure As String = "Structure"
    Public Const hcVendorDocNo As String = "Vendor Doc No"
    Public Const hcVendorDocDate As String = "Vendor Doc Date"
    Public Const hcDeliveryDate As String = "Delivery Date"
    Public Const hcShipToParty As String = "Ship to Party"
    Public Const hcAgent As String = "Agent"
    Public Const hcTags As String = "Tags"
    Public Const hcGodown As String = "Godown"
    Public Const hcFromGodown As String = "From Godown"
    Public Const hcToGodown As String = "To Godown"
    Public Const hcSalesTaxNo As String = "GST No"
    Public Const hcRateType As String = "Rate Type"
    Public Const hcFromProcess As String = "From Process"
    Public Const hcCatalog As String = "Catalog"
    Public Const hcStockInNo As String = "Stock In No"
    Public Const hcRemarks As String = "Remarks"
    Public Const hcBtnTransportDetail As String = "Transport Detail"
    Public Const hcBtnPendingPurchOrder As String = "Pending Orders"
    Public Const hcBtnPendingPurchPlan As String = "Pending Plans"
    Public Const hcBtnPendingStockReceive As String = "Pending Receipts"
    Public Const hcBtnMaterialIssue As String = "Material Issue"
    Public Const hcBtnStockBalance As String = "Stock Balance"
    Public Const hcBtnPendingSaleInvoiceForPurchInvoice = "Pending Sale Invoice"
    Public Const hcBtnAttachments As String = "Attachments"
    Public Const hcPaidAmount As String = "Paid Amount"


    Public WithEvents Dgl4 As New AgControls.AgDataGrid
    Public Const Col4Sku As String = "Sku"
    Public Const Col4ItemCategory As String = "Item Category"
    Public Const Col4Item As String = "Item"
    Public Const Col4Dimension1 As String = "Dimension1"
    Public Const Col4Dimension2 As String = "Dimension2"
    Public Const Col4Dimension3 As String = "Dimension3"
    Public Const Col4Dimension4 As String = "Dimension4"
    Public Const Col4Qty As String = "Qty"
    Public Const Col4Unit As String = "Unit"
    Public Const Col4ConsiderInIssueYN As String = "Consider In Issue"
    Public Const Col4CurrentStock As String = "Current Stock"
    Public Const Col4CurrentStockProcess As String = "Current Stock Process"
    Public Const Col4Wastage As String = "Wastage"

    Dim SettingFields_CalculateAmountOn As String = ""
    Dim SettingFields_MaximumItemLimit As Integer = 0


    Dim mV_Type As String = ""
    Dim mIsEntryLocked As Boolean = False
    Public WithEvents LblTotalPcs As Label
    Public WithEvents LblTotalPcsText As Label
    Friend WithEvents MnuShowLedgerPosting As ToolStripMenuItem
    Dim mFirstInvoiceForSelectedParty As Boolean = False


    Public Sub New(ByVal StrUPVar As String, ByVal DTUP As DataTable, ByVal strNCat As String, Optional ByVal strCustomUI As String = "")
        ' This call is required by the Windows Form Designer.
        InitializeComponent()
        ' Add any initialization after the InitializeComponent() call.
        Topctrl1.FSetParent(Me, StrUPVar, DTUP)
        Topctrl1.SetDisp(True)

        EntryNCat = strNCat
        mCustomUI = strCustomUI

        mQry = "Select H.* from PurchaseInvoiceSetting H  With (NoLock) Left Join Voucher_Type Vt  With (NoLock) On H.V_Type = Vt.V_Type  Where Vt.NCat In ('" & EntryNCat & "') Or H.V_Type Is Null  "
        DtV_TypeSettings = AgL.FillData(mQry, AgL.GCn).Tables(0)
    End Sub

#Region "Form Designer Code"
    Private Sub InitializeComponent()
        Me.components = New System.ComponentModel.Container()
        Me.Dgl1 = New AgControls.AgDataGrid()
        Me.PnlTotals = New System.Windows.Forms.Panel()
        Me.LblTotalPcs = New System.Windows.Forms.Label()
        Me.LblTotalPcsText = New System.Windows.Forms.Label()
        Me.LblTotalDealQty = New System.Windows.Forms.Label()
        Me.LblTotalDealQtyText = New System.Windows.Forms.Label()
        Me.LblTotalQty = New System.Windows.Forms.Label()
        Me.LblTotalAmount = New System.Windows.Forms.Label()
        Me.LblTotalQtyText = New System.Windows.Forms.Label()
        Me.LblTotalAmountText = New System.Windows.Forms.Label()
        Me.Pnl1 = New System.Windows.Forms.Panel()
        Me.TxtStructure = New AgControls.AgTextBox()
        Me.Label25 = New System.Windows.Forms.Label()
        Me.PnlCalcGrid = New System.Windows.Forms.Panel()
        Me.PnlCustomGrid = New System.Windows.Forms.Panel()
        Me.TxtCustomFields = New AgControls.AgTextBox()
        Me.TxtNature = New AgControls.AgTextBox()
        Me.TP2 = New System.Windows.Forms.TabPage()
        Me.OFDMain = New System.Windows.Forms.OpenFileDialog()
        Me.MnuOptions = New System.Windows.Forms.ContextMenuStrip(Me.components)
        Me.MnuImportFromExcel = New System.Windows.Forms.ToolStripMenuItem()
        Me.MnuImportFromDos = New System.Windows.Forms.ToolStripMenuItem()
        Me.MnuImportFromTally = New System.Windows.Forms.ToolStripMenuItem()
        Me.MnuImportOpeningFromExcel = New System.Windows.Forms.ToolStripMenuItem()
        Me.MnuEditSave = New System.Windows.Forms.ToolStripMenuItem()
        Me.MnuGenerateEWayBill = New System.Windows.Forms.ToolStripMenuItem()
        Me.MnuPrintBarcode = New System.Windows.Forms.ToolStripMenuItem()
        Me.MnuRequestForPermission = New System.Windows.Forms.ToolStripMenuItem()
        Me.MnuReferenceEntries = New System.Windows.Forms.ToolStripMenuItem()
        Me.MnuWizard = New System.Windows.Forms.ToolStripMenuItem()
        Me.MnuHistory = New System.Windows.Forms.ToolStripMenuItem()
        Me.Label6 = New System.Windows.Forms.Label()
        Me.LblCurrentBalance = New System.Windows.Forms.Label()
        Me.Pnl2 = New System.Windows.Forms.Panel()
        Me.LblBarcode = New System.Windows.Forms.Label()
        Me.TxtBarcode = New AgControls.AgTextBox()
        Me.Pnl4 = New System.Windows.Forms.Panel()
        Me.CheckBoxFullCalculate = New System.Windows.Forms.CheckBox()
        Me.PnlConsumptionTotal = New System.Windows.Forms.Panel()
        Me.LblTotalBomQty = New System.Windows.Forms.Label()
        Me.Label5 = New System.Windows.Forms.Label()
        Me.MnuShowLedgerPosting = New System.Windows.Forms.ToolStripMenuItem()
        Me.GroupBox2.SuspendLayout()
        Me.GBoxMoveToLog.SuspendLayout()
        Me.GBoxApprove.SuspendLayout()
        Me.GBoxEntryType.SuspendLayout()
        Me.GrpUP.SuspendLayout()
        Me.GBoxDivision.SuspendLayout()
        Me.TabControl1.SuspendLayout()
        Me.TP1.SuspendLayout()
        CType(Me.DTMaster, System.ComponentModel.ISupportInitialize).BeginInit()
        CType(Me.Dgl1, System.ComponentModel.ISupportInitialize).BeginInit()
        Me.PnlTotals.SuspendLayout()
        Me.MnuOptions.SuspendLayout()
        Me.PnlConsumptionTotal.SuspendLayout()
        Me.SuspendLayout()
        '
        'GroupBox2
        '
        Me.GroupBox2.Location = New System.Drawing.Point(625, 575)
        Me.GroupBox2.Size = New System.Drawing.Size(148, 40)
        '
        'TxtStatus
        '
        Me.TxtStatus.AgSelectedValue = ""
        Me.TxtStatus.Location = New System.Drawing.Point(29, 19)
        Me.TxtStatus.Tag = ""
        '
        'CmdStatus
        '
        Me.CmdStatus.Size = New System.Drawing.Size(26, 19)
        '
        'GBoxMoveToLog
        '
        Me.GBoxMoveToLog.Location = New System.Drawing.Point(143, 576)
        Me.GBoxMoveToLog.Size = New System.Drawing.Size(148, 40)
        '
        'TxtMoveToLog
        '
        Me.TxtMoveToLog.Location = New System.Drawing.Point(3, 19)
        Me.TxtMoveToLog.Size = New System.Drawing.Size(142, 18)
        Me.TxtMoveToLog.Tag = ""
        '
        'GBoxApprove
        '
        Me.GBoxApprove.Location = New System.Drawing.Point(466, 575)
        Me.GBoxApprove.Size = New System.Drawing.Size(148, 40)
        Me.GBoxApprove.Text = "Approved By"
        '
        'TxtApproveBy
        '
        Me.TxtApproveBy.Location = New System.Drawing.Point(29, 19)
        Me.TxtApproveBy.Tag = ""
        '
        'CmdDiscard
        '
        Me.CmdDiscard.Size = New System.Drawing.Size(26, 19)
        '
        'CmdApprove
        '
        Me.CmdApprove.Size = New System.Drawing.Size(26, 19)
        '
        'GBoxEntryType
        '
        Me.GBoxEntryType.Location = New System.Drawing.Point(168, 635)
        Me.GBoxEntryType.Size = New System.Drawing.Size(119, 40)
        '
        'TxtEntryType
        '
        Me.TxtEntryType.Location = New System.Drawing.Point(3, 19)
        Me.TxtEntryType.Tag = ""
        '
        'GrpUP
        '
        Me.GrpUP.Location = New System.Drawing.Point(16, 576)
        Me.GrpUP.Size = New System.Drawing.Size(119, 40)
        '
        'TxtEntryBy
        '
        Me.TxtEntryBy.Location = New System.Drawing.Point(3, 19)
        Me.TxtEntryBy.Tag = ""
        Me.TxtEntryBy.Text = ""
        '
        'GroupBox1
        '
        Me.GroupBox1.Font = New System.Drawing.Font("Microsoft Sans Serif", 8.25!)
        Me.GroupBox1.Location = New System.Drawing.Point(2, 569)
        Me.GroupBox1.Size = New System.Drawing.Size(1002, 4)
        '
        'GBoxDivision
        '
        Me.GBoxDivision.Location = New System.Drawing.Point(299, 575)
        Me.GBoxDivision.Size = New System.Drawing.Size(151, 40)
        '
        'TxtDivision
        '
        Me.TxtDivision.AgSelectedValue = ""
        Me.TxtDivision.Location = New System.Drawing.Point(3, 19)
        Me.TxtDivision.Size = New System.Drawing.Size(145, 18)
        Me.TxtDivision.Tag = ""
        '
        'TxtDocId
        '
        Me.TxtDocId.AgSelectedValue = ""
        Me.TxtDocId.BackColor = System.Drawing.Color.White
        Me.TxtDocId.Tag = ""
        Me.TxtDocId.Text = ""
        '
        'LblDocId
        '
        Me.LblDocId.Tag = ""
        '
        'LblPrefix
        '
        Me.LblPrefix.Location = New System.Drawing.Point(336, 267)
        Me.LblPrefix.Tag = ""
        Me.LblPrefix.Visible = False
        '
        'TabControl1
        '
        Me.TabControl1.Anchor = CType(((System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Left) _
            Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.TabControl1.Controls.Add(Me.TP2)
        Me.TabControl1.Font = New System.Drawing.Font("Tahoma", 8.25!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.TabControl1.Location = New System.Drawing.Point(-4, 19)
        Me.TabControl1.Size = New System.Drawing.Size(1002, 187)
        Me.TabControl1.TabIndex = 0
        Me.TabControl1.Controls.SetChildIndex(Me.TP2, 0)
        Me.TabControl1.Controls.SetChildIndex(Me.TP1, 0)
        '
        'TP1
        '
        Me.TP1.BackColor = System.Drawing.Color.FromArgb(CType(CType(234, Byte), Integer), CType(CType(234, Byte), Integer), CType(CType(234, Byte), Integer))
        Me.TP1.Controls.Add(Me.Pnl2)
        Me.TP1.Controls.Add(Me.Label25)
        Me.TP1.Controls.Add(Me.TxtStructure)
        Me.TP1.Location = New System.Drawing.Point(4, 22)
        Me.TP1.Size = New System.Drawing.Size(994, 161)
        Me.TP1.Text = "Document Detail"
        Me.TP1.Controls.SetChildIndex(Me.LblNCatNature, 0)
        Me.TP1.Controls.SetChildIndex(Me.PnlMain, 0)
        Me.TP1.Controls.SetChildIndex(Me.TxtStructure, 0)
        Me.TP1.Controls.SetChildIndex(Me.Label25, 0)
        Me.TP1.Controls.SetChildIndex(Me.LblPrefix, 0)
        Me.TP1.Controls.SetChildIndex(Me.LblV_Type, 0)
        Me.TP1.Controls.SetChildIndex(Me.LblDocId, 0)
        Me.TP1.Controls.SetChildIndex(Me.TxtDocId, 0)
        Me.TP1.Controls.SetChildIndex(Me.Pnl2, 0)
        '
        'Topctrl1
        '
        Me.Topctrl1.Size = New System.Drawing.Size(984, 41)
        Me.Topctrl1.TabIndex = 0
        '
        'PnlMain
        '
        Me.PnlMain.Location = New System.Drawing.Point(1, 1)
        Me.PnlMain.Size = New System.Drawing.Size(490, 157)
        '
        'LblV_Type
        '
        Me.LblV_Type.Font = New System.Drawing.Font("Verdana", 9.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.LblV_Type.Location = New System.Drawing.Point(463, 168)
        Me.LblV_Type.Size = New System.Drawing.Size(92, 14)
        Me.LblV_Type.Tag = ""
        Me.LblV_Type.Text = "Invoice Type"
        '
        'ChkTemporarilySaved
        '
        Me.ChkTemporarilySaved.Location = New System.Drawing.Point(776, 576)
        '
        'Dgl1
        '
        Me.Dgl1.AgAllowFind = True
        Me.Dgl1.AgLastColumn = -1
        Me.Dgl1.AgMandatoryColumn = 0
        Me.Dgl1.AgReadOnlyColumnColor = System.Drawing.Color.Ivory
        Me.Dgl1.AgSearchMethod = AgControls.AgLib.TxtSearchMethod.Simple
        Me.Dgl1.AgSkipReadOnlyColumns = False
        Me.Dgl1.CancelEditingControlValidating = False
        Me.Dgl1.GridSearchMethod = AgControls.AgLib.TxtSearchMethod.Simple
        Me.Dgl1.Location = New System.Drawing.Point(0, 0)
        Me.Dgl1.Name = "Dgl1"
        Me.Dgl1.Size = New System.Drawing.Size(240, 150)
        Me.Dgl1.TabIndex = 0
        '
        'PnlTotals
        '
        Me.PnlTotals.Anchor = CType(((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left) _
            Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.PnlTotals.BackColor = System.Drawing.Color.Cornsilk
        Me.PnlTotals.Controls.Add(Me.LblTotalPcs)
        Me.PnlTotals.Controls.Add(Me.LblTotalPcsText)
        Me.PnlTotals.Controls.Add(Me.LblTotalDealQty)
        Me.PnlTotals.Controls.Add(Me.LblTotalDealQtyText)
        Me.PnlTotals.Controls.Add(Me.LblTotalQty)
        Me.PnlTotals.Controls.Add(Me.LblTotalAmount)
        Me.PnlTotals.Controls.Add(Me.LblTotalQtyText)
        Me.PnlTotals.Controls.Add(Me.LblTotalAmountText)
        Me.PnlTotals.Location = New System.Drawing.Point(3, 408)
        Me.PnlTotals.Name = "PnlTotals"
        Me.PnlTotals.Size = New System.Drawing.Size(977, 20)
        Me.PnlTotals.TabIndex = 694
        '
        'LblTotalPcs
        '
        Me.LblTotalPcs.AutoSize = True
        Me.LblTotalPcs.Font = New System.Drawing.Font("Arial", 9.75!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.LblTotalPcs.ForeColor = System.Drawing.SystemColors.ControlDarkDark
        Me.LblTotalPcs.Location = New System.Drawing.Point(531, 3)
        Me.LblTotalPcs.Name = "LblTotalPcs"
        Me.LblTotalPcs.Size = New System.Drawing.Size(12, 16)
        Me.LblTotalPcs.TabIndex = 720
        Me.LblTotalPcs.Text = "."
        Me.LblTotalPcs.TextAlign = System.Drawing.ContentAlignment.MiddleLeft
        '
        'LblTotalPcsText
        '
        Me.LblTotalPcsText.AutoSize = True
        Me.LblTotalPcsText.Font = New System.Drawing.Font("Arial", 9.75!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.LblTotalPcsText.ForeColor = System.Drawing.Color.Maroon
        Me.LblTotalPcsText.Location = New System.Drawing.Point(457, 2)
        Me.LblTotalPcsText.Name = "LblTotalPcsText"
        Me.LblTotalPcsText.Size = New System.Drawing.Size(73, 16)
        Me.LblTotalPcsText.TabIndex = 719
        Me.LblTotalPcsText.Text = "Total Pcs :"
        '
        'LblTotalDealQty
        '
        Me.LblTotalDealQty.AutoSize = True
        Me.LblTotalDealQty.Font = New System.Drawing.Font("Verdana", 9.75!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.LblTotalDealQty.ForeColor = System.Drawing.SystemColors.ControlDarkDark
        Me.LblTotalDealQty.Location = New System.Drawing.Point(766, 3)
        Me.LblTotalDealQty.Name = "LblTotalDealQty"
        Me.LblTotalDealQty.Size = New System.Drawing.Size(13, 16)
        Me.LblTotalDealQty.TabIndex = 666
        Me.LblTotalDealQty.Text = "."
        Me.LblTotalDealQty.TextAlign = System.Drawing.ContentAlignment.MiddleLeft
        '
        'LblTotalDealQtyText
        '
        Me.LblTotalDealQtyText.AutoSize = True
        Me.LblTotalDealQtyText.Font = New System.Drawing.Font("Verdana", 9.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.LblTotalDealQtyText.ForeColor = System.Drawing.Color.Maroon
        Me.LblTotalDealQtyText.Location = New System.Drawing.Point(655, 3)
        Me.LblTotalDealQtyText.Name = "LblTotalDealQtyText"
        Me.LblTotalDealQtyText.Size = New System.Drawing.Size(111, 14)
        Me.LblTotalDealQtyText.TabIndex = 665
        Me.LblTotalDealQtyText.Text = "Total Deal Qty :"
        '
        'LblTotalQty
        '
        Me.LblTotalQty.AutoSize = True
        Me.LblTotalQty.Font = New System.Drawing.Font("Verdana", 9.75!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.LblTotalQty.ForeColor = System.Drawing.SystemColors.ControlDarkDark
        Me.LblTotalQty.Location = New System.Drawing.Point(91, 3)
        Me.LblTotalQty.Name = "LblTotalQty"
        Me.LblTotalQty.Size = New System.Drawing.Size(13, 16)
        Me.LblTotalQty.TabIndex = 660
        Me.LblTotalQty.Text = "."
        Me.LblTotalQty.TextAlign = System.Drawing.ContentAlignment.MiddleLeft
        '
        'LblTotalAmount
        '
        Me.LblTotalAmount.AutoSize = True
        Me.LblTotalAmount.Font = New System.Drawing.Font("Verdana", 9.75!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.LblTotalAmount.ForeColor = System.Drawing.SystemColors.ControlDarkDark
        Me.LblTotalAmount.Location = New System.Drawing.Point(332, 4)
        Me.LblTotalAmount.Name = "LblTotalAmount"
        Me.LblTotalAmount.Size = New System.Drawing.Size(13, 16)
        Me.LblTotalAmount.TabIndex = 662
        Me.LblTotalAmount.Text = "."
        Me.LblTotalAmount.TextAlign = System.Drawing.ContentAlignment.MiddleLeft
        '
        'LblTotalQtyText
        '
        Me.LblTotalQtyText.AutoSize = True
        Me.LblTotalQtyText.Font = New System.Drawing.Font("Verdana", 9.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.LblTotalQtyText.ForeColor = System.Drawing.Color.Maroon
        Me.LblTotalQtyText.Location = New System.Drawing.Point(12, 3)
        Me.LblTotalQtyText.Name = "LblTotalQtyText"
        Me.LblTotalQtyText.Size = New System.Drawing.Size(77, 14)
        Me.LblTotalQtyText.TabIndex = 659
        Me.LblTotalQtyText.Text = "Total Qty :"
        '
        'LblTotalAmountText
        '
        Me.LblTotalAmountText.AutoSize = True
        Me.LblTotalAmountText.Font = New System.Drawing.Font("Verdana", 9.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.LblTotalAmountText.ForeColor = System.Drawing.Color.Maroon
        Me.LblTotalAmountText.Location = New System.Drawing.Point(228, 3)
        Me.LblTotalAmountText.Name = "LblTotalAmountText"
        Me.LblTotalAmountText.Size = New System.Drawing.Size(103, 14)
        Me.LblTotalAmountText.TabIndex = 661
        Me.LblTotalAmountText.Text = "Total Amount :"
        '
        'Pnl1
        '
        Me.Pnl1.Anchor = CType((((System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom) _
            Or System.Windows.Forms.AnchorStyles.Left) _
            Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.Pnl1.Location = New System.Drawing.Point(3, 227)
        Me.Pnl1.Name = "Pnl1"
        Me.Pnl1.Size = New System.Drawing.Size(978, 181)
        Me.Pnl1.TabIndex = 10
        '
        'TxtStructure
        '
        Me.TxtStructure.AgAllowUserToEnableMasterHelp = False
        Me.TxtStructure.AgLastValueTag = Nothing
        Me.TxtStructure.AgLastValueText = Nothing
        Me.TxtStructure.AgMandatory = False
        Me.TxtStructure.AgMasterHelp = False
        Me.TxtStructure.AgNumberLeftPlaces = 8
        Me.TxtStructure.AgNumberNegetiveAllow = False
        Me.TxtStructure.AgNumberRightPlaces = 2
        Me.TxtStructure.AgPickFromLastValue = False
        Me.TxtStructure.AgRowFilter = ""
        Me.TxtStructure.AgSearchMethod = AgControls.AgLib.TxtSearchMethod.Simple
        Me.TxtStructure.AgSelectedValue = Nothing
        Me.TxtStructure.AgTxtCase = AgControls.AgTextBox.TxtCase.None
        Me.TxtStructure.AgValueType = AgControls.AgTextBox.TxtValueType.Text_Value
        Me.TxtStructure.BorderStyle = System.Windows.Forms.BorderStyle.None
        Me.TxtStructure.Font = New System.Drawing.Font("Arial", 11.25!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.TxtStructure.Location = New System.Drawing.Point(641, 221)
        Me.TxtStructure.MaxLength = 20
        Me.TxtStructure.Name = "TxtStructure"
        Me.TxtStructure.Size = New System.Drawing.Size(60, 18)
        Me.TxtStructure.TabIndex = 15
        Me.TxtStructure.Visible = False
        '
        'Label25
        '
        Me.Label25.AutoSize = True
        Me.Label25.BackColor = System.Drawing.Color.Transparent
        Me.Label25.Font = New System.Drawing.Font("Arial", 9.75!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.Label25.Location = New System.Drawing.Point(569, 222)
        Me.Label25.Name = "Label25"
        Me.Label25.Size = New System.Drawing.Size(61, 16)
        Me.Label25.TabIndex = 715
        Me.Label25.Text = "Structure"
        Me.Label25.Visible = False
        '
        'PnlCalcGrid
        '
        Me.PnlCalcGrid.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.PnlCalcGrid.Location = New System.Drawing.Point(661, 430)
        Me.PnlCalcGrid.Name = "PnlCalcGrid"
        Me.PnlCalcGrid.Size = New System.Drawing.Size(320, 138)
        Me.PnlCalcGrid.TabIndex = 16
        Me.PnlCalcGrid.Visible = False
        '
        'PnlCustomGrid
        '
        Me.PnlCustomGrid.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left), System.Windows.Forms.AnchorStyles)
        Me.PnlCustomGrid.Location = New System.Drawing.Point(357, 589)
        Me.PnlCustomGrid.Name = "PnlCustomGrid"
        Me.PnlCustomGrid.Size = New System.Drawing.Size(44, 27)
        Me.PnlCustomGrid.TabIndex = 15
        Me.PnlCustomGrid.Visible = False
        '
        'TxtCustomFields
        '
        Me.TxtCustomFields.AgAllowUserToEnableMasterHelp = False
        Me.TxtCustomFields.AgLastValueTag = Nothing
        Me.TxtCustomFields.AgLastValueText = Nothing
        Me.TxtCustomFields.AgMandatory = False
        Me.TxtCustomFields.AgMasterHelp = False
        Me.TxtCustomFields.AgNumberLeftPlaces = 8
        Me.TxtCustomFields.AgNumberNegetiveAllow = False
        Me.TxtCustomFields.AgNumberRightPlaces = 2
        Me.TxtCustomFields.AgPickFromLastValue = False
        Me.TxtCustomFields.AgRowFilter = ""
        Me.TxtCustomFields.AgSearchMethod = AgControls.AgLib.TxtSearchMethod.Simple
        Me.TxtCustomFields.AgSelectedValue = Nothing
        Me.TxtCustomFields.AgTxtCase = AgControls.AgTextBox.TxtCase.None
        Me.TxtCustomFields.AgValueType = AgControls.AgTextBox.TxtValueType.Text_Value
        Me.TxtCustomFields.BorderStyle = System.Windows.Forms.BorderStyle.None
        Me.TxtCustomFields.Font = New System.Drawing.Font("Arial", 11.25!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.TxtCustomFields.Location = New System.Drawing.Point(522, 654)
        Me.TxtCustomFields.MaxLength = 20
        Me.TxtCustomFields.Name = "TxtCustomFields"
        Me.TxtCustomFields.Size = New System.Drawing.Size(72, 18)
        Me.TxtCustomFields.TabIndex = 1012
        Me.TxtCustomFields.Text = "AgTextBox1"
        Me.TxtCustomFields.Visible = False
        '
        'TxtNature
        '
        Me.TxtNature.AgAllowUserToEnableMasterHelp = False
        Me.TxtNature.AgLastValueTag = Nothing
        Me.TxtNature.AgLastValueText = Nothing
        Me.TxtNature.AgMandatory = False
        Me.TxtNature.AgMasterHelp = False
        Me.TxtNature.AgNumberLeftPlaces = 0
        Me.TxtNature.AgNumberNegetiveAllow = False
        Me.TxtNature.AgNumberRightPlaces = 0
        Me.TxtNature.AgPickFromLastValue = False
        Me.TxtNature.AgRowFilter = ""
        Me.TxtNature.AgSearchMethod = AgControls.AgLib.TxtSearchMethod.Simple
        Me.TxtNature.AgSelectedValue = Nothing
        Me.TxtNature.AgTxtCase = AgControls.AgTextBox.TxtCase.None
        Me.TxtNature.AgValueType = AgControls.AgTextBox.TxtValueType.Text_Value
        Me.TxtNature.BorderStyle = System.Windows.Forms.BorderStyle.None
        Me.TxtNature.Font = New System.Drawing.Font("Verdana", 9.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.TxtNature.Location = New System.Drawing.Point(896, 205)
        Me.TxtNature.MaxLength = 20
        Me.TxtNature.Name = "TxtNature"
        Me.TxtNature.Size = New System.Drawing.Size(81, 15)
        Me.TxtNature.TabIndex = 1208
        Me.TxtNature.Text = "TxtNature"
        Me.TxtNature.Visible = False
        '
        'TP2
        '
        Me.TP2.BackColor = System.Drawing.Color.FromArgb(CType(CType(234, Byte), Integer), CType(CType(234, Byte), Integer), CType(CType(234, Byte), Integer))
        Me.TP2.Location = New System.Drawing.Point(4, 22)
        Me.TP2.Name = "TP2"
        Me.TP2.Padding = New System.Windows.Forms.Padding(3)
        Me.TP2.Size = New System.Drawing.Size(994, 161)
        Me.TP2.TabIndex = 1
        Me.TP2.Text = "TabPage1"
        '
        'OFDMain
        '
        Me.OFDMain.FileName = "price.xls"
        Me.OFDMain.Filter = "*.xls|*.Xls"
        Me.OFDMain.InitialDirectory = "D:\"
        Me.OFDMain.ShowHelp = True
        Me.OFDMain.Title = "Select Excel File"
        '
        'MnuOptions
        '
        Me.MnuOptions.Items.AddRange(New System.Windows.Forms.ToolStripItem() {Me.MnuImportFromExcel, Me.MnuImportFromDos, Me.MnuImportFromTally, Me.MnuImportOpeningFromExcel, Me.MnuEditSave, Me.MnuGenerateEWayBill, Me.MnuPrintBarcode, Me.MnuRequestForPermission, Me.MnuReferenceEntries, Me.MnuWizard, Me.MnuShowLedgerPosting, Me.MnuHistory})
        Me.MnuOptions.Name = "MnuOptions"
        Me.MnuOptions.Size = New System.Drawing.Size(220, 290)
        '
        'MnuImportFromExcel
        '
        Me.MnuImportFromExcel.Name = "MnuImportFromExcel"
        Me.MnuImportFromExcel.Size = New System.Drawing.Size(219, 22)
        Me.MnuImportFromExcel.Text = "Import From Excel"
        '
        'MnuImportFromDos
        '
        Me.MnuImportFromDos.Name = "MnuImportFromDos"
        Me.MnuImportFromDos.Size = New System.Drawing.Size(219, 22)
        Me.MnuImportFromDos.Text = "Import From Dos"
        '
        'MnuImportFromTally
        '
        Me.MnuImportFromTally.Name = "MnuImportFromTally"
        Me.MnuImportFromTally.Size = New System.Drawing.Size(219, 22)
        Me.MnuImportFromTally.Text = "Import From Tally"
        '
        'MnuImportOpeningFromExcel
        '
        Me.MnuImportOpeningFromExcel.Name = "MnuImportOpeningFromExcel"
        Me.MnuImportOpeningFromExcel.Size = New System.Drawing.Size(219, 22)
        Me.MnuImportOpeningFromExcel.Text = "Import Opening From Excel"
        '
        'MnuEditSave
        '
        Me.MnuEditSave.Name = "MnuEditSave"
        Me.MnuEditSave.Size = New System.Drawing.Size(219, 22)
        Me.MnuEditSave.Text = "Edit & Save"
        '
        'MnuGenerateEWayBill
        '
        Me.MnuGenerateEWayBill.Name = "MnuGenerateEWayBill"
        Me.MnuGenerateEWayBill.Size = New System.Drawing.Size(219, 22)
        Me.MnuGenerateEWayBill.Text = "Generate EWay Bill"
        '
        'MnuPrintBarcode
        '
        Me.MnuPrintBarcode.Name = "MnuPrintBarcode"
        Me.MnuPrintBarcode.Size = New System.Drawing.Size(219, 22)
        Me.MnuPrintBarcode.Text = "Print Barcode"
        '
        'MnuRequestForPermission
        '
        Me.MnuRequestForPermission.Name = "MnuRequestForPermission"
        Me.MnuRequestForPermission.Size = New System.Drawing.Size(219, 22)
        Me.MnuRequestForPermission.Text = "Request For Permission"
        '
        'MnuReferenceEntries
        '
        Me.MnuReferenceEntries.Name = "MnuReferenceEntries"
        Me.MnuReferenceEntries.Size = New System.Drawing.Size(219, 22)
        Me.MnuReferenceEntries.Text = "Reference Entries"
        '
        'MnuWizard
        '
        Me.MnuWizard.Name = "MnuWizard"
        Me.MnuWizard.Size = New System.Drawing.Size(219, 22)
        Me.MnuWizard.Text = "Wizard"
        '
        'MnuHistory
        '
        Me.MnuHistory.Name = "MnuHistory"
        Me.MnuHistory.Size = New System.Drawing.Size(219, 22)
        Me.MnuHistory.Text = "History"
        '
        'Label6
        '
        Me.Label6.AutoSize = True
        Me.Label6.BackColor = System.Drawing.Color.Transparent
        Me.Label6.Font = New System.Drawing.Font("Verdana", 9.5!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.Label6.Location = New System.Drawing.Point(622, 207)
        Me.Label6.Name = "Label6"
        Me.Label6.Size = New System.Drawing.Size(106, 16)
        Me.Label6.TabIndex = 3015
        Me.Label6.Text = "Curr. Balance"
        '
        'LblCurrentBalance
        '
        Me.LblCurrentBalance.AutoSize = True
        Me.LblCurrentBalance.BackColor = System.Drawing.Color.White
        Me.LblCurrentBalance.Font = New System.Drawing.Font("Verdana", 9.5!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.LblCurrentBalance.Location = New System.Drawing.Point(734, 207)
        Me.LblCurrentBalance.Name = "LblCurrentBalance"
        Me.LblCurrentBalance.Size = New System.Drawing.Size(103, 16)
        Me.LblCurrentBalance.TabIndex = 3016
        Me.LblCurrentBalance.Text = "99999999.99"
        '
        'Pnl2
        '
        Me.Pnl2.Location = New System.Drawing.Point(493, 1)
        Me.Pnl2.Name = "Pnl2"
        Me.Pnl2.Size = New System.Drawing.Size(490, 157)
        Me.Pnl2.TabIndex = 743
        '
        'LblBarcode
        '
        Me.LblBarcode.AutoSize = True
        Me.LblBarcode.BackColor = System.Drawing.Color.Transparent
        Me.LblBarcode.Font = New System.Drawing.Font("Verdana", 9.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.LblBarcode.Location = New System.Drawing.Point(5, 207)
        Me.LblBarcode.Name = "LblBarcode"
        Me.LblBarcode.Size = New System.Drawing.Size(136, 14)
        Me.LblBarcode.TabIndex = 3021
        Me.LblBarcode.Text = "Enter Barcode Here"
        '
        'TxtBarcode
        '
        Me.TxtBarcode.AgAllowUserToEnableMasterHelp = False
        Me.TxtBarcode.AgLastValueTag = Nothing
        Me.TxtBarcode.AgLastValueText = Nothing
        Me.TxtBarcode.AgMandatory = False
        Me.TxtBarcode.AgMasterHelp = False
        Me.TxtBarcode.AgNumberLeftPlaces = 8
        Me.TxtBarcode.AgNumberNegetiveAllow = False
        Me.TxtBarcode.AgNumberRightPlaces = 2
        Me.TxtBarcode.AgPickFromLastValue = False
        Me.TxtBarcode.AgRowFilter = ""
        Me.TxtBarcode.AgSearchMethod = AgControls.AgLib.TxtSearchMethod.Simple
        Me.TxtBarcode.AgSelectedValue = Nothing
        Me.TxtBarcode.AgTxtCase = AgControls.AgTextBox.TxtCase.None
        Me.TxtBarcode.AgValueType = AgControls.AgTextBox.TxtValueType.Text_Value
        Me.TxtBarcode.BorderStyle = System.Windows.Forms.BorderStyle.None
        Me.TxtBarcode.Font = New System.Drawing.Font("Verdana", 11.25!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.TxtBarcode.Location = New System.Drawing.Point(143, 205)
        Me.TxtBarcode.MaxLength = 20
        Me.TxtBarcode.Name = "TxtBarcode"
        Me.TxtBarcode.Size = New System.Drawing.Size(141, 19)
        Me.TxtBarcode.TabIndex = 3020
        '
        'Pnl4
        '
        Me.Pnl4.Anchor = CType(((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left) _
            Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.Pnl4.Location = New System.Drawing.Point(3, 430)
        Me.Pnl4.Name = "Pnl4"
        Me.Pnl4.Size = New System.Drawing.Size(552, 118)
        Me.Pnl4.TabIndex = 3022
        Me.Pnl4.Visible = False
        '
        'CheckBoxFullCalculate
        '
        Me.CheckBoxFullCalculate.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.CheckBoxFullCalculate.AutoSize = True
        Me.CheckBoxFullCalculate.Location = New System.Drawing.Point(811, 599)
        Me.CheckBoxFullCalculate.Name = "CheckBoxFullCalculate"
        Me.CheckBoxFullCalculate.Size = New System.Drawing.Size(89, 17)
        Me.CheckBoxFullCalculate.TabIndex = 0
        Me.CheckBoxFullCalculate.Text = "Full Calculate"
        Me.CheckBoxFullCalculate.UseVisualStyleBackColor = True
        '
        'PnlConsumptionTotal
        '
        Me.PnlConsumptionTotal.Anchor = CType(((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left) _
            Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.PnlConsumptionTotal.BackColor = System.Drawing.Color.Cornsilk
        Me.PnlConsumptionTotal.Controls.Add(Me.LblTotalBomQty)
        Me.PnlConsumptionTotal.Controls.Add(Me.Label5)
        Me.PnlConsumptionTotal.Location = New System.Drawing.Point(3, 549)
        Me.PnlConsumptionTotal.Name = "PnlConsumptionTotal"
        Me.PnlConsumptionTotal.Size = New System.Drawing.Size(652, 20)
        Me.PnlConsumptionTotal.TabIndex = 695
        '
        'LblTotalBomQty
        '
        Me.LblTotalBomQty.AutoSize = True
        Me.LblTotalBomQty.Font = New System.Drawing.Font("Verdana", 9.75!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.LblTotalBomQty.ForeColor = System.Drawing.SystemColors.ControlDarkDark
        Me.LblTotalBomQty.Location = New System.Drawing.Point(91, 3)
        Me.LblTotalBomQty.Name = "LblTotalBomQty"
        Me.LblTotalBomQty.Size = New System.Drawing.Size(13, 16)
        Me.LblTotalBomQty.TabIndex = 660
        Me.LblTotalBomQty.Text = "."
        Me.LblTotalBomQty.TextAlign = System.Drawing.ContentAlignment.MiddleLeft
        '
        'Label5
        '
        Me.Label5.AutoSize = True
        Me.Label5.Font = New System.Drawing.Font("Verdana", 9.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.Label5.ForeColor = System.Drawing.Color.Maroon
        Me.Label5.Location = New System.Drawing.Point(12, 3)
        Me.Label5.Name = "Label5"
        Me.Label5.Size = New System.Drawing.Size(77, 14)
        Me.Label5.TabIndex = 659
        Me.Label5.Text = "Total Qty :"
        '
        'MnuShowLedgerPosting
        '
        Me.MnuShowLedgerPosting.Name = "MnuShowLedgerPosting"
        Me.MnuShowLedgerPosting.Size = New System.Drawing.Size(219, 22)
        Me.MnuShowLedgerPosting.Text = "Show Ledger Posting"
        '
        'FrmPurchInvoiceDirect_WithDimension
        '
        Me.AutoScaleDimensions = New System.Drawing.SizeF(6.0!, 13.0!)
        Me.BackColor = System.Drawing.SystemColors.Control
        Me.ClientSize = New System.Drawing.Size(984, 622)
        Me.ContextMenuStrip = Me.MnuOptions
        Me.Controls.Add(Me.CheckBoxFullCalculate)
        Me.Controls.Add(Me.PnlConsumptionTotal)
        Me.Controls.Add(Me.Pnl4)
        Me.Controls.Add(Me.LblBarcode)
        Me.Controls.Add(Me.TxtBarcode)
        Me.Controls.Add(Me.LblCurrentBalance)
        Me.Controls.Add(Me.Label6)
        Me.Controls.Add(Me.TxtNature)
        Me.Controls.Add(Me.TxtCustomFields)
        Me.Controls.Add(Me.PnlCustomGrid)
        Me.Controls.Add(Me.PnlCalcGrid)
        Me.Controls.Add(Me.PnlTotals)
        Me.Controls.Add(Me.Pnl1)
        Me.MaximizeBox = True
        Me.Name = "FrmPurchInvoiceDirect_WithDimension"
        Me.Text = "Purchase Invoice"
        Me.Controls.SetChildIndex(Me.ChkTemporarilySaved, 0)
        Me.Controls.SetChildIndex(Me.Pnl1, 0)
        Me.Controls.SetChildIndex(Me.PnlTotals, 0)
        Me.Controls.SetChildIndex(Me.PnlCalcGrid, 0)
        Me.Controls.SetChildIndex(Me.PnlCustomGrid, 0)
        Me.Controls.SetChildIndex(Me.TxtCustomFields, 0)
        Me.Controls.SetChildIndex(Me.TxtNature, 0)
        Me.Controls.SetChildIndex(Me.TabControl1, 0)
        Me.Controls.SetChildIndex(Me.GroupBox1, 0)
        Me.Controls.SetChildIndex(Me.GrpUP, 0)
        Me.Controls.SetChildIndex(Me.GBoxEntryType, 0)
        Me.Controls.SetChildIndex(Me.GBoxApprove, 0)
        Me.Controls.SetChildIndex(Me.GBoxMoveToLog, 0)
        Me.Controls.SetChildIndex(Me.GroupBox2, 0)
        Me.Controls.SetChildIndex(Me.GBoxDivision, 0)
        Me.Controls.SetChildIndex(Me.Topctrl1, 0)
        Me.Controls.SetChildIndex(Me.Label6, 0)
        Me.Controls.SetChildIndex(Me.LblCurrentBalance, 0)
        Me.Controls.SetChildIndex(Me.TxtBarcode, 0)
        Me.Controls.SetChildIndex(Me.LblBarcode, 0)
        Me.Controls.SetChildIndex(Me.Pnl4, 0)
        Me.Controls.SetChildIndex(Me.PnlConsumptionTotal, 0)
        Me.Controls.SetChildIndex(Me.CheckBoxFullCalculate, 0)
        Me.GroupBox2.ResumeLayout(False)
        Me.GroupBox2.PerformLayout()
        Me.GBoxMoveToLog.ResumeLayout(False)
        Me.GBoxMoveToLog.PerformLayout()
        Me.GBoxApprove.ResumeLayout(False)
        Me.GBoxApprove.PerformLayout()
        Me.GBoxEntryType.ResumeLayout(False)
        Me.GBoxEntryType.PerformLayout()
        Me.GrpUP.ResumeLayout(False)
        Me.GrpUP.PerformLayout()
        Me.GBoxDivision.ResumeLayout(False)
        Me.GBoxDivision.PerformLayout()
        Me.TabControl1.ResumeLayout(False)
        Me.TP1.ResumeLayout(False)
        Me.TP1.PerformLayout()
        CType(Me.DTMaster, System.ComponentModel.ISupportInitialize).EndInit()
        CType(Me.Dgl1, System.ComponentModel.ISupportInitialize).EndInit()
        Me.PnlTotals.ResumeLayout(False)
        Me.PnlTotals.PerformLayout()
        Me.MnuOptions.ResumeLayout(False)
        Me.PnlConsumptionTotal.ResumeLayout(False)
        Me.PnlConsumptionTotal.PerformLayout()
        Me.ResumeLayout(False)
        Me.PerformLayout()

    End Sub
    Public WithEvents PnlTotals As System.Windows.Forms.Panel
    Public WithEvents LblTotalQty As System.Windows.Forms.Label
    Public WithEvents LblTotalQtyText As System.Windows.Forms.Label
    Public WithEvents Pnl1 As System.Windows.Forms.Panel
    Public WithEvents TxtStructure As AgControls.AgTextBox
    Public WithEvents Label25 As System.Windows.Forms.Label
    Public WithEvents LblTotalAmount As System.Windows.Forms.Label
    Public WithEvents LblTotalAmountText As System.Windows.Forms.Label
    Public WithEvents LblTotalDealQty As System.Windows.Forms.Label
    Public WithEvents LblTotalDealQtyText As System.Windows.Forms.Label
    Public WithEvents PnlCalcGrid As System.Windows.Forms.Panel
    Public WithEvents PnlCustomGrid As System.Windows.Forms.Panel
    Public WithEvents TxtCustomFields As AgControls.AgTextBox
    Public WithEvents TxtNature As AgControls.AgTextBox
    Friend WithEvents TP2 As TabPage
    Dim DGL As New AgControls.AgDataGrid
    Public WithEvents OFDMain As OpenFileDialog
    Friend WithEvents MnuOptions As ContextMenuStrip
    Private components As System.ComponentModel.IContainer
    Friend WithEvents MnuImportFromExcel As ToolStripMenuItem
    Friend WithEvents MnuImportFromTally As ToolStripMenuItem
    Friend WithEvents MnuEditSave As ToolStripMenuItem
    Public mDimensionSrl As Integer
    Friend WithEvents MnuGenerateEWayBill As ToolStripMenuItem
    Friend WithEvents MnuImportFromDos As ToolStripMenuItem
    Public Shared mFlag_Import As Boolean = False
    Public WithEvents Label6 As Label
    Public WithEvents LblCurrentBalance As Label
    Friend WithEvents MnuRequestForPermission As ToolStripMenuItem
    Friend WithEvents MnuReferenceEntries As ToolStripMenuItem
    Friend WithEvents MnuHistory As ToolStripMenuItem
    Public WithEvents Pnl2 As Panel
    Public WithEvents LblBarcode As Label
    Public WithEvents TxtBarcode As AgControls.AgTextBox
    Public WithEvents Pnl4 As Panel
    Public WithEvents PnlConsumptionTotal As Panel
    Public WithEvents LblTotalBomQty As Label
    Public WithEvents Label5 As Label
    Friend WithEvents MnuWizard As ToolStripMenuItem
    Friend WithEvents MnuPrintBarcode As ToolStripMenuItem
    Friend WithEvents CheckBoxFullCalculate As CheckBox
    Friend WithEvents MnuImportOpeningFromExcel As ToolStripMenuItem
#End Region

    Private Sub FrmPurchInvoice_BaseEvent_ApproveDeletion_InTrans(ByVal SearchCode As String, ByVal Conn As Object, ByVal Cmd As Object) Handles Me.BaseEvent_ApproveDeletion_InTrans
        mQry = " Delete From Stock Where DocId = '" & mSearchCode & "'"
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

        mQry = " Delete From StockProcess Where DocId = '" & mSearchCode & "'"
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

        If AgL.Dman_Execute("Select Count(*) From PurchInvoiceDetailTransfer With (NoLock) Where DocId = '" & SearchCode & "'", IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar > 0 Then
            mQry = "Delete From PurchInvoiceDetailTransfer Where DocId = '" & mSearchCode & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
        End If

        mQry = " Delete From StockHeadDetailSku Where DocId = '" & mSearchCode & "'"
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

        mQry = " Delete From StockHeadDetail Where DocId = '" & mSearchCode & "'"
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

        mQry = " Delete From Ledger Where DocId = '" & mSearchCode & "'"
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

        mQry = " Delete From PurchInvoicePayment Where DocId = '" & mSearchCode & "'"
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

        mQry = " Delete From PurchInvoiceTransport Where DocId = '" & mSearchCode & "'"
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

        mQry = " Delete From PurchInvoiceDimensionDetailSku Where DocId = '" & mSearchCode & "'"
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

        mQry = " Delete From PurchInvoiceDimensionDetail Where DocId = '" & mSearchCode & "'"
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

        mQry = " Delete From PurchInvoiceDetailBomSku Where DocId = '" & mSearchCode & "'"
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

        mQry = " Delete From PurchInvoiceDetailBom Where DocId = '" & mSearchCode & "'"
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

        mQry = " Delete From BarcodeSiteDetail Where Code In (Select Code From Barcode Where  GenDocID ='" & mSearchCode & "' ) "
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

        mQry = " Update PurchInvoiceDetail Set Barcode = Null Where DocId = '" & mSearchCode & "'"
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

        mQry = " Delete From Barcode Where GenDocID ='" & mSearchCode & "' "
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

        mQry = " Delete From Stock Where DocID = (Select DocID From StockHead Where GenDocID ='" & mSearchCode & "') "
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

        mQry = " Delete From BarcodeSiteDetail Where Code In (
                            Select Bc.Code
                            From StockHead H
                            LEFT JOIN BarCode Bc ON H.DocId = Bc.GenDocId
                            Where H.GenDocID ='" & mSearchCode & "') "
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

        mQry = " Update PurchInvoiceDetail Set LrCode = Null, LrBaleCode = Null Where DocId = '" & mSearchCode & "'"
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

        mQry = " Delete From BarCode Where Code In (
                            Select Bc.Code
                            From StockHead H
                            LEFT JOIN BarCode Bc ON H.DocId = Bc.GenDocId
                            Where H.GenDocID ='" & mSearchCode & "') "
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

        mQry = " Delete From StockHeadDetailBarCodeValues Where DocID = (Select DocID From StockHead Where GenDocID ='" & mSearchCode & "') "
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

        mQry = " Delete From StockHeadDetail Where DocID = (Select DocID From StockHead Where GenDocID ='" & mSearchCode & "') "
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

        mQry = " Delete From StockHead Where GenDocID ='" & mSearchCode & "' "
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
    End Sub

    Private Sub FGetSettingVariableValuesForAddAndEdit()
        SettingFields_MaximumItemLimit = AgL.VNull(FGetSettings(SettingFields.MaximumItemLimit, SettingType.General))
        SettingFields_CalculateAmountOn = FGetSettings(SettingFields.CalculateAmountOn, SettingType.General)
    End Sub


    'Private Sub ApplyUISettings(NCAT As String)
    '    Dim mQry As String
    '    Dim DtTemp As DataTable
    '    Dim I As Integer, J As Integer
    '    Dim mDglMainRowCount As Integer
    '    Dim mDgl2RowCount As Integer
    '    Try
    '        mQry = "Select H.*
    '                from EntryHeaderUISetting H                   
    '                Where EntryName= '" & Me.Name & "'  And NCat = '" & NCAT & "' And GridName ='" & Dgl2.Name & "' "
    '        DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)

    '        If DtTemp.Rows.Count > 0 Then
    '            For I = 0 To DtTemp.Rows.Count - 1
    '                For J = 0 To Dgl2.Rows.Count - 1
    '                    If AgL.XNull(DtTemp.Rows(I)("FieldName")) = Dgl2.Item(Col1Head, J).Value Then
    '                        Dgl2.Rows(J).Visible = AgL.VNull(DtTemp.Rows(I)("IsVisible"))
    '                        If AgL.VNull(DtTemp.Rows(I)("IsVisible")) Then mDgl2RowCount += 1
    '                        Dgl2.Item(Col1Mandatory, J).Value = IIf(AgL.VNull(DtTemp.Rows(I)("IsMandatory")), "Ä", "")
    '                        If AgL.XNull(DtTemp.Rows(I)("Caption")) <> "" Then
    '                            Dgl2.Item(Col1Head, J).Value = AgL.XNull(DtTemp.Rows(I)("Caption"))
    '                        End If
    '                    End If
    '                Next

    '            Next
    '        End If
    '        If mDgl2RowCount = 0 Then Dgl2.Visible = False Else Dgl2.Visible = True


    '        mQry = "Select H.*
    '                from EntryHeaderUISetting H                   
    '                Where EntryName= '" & Me.Name & "'  And NCat = '" & NCAT & "' And GridName ='" & DglMain.Name & "' "
    '        DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)

    '        If DtTemp.Rows.Count > 0 Then
    '            For I = 0 To DtTemp.Rows.Count - 1
    '                For J = 0 To DglMain.Rows.Count - 1
    '                    If AgL.XNull(DtTemp.Rows(I)("FieldName")) = DglMain.Item(Col1Head, J).Value Then
    '                        DglMain.Rows(J).Visible = AgL.VNull(DtTemp.Rows(I)("IsVisible"))
    '                        If AgL.VNull(DtTemp.Rows(I)("IsVisible")) Then mDglMainRowCount += 1
    '                        DglMain.Item(Col1Mandatory, J).Value = IIf(AgL.VNull(DtTemp.Rows(I)("IsMandatory")), "Ä", "")
    '                        If AgL.XNull(DtTemp.Rows(I)("Caption")) <> "" Then
    '                            DglMain.Item(Col1Head, J).Value = AgL.XNull(DtTemp.Rows(I)("Caption"))
    '                        End If
    '                    End If
    '                Next
    '            Next
    '        End If
    '        If mDglMainRowCount = 0 Then DglMain.Visible = False Else DglMain.Visible = True



    '        For I = 1 To Dgl1.Columns.Count - 1
    '            Dgl1.Columns(I).Visible = False
    '        Next

    '        mQry = "Select H.*
    '                from EntryLineUISetting H                    
    '                Where EntryName='" & Me.Name & "' And NCat = '" & NCAT & "' 
    '                And GridName ='" & Dgl1.Name & "' "
    '        DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)


    '        If DtTemp.Rows.Count > 0 Then
    '            For I = 0 To DtTemp.Rows.Count - 1
    '                For J = 0 To Dgl1.Columns.Count - 1
    '                    If AgL.XNull(DtTemp.Rows(I)("FieldName")) = Dgl1.Columns(J).Name Then
    '                        Dgl1.Columns(J).Visible = AgL.VNull(DtTemp.Rows(I)("IsVisible"))
    '                        If Not IsDBNull(DtTemp.Rows(I)("DisplayIndex")) Then
    '                            Dgl1.Columns(J).DisplayIndex = AgL.VNull(DtTemp.Rows(I)("DisplayIndex"))
    '                        End If
    '                        If AgL.XNull(DtTemp.Rows(I)("Caption")) <> "" Then
    '                            Dgl1.Columns(J).HeaderText = AgL.XNull(DtTemp.Rows(I)("Caption"))
    '                        End If
    '                    End If
    '                Next
    '            Next
    '        End If


    '        If Topctrl1.Mode = "Browse" Then
    '            mQry = "Select IsNull(Max(Cast(IT.IsApplicable_Barcode as Int)),0) from ItemTypeSetting IT where ItemType in (Select ItemType From Item Where Code in (Select Item From PurchInvoiceDetail Where DocID = '" & mSearchCode & "'))"
    '            If AgL.Dman_Execute(mQry, AgL.GCn).ExecuteScalar > 0 Then
    '                BtnBarcode.Visible = True
    '            Else
    '                BtnBarcode.Visible = False
    '            End If
    '        End If


    '    Catch ex As Exception
    '        MsgBox(ex.Message & " [ApplyUISettings]")
    '    End Try
    'End Sub

    Private Sub ApplyUISetting()
        Me.Name = "FrmPurchInvoiceDirect"
        Dim bNCat As String = ""
        If LblV_Type.Tag <> "" Then bNCat = LblV_Type.Tag Else bNCat = EntryNCat
        GetUISetting_WithDataTables(DglMain, Me.Name, AgL.PubDivCode, AgL.PubSiteCode, bNCat, DglMain.Item(Col1Value, rowV_Type).Tag, DglMain.Item(Col1Value, rowProcess).Tag, DglMain.Item(Col1Value, rowSettingGroup).Tag, ClsMain.GridTypeConstants.VerticalGrid)
        GetUISetting_WithDataTables(Dgl2, Me.Name, AgL.PubDivCode, AgL.PubSiteCode, bNCat, DglMain.Item(Col1Value, rowV_Type).Tag, DglMain.Item(Col1Value, rowProcess).Tag, DglMain.Item(Col1Value, rowSettingGroup).Tag, ClsMain.GridTypeConstants.VerticalGrid)
        GetUISetting_WithDataTables(Dgl1, Me.Name, AgL.PubDivCode, AgL.PubSiteCode, bNCat, DglMain.Item(Col1Value, rowV_Type).Tag, DglMain.Item(Col1Value, rowProcess).Tag, DglMain.Item(Col1Value, rowSettingGroup).Tag, ClsMain.GridTypeConstants.HorizontalGrid)
        GetUISetting_WithDataTables(Dgl4, Me.Name, AgL.PubDivCode, AgL.PubSiteCode, bNCat, DglMain.Item(Col1Value, rowV_Type).Tag, DglMain.Item(Col1Value, rowProcess).Tag, DglMain.Item(Col1Value, rowSettingGroup).Tag, ClsMain.GridTypeConstants.HorizontalGrid)
        If Dgl4.Visible = False Then PnlConsumptionTotal.Visible = False
        If Dgl2.Rows(rowPaidAmount).Visible = True Then
            If AgL.StrCmp(Topctrl1.Mode, "Add") Then
                Dgl2.Rows(rowPaidAmount).Visible = False
            Else
                Dgl2.Rows(rowPaidAmount).Visible = True
            End If
        End If
    End Sub

    Public Function FItemTypeSettings(ItemType As String) As DataRow
        Dim DrItemTypeSetting As DataRow()

        DrItemTypeSetting = DtItemTypeSettingsAll.Select("ItemType='" & ItemType & "' And Div_Code='" & TxtDivision.Tag & "'")
        If DrItemTypeSetting.Length <= 0 Then
            DrItemTypeSetting = DtItemTypeSettingsAll.Select("ItemType='" & ItemType & "'")
        End If

        FItemTypeSettings = DrItemTypeSetting(0)
    End Function
    Private Sub FrmQuality1_BaseEvent_Form_PreLoad() Handles Me.BaseEvent_Form_PreLoad
        MainTableName = "PurchInvoice"
        MainLineTableCsv = "PurchInvoiceDetail,PurchInvoiceDetailSku"
        LogTableName = "PurchInvoice_Log"
        LogLineTableCsv = "PurchInvoiceDetail_Log,PurchInvoiceDetailSku_Log"

        AgL.AddAgDataGrid(AgCalcGrid1, PnlCalcGrid)

        AgCalcGrid1.AgLibVar = AgL

        AgL.AddAgDataGrid(AgCustomGrid1, PnlCustomGrid)

        AgCustomGrid1.AgLibVar = AgL
        AgCustomGrid1.SplitGrid = True
        AgCustomGrid1.MnuText = Me.Name

        If OpenDocId = "" Then
            If CType(AgL.VNull(ClsMain.FGetSettings(SettingFields.AskVoucherTypeBeforeOpeningEntry, SettingType.General, TxtDivision.Tag, AgL.PubSiteCode, "PURCH", EntryNCat, "", "", "")), Boolean) = True Then
                FShowVoucherTypeHelp()
            End If
        End If
    End Sub
    Private Sub FrmQuality1_BaseFunction_FIniMast(ByVal BytDel As Byte, ByVal BytRefresh As Byte) Handles Me.BaseFunction_FIniMast
        Dim mCondStr$

        If mFlag_Import = True And DTMaster.Rows.Count > 0 Then Exit Sub

        'mCondStr = " " & AgL.CondStrFinancialYear("H.V_Date", AgL.PubStartDate, AgL.PubEndDate) &
        '                    " And " & AgL.PubSiteCondition("H.Site_Code", AgL.PubSiteCode) & " And H.Div_Code = '" & AgL.PubDivCode & "' "

        mCondStr = " And ( Date(H.V_Date) >= " & AgL.Chk_Date(AgL.PubStartDate) & " And  Date(H.V_Date) <= " & AgL.Chk_Date(AgL.PubEndDate) & " Or Vt.NCat='" & Ncat.OpeningStock & "') And " & AgL.PubSiteCondition("H.Site_Code", AgL.PubSiteCode) & " And H.Div_Code = '" & AgL.PubDivCode & "' "
        mCondStr = mCondStr & " And Vt.NCat In ('" & EntryNCat & "')"
        mCondStr = mCondStr & " And IfNull(Vt.CustomUI,'') = '" & mCustomUI & "'"

        If IsApplyVTypePermission Then
            mCondStr = mCondStr & " And H.V_Type In (Select V_Type From User_VType_Permission VP  With (NoLock) Where VP.UserName = '" & AgL.PubUserName & "' And VP.Div_Code = '" & AgL.PubDivCode & "' And VP.Site_Code = '" & AgL.PubSiteCode & "') "
        End If

        If mV_Type <> "" Then
            mCondStr += " And H.V_Type = '" & mV_Type & "' "
        End If


        mQry = "Select DocID As SearchCode " &
                " From PurchInvoice H  With (NoLock) " &
                " Left Join Voucher_Type Vt  With (NoLock) On H.V_Type = Vt.V_Type  " &
                " Where 1=1  " & mCondStr & "  Order By V_Date , V_No "

        'mQry = "Select H.DocID As SearchCode 
        '        From PurchInvoice H  With (NoLock)
        '        Left Join Voucher_Type Vt  With (NoLock) On H.V_Type = Vt.V_Type  
        '        LEFT JOIN Ledger L With (NoLock) On H.DocId = L.DocId
        '        Where L.DocId Is Null  " & mCondStr & "  Order By H.V_Date , H.V_No  "
        mQry = AgL.GetBackendBasedQuery(mQry)
        Topctrl1.FIniForm(DTMaster, AgL.GCn, mQry, , , , , BytDel, BytRefresh)
    End Sub
    Private Sub FrmSaleOrder_BaseEvent_FindMain() Handles Me.BaseEvent_FindMain
        Dim mCondStr$

        mCondStr = " " & AgL.CondStrFinancialYear("H.V_Date", AgL.PubStartDate, AgL.PubEndDate) &
                        " And " & AgL.PubSiteCondition("H.Site_Code", AgL.PubSiteCode) & " And H.Div_Code = '" & AgL.PubDivCode & "'"
        mCondStr = mCondStr & " And Vt.NCat In ('" & EntryNCat & "')"
        mCondStr = mCondStr & " And IfNull(Vt.CustomUI,'') = '" & mCustomUI & "'"

        If IsApplyVTypePermission Then
            mCondStr = mCondStr & " And H.V_Type In (Select V_Type From User_VType_Permission VP  With (NoLock) Where VP.UserName = '" & AgL.PubUserName & "' And VP.Div_Code = '" & AgL.PubDivCode & "' And VP.Site_Code = '" & AgL.PubSiteCode & "') "
        End If

        If mV_Type <> "" Then
            mCondStr += " And H.V_Type = '" & mV_Type & "' "
        End If

        AgL.PubFindQry = " SELECT H.DocID AS SearchCode, Vt.Description AS [Invoice_Type], H.V_Date AS Date, 
                             H.ManualRefNo As [Manual_No], SGV.DispName As Vendor, H.SalesTaxGroupParty As [Sales_Tax_Group_Party], H.VendorDocNo As [Vendor_Doc_No],  
                             H.VendorDocDate As [Vendor_Doc_Date], H.Remarks,
                             H.EntryBy As [Entry_By], H.EntryDate As [Entry_Date] 
                             From PurchInvoice H   With (NoLock)
                             LEFT Join Voucher_Type Vt  With (NoLock) On H.V_Type = Vt.V_Type 
                             Left Join SubGroup SGV  With (NoLock) On SGV.SubCode  = H.Vendor  
                             Where 1 = 1 " & mCondStr

        AgL.PubFindQryOrdBy = "[Entry Date]"
    End Sub

    Private Sub Frm_BaseFunction_IniGrid() Handles Me.BaseFunction_IniGrid
        Dim errRow As Integer = 0
        Dim I As Integer = 0
        Try
            If DtV_TypeSettings Is Nothing Then Exit Sub
            If DtV_TypeSettings.Rows.Count = 0 Then Exit Sub
            Dgl1.ColumnCount = 0
            With AgCL
                .AddAgTextColumn(Dgl1, ColSNo, 40, 5, ColSNo, True, True, False)
                .AddAgTextColumn(Dgl1, Col1Barcode, 100, 0, Col1Barcode, False, False)
                .AddAgTextColumn(Dgl1, Col1ItemType, 100, 0, Col1ItemType, False, False)
                .AddAgTextColumn(Dgl1, Col1SKU, 300, 0, Col1SKU, True, False, False)
                .AddAgTextColumn(Dgl1, Col1ItemCategory, 100, 0, Col1ItemCategory, True, False)
                .AddAgTextColumn(Dgl1, Col1ItemGroup, 100, 0, Col1ItemGroup, True, False)
                .AddAgTextColumn(Dgl1, Col1ItemCode, 100, 0, Col1ItemCode, False, False)
                .AddAgTextColumn(Dgl1, Col1Item, 200, 0, Col1Item, True, False)
                .AddAgTextColumn(Dgl1, Col1Dimension1, 100, 0, Col1Dimension1, False, False)
                .AddAgTextColumn(Dgl1, Col1Dimension2, 100, 0, Col1Dimension2, False, False)
                .AddAgTextColumn(Dgl1, Col1Dimension3, 100, 0, Col1Dimension3, False, False)
                .AddAgTextColumn(Dgl1, Col1Dimension4, 100, 0, Col1Dimension4, False, False)
                .AddAgTextColumn(Dgl1, Col1Size, 100, 0, Col1Size, True, False)
                .AddAgTextColumn(Dgl1, Col1Specification, 100, 255, Col1Specification, False, False, False)
                .AddAgTextColumn(Dgl1, Col1ItemState, 130, 0, Col1ItemState, True, False)
                .AddAgTextColumn(Dgl1, Col1BaleNo, 50, 0, Col1BaleNo, False, False)
                .AddAgTextColumn(Dgl1, Col1LotNo, 50, 0, AgL.PubCaptionLotNo, False, False)
                .AddAgTextColumn(Dgl1, Col1RawMaterial, 100, 0, Col1RawMaterial, True, False)
                .AddAgNumberColumn(Dgl1, Col1RawMaterialConsumptionQty, 80, 10, 4, False, Col1RawMaterialConsumptionQty, True, False, True)
                .AddAgNumberColumn(Dgl1, Col1DocQty, 70, 8, 4, False, AgL.PubCaptionDocQty, True, False, True)
                .AddAgNumberColumn(Dgl1, Col1FreeQty, 60, 8, 3, False, Col1FreeQty, False, False, True)
                .AddAgNumberColumn(Dgl1, Col1RejQty, 70, 8, 4, False, Col1RejQty, False, False, True)
                .AddAgNumberColumn(Dgl1, Col1LossQty, 70, 8, 4, False, AgL.PubCaptionLossQty, False, False, True)
                .AddAgNumberColumn(Dgl1, Col1Qty, 70, 8, 4, False, AgL.PubCaptionQty, False, True, True)
                .AddAgTextColumn(Dgl1, Col1Unit, 50, 0, Col1Unit, True, True)
                .AddAgTextColumn(Dgl1, Col1QtyDecimalPlaces, 50, 0, Col1QtyDecimalPlaces, False, True, False)
                .AddAgNumberColumn(Dgl1, Col1Pcs, 80, 8, 0, False, AgL.PubCaptionPcs, False, False, True)
                .AddAgNumberColumn(Dgl1, Col1UnitMultiplier, 70, 8, 3, False, Col1UnitMultiplier, False, True, True)
                .AddAgNumberColumn(Dgl1, Col1PcsPerMeasure, 70, 8, 3, False, Col1PcsPerMeasure, False, True, True)
                .AddAgNumberColumn(Dgl1, Col1DocDealQty, 70, 8, 4, True, AgL.PubCaptionDocDealQty, True, False, True)
                .AddAgNumberColumn(Dgl1, Col1FreeDealQty, 80, 8, 4, False, Col1FreeDealQty, False, False, True)
                .AddAgNumberColumn(Dgl1, Col1LossDealQtyPer, 80, 8, 4, False, AgL.PubCaptionLossDealQty + " @", False, False, True)
                .AddAgNumberColumn(Dgl1, Col1LossDealQty, 80, 8, 4, False, AgL.PubCaptionLossDealQty, False, False, True)
                .AddAgNumberColumn(Dgl1, Col1DealQty, 70, 8, 3, False, AgL.PubCaptionDealQty, False, True, True)
                .AddAgTextColumn(Dgl1, Col1DealUnit, 60, 0, Col1DealUnit, False, True)
                .AddAgTextColumn(Dgl1, Col1DealQtyDecimalPlaces, 50, 0, Col1DealQtyDecimalPlaces, False, True, False)
                .AddAgTextColumn(Dgl1, Col1StockUnit, 50, 0, Col1StockUnit, True, True)
                .AddAgNumberColumn(Dgl1, Col1StockUnitMultiplier, 70, 8, 3, False, Col1StockUnitMultiplier, False, False, True)
                .AddAgNumberColumn(Dgl1, Col1StockQty, 70, 8, 4, False, Col1StockQty, False, False, True)
                .AddAgTextColumn(Dgl1, Col1StockQtyDecimalPlaces, 50, 0, Col1StockQtyDecimalPlaces, False, True, False)
                .AddAgTextColumn(Dgl1, Col1PurchasePlan, 80, 0, Col1PurchasePlan, False, True)
                .AddAgTextColumn(Dgl1, Col1PurchasePlanSr, 80, 0, Col1PurchasePlanSr, False, True)
                .AddAgTextColumn(Dgl1, Col1StockProcess, 80, 0, Col1StockProcess, False, True)
                .AddAgTextColumn(Dgl1, Col1StockProcessTSr, 80, 0, Col1StockProcessTSr, False, True)
                .AddAgTextColumn(Dgl1, Col1StockProcessSr, 80, 0, Col1StockProcessSr, False, True)
                .AddAgNumberColumn(Dgl1, Col1Rate, 80, 8, 3, False, Col1Rate, True, False, True)
                .AddAgNumberColumn(Dgl1, Col1DiscountPer, 80, 2, 3, False, Col1DiscountPer, True, False, True)
                .AddAgNumberColumn(Dgl1, Col1DiscountAmount, 100, 8, 3, False, Col1DiscountAmount, True, False, True)
                .AddAgNumberColumn(Dgl1, Col1AdditionalDiscountPer, 80, 2, 3, False, Col1AdditionalDiscountPer, False, False, True)
                .AddAgNumberColumn(Dgl1, Col1AdditionalDiscountAmount, 100, 8, 3, False, Col1AdditionalDiscountAmount, False, False, True)
                .AddAgNumberColumn(Dgl1, Col1AdditionPer, 80, 2, 3, False, AgL.PubCaptionLineAddition & " @", False, False, True)
                .AddAgNumberColumn(Dgl1, Col1AdditionAmount, 100, 8, 3, False, AgL.PubCaptionLineAddition, False, False, True)
                .AddAgNumberColumn(Dgl1, Col1Amount, 100, 8, 2, False, Col1Amount, True, True, True)
                .AddAgNumberColumn(Dgl1, Col1MRP, 80, 8, 2, False, Col1MRP, False, False, True)
                .AddAgNumberColumn(Dgl1, Col1SaleRate, 80, 8, 2, False, Col1SaleRate, False, False, True)
                .AddAgDateColumn(Dgl1, Col1ExpiryDate, 90, Col1ExpiryDate, False, False)
                .AddAgTextColumn(Dgl1, Col1FromProcess, 100, 255, Col1FromProcess, True, False)
                .AddAgTextColumn(Dgl1, Col1Catalog, 100, 0, Col1Catalog, False, False)
                .AddAgTextColumn(Dgl1, Col1Remark, 200, 255, Col1Remark, True, False)
                .AddAgTextColumn(Dgl1, Col1Godown, 100, 0, Col1Godown, AgL.IsFeatureApplicable_Godown, False)
                .AddAgTextColumn(Dgl1, Col1FromGodown, 100, 0, Col1FromGodown, AgL.IsFeatureApplicable_Godown, False)
                .AddAgTextColumn(Dgl1, Col1ToGodown, 100, 0, Col1ToGodown, AgL.IsFeatureApplicable_Godown, False)
                .AddAgTextColumn(Dgl1, Col1LRNo, 90, 50, Col1LRNo, False, False)
                .AddAgDateColumn(Dgl1, Col1LRDate, 90, Col1LRDate, False, False)
                .AddAgTextColumn(Dgl1, Col1HSN, 90, 50, Col1HSN, False, False)
                .AddAgTextColumn(Dgl1, Col1SalesTaxGroup, 60, 0, Col1SalesTaxGroup, True, False)
                .AddAgTextColumn(Dgl1, Col1Deal, 70, 255, Col1Deal, False, False)
                .AddAgNumberColumn(Dgl1, Col1DealAmount, 100, 8, 2, False, Col1DealAmount, False, False, True)
                .AddAgNumberColumn(Dgl1, Col1ProfitMarginPer, 100, 8, 2, False, Col1ProfitMarginPer, False, False, True)
                .AddAgTextColumn(Dgl1, Col1ReferenceNo, 80, 0, Col1ReferenceNo, True, False)
                .AddAgDateColumn(Dgl1, Col1ReferenceDate, 80, Col1ReferenceDate, True, True)
                .AddAgTextColumn(Dgl1, Col1ReferenceDocID, 80, 0, Col1ReferenceDocID, False, False)
                .AddAgTextColumn(Dgl1, Col1ReferenceTSr, 80, 0, Col1ReferenceTSr, False, False)
                .AddAgTextColumn(Dgl1, Col1ReferenceSr, 80, 0, Col1ReferenceSr, False, False)
                .AddAgDateColumn(Dgl1, Col1ReferenceDocIdDate, 80, Col1ReferenceDocIdDate, True, False)
                .AddAgNumberColumn(Dgl1, Col1ReferenceDocIdBalanceQty, 70, 8, 3, False, Col1ReferenceDocIdBalanceQty, False, True, True)
                .AddAgTextColumn(Dgl1, Col1PurchaseInvoice, 80, 0, Col1PurchaseInvoice, False, False)
                .AddAgTextColumn(Dgl1, Col1PurchaseInvoiceSr, 80, 0, Col1PurchaseInvoiceSr, False, False)
                .AddAgTextColumn(Dgl1, Col1SaleInvoice, 80, 0, Col1SaleInvoice, False, False)
                .AddAgTextColumn(Dgl1, Col1SaleInvoiceSr, 80, 0, Col1SaleInvoiceSr, False, False)
                .AddAgTextColumn(Dgl1, Col1DefaultDiscountPer, 150, 255, Col1DefaultDiscountPer, False, False)
                .AddAgTextColumn(Dgl1, Col1DefaultAdditionalDiscountPer, 150, 255, Col1DefaultAdditionalDiscountPer, False, False)
                .AddAgTextColumn(Dgl1, Col1DefaultAdditionPer, 150, 255, Col1DefaultAdditionPer, False, False)
                .AddAgTextColumn(Dgl1, Col1PersonalDiscountPer, 150, 255, Col1PersonalDiscountPer, False, False)
                .AddAgTextColumn(Dgl1, Col1PersonalAdditionalDiscountPer, 150, 255, Col1PersonalAdditionalDiscountPer, False, False)
                .AddAgTextColumn(Dgl1, Col1PersonalAdditionPer, 150, 255, Col1PersonalAdditionPer, False, False)
                .AddAgTextColumn(Dgl1, Col1DiscountCalculationPattern, 150, 255, Col1DiscountCalculationPattern, False, False)
                .AddAgTextColumn(Dgl1, Col1AdditionalDiscountCalculationPattern, 150, 255, Col1AdditionalDiscountCalculationPattern, False, False)
                .AddAgTextColumn(Dgl1, Col1AdditionCalculationPattern, 150, 255, Col1AdditionCalculationPattern, False, False)
                .AddAgTextColumn(Dgl1, Col1TransactionStockProcessSr, 80, 0, Col1TransactionStockProcessSr, False, False)
                .AddAgTextColumn(Dgl1, Col1TransactionStockSr, 80, 0, Col1TransactionStockSr, False, False)
                .AddAgNumberColumn(Dgl1, Col1IsNewItemAllowedPurch, 100, 8, 2, False, Col1IsNewItemAllowedPurch, False, False, True)
                .AddAgNumberColumn(Dgl1, Col1IsNewDimension1AllowedPurch, 100, 8, 2, False, Col1IsNewDimension1AllowedPurch, False, False, True)
                .AddAgNumberColumn(Dgl1, Col1IsNewDimension2AllowedPurch, 100, 8, 2, False, Col1IsNewDimension2AllowedPurch, False, False, True)
                .AddAgNumberColumn(Dgl1, Col1IsNewDimension3AllowedPurch, 100, 8, 2, False, Col1IsNewDimension3AllowedPurch, False, False, True)
                .AddAgNumberColumn(Dgl1, Col1IsNewDimension4AllowedPurch, 100, 8, 2, False, Col1IsNewDimension4AllowedPurch, False, False, True)
                .AddAgTextColumn(Dgl1, Col1BarcodePattern, 100, 0, Col1BarcodePattern, False, False)
                .AddAgTextColumn(Dgl1, Col1BarcodeType, 100, 0, Col1BarcodeType, False, False)
                .AddAgTextColumn(Dgl1, Col1BarcodeGenDocId, 100, 0, Col1BarcodeGenDocId, False, False)
                .AddAgNumberColumn(Dgl1, Col1BarcodeGenSr, 100, 8, 2, False, Col1BarcodeGenSr, False, False, True)
                .AddAgNumberColumn(Dgl1, Col1IsRecordLocked, 100, 8, 2, False, Col1IsRecordLocked, False, False, True)

                .AddAgTextColumn(Dgl1, Col1MItemCategory, 100, 0, Col1MItemCategory, True, False, False)
                .AddAgTextColumn(Dgl1, Col1MItemGroup, 100, 0, Col1MItemGroup, True, False, False)
                .AddAgTextColumn(Dgl1, Col1MItemSpecification, 100, 0, Col1MItemSpecification, True, False, False)
                .AddAgTextColumn(Dgl1, Col1MDimension1, 100, 0, "M " & AgL.PubCaptionDimension1, True, False, False)
                .AddAgTextColumn(Dgl1, Col1MDimension2, 100, 0, "M " & AgL.PubCaptionDimension2, True, False, False)
                .AddAgTextColumn(Dgl1, Col1MDimension3, 100, 0, "M " & AgL.PubCaptionDimension3, True, False, False)
                .AddAgTextColumn(Dgl1, Col1MDimension4, 100, 0, "M " & AgL.PubCaptionDimension4, True, False, False)
                .AddAgTextColumn(Dgl1, Col1MSize, 100, 0, Col1MSize, True, False, False)
            End With
            AgL.AddAgDataGrid(Dgl1, Pnl1)
            Dgl1.EnableHeadersVisualStyles = False
            Dgl1.ColumnHeadersHeight = 40
            Dgl1.AgSearchMethod = AgControls.AgLib.TxtSearchMethod.Simple
            AgL.GridDesign(Dgl1)
            Dgl1.Anchor = AnchorStyles.Bottom + AnchorStyles.Left + AnchorStyles.Right + AnchorStyles.Top
            Dgl1.BackgroundColor = Me.BackColor
            AgL.FSetDimensionCaptionForHorizontalGrid(Dgl1, AgL)
            AgL.ProcCreateLink(Dgl1, Col1PurchaseInvoice)
            AgL.ProcCreateLink(Dgl1, Col1ReferenceNo)


            If LblV_Type.Tag = Ncat.PurchaseInvoice Then
                If CType(AgL.VNull(FGetSettings(SettingFields.OrderApplicableYn, SettingType.General)), Boolean) = True Then
                    Dgl1.Columns(Col1PurchaseInvoice).Visible = True
                    Dgl1.Columns(Col1PurchaseInvoice).ReadOnly = False
                    Dgl1.Columns(Col1PurchaseInvoice).DefaultCellStyle.BackColor = Color.White
                    Dgl1.Columns(Col1PurchaseInvoice).HeaderText = "Purchase Order"
                End If
            End If


            Dgl4.ColumnCount = 0
            With AgCL
                .AddAgTextColumn(Dgl4, ColSNo, 40, 5, ColSNo, True, True, False)
                .AddAgTextColumn(Dgl4, Col4Sku, 150, 0, Col4Sku, False, True)
                .AddAgTextColumn(Dgl4, Col4ItemCategory, 100, 0, Col4ItemCategory, True, True)
                .AddAgTextColumn(Dgl4, Col4Item, 100, 0, Col4Item, True, True)
                .AddAgTextColumn(Dgl4, Col4Dimension1, 100, 0, Col4Dimension1, True, True)
                .AddAgTextColumn(Dgl4, Col4Dimension2, 100, 0, Col4Dimension2, True, True)
                .AddAgTextColumn(Dgl4, Col4Dimension3, 100, 0, Col4Dimension3, True, True)
                .AddAgTextColumn(Dgl4, Col4Dimension4, 100, 0, Col4Dimension4, True, True)
                .AddAgNumberColumn(Dgl4, Col4Qty, 100, 8, 4, False, Col4Qty, True, True, True)
                .AddAgTextColumn(Dgl4, Col4Unit, 50, 0, Col4Unit, True, True)
                .AddAgNumberColumn(Dgl4, Col4CurrentStock, 100, 8, 4, False, Col4CurrentStock, True, True, True)
                .AddAgNumberColumn(Dgl4, Col4CurrentStockProcess, 120, 8, 4, False, Col4CurrentStockProcess, True, True, True)
                .AddAgNumberColumn(Dgl4, Col4Wastage, 120, 8, 4, False, Col4Wastage, True, False, True)
                .AddAgTextColumn(Dgl4, Col4ConsiderInIssueYN, 35, 0, Col4ConsiderInIssueYN, True, True, False)
            End With
            AgL.AddAgDataGrid(Dgl4, Pnl4)
            Dgl4.EnableHeadersVisualStyles = False
            Dgl4.ColumnHeadersHeight = 35
            AgL.GridDesign(Dgl4)
            Dgl4.AgSkipReadOnlyColumns = True
            Dgl4.AgAllowFind = False
            Dgl4.AllowUserToOrderColumns = True
            Dgl4.AllowUserToAddRows = False
            Dgl4.BackgroundColor = Me.BackColor
            Dgl4.Columns(Col4ConsiderInIssueYN).DefaultCellStyle.Font = New Font(New FontFamily("wingdings"), 14)
            Dgl4.Name = "Dgl4"
            Dgl4.Anchor = AnchorStyles.Bottom + AnchorStyles.Left + AnchorStyles.Right
            AgL.FSetDimensionCaptionForHorizontalGrid(Dgl4, AgL)



            DglMain.Columns(Col1BtnDetail).ReadOnly = True
            DglMain.Columns(Col1BtnDetail).Visible = True
            DglMain.Columns(Col1Head).Width = 105
            DglMain.Rows.Add(7)
            For I = 0 To DglMain.Rows.Count - 1
                DglMain.Rows(I).Visible = False
                If I <> rowVendor Then
                    DglMain.Item(Col1BtnDetail, I) = New DataGridViewTextBoxCell
                End If
            Next
            DglMain.Item(Col1Head, rowProcess).Value = hcProcess
            DglMain.Item(Col1Head, rowPrevProcess).Value = hcPrevProcess
            DglMain.Item(Col1Head, rowFirstProcessOfCombination).Value = hcFirstProcessOfCombination
            DglMain.Item(Col1Head, rowLastProcessOfCombination).Value = hcLastProcessOfCombination
            DglMain.Item(Col1Head, rowVendor).Value = hcVendor
            DglMain.Item(Col1Head, rowBillToParty).Value = hcBillToParty
            DglMain.Item(Col1Head, rowLinkedParty).Value = hcLinkedParty

            DglMain.AgSkipReadOnlyColumns = True
            DglMain.BackgroundColor = Me.BackColor
            DglMain.BorderStyle = BorderStyle.None

            For I = 0 To DglMain.Rows.Count - 1
                If AgL.XNull(DglMain(Col1HeadOriginal, I).Value) = "" Then
                    DglMain(Col1HeadOriginal, I).Value = DglMain(Col1Head, I).Value
                End If
            Next

            DglMain.Item(Col1Head, rowLinkedParty).Value = IIf(AgL.PubCaptionLinkedParty <> "", AgL.PubCaptionLinkedParty, hcLinkedParty)


            Dgl2.ColumnCount = 0
            With AgCL
                .AddAgTextColumn(Dgl2, ColSNo, 35, 5, ColSNo, False, True, False)
                .AddAgTextColumn(Dgl2, Col1Head, 140, 255, Col1Head, True, True)
                .AddAgTextColumn(Dgl2, Col1HeadOriginal, 150, 255, Col1HeadOriginal, False, True)
                .AddAgTextColumn(Dgl2, Col1Mandatory, 10, 20, Col1Mandatory, True, True)
                .AddAgTextColumn(Dgl2, Col1Value, 320, 255, Col1Value, True, False)
                .AddAgTextColumn(Dgl2, Col1LastValue, 170, 255, Col1LastValue, False, False)
            End With
            AgL.AddAgDataGrid(Dgl2, Pnl2)
            AgL.GridDesign(Dgl2)
            Dgl2.EnableHeadersVisualStyles = False
            Dgl2.ColumnHeadersHeight = 35
            Dgl2.AgSkipReadOnlyColumns = True
            Dgl2.AllowUserToAddRows = False
            Dgl2.RowHeadersVisible = False
            Dgl2.ColumnHeadersVisible = False
            Dgl2.AgSkipReadOnlyColumns = True
            Dgl2.Columns(Col1Mandatory).DefaultCellStyle.Font = New System.Drawing.Font("Wingdings 2", 5.25, FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(2, Byte))
            Dgl2.Columns(Col1Mandatory).DefaultCellStyle.ForeColor = Color.Red
            Dgl2.BackgroundColor = Me.BackColor
            Dgl2.BorderStyle = BorderStyle.None

            Dgl2.Rows.Add(25)
            For I = 0 To Dgl2.Rows.Count - 1
                Dgl2.Rows(I).Visible = False
            Next

            Dgl2.Item(Col1Value, rowPaidAmount).Style.Font = New Font(Dgl2.DefaultCellStyle.Font.FontFamily, 10, FontStyle.Bold)
            Dgl2.Item(Col1Value, rowPaidAmount).Style.ForeColor = Color.Blue
            Dgl2.Item(Col1Head, rowPaidAmount).Style.Font = New Font(Dgl2.DefaultCellStyle.Font.FontFamily, 10, FontStyle.Bold)
            Dgl2.Item(Col1Head, rowPaidAmount).Style.ForeColor = Color.Blue




            Dgl2.Item(Col1Head, rowStructure).Value = hcStructure
            Dgl2.Item(Col1Head, rowVendorDocNo).Value = hcVendorDocNo
            Dgl2.Item(Col1Head, rowVendorDocDate).Value = hcVendorDocDate
            Dgl2.Item(Col1Head, rowDeliveryDate).Value = hcDeliveryDate
            Dgl2.Item(Col1Head, rowShipToParty).Value = hcShipToParty
            Dgl2.Item(Col1Head, rowAgent).Value = hcAgent
            Dgl2.Item(Col1Head, rowTags).Value = hcTags
            Dgl2.Item(Col1Head, rowGodown).Value = hcGodown
            Dgl2.Item(Col1Head, rowFromGodown).Value = hcFromGodown
            Dgl2.Item(Col1Head, rowToGodown).Value = hcToGodown
            Dgl2.Item(Col1Head, rowSalesTaxNo).Value = hcSalesTaxNo
            Dgl2.Item(Col1Head, rowRateType).Value = hcRateType
            Dgl2.Item(Col1Head, rowFromProcess).Value = hcFromProcess
            Dgl2.Item(Col1Head, rowCatalog).Value = hcCatalog
            Dgl2.Item(Col1Value, rowCatalog) = New DataGridViewButtonCell
            Dgl2.Item(Col1Head, rowStockInNo).Value = hcStockInNo
            Dgl2.Item(Col1Head, rowRemarks).Value = hcRemarks
            Dgl2.Item(Col1Head, rowBtnTransportDetail).Value = hcBtnTransportDetail
            Dgl2.Item(Col1Value, rowBtnTransportDetail) = New DataGridViewButtonCell
            Dgl2.Item(Col1Head, rowBtnPendingPurchOrder).Value = hcBtnPendingPurchOrder
            Dgl2.Item(Col1Value, rowBtnPendingPurchOrder) = New DataGridViewButtonCell
            Dgl2.Item(Col1Head, rowBtnPendingPurchPlan).Value = hcBtnPendingPurchPlan
            Dgl2.Item(Col1Value, rowBtnPendingPurchPlan) = New DataGridViewButtonCell
            Dgl2.Item(Col1Head, rowBtnPendingStockReceive).Value = hcBtnPendingStockReceive
            Dgl2.Item(Col1Value, rowBtnPendingStockReceive) = New DataGridViewButtonCell
            Dgl2.Item(Col1Head, rowBtnMaterialIssue).Value = hcBtnMaterialIssue
            Dgl2.Item(Col1Value, rowBtnMaterialIssue) = New DataGridViewButtonCell
            Dgl2.Item(Col1Head, rowBtnStockBalance).Value = hcBtnStockBalance
            Dgl2.Item(Col1Value, rowBtnStockBalance) = New DataGridViewButtonCell
            Dgl2.Item(Col1Head, rowBtnPendingSaleInvoiceForPurchInvoice).Value = hcBtnPendingSaleInvoiceForPurchInvoice
            Dgl2.Item(Col1Value, rowBtnPendingSaleInvoiceForPurchInvoice) = New DataGridViewButtonCell
            Dgl2.Item(Col1Head, rowBtnAttachments).Value = hcBtnAttachments
            Dgl2.Item(Col1Value, rowBtnAttachments) = New DataGridViewButtonCell
            Dgl2.Item(Col1Head, rowPaidAmount).Value = hcPaidAmount
            Dgl2.Name = "Dgl2"
            Dgl2.Tag = "VerticalGrid"

            For I = 0 To Dgl2.Rows.Count - 1
                If AgL.XNull(Dgl2(Col1HeadOriginal, I).Value) = "" Then
                    Dgl2(Col1HeadOriginal, I).Value = Dgl2(Col1Head, I).Value
                End If
            Next

            ApplyUISetting()
            'Dgl1.Columns(Col1AdditionalDiscountPer).Visible = True
            'Dgl1.Columns(Col1AdditionalDiscountAmount).Visible = True

            'If LblV_Type.Tag <> "" Then
            '    ApplyUISettings(LblV_Type.Tag)
            'Else
            '    ApplyUISettings(EntryNCat)
            'End If


            AgCalcGrid1.Ini_Grid(LblV_Type.Tag, DglMain.Item(Col1Value, rowV_Date).Value)
            AgCalcGrid1.AgFixedRows = 6
            AgCalcGrid1.AgLineGrid = Dgl1
            AgCalcGrid1.AgLineGridMandatoryColumn = Dgl1.Columns(Col1SKU).Index
            AgCalcGrid1.AgLineGridGrossColumn = Dgl1.Columns(Col1Amount).Index
            'If AgL.VNull(AgL.PubDtDivisionSiteSetting.Rows(0)("IsSalesTaxApplicable")) = True Then
            If CType(AgL.VNull(FGetSettings(SettingFields.SalesTaxApplicableInPurchase, SettingType.General)), Boolean) = True Then
                AgCalcGrid1.AgLineGridPostingGroupSalesTaxProd = Dgl1.Columns(Col1SalesTaxGroup).Index
            Else
                AgCalcGrid1.AgLineGridPostingGroupSalesTaxProd = -1
            End If
            AgCalcGrid1.AgPostingPartyAc = DglMain.Item(Col1Value, rowVendor).Tag
            AgCalcGrid1.Anchor = AnchorStyles.Bottom + AnchorStyles.Right
            AgCalcGrid1.BackgroundColor = Me.BackColor
            AgCalcGrid1.BorderStyle = BorderStyle.None

            AgCustomGrid1.Ini_Grid(mSearchCode)
            AgCustomGrid1.SplitGrid = False


            Dgl1.AgLastColumn = Dgl1.Columns(Col1Remark).Index
            AgCL.GridSetiingShowXml(Me.Text & Dgl1.Name & AgL.PubCompCode & AgL.PubDivCode & AgL.PubSiteCode, Dgl1, False)
            AgCL.GridSetiingShowXml(Me.Text & Dgl4.Name & AgL.PubCompCode & AgL.PubDivCode & AgL.PubSiteCode, Dgl4, False)
            Dgl1.AgSkipReadOnlyColumns = True
            Dgl1.AllowUserToOrderColumns = True
        Catch ex As Exception
            MsgBox(ex.Message & "[ Frm_BaseFunction_IniGrid ] " + errRow.ToString)
        End Try
    End Sub
    Private Sub InsertPurchInvoiceDetailHelpValues(DocID As String, Sr As Integer, LineGridRowIndex As Integer, ByRef Conn As Object, ByRef Cmd As Object)
        mQry = "
                Insert Into PurchInvoiceDetailHelpValues 
                (DocID, Sr,  DefaultDiscountPer, DefaultAdditionalDiscountPer, DefaultAdditionPer, 
                PersonalDiscountPer, PersonalAdditionalDiscountPer, PersonalAdditionPer, 
                DiscountCalculationPattern, AdditionalDiscountCalculationPattern, AdditionCalculationPattern 
                ) 
                Values('" & DocID & "', " & Sr & ", 
                " & Val(Dgl1.Item(Col1DefaultDiscountPer, LineGridRowIndex).Value) & ", 
                " & Val(Dgl1.Item(Col1DefaultAdditionalDiscountPer, LineGridRowIndex).Value) & ", 
                " & Val(Dgl1.Item(Col1DefaultAdditionPer, LineGridRowIndex).Value) & ", 
                " & Val(Dgl1.Item(Col1PersonalDiscountPer, LineGridRowIndex).Value) & ", 
                " & Val(Dgl1.Item(Col1PersonalAdditionalDiscountPer, LineGridRowIndex).Value) & "),
                " & Val(Dgl1.Item(Col1PersonalAdditionPer, LineGridRowIndex).Value) & ", 
                " & Val(Dgl1.Item(Col1DiscountCalculationPattern, LineGridRowIndex).Value) & ", 
                " & Val(Dgl1.Item(Col1AdditionalDiscountCalculationPattern, LineGridRowIndex).Value) & ", 
                " & Val(Dgl1.Item(Col1AdditionCalculationPattern, LineGridRowIndex).Value) & " 
               "
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
    End Sub
    Private Sub FrmSaleOrder_BaseEvent_Save_InTrans(ByVal SearchCode As String, ByVal Conn As Object, ByVal Cmd As Object) Handles Me.BaseEvent_Save_InTrans
        Dim I As Integer, mSr As Integer, J As Integer = 0
        Dim bSelectionQry$ = "", bSelectionSkuQry$ = ""
        Dim bSalesTaxGroupParty As String = ""
        Dim mMultiplyWithMinus As Boolean = False



        If LblV_Type.Tag = Ncat.PurchaseReturn Then
            mMultiplyWithMinus = True
        End If

        If DglMain.Item(Col1BtnDetail, rowVendor).Tag IsNot Nothing Then
            If DglMain.Item(Col1BtnDetail, rowVendor).Tag.Dgl1.Rows.Count > 0 Then
                bSalesTaxGroupParty = DglMain.Item(Col1BtnDetail, rowVendor).Tag.Dgl1.Item(DglMain.Item(Col1BtnDetail, rowVendor).Tag.Col1Value, DglMain.Item(Col1BtnDetail, rowVendor).Tag.rowSalesTaxGroup).Value
            End If
        End If


        If DglMain.Item(Col1BtnDetail, rowVendor).Tag Is Nothing Then DglMain.Item(Col1BtnDetail, rowVendor).Tag = New FrmPurchaseInvoiceParty


        If Topctrl1.Mode.ToUpper = "EDIT" Then
            mQry = "Delete from Ledger where docId='" & mSearchCode & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
        End If


        mQry = " Update PurchInvoice " &
                " Set  " &
                " ManualRefNo = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowReferenceNo).Value) & ", " &
                " Agent = " & AgL.Chk_Text(Dgl2.Item(Col1Value, rowAgent).Tag) & ", " &
                " Vendor = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowVendor).Tag) & ", " &
                " BillToParty = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowBillToParty).Tag) & ", " &
                " LinkedParty = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowLinkedParty).Tag) & ", " &
                " ShipToParty = " & AgL.Chk_Text(Dgl2.Item(Col1Value, rowShipToParty).Tag) & ", " &
                " Structure = " & AgL.Chk_Text(TxtStructure.Tag) & ", " &
                " CustomFields = " & AgL.Chk_Text(TxtCustomFields.Tag) & ", " &
                " RateType = " & AgL.Chk_Text(Dgl2.Item(Col1Value, rowRateType).Tag) & ", " &
                " VendorDocNo = " & AgL.Chk_Text(Dgl2.Item(Col1Value, rowVendorDocNo).Value) & ", " &
                " VendorDocDate = " & AgL.Chk_Date(Dgl2.Item(Col1Value, rowVendorDocDate).Value) & ", " &
                " DeliveryDate = " & AgL.Chk_Date(Dgl2.Item(Col1Value, rowDeliveryDate).Value) & ", " &
                " Process = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowProcess).Tag) & ", " &
                " Tags = " & AgL.Chk_Text(Dgl2.Item(Col1Value, rowTags).Value) & ", " &
                " Remarks = " & AgL.Chk_Text(Dgl2.Item(Col1Value, rowRemarks).Value) & IIf(TxtStructure.Tag = "", "", ", ") &
                " " & AgCalcGrid1.FFooterTableUpdateStr(mMultiplyWithMinus) & " " &
                " " & AgCustomGrid1.FFooterTableUpdateStr() & " " &
                " Where DocId = '" & mSearchCode & "'"
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)


        CType(DglMain.Item(Col1BtnDetail, rowVendor).Tag, FrmPurchaseInvoiceParty).FSave(mSearchCode, Conn, Cmd)

        If Dgl2.Item(Col1Value, rowCatalog).Tag IsNot Nothing Then
            CType(Dgl2.Item(Col1Value, rowCatalog).Tag, FrmPurchaseInvoiceCatalog).FSave(mSearchCode, Conn, Cmd)
        End If

        If Dgl2.Item(Col1Value, rowBtnTransportDetail).Tag IsNot Nothing Then
            CType(Dgl2.Item(Col1Value, rowBtnTransportDetail).Tag, FrmPurchaseInvoiceHeader).FSave(mSearchCode, Conn, Cmd)
        End If

        If Dgl2.Item(Col1Value, rowPaidAmount).Tag IsNot Nothing Then
            CType(Dgl2.Item(Col1Value, rowPaidAmount).Tag, FrmPurchaseInvoicePayment).FSave(mSearchCode, Conn, Cmd)
        End If

        mQry = " Delete From PurchInvoiceUnRelatedStockIn Where DocId = '" & mSearchCode & "'"
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
        If AgL.XNull(Dgl2.Item(Col1Value, rowStockInNo).Tag) <> "" Then
            Dim bStockInArr() As String = AgL.XNull(Dgl2.Item(Col1Value, rowStockInNo).Tag).ToString.Split(",")
            For I = 0 To bStockInArr.Length - 1
                If bStockInArr(I) <> "" Then
                    mQry = " INSERT INTO PurchInvoiceUnRelatedStockIn(DocId, Sr, StockInDocId) 
                        Values('" & mSearchCode & "', " & I + 1 & ", '" & bStockInArr(I) & "' )"
                    AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
                End If
            Next
        End If

        If AgL.Dman_Execute("Select Count(*) From PurchInvoiceDetailBom With (NoLock) Where DocId = '" & mSearchCode & "'", IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar() > 0 Then
            mQry = "Delete From PurchInvoiceDetailBom Where DocId = '" & SearchCode & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

            mQry = "Delete From PurchInvoiceDetailBomSku Where DocId = '" & SearchCode & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
        End If

        If AgL.Dman_Execute(" Select Count(*) From Stock Where DocId = '" & SearchCode & "' 
                    And SubRecordType = '" & mSubRecordType_StockTransfer & "'", IIf(AgL.PubServerName = "", Conn, AgL.GcnRead)).ExecuteScalar() > 0 Then
            mQry = " Delete From Stock Where DocId = '" & SearchCode & "' And SubRecordType = '" & mSubRecordType_StockTransfer & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
        End If

        mSr = AgL.VNull(AgL.Dman_Execute("Select Max(Sr) From PurchInvoiceDetail With (NoLock)  Where DocID = '" & mSearchCode & "'", AgL.GcnRead).ExecuteScalar)
        For I = 0 To Dgl1.RowCount - 1


            If Dgl1.Item(Col1SKU, I).Tag <> "" Then
                If mMultiplyWithMinus Then
                    Dgl1.Item(Col1Qty, I).Value = -Math.Abs(Val(Dgl1.Item(Col1Qty, I).Value))
                    Dgl1.Item(Col1DocQty, I).Value = -Math.Abs(Val(Dgl1.Item(Col1DocQty, I).Value))

                    Dgl1.Item(Col1DealQty, I).Value = -Math.Abs(Val(Dgl1.Item(Col1DealQty, I).Value))
                    Dgl1.Item(Col1DocDealQty, I).Value = -Math.Abs(Val(Dgl1.Item(Col1DocDealQty, I).Value))

                    Dgl1.Item(Col1Amount, I).Value = -Math.Abs(Val(Dgl1.Item(Col1Amount, I).Value))
                End If

                Dim bQty_Issue As Double = 0
                Dim bQty_Receive As Double = 0
                Dim bPcs_Issue As Integer = 0
                Dim bPcs_Receive As Integer = 0
                Dim bDealQty_Issue As Double = 0
                Dim bDealQty_Receive As Double = 0
                Dim bProcess As String = DglMain.Item(Col1Value, rowProcess).Tag
                Dim bGodown As String = AgL.XNull(Dgl1.Item(Col1Godown, I).Tag)

                If LblNCatNature.Tag = NCatNature.Receive Or LblNCatNature.Tag = NCatNature.Invoice Then
                    If Val(Dgl1.Item(Col1StockQty, I).Value) <> 0 Then
                        bQty_Issue = 0
                        bQty_Receive = Math.Abs(Val(Dgl1.Item(Col1StockQty, I).Value))
                    Else
                        bQty_Issue = 0
                        bQty_Receive = Math.Abs(Val(Dgl1.Item(Col1Qty, I).Value))
                    End If
                    bDealQty_Issue = 0
                    bDealQty_Receive = Math.Abs(Val(Dgl1.Item(Col1DealQty, I).Value))
                    bPcs_Issue = 0
                    bPcs_Receive = Math.Abs(Val(Dgl1.Item(Col1Pcs, I).Value))


                    If AgL.XNull(DglMain.Item(Col1Value, rowLastProcessOfCombination).Tag) <> "" Then bProcess = DglMain.Item(Col1Value, rowLastProcessOfCombination).Tag
                Else
                    If Val(Dgl1.Item(Col1StockQty, I).Value) <> 0 Then
                        bQty_Issue = Math.Abs(Val(Dgl1.Item(Col1StockQty, I).Value))
                        bQty_Receive = 0
                    Else
                        bQty_Issue = Math.Abs(Val(Dgl1.Item(Col1Qty, I).Value))
                        bQty_Receive = 0
                    End If

                    bDealQty_Issue = Math.Abs(Val(Dgl1.Item(Col1DealQty, I).Value))
                    bDealQty_Receive = 0
                    bPcs_Issue = Math.Abs(Val(Dgl1.Item(Col1Pcs, I).Value))
                    bPcs_Receive = 0

                    bProcess = Dgl1.Item(Col1FromProcess, I).Tag

                    If AgL.XNull(Dgl1.Item(Col1FromGodown, I).Tag) <> "" Then bGodown = AgL.XNull(Dgl1.Item(Col1FromGodown, I).Tag)

                    If bProcess = "" Then
                        If FDivisionNameForCustomization(14) = "PRATHAM APPARE" Or
                                FDivisionNameForCustomization(15) = "AGARWAL UNIFORM" Then
                            bProcess = AgL.XNull(DglMain.Item(Col1Value, rowPrevProcess).Tag)
                        End If
                    End If
                End If

                If Dgl1.Item(ColSNo, I).Tag Is Nothing And Dgl1.Rows(I).Visible = True Then
                    mSr += 1
                    If Dgl1.Item(Col1PurchaseInvoice, I).Tag = "" Then Dgl1.Item(Col1PurchaseInvoice, I).Tag = mSearchCode : Dgl1.Item(Col1PurchaseInvoiceSr, I).Value = mSr

                    InsertManualBarCodes(mSearchCode, mSr, I, Conn, Cmd)
                    InsertPurchInvoiceDetail(mSearchCode, mSr, I, mMultiplyWithMinus, Conn, Cmd)
                    FSaveTransferDetail(mSearchCode, mSr, I, Conn, Cmd)
                    FUpdateDeal(I, Conn, Cmd)


                    If CType(AgL.VNull(FGetSettings(SettingFields.PostConsumptionYn, SettingType.General)), Boolean) = True Then
                        If FDivisionNameForCustomization(14) = "PRATHAM APPARE" Or
                                FDivisionNameForCustomization(15) = "AGARWAL UNIFORM" Then
                            FPostConsumption_Garment(mSearchCode, mSr, I, Conn, Cmd)
                        Else
                            FPostConsumption(mSearchCode, mSr, I, Conn, Cmd)
                        End If
                    End If

                    If Dgl1.Item(Col1DocQty, I).Tag IsNot Nothing Then
                        CType(Dgl1.Item(Col1DocQty, I).Tag, FrmPurchaseInvoiceDimension_WithDimension).FSave(mSearchCode, mSr, I, Conn, Cmd)
                    Else
                        If AgL.XNull(Dgl2.Item(Col1Value, rowStockInNo).Tag) = "" Then
                            mDimensionSrl += 1
                            InsertStock(mSearchCode, mSr, mDimensionSrl, I, bSalesTaxGroupParty, bProcess, bGodown, bQty_Issue, bQty_Receive, bPcs_Issue, bPcs_Receive, bDealQty_Issue, bDealQty_Receive, Conn, Cmd)
                            InsertStockProcess(mSearchCode, mSr, mDimensionSrl, I, bSalesTaxGroupParty, bProcess, bQty_Receive, bQty_Issue, bPcs_Issue, bPcs_Receive, bDealQty_Receive, bDealQty_Issue, Conn, Cmd)
                        End If
                    End If
                Else
                    If Dgl1.Rows(I).Visible = True Then
                        UpdateManualBarCodes(mSearchCode, Val(Dgl1.Item(ColSNo, I).Tag), I, Conn, Cmd)
                        UpdatePurchInvoiceDetail(mSearchCode, Val(Dgl1.Item(ColSNo, I).Tag), I, mMultiplyWithMinus, Conn, Cmd)
                        FSaveTransferDetail(mSearchCode, mSr, I, Conn, Cmd)

                        If CType(AgL.VNull(FGetSettings(SettingFields.PostConsumptionYn, SettingType.General)), Boolean) = True Then
                            If FDivisionNameForCustomization(14) = "PRATHAM APPARE" Or FDivisionNameForCustomization(15) = "AGARWAL UNIFORM" Then
                                FPostConsumption_Garment(mSearchCode, Dgl1.Item(ColSNo, I).Tag, I, Conn, Cmd)
                            Else
                                FPostConsumption(mSearchCode, Dgl1.Item(ColSNo, I).Tag, I, Conn, Cmd)
                            End If
                        End If

                        If Dgl1.Item(Col1DocQty, I).Tag IsNot Nothing Then
                            CType(Dgl1.Item(Col1DocQty, I).Tag, FrmPurchaseInvoiceDimension_WithDimension).FSave(mSearchCode, Val(Dgl1.Item(ColSNo, I).Tag), I, Conn, Cmd)
                        Else
                            UpdateStock(mSearchCode, Val(Dgl1.Item(ColSNo, I).Tag), Val(Dgl1.Item(Col1TransactionStockSr, I).Value), I, bSalesTaxGroupParty, bProcess, bGodown, bQty_Issue, bQty_Receive, bPcs_Issue, bPcs_Receive, bDealQty_Issue, bDealQty_Receive, Conn, Cmd)
                            UpdateStockProcess(mSearchCode, Val(Dgl1.Item(ColSNo, I).Tag), Val(Dgl1.Item(Col1TransactionStockProcessSr, I).Value), I, bSalesTaxGroupParty, bProcess, bQty_Receive, bQty_Issue, bPcs_Receive, bPcs_Issue, bDealQty_Receive, bDealQty_Issue, Conn, Cmd)

                        End If
                    Else
                        If Dgl1.Item(ColSNo, I).Tag IsNot Nothing Then
                            mQry = "Delete From Stock Where DocId = '" & SearchCode & "' and TSr =" & Dgl1.Item(ColSNo, I).Tag & ""
                            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

                            mQry = "Delete From StockProcess Where DocId = '" & SearchCode & "' and TSr =" & Dgl1.Item(ColSNo, I).Tag & ""
                            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

                            mQry = "Delete From PurchInvoiceDetailTransfer Where DocId = '" & SearchCode & "' And Sr =" & Dgl1.Item(ColSNo, I).Tag & ""
                            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

                            mQry = "Delete From PurchInvoiceDimensionDetail Where DocId = '" & SearchCode & "' and Sr =" & Val(Dgl1.Item(ColSNo, I).Tag) & ""
                            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

                            mQry = " Delete From PurchInvoiceDetailSku Where DocId = '" & mSearchCode & "' And Sr = " & Val(Dgl1.Item(ColSNo, I).Tag) & "  "
                            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

                            mQry = " Delete From PurchInvoiceDetail Where DocId = '" & mSearchCode & "' And Sr = " & Val(Dgl1.Item(ColSNo, I).Tag) & "  "
                            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
                        End If
                    End If
                End If

                UpdateItemGroupPerson(I, Conn, Cmd)
            End If
        Next

        FPostConsumptionInStock(mSearchCode, Conn, Cmd)
        FPostConsumptionInStockProcess(mSearchCode, Conn, Cmd)


        If CType(AgL.VNull(FGetSettings(SettingFields.PostStockReverseEntryAlsoYn, SettingType.General)), Boolean) = True Then
            FPostStockReverse(mSearchCode, Conn, Cmd)
        End If

        If CType(AgL.VNull(FGetSettings(SettingFields.GenerateBarcodeYn, SettingType.General)), Boolean) = True Then
            GenerateAndInsertBarcode(mSearchCode, Conn, Cmd)
        End If


        If Topctrl1.Mode.ToUpper = "EDIT" Then
            mQry = "Delete From LedgerHead Where DocID = '" & SearchCode & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
        End If

        If AgL.XNull(DglMain.Item(Col1Value, rowVendor).Tag) <> "" Then
            mQry = "INSERT INTO LedgerHead (
                           DocID,
                           V_Type,
                           V_Prefix,
                           V_Date,
                           V_No,
                           Div_Code,
                           Site_Code,
                           ManualRefNo,
                           Subcode,
                           DrCr,
                           UptoDate,
                           Remarks,
                           Status,
                           SalesTaxGroupParty,
                           PlaceOfSupply,
                           PartySalesTaxNo,
                           Structure,
                           CustomFields,
                           PartyDocNo,
                           PartyDocDate,
                           EntryBy,
                           EntryDate,
                           ApproveBy,
                           ApproveDate,
                           MoveToLog,
                           MoveToLogDate,
                           UploadDate
                       )
                       VALUES (
                           '" & SearchCode & "',
                           " & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_Type).Tag) & ",
                           " & AgL.Chk_Text(LblPrefix.Text) & ",
                           " & AgL.Chk_Date(DglMain.Item(Col1Value, rowV_Date).Value) & ",
                           " & Val(DglMain.Item(Col1Value, rowV_No).Value) & ",
                           " & AgL.Chk_Text(TxtDivision.Tag) & ",
                           " & AgL.Chk_Text(DglMain.Item(Col1Value, rowSite_Code).Tag) & ",
                           " & AgL.Chk_Text(DglMain.Item(Col1Value, rowReferenceNo).Value) & ",
                           " & AgL.Chk_Text(DglMain.Item(Col1Value, rowVendor).Tag) & ",
                           'Cr',
                           Null,
                           " & AgL.Chk_Text(Dgl2.Item(Col1Value, rowRemarks).Value) & ",
                           Null,
                           " & AgL.Chk_Text(CType(DglMain.Item(Col1BtnDetail, rowVendor).Tag, FrmPurchaseInvoiceParty).Dgl1.Item(FrmPurchaseInvoiceParty.Col1Value, FrmPurchaseInvoiceParty.rowSalesTaxGroup).Value) & ",
                           " & AgL.Chk_Text(CType(DglMain.Item(Col1BtnDetail, rowVendor).Tag, FrmPurchaseInvoiceParty).Dgl1.Item(FrmPurchaseInvoiceParty.Col1Value, FrmPurchaseInvoiceParty.rowPlaceOfSupply).Value) & ",
                           " & AgL.Chk_Text(CType(DglMain.Item(Col1BtnDetail, rowVendor).Tag, FrmPurchaseInvoiceParty).Dgl1.Item(FrmPurchaseInvoiceParty.Col1Value, FrmPurchaseInvoiceParty.rowSalesTaxNo).Value) & ",
                           " & AgL.Chk_Text(TxtStructure.Tag) & ",
                           " & AgL.Chk_Text(TxtCustomFields.Tag) & ",
                           " & AgL.Chk_Text(Dgl2.Item(Col1Value, rowVendorDocNo).Value) & ",
                           " & AgL.Chk_Date(Dgl2.Item(Col1Value, rowVendorDocDate).Value) & ",
                           " & AgL.Chk_Text(AgL.PubUserName) & ",
                           " & AgL.Chk_Date(AgL.PubLoginDate) & ",
                           Null,
                           Null,
                           " & AgL.Chk_Text(AgL.PubUserName) & ",
                           " & AgL.Chk_Date(AgL.PubLoginDate) & ",
                           Null
                       );
"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
        End If

        If Topctrl1.Mode.ToUpper = "Add" Then
            If AgL.StrCmp(DglMain.Item(Col1Value, rowV_Type).Tag, Ncat.PurchaseInvoice) Then
                If AgL.StrCmp(AgL.XNull(AgL.PubDtEnviro.Rows(0)("LrGenerationPattern")), LrGenerationPattern.FromLrEntry) Then
                    If Dgl2.Item(Col1Value, rowBtnTransportDetail).Tag IsNot Nothing Then
                        If CType(Dgl2.Item(Col1Value, rowBtnTransportDetail).Tag, FrmPurchaseInvoiceHeader).Dgl1.Item(FrmPurchaseInvoiceHeader.Col1Value, FrmPurchaseInvoiceHeader.rowFill).Tag IsNot Nothing Then
                            mQry = " UPDATE PurchInvoice Set LrCode = '" & CType(Dgl2.Item(Col1Value, rowBtnTransportDetail).Tag, FrmPurchaseInvoiceHeader).Dgl1.Item(FrmPurchaseInvoiceHeader.Col1Value, FrmPurchaseInvoiceHeader.rowFill).Tag & "'
                                    Where DocId = '" & mSearchCode & "'"
                            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
                        End If
                    End If
                    'ElseIf AgL.StrCmp(AgL.XNull(AgL.PubDtEnviro.Rows(0)("LrGenerationPattern")), LrGenerationPattern.FromPurchaseInvoice) Then
                    '   FInsertLRDetail(mSearchCode, Conn, Cmd)
                End If
            ElseIf Topctrl1.Mode.ToUpper = "Edit" Then
                'If AgL.StrCmp(AgL.XNull(AgL.PubDtEnviro.Rows(0)("LrGenerationPattern")), LrGenerationPattern.FromPurchaseInvoice) Then
                'FUpdateLRDetail(mSearchCode, Conn, Cmd)
                'End If
            End If
        End If

        If AgL.StrCmp(DglMain.Item(Col1Value, rowV_Type).Tag, Ncat.PurchaseInvoice) Then
            If AgL.StrCmp(AgL.XNull(AgL.PubDtEnviro.Rows(0)("LrGenerationPattern")), LrGenerationPattern.FromPurchaseInvoice) Then
                mQry = "Select Count(*) from StockHead With (NoLock) where GenDocId = '" & mSearchCode & "' And V_type = '" & Ncat.LrEntry & "' "
                If AgL.VNull(AgL.Dman_Execute(mQry, IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar()) = 0 Then
                    FInsertLRDetail(mSearchCode, Conn, Cmd)
                Else
                    FUpdateLRDetail(mSearchCode, Conn, Cmd)
                End If
            End If
        End If

        If FDivisionNameForCustomization(14) = "PRATHAM APPARE" Or
            FDivisionNameForCustomization(15) = "AGARWAL UNIFORM" Then
            If Dgl2.Item(Col1Value, rowBtnMaterialIssue).Tag IsNot Nothing Then
                CType(Dgl2.Item(Col1Value, rowBtnMaterialIssue).Tag, FrmPurchaseInvoiceStockIssRec).FSave(mSearchCode, Conn, Cmd)
            End If
        End If


        Dim mNarrationParty As String
        Dim mNarration As String
        If LblV_Type.Tag = Ncat.PurchaseReturn Then
            mNarrationParty = DglMain.Item(Col1Value, rowV_Type).Value
            mNarration = DglMain.Item(Col1Value, rowV_Type).Value & " : " & DglMain.Item(Col1Value, rowVendor).Value & ""
        Else
            If Dgl2.Item(Col1Value, rowVendorDocNo).Value <> "" Then
                mNarrationParty = DglMain.Item(Col1Value, rowV_Type).Value & " : " & Dgl2.Item(Col1Value, rowVendorDocNo).Value & " Dated " & Dgl2.Item(Col1Value, rowVendorDocDate).Value
                mNarration = DglMain.Item(Col1Value, rowV_Type).Value & " : " & DglMain.Item(Col1Value, rowVendor).Value & " Invoice No. " & Dgl2.Item(Col1Value, rowVendorDocNo).Value & " Dated " & Dgl2.Item(Col1Value, rowVendorDocDate).Value
            Else
                mNarrationParty = DglMain.Item(Col1Value, rowV_Type).Value
                mNarration = DglMain.Item(Col1Value, rowV_Type).Value & " : " & DglMain.Item(Col1Value, rowVendor).Value & ""
            End If
        End If

        mNarration = FGetNarrationStr(SearchCode, Conn, Cmd, SettingFields.NarrationSummaryNonParty)
        mNarrationParty = FGetNarrationStr(SearchCode, Conn, Cmd, SettingFields.NarrationSummaryParty)




        Dim bPartyLedgerPostingAc As String = ""
        Dim bLinkedPartyAc As String = ""
        If AgL.StrCmp(AgL.XNull(DtV_TypeSettings.Rows(0)("LedgerPostingPartyAcType")), PurchInvoiceLedgerPostingPartyAcType.Vendor) Then
            bPartyLedgerPostingAc = DglMain.Item(Col1Value, rowVendor).Tag
            bLinkedPartyAc = DglMain.Item(Col1Value, rowLinkedParty).Tag
        Else
            bPartyLedgerPostingAc = DglMain.Item(Col1Value, rowBillToParty).Tag
            bLinkedPartyAc = DglMain.Item(Col1Value, rowLinkedParty).Tag
        End If

        Dim mIsPostInLedger As Boolean = True
        If AgL.VNull(AgL.Dman_Execute("Select IfNull(IsPostInLedger,1) From Voucher_Type With (NoLock)
                Where V_Type = '" & DglMain.Item(Col1Value, rowV_Type).Tag & "'",
                IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar()) = 0 Then
            mIsPostInLedger = False
        End If

        If mIsPostInLedger = True Then
            Call ClsFunction.PostStructureLineToAccounts(AgCalcGrid1, mNarrationParty, mNarration, mSearchCode, TxtDivision.AgSelectedValue, DglMain.Item(Col1Value, rowSite_Code).Tag, TxtDivision.AgSelectedValue,
                                             DglMain.Item(Col1Value, rowV_Type).Tag, LblPrefix.Text, DglMain.Item(Col1Value, rowV_No).Value, DglMain.Item(Col1Value, rowReferenceNo).Value, bPartyLedgerPostingAc, DglMain.Item(Col1Value, rowV_Date).Value, Conn, Cmd,, mMultiplyWithMinus, bLinkedPartyAc)
        End If

        If (FDivisionNameForCustomization(14) = "PRATHAM APPARE" Or
            FDivisionNameForCustomization(15) = "AGARWAL UNIFORM") And LblV_Type.Tag = Ncat.JobInvoice Then
            If Dgl2.Item(Col1Value, rowPaidAmount).Tag IsNot Nothing Then
                If Val(Dgl2.Item(Col1Value, rowPaidAmount).Value) > 0 Then
                    Dim mMaxSr As Integer = AgL.VNull(AgL.Dman_Execute("Select IfNull(Max(V_SNo),0) 
                        From Ledger With (NoLock)
                        Where DocId = '" & mSearchCode & "'", IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar())

                    mQry = "INSERT INTO Ledger (DocId, V_SNo, V_No, V_Type, V_Prefix, V_Date, SubCode, ContraSub, 
                    AmtDr, AmtCr, Chq_No, Chq_Date, Narration, Site_Code, U_Name, U_EntDt, DivCode, RecId)
                    SELECT '" & mSearchCode & "' As DocId, " & mMaxSr + 1 & " As V_SNo, " & Val(DglMain.Item(Col1Value, rowV_No).Value) & " As V_No, 
                    " & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_Type).Tag) & " As V_Type, 
                    " & AgL.Chk_Text(LblPrefix.Text) & " As V_Prefix, 
                    " & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_Date).Value) & " As V_Date, 
                    " & AgL.Chk_Text(DglMain.Item(Col1Value, rowBillToParty).Tag) & " As SubCode, 
                    " & AgL.Chk_Text(CType(Dgl2.Item(Col1Value, rowPaidAmount).Tag, FrmPurchaseInvoicePayment).Dgl1.Item(Col1Value, FrmPurchaseInvoicePayment.rowBankCashAc).Tag) & " As ContraSub, 
                    " & Val(Dgl2.Item(Col1Value, rowPaidAmount).Value) & " As AmtDr, 
                    0 As AmtCr, 
                    " & AgL.Chk_Text(CType(Dgl2.Item(Col1Value, rowPaidAmount).Tag, FrmPurchaseInvoicePayment).Dgl1.Item(Col1Value, FrmPurchaseInvoicePayment.rowChqNo).Value) & " As Chq_No, 
                    " & AgL.Chk_Date(CType(Dgl2.Item(Col1Value, rowPaidAmount).Tag, FrmPurchaseInvoicePayment).Dgl1.Item(Col1Value, FrmPurchaseInvoicePayment.rowChqDate).Value) & " As Chq_Date, 
                    " & AgL.Chk_Text("Being Payment made from " + CType(Dgl2.Item(Col1Value, rowPaidAmount).Tag, FrmPurchaseInvoicePayment).Dgl1.Item(Col1Value, FrmPurchaseInvoicePayment.rowBankCashAc).Value) & " As Narration, 
                    " & AgL.Chk_Text(DglMain.Item(Col1Value, rowSite_Code).Tag) & " As Site_Code, 
                    " & AgL.Chk_Text(AgL.PubUserName) & " As U_Name, 
                    " & AgL.Chk_Text(AgL.PubLoginDate) & " As U_EntDt, 
                    '" & TxtDivision.Tag & "' As DivCode, 
                    " & AgL.Chk_Text(DglMain.Item(Col1Value, rowReferenceNo).Value) & " As RecId "
                    AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

                    mQry = "INSERT INTO Ledger (DocId, V_SNo, V_No, V_Type, V_Prefix, V_Date, SubCode, ContraSub, 
                    AmtDr, AmtCr, Chq_No, Chq_Date, Narration, Site_Code, U_Name, U_EntDt, DivCode, RecId)
                    SELECT '" & mSearchCode & "' As DocId, " & mMaxSr + 2 & " As V_SNo, " & Val(DglMain.Item(Col1Value, rowV_No).Value) & " As V_No, 
                    " & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_Type).Tag) & " As V_Type, 
                    " & AgL.Chk_Text(LblPrefix.Text) & " As V_Prefix, 
                    " & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_Date).Value) & " As V_Date, 
                    " & AgL.Chk_Text(CType(Dgl2.Item(Col1Value, rowPaidAmount).Tag, FrmPurchaseInvoicePayment).Dgl1.Item(Col1Value, FrmPurchaseInvoicePayment.rowBankCashAc).Tag) & " As SubCode, 
                    " & AgL.Chk_Text(DglMain.Item(Col1Value, rowBillToParty).Tag) & " As ContraSub, 
                    0 As AmtDr, 
                    " & Val(Dgl2.Item(Col1Value, rowPaidAmount).Value) & " As AmtCr, 
                    " & AgL.Chk_Text(CType(Dgl2.Item(Col1Value, rowPaidAmount).Tag, FrmPurchaseInvoicePayment).Dgl1.Item(Col1Value, FrmPurchaseInvoicePayment.rowChqNo).Value) & " As Chq_No, 
                    " & AgL.Chk_Date(CType(Dgl2.Item(Col1Value, rowPaidAmount).Tag, FrmPurchaseInvoicePayment).Dgl1.Item(Col1Value, FrmPurchaseInvoicePayment.rowChqDate).Value) & " As Chq_Date, 
                    " & AgL.Chk_Text("Being Payment made to " + DglMain.Item(Col1Value, rowBillToParty).Value) & " As Narration, 
                    " & AgL.Chk_Text(DglMain.Item(Col1Value, rowSite_Code).Tag) & " As Site_Code, 
                    " & AgL.Chk_Text(AgL.PubUserName) & " As U_Name, 
                    " & AgL.Chk_Text(AgL.PubLoginDate) & " As U_EntDt, 
                    '" & TxtDivision.Tag & "' As DivCode, 
                    " & AgL.Chk_Text(DglMain.Item(Col1Value, rowReferenceNo).Value) & " As RecId "
                    AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
                End If

                'If Val(CType(Dgl2.Item(Col1Value, rowPaidAmount).Tag, FrmPurchaseInvoicePayment).Dgl1.Item(Col1Value, FrmPurchaseInvoicePayment.rowTdsAmount).Value) > 0 Then
                '    Dim mMaxSr As Integer = AgL.VNull(AgL.Dman_Execute("Select IfNull(Max(V_SNo),0) 
                '        From Ledger With (NoLock)
                '        Where DocId = '" & mSearchCode & "'", IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar())

                '    mQry = "INSERT INTO Ledger (DocId, V_SNo, V_No, V_Type, V_Prefix, V_Date, SubCode, ContraSub, 
                '            AmtDr, AmtCr, Chq_No, Chq_Date, Narration, Site_Code, U_Name, U_EntDt, DivCode, RecId)
                '            SELECT '" & mSearchCode & "' As DocId, " & mMaxSr + 1 & " As V_SNo, " & Val(DglMain.Item(Col1Value, rowV_No).Value) & " As V_No, 
                '            " & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_Type).Tag) & " As V_Type, 
                '            " & AgL.Chk_Text(LblPrefix.Text) & " As V_Prefix, 
                '            " & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_Date).Value) & " As V_Date, 
                '            " & AgL.Chk_Text(DglMain.Item(Col1Value, rowBillToParty).Tag) & " As SubCode, 
                '            " & AgL.Chk_Text(CType(Dgl2.Item(Col1Value, rowPaidAmount).Tag, FrmPurchaseInvoicePayment).Dgl1.Item(Col1Value, FrmPurchaseInvoicePayment.rowTdsLedgerAccount).Tag) & " As ContraSub, 
                '            " & Val(CType(Dgl2.Item(Col1Value, rowPaidAmount).Tag, FrmPurchaseInvoicePayment).Dgl1.Item(Col1Value, FrmPurchaseInvoicePayment.rowTdsAmount).Value) & " As AmtDr, 
                '            0 As AmtCr, 
                '            Null As Chq_No, Null As Chq_Date, 
                '            " & AgL.Chk_Text("Being Tds deducted for " + DglMain.Item(Col1Value, rowBillToParty).Value & ") As Narration, 
                '            " & AgL.Chk_Text(DglMain.Item(Col1Value, rowSite_Code).Tag) & " As Site_Code, 
                '            " & AgL.Chk_Text(AgL.PubUserName) & " As U_Name, 
                '            " & AgL.Chk_Text(AgL.PubLoginDate) & " As U_EntDt, 
                '            '" & TxtDivision.Tag & "' As DivCode, 
                '            " & AgL.Chk_Text(DglMain.Item(Col1Value, rowReferenceNo).Value) & " As RecId "
                '    AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)


                '    mQry = "INSERT INTO Ledger (DocId, V_SNo, V_No, V_Type, V_Prefix, V_Date, SubCode, ContraSub, 
                '            AmtDr, AmtCr, Chq_No, Chq_Date, Narration, Site_Code, U_Name, U_EntDt, DivCode, RecId)
                '            SELECT '" & mSearchCode & "' As DocId, " & mMaxSr + 1 & " As V_SNo, " & Val(DglMain.Item(Col1Value, rowV_No).Value) & " As V_No, 
                '            " & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_Type).Tag) & " As V_Type, 
                '            " & AgL.Chk_Text(LblPrefix.Text) & " As V_Prefix, 
                '            " & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_Date).Value) & " As V_Date, 
                '            " & AgL.Chk_Text(DglMain.Item(Col1Value, rowBillToParty).Tag) & " As SubCode, 
                '            " & AgL.Chk_Text(CType(Dgl2.Item(Col1Value, rowPaidAmount).Tag, FrmPurchaseInvoicePayment).Dgl1.Item(Col1Value, FrmPurchaseInvoicePayment.rowTdsLedgerAccount).Tag) & " As ContraSub, 
                '            " & Val(CType(Dgl2.Item(Col1Value, rowPaidAmount).Tag, FrmPurchaseInvoicePayment).Dgl1.Item(Col1Value, FrmPurchaseInvoicePayment.rowTdsAmount).Value) & " As AmtDr, 
                '            0 As AmtCr, 
                '            Null As Chq_No, Null As Chq_Date, 
                '            " & AgL.Chk_Text("Being Tds deducted for " + DglMain.Item(Col1Value, rowBillToParty).Value & ") As Narration, 
                '            " & AgL.Chk_Text(DglMain.Item(Col1Value, rowSite_Code).Tag) & " As Site_Code, 
                '            " & AgL.Chk_Text(AgL.PubUserName) & " As U_Name, 
                '            " & AgL.Chk_Text(AgL.PubLoginDate) & " As U_EntDt, 
                '            '" & TxtDivision.Tag & "' As DivCode, 
                '            " & AgL.Chk_Text(DglMain.Item(Col1Value, rowReferenceNo).Value) & " As RecId "
                '    AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
                'End If
            End If
        End If



        Dim DtItem As DataTable
        mQry = "Select I.Code as ItemCode, I.Barcode
                From Item I With (NoLock)  
                LEFT JOIN ItemGroup Ig  With (NoLock) On I.ItemGroup = Ig.Code 
                LEFT JOIN ItemCategory Ic With (NoLock) ON I.ItemCategory = Ic.Code
                Where I.Code In (Select Item From PurchInvoiceDetail L With (NoLock) Where DocID ='" & mSearchCode & "') 
                And IsNull(Ig.BarcodeType,Ic.BarcodeType) = '" & BarcodeType.Fixed & "' 
                And I.Barcode Is Not Null"
        DtItem = AgL.FillData(mQry, IIf(AgL.PubServerName = "", Conn, AgL.GcnRead)).Tables(0)
        For I = 0 To DtItem.Rows.Count - 1
            ClsMain.UpdateCurrentStockAtBarcodeFixed(AgL.XNull(DtItem.Rows(I)("barCode")), AgL.XNull(DtItem.Rows(I)("ItemCode")), DglMain.Item(Col1Value, rowSite_Code).Tag, Conn, Cmd)
        Next

        If FGetSettings(SettingFields.GeneratedEntryV_TypeForContraSite, SettingType.General) <> "" Then
            FPostCorrespondenceEntryToBranch(SearchCode, Conn, Cmd)
        End If

        If mCustomUI <> "" Then
            FLedgerPostForCustomUI(SearchCode, Conn, Cmd)
        End If

        mQry = " Delete From StockVirtual Where DocId = '" & mSearchCode & "'"
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

        If mFlag_Import = False Then
            If AgL.StrCmp(AgL.PubUserName, AgLibrary.ClsConstant.PubSuperUserName) Or AgL.StrCmp(AgL.PubUserName, "Sa") Then
                AgCL.GridSetiingWriteXml(Me.Text & Dgl1.Name & AgL.PubCompCode & AgL.PubDivCode & AgL.PubSiteCode, Dgl1)
                AgCL.GridSetiingWriteXml(Me.Text & Dgl4.Name & AgL.PubCompCode & AgL.PubDivCode & AgL.PubSiteCode, Dgl4)
            End If
        End If
    End Sub
    Private Sub InsertPurchInvoiceDetail(DocID As String, Sr As Integer, LineGridRowIndex As Integer, MultiplyWithMinus As Boolean, ByRef Conn As Object, ByRef Cmd As Object)
        mQry = "Insert Into PurchInvoiceDetail
                            (DocId, Sr, PurchInvoice, PurchInvoiceSr, PurchPlan, PurchPlanSr, 
                            Barcode, Item, Specification, 
                            BaleNo, LrBaleCode, SalesTaxGroupItem, ProfitMarginPer, DocQty, 
                            FreeQty, RejQty, LossQty, Qty, Unit, Pcs,
                            UnitMultiplier, DocDealQty, FreeDealQty, LossDealQtyPer, LossDealQty, DealQty, DealUnit,                             StockUnit, StockUnitMultiplier, StockQty,
                            Rate, DiscountPer, DiscountAmount, AdditionalDiscountPer, AdditionalDiscountAmount, AdditionPer, AdditionAmount, 
                            Amount, Sale_Rate, MRP, 
                            FromProcess, Catalog, SaleInvoice, SaleInvoiceSr, Remark, LRNo, LRDate, HSN, LotNo, Godown, ReferenceNo, ReferenceDate, ReferenceDocID, ReferenceTSr, ReferenceSr, ReferenceDocIdBalanceQty, 
                            RawMaterial, RawMaterialConsumptionQty, Deal, DealAmount, ExpiryDate " & IIf(TxtStructure.Tag = "", "", ",") & AgCalcGrid1.FLineTableFieldNameStr() & ") "
        mQry += " Select " & AgL.Chk_Text(mSearchCode) & ", " & Sr & ", " &
                            " " & AgL.Chk_Text(Dgl1.Item(Col1PurchaseInvoice, LineGridRowIndex).Tag) & ", " &
                            " " & AgL.Chk_Text(Dgl1.Item(Col1PurchaseInvoiceSr, LineGridRowIndex).Value) & ", " &
                            " " & AgL.Chk_Text(Dgl1.Item(Col1PurchasePlan, LineGridRowIndex).Tag) & ", " &
                            " " & AgL.Chk_Text(Dgl1.Item(Col1PurchasePlanSr, LineGridRowIndex).Value) & ", " &
                            " " & AgL.Chk_Text(Dgl1.Item(Col1Barcode, LineGridRowIndex).Tag) & ", " &
                            " " & AgL.Chk_Text(Dgl1.Item(Col1SKU, LineGridRowIndex).Tag) & ", " &
                            " " & AgL.Chk_Text(Dgl1.Item(Col1Specification, LineGridRowIndex).Value) & ", " &
                            " " & AgL.Chk_Text(Dgl1.Item(Col1BaleNo, LineGridRowIndex).Value) & ", " &
                            " " & AgL.Chk_Text(Dgl1.Item(Col1BaleNo, LineGridRowIndex).Tag) & ", " &
                            " " & AgL.Chk_Text(Dgl1.Item(Col1SalesTaxGroup, LineGridRowIndex).Tag) & ", " &
                            " " & Val(Dgl1.Item(Col1ProfitMarginPer, LineGridRowIndex).Value) & ", " &
                            " " & Val(Dgl1.Item(Col1DocQty, LineGridRowIndex).Value) & ", " &
                            " " & Val(Dgl1.Item(Col1FreeQty, LineGridRowIndex).Value) & ", " &
                            " " & Val(Dgl1.Item(Col1RejQty, LineGridRowIndex).Value) & ", " &
                            " " & Val(Dgl1.Item(Col1LossQty, LineGridRowIndex).Value) & ", " &
                            " " & Val(Dgl1.Item(Col1Qty, LineGridRowIndex).Value) & ", " &
                            " " & AgL.Chk_Text(Dgl1.Item(Col1Unit, LineGridRowIndex).Value) & ", " &
                            " " & Val(Dgl1.Item(Col1Pcs, LineGridRowIndex).Value) & ", " &
                            " " & Val(Dgl1.Item(Col1UnitMultiplier, LineGridRowIndex).Value) & ", " &
                            " " & Val(Dgl1.Item(Col1DocDealQty, LineGridRowIndex).Value) & ", " &
                            " " & Val(Dgl1.Item(Col1FreeDealQty, LineGridRowIndex).Value) & ", " &
                            " " & Val(Dgl1.Item(Col1LossDealQtyPer, LineGridRowIndex).Value) & ", " &
                            " " & Val(Dgl1.Item(Col1LossDealQty, LineGridRowIndex).Value) & ", " &
                            " " & Val(Dgl1.Item(Col1DealQty, LineGridRowIndex).Value) & ", " &
                            " " & AgL.Chk_Text(Dgl1.Item(Col1DealUnit, LineGridRowIndex).Value) & ", " &
                            " " & AgL.Chk_Text(Dgl1.Item(Col1StockUnit, LineGridRowIndex).Value) & ", " &
                            " " & Val(Dgl1.Item(Col1StockUnitMultiplier, LineGridRowIndex).Value) & ", " &
                            " " & Val(Dgl1.Item(Col1StockQty, LineGridRowIndex).Value) & ", " &
                            " " & Val(Dgl1.Item(Col1Rate, LineGridRowIndex).Value) & ", " &
                            " " & Val(Dgl1.Item(Col1DiscountPer, LineGridRowIndex).Value) & ", " &
                            " " & Val(Dgl1.Item(Col1DiscountAmount, LineGridRowIndex).Value) & ", " &
                            " " & Val(Dgl1.Item(Col1AdditionalDiscountPer, LineGridRowIndex).Value) & ", " &
                            " " & Val(Dgl1.Item(Col1AdditionalDiscountAmount, LineGridRowIndex).Value) & ", " &
                            " " & Val(Dgl1.Item(Col1AdditionPer, LineGridRowIndex).Value) & ", " &
                            " " & Val(Dgl1.Item(Col1AdditionAmount, LineGridRowIndex).Value) & ", " &
                            " " & Val(Dgl1.Item(Col1Amount, LineGridRowIndex).Value) & ", " &
                            " " & Val(Dgl1.Item(Col1SaleRate, LineGridRowIndex).Value) & ", " &
                            " " & Val(Dgl1.Item(Col1MRP, LineGridRowIndex).Value) & ", " &
                            " " & AgL.Chk_Text(Dgl1.Item(Col1FromProcess, LineGridRowIndex).Tag) & ", " &
                            " " & AgL.Chk_Text(Dgl1.Item(Col1Catalog, LineGridRowIndex).Tag) & ", " &
                            " " & AgL.Chk_Text(Dgl1.Item(Col1SaleInvoice, LineGridRowIndex).Tag) & ", " &
                            " " & Val(Dgl1.Item(Col1SaleInvoiceSr, LineGridRowIndex).Value) & ", " &
                            " " & AgL.Chk_Text(Dgl1.Item(Col1Remark, LineGridRowIndex).Value) & ", " &
                            " " & AgL.Chk_Text(Dgl1.Item(Col1LRNo, LineGridRowIndex).Value) & ", " &
                            " " & AgL.Chk_Date(Dgl1.Item(Col1LRDate, LineGridRowIndex).Value) & ", " &
                            " " & AgL.Chk_Text(Dgl1.Item(Col1HSN, LineGridRowIndex).Value) & ", " &
                            " " & AgL.Chk_Text(Dgl1.Item(Col1LotNo, LineGridRowIndex).Value) & ", " &
                            " " & AgL.Chk_Text(Dgl1.Item(Col1Godown, LineGridRowIndex).Tag) & ", " &
                            " " & AgL.Chk_Text(Dgl1.Item(Col1ReferenceNo, LineGridRowIndex).Value) & ", " &
                            " " & AgL.Chk_Date(Dgl1.Item(Col1ReferenceDate, LineGridRowIndex).Value) & ", " &
                            " " & AgL.Chk_Text(Dgl1.Item(Col1ReferenceDocID, LineGridRowIndex).Value) & ", " &
                            " " & AgL.Chk_Text(Dgl1.Item(Col1ReferenceTSr, LineGridRowIndex).Value) & ", " &
                            " " & AgL.Chk_Text(Dgl1.Item(Col1ReferenceSr, LineGridRowIndex).Value) & ", " &
                            " " & Val(Dgl1.Item(Col1ReferenceDocIdBalanceQty, LineGridRowIndex).Value) & ", " &
                            " " & AgL.Chk_Text(Dgl1.Item(Col1RawMaterial, LineGridRowIndex).Tag) & ", " &
                            " " & Val(Dgl1.Item(Col1RawMaterialConsumptionQty, LineGridRowIndex).Value) & ", " &
                            " " & AgL.Chk_Text(Dgl1.Item(Col1Deal, LineGridRowIndex).Value) & ", " &
                            " " & Val(Dgl1.Item(Col1DealAmount, LineGridRowIndex).Value) & ", " &
                            " " & AgL.Chk_Date(Dgl1.Item(Col1ExpiryDate, LineGridRowIndex).Value) & IIf(TxtStructure.Tag = "", "", ",") & AgCalcGrid1.FLineTableFieldValuesStr(LineGridRowIndex, MultiplyWithMinus) & " "
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)


        mQry = "Insert Into PurchInvoiceDetailSku
                            (DocId, Sr, ItemCategory, ItemGroup, Item, Dimension1, 
                            Dimension2, Dimension3, Dimension4, Size) "
        mQry += " Select " & AgL.Chk_Text(mSearchCode) & ", " & Sr & ", " &
                                    " " & AgL.Chk_Text(Dgl1.Item(Col1ItemCategory, LineGridRowIndex).Tag) & ", " &
                                    " " & AgL.Chk_Text(Dgl1.Item(Col1ItemGroup, LineGridRowIndex).Tag) & ", " &
                                    " " & AgL.Chk_Text(Dgl1.Item(Col1Item, LineGridRowIndex).Tag) & ", " &
                                    " " & AgL.Chk_Text(Dgl1.Item(Col1Dimension1, LineGridRowIndex).Tag) & ", " &
                                    " " & AgL.Chk_Text(Dgl1.Item(Col1Dimension2, LineGridRowIndex).Tag) & ", " &
                                    " " & AgL.Chk_Text(Dgl1.Item(Col1Dimension3, LineGridRowIndex).Tag) & ", " &
                                    " " & AgL.Chk_Text(Dgl1.Item(Col1Dimension4, LineGridRowIndex).Tag) & ", " &
                                    " " & AgL.Chk_Text(Dgl1.Item(Col1Size, LineGridRowIndex).Tag) & ""
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
    End Sub
    Private Sub InsertStock(DocID As String, TSr As Integer, Sr As Integer, LineGridRowIndex As Integer,
                            bSalesTaxGroupParty As String, bProcess As String, bGodown As String,
                            bQty_Issue As Double, bQty_Receive As Double, bPcs_Issue As Integer, bPcs_Receive As Integer, bDealQty_Issue As Double, bDealQty_Receive As Double,
                            ByRef Conn As Object, ByRef Cmd As Object)
        Dim mStockValue As Double

        If AgCalcGrid1.AgStructure = "" Then
            mStockValue = Val(Dgl1.Item(Col1Amount, LineGridRowIndex).Value)
        Else
            mStockValue = Val(AgCalcGrid1.AgChargesValue(AgTemplate.ClsMain.Charges.NETAMOUNT, LineGridRowIndex, AgStructure.AgCalcGrid.AgCalcGridColumn.Col_Amount))
        End If

        If CType(AgL.VNull(FGetSettings(SettingFields.PostInStockYn, SettingType.General)), Boolean) = True Then
            If AgL.XNull(Dgl1.Item(Col1StockProcess, LineGridRowIndex).Tag) = "" Then
                mQry = "Insert Into Stock(DocID, TSr, Sr, V_Type, V_Prefix, V_Date, V_No, RecID, Div_Code, Site_Code, 
                        SubCode, SalesTaxGroupParty, Item, SalesTaxGroupItem,  LotNo, ExpiryDate, MRP, Process, Godown, 
                        EType_IR, Qty_Iss, Qty_Rec, Unit, Pcs_Iss, Pcs_Rec, UnitMultiplier, DealQty_Iss , DealQty_Rec, DealUnit, 
                        Rate, Amount, Sale_Rate, DiscountPer, AdditionalDiscountPer, Deal, Landed_Value, ReferenceDocID, ReferenceTSr, ReferenceDocIDSr) 
                        Values (
                        '" & mSearchCode & "', " & TSr & ", " & Sr & ", 
                        " & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_Type).Tag) & ", 
                        " & AgL.Chk_Text(LblPrefix.Text) & ",
                        " & AgL.Chk_Date(DglMain.Item(Col1Value, rowV_Date).Value) & ", 
                        " & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_No).Value) & ", 
                        " & AgL.Chk_Text(DglMain.Item(Col1Value, rowReferenceNo).Value) & ",  
                        " & AgL.Chk_Text(TxtDivision.Tag) & ", 
                        " & AgL.Chk_Text(DglMain.Item(Col1Value, rowSite_Code).Tag) & ",
                        " & AgL.Chk_Text(DglMain.Item(Col1Value, rowVendor).Tag) & ", 
                        " & AgL.Chk_Text(bSalesTaxGroupParty) & ", 
                        " & AgL.Chk_Text(Dgl1.Item(Col1SKU, LineGridRowIndex).Tag) & ", 
                        " & AgL.Chk_Text(Dgl1.Item(Col1SalesTaxGroup, LineGridRowIndex).Tag) & ", 
                        " & AgL.Chk_Text(Dgl1.Item(Col1LotNo, LineGridRowIndex).Value) & ", 
                        " & AgL.Chk_Date(Dgl1.Item(Col1ExpiryDate, LineGridRowIndex).Value) & ", 
                        " & Val(Dgl1.Item(Col1MRP, LineGridRowIndex).Value) & ", 
                        " & AgL.Chk_Text(bProcess) & ", 
                        " & AgL.Chk_Text(bGodown) & ",
                        '', " & Val(bQty_Issue) & "," & Val(bQty_Receive) & ", 
                        " & AgL.Chk_Text(Dgl1.Item(Col1Unit, LineGridRowIndex).Value) & ",
                        " & Val(bPcs_Issue) & "," & Val(bPcs_Receive) & ", 
                        " & Val(Dgl1.Item(Col1UnitMultiplier, LineGridRowIndex).Value) & ",
                        " & Val(bDealQty_Issue) & ", " & Val(bDealQty_Receive) & ",  
                        " & AgL.Chk_Text(Dgl1.Item(Col1DealUnit, LineGridRowIndex).Value) & ", 
                        " & Val(Dgl1.Item(Col1Rate, LineGridRowIndex).Value) & ", 
                        " & mStockValue & ",
                        " & Val(Dgl1.Item(Col1SaleRate, LineGridRowIndex).Value) & ",
                        " & Val(Dgl1.Item(Col1DiscountPer, LineGridRowIndex).Value) & ",
                        " & Val(Dgl1.Item(Col1AdditionalDiscountPer, LineGridRowIndex).Value) & ",
                        " & AgL.Chk_Text(Dgl1.Item(Col1Deal, LineGridRowIndex).Value) & ", 0,
                        " & AgL.Chk_Text(Dgl1.Item(Col1ReferenceDocID, LineGridRowIndex).Value) & ", 
                        " & Val(Dgl1.Item(Col1ReferenceTSr, LineGridRowIndex).Value) & ", 
                        " & Val(Dgl1.Item(Col1ReferenceSr, LineGridRowIndex).Value) & ")"
                AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

                FSaveTransferDataInStock(DocID, TSr, Sr, LineGridRowIndex, Conn, Cmd)
            End If
        End If
    End Sub
    Private Sub UpdateStock(DocID As String, TSr As Integer, Sr As Integer, LineGridRowIndex As Integer,
                            bSalesTaxGroupParty As String, bProcess As String, bGodown As String,
                            bQty_Issue As Double, bQty_Receive As Double, bPcs_Issue As Double, bPcs_Receive As Double, bDealQty_Issue As Double, bDealQty_Receive As Double,
                            ByRef Conn As Object, ByRef Cmd As Object)
        If CType(AgL.VNull(FGetSettings(SettingFields.PostInStockYn, SettingType.General)), Boolean) = True Then
            If AgL.XNull(Dgl1.Item(Col1StockProcess, LineGridRowIndex).Tag) = "" Then
                If AgL.Dman_Execute(" Select Count(*) From PurchInvoiceDimensionDetail L With (NoLock)
                            Where L.DocId = '" & DocID & "' And TSr = " & TSr & "", IIf(AgL.PubServerName = "", Conn, AgL.GcnRead)).ExecuteScalar() = 0 Then
                    If Dgl1.Item(Col1TransactionStockSr, LineGridRowIndex).Value <> "" Then
                        'If Dgl1.Item(Col1StockSr, LineGridRowIndex).Value.ToString.Contains(",") = 0 Then
                        mQry = "Update Stock Set
                                V_Type = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_Type).Tag) & ", 
                                V_Prefix = " & AgL.Chk_Text(LblPrefix.Text) & ",
                                V_Date = " & AgL.Chk_Date(DglMain.Item(Col1Value, rowV_Date).Value) & ", 
                                V_No = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_No).Value) & ", 
                                RecId = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowReferenceNo).Value) & ",  
                                Div_Code = " & AgL.Chk_Text(TxtDivision.Tag) & ", 
                                Site_Code = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowSite_Code).Tag) & ",
                                Subcode = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowVendor).Tag) & ", 
                                SalesTaxGroupParty = " & AgL.Chk_Text(bSalesTaxGroupParty) & ", 
                                Barcode = " & AgL.Chk_Text(Dgl1.Item(Col1Barcode, LineGridRowIndex).Tag) & ", 
                                Item = " & AgL.Chk_Text(Dgl1.Item(Col1SKU, LineGridRowIndex).Tag) & ", 
                                SalesTaxGroupItem = " & AgL.Chk_Text(Dgl1.Item(Col1SalesTaxGroup, LineGridRowIndex).Tag) & ", 
                                LotNo = " & AgL.Chk_Text(Dgl1.Item(Col1LotNo, LineGridRowIndex).Value) & ",
                                ExpiryDate = " & AgL.Chk_Date(Dgl1.Item(Col1ExpiryDate, LineGridRowIndex).Value) & ",
                                MRP = " & Val(Dgl1.Item(Col1MRP, LineGridRowIndex).Value) & ", 
                                Process = " & AgL.Chk_Text(bProcess) & ",
                                Godown = " & AgL.Chk_Text(bGodown) & ",
                                EType_IR = '', 
                                Qty_Rec = " & Val(bQty_Receive) & ",
                                Qty_Iss = " & Val(bQty_Issue) & ",
                                Unit = " & AgL.Chk_Text(Dgl1.Item(Col1Unit, LineGridRowIndex).Value) & ",
                                Pcs_Rec = " & Val(bPcs_Receive) & ",
                                Pcs_Iss = " & Val(bPcs_Issue) & ",
                                UnitMultiplier = " & Val(Dgl1.Item(Col1UnitMultiplier, LineGridRowIndex).Value) & ",
                                DealQty_Iss = " & Val(bDealQty_Issue) & ",
                                DealQty_Rec = " & Val(bDealQty_Receive) & ",
                                DealUnit = " & AgL.Chk_Text(Dgl1.Item(Col1DealUnit, LineGridRowIndex).Value) & ", 
                                Rate = " & Val(Dgl1.Item(Col1Rate, LineGridRowIndex).Value) & ", 
                                Amount = " & Val(Dgl1.Item(Col1Amount, LineGridRowIndex).Value) & ",
                                Sale_Rate = " & Val(Dgl1.Item(Col1SaleRate, LineGridRowIndex).Value) & ",
                                DiscountPer = " & Val(Dgl1.Item(Col1DiscountPer, LineGridRowIndex).Value) & ",
                                AdditionalDiscountPer = " & Val(Dgl1.Item(Col1AdditionalDiscountPer, LineGridRowIndex).Value) & ",
                                Deal = " & AgL.Chk_Text(Dgl1.Item(Col1Deal, LineGridRowIndex).Value) & ",
                                Landed_Value = 0,
                                ReferenceDocId = " & AgL.Chk_Text(Dgl1.Item(Col1ReferenceDocID, LineGridRowIndex).Value) & ", 
                                ReferenceTSr = " & AgL.Chk_Text(Dgl1.Item(Col1ReferenceTSr, LineGridRowIndex).Value) & ", 
                                ReferenceDocIdSr = " & AgL.Chk_Text(Dgl1.Item(Col1ReferenceSr, LineGridRowIndex).Value) & " 
                                Where DocId = '" & DocID & "' and TSr =" & TSr & " And Sr =" & Sr & " "
                        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

                        FSaveTransferDataInStock(DocID, TSr, Sr, LineGridRowIndex, Conn, Cmd)
                        'End If
                    Else
                        mDimensionSrl += 1
                        mQry = "Insert Into Stock(DocID, TSr, Sr, V_Type, V_Prefix, V_Date, V_No, RecID, Div_Code, Site_Code, 
                            SubCode, SalesTaxGroupParty, Barcode, Item, SalesTaxGroupItem,  LotNo, ExpiryDate, MRP, Process, Godown,
                            EType_IR, Qty_Iss, Qty_Rec, Unit, Pcs_Iss, Pcs_Rec, UnitMultiplier, DealQty_Iss , DealQty_Rec, DealUnit, 
                            Rate, Amount, Sale_Rate, DiscountPer, AdditionalDiscountPer, Deal, Landed_Value, ReferenceDocID, ReferenceTSr, ReferenceDocIDSr) 
                            Values (
                            '" & mSearchCode & "', " & TSr & ", " & Sr & ", 
                            " & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_Type).Tag) & ", 
                            " & AgL.Chk_Text(LblPrefix.Text) & ",
                            " & AgL.Chk_Date(DglMain.Item(Col1Value, rowV_Date).Value) & ", 
                            " & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_No).Value) & ", 
                            " & AgL.Chk_Text(DglMain.Item(Col1Value, rowReferenceNo).Value) & ",  
                            " & AgL.Chk_Text(TxtDivision.Tag) & ", 
                            " & AgL.Chk_Text(DglMain.Item(Col1Value, rowSite_Code).Tag) & ",
                            " & AgL.Chk_Text(DglMain.Item(Col1Value, rowVendor).Tag) & ", 
                            " & AgL.Chk_Text(bSalesTaxGroupParty) & ", 
                            " & AgL.Chk_Text(Dgl1.Item(Col1Barcode, LineGridRowIndex).Tag) & ", 
                            " & AgL.Chk_Text(Dgl1.Item(Col1SKU, LineGridRowIndex).Tag) & ", 
                            " & AgL.Chk_Text(Dgl1.Item(Col1SalesTaxGroup, LineGridRowIndex).Tag) & ", 
                            " & AgL.Chk_Text(Dgl1.Item(Col1LotNo, LineGridRowIndex).Value) & ", 
                            " & AgL.Chk_Date(Dgl1.Item(Col1ExpiryDate, LineGridRowIndex).Value) & ", 
                            " & Val(Dgl1.Item(Col1MRP, LineGridRowIndex).Value) & ", 
                            " & AgL.Chk_Text(bProcess) & ",
                            " & AgL.Chk_Text(bGodown) & ",
                            '', " & Val(bQty_Issue) & "," & Val(bQty_Receive) & ", 
                            " & AgL.Chk_Text(Dgl1.Item(Col1Unit, LineGridRowIndex).Value) & ",
                            '', " & Val(bPcs_Issue) & "," & Val(bPcs_Receive) & ", 
                            " & Val(Dgl1.Item(Col1UnitMultiplier, LineGridRowIndex).Value) & ",
                            " & Val(bDealQty_Issue) & ", " & Val(bDealQty_Receive) & ",  
                            " & AgL.Chk_Text(Dgl1.Item(Col1DealUnit, LineGridRowIndex).Value) & ", 
                            " & Val(Dgl1.Item(Col1Rate, LineGridRowIndex).Value) & ", 
                            " & Val(Dgl1.Item(Col1Amount, LineGridRowIndex).Value) & ",
                            " & Val(Dgl1.Item(Col1SaleRate, LineGridRowIndex).Value) & ",
                            " & Val(Dgl1.Item(Col1DiscountPer, LineGridRowIndex).Value) & ",
                            " & Val(Dgl1.Item(Col1AdditionalDiscountPer, LineGridRowIndex).Value) & ",
                            " & AgL.Chk_Text(Dgl1.Item(Col1Deal, LineGridRowIndex).Value) & ", 0,
                            " & AgL.Chk_Text(Dgl1.Item(Col1ReferenceDocID, LineGridRowIndex).Value) & ", 
                            " & Val(Dgl1.Item(Col1ReferenceTSr, LineGridRowIndex).Value) & ", 
                            " & Val(Dgl1.Item(Col1ReferenceSr, LineGridRowIndex).Value) & "
                            ) "
                        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

                        FSaveTransferDataInStock(DocID, TSr, mDimensionSrl, LineGridRowIndex, Conn, Cmd)
                    End If
                End If
            End If
        End If
    End Sub
    Private Sub FSaveTransferDataInStock(DocID As String, TSr As Integer, Sr As Integer, LineGridRowIndex As Integer,
                            ByRef Conn As Object, ByRef Cmd As Object)
        If AgL.XNull(Dgl1.Item(Col1ToGodown, LineGridRowIndex).Tag) <> "" Then
            mQry = "Insert Into Stock(DocID, TSr, Sr, V_Type, V_Prefix, V_Date, V_No, RecID, Div_Code, Site_Code, 
                    SubCode, SalesTaxGroupParty, Item, SalesTaxGroupItem,  LotNo, 
                    ExpiryDate, MRP, Process, Godown, 
                    EType_IR, Qty_Iss, Qty_Rec, Unit, UnitMultiplier, DealQty_Iss , DealQty_Rec, DealUnit, 
                    Rate, Amount, Sale_Rate, DiscountPer, AdditionalDiscountPer, Deal, Landed_Value, ReferenceDocID, ReferenceTSr, ReferenceDocIDSr, SubRecordType) 
                    Select DocID, TSr, Sr + 1000, V_Type, V_Prefix, V_Date, V_No, RecID, Div_Code, Site_Code, 
                    SubCode, SalesTaxGroupParty, Item, SalesTaxGroupItem,  LotNo, 
                    ExpiryDate, MRP, Process, " & AgL.Chk_Text(Dgl1.Item(Col1ToGodown, LineGridRowIndex).Tag) & ", 
                    EType_IR, Qty_Rec As Qty_Iss, Qty_Iss As Qty_Rec, Unit, UnitMultiplier, 
                    DealQty_Rec As DealQty_Iss, DealQty_Iss As DealQty_Rec, DealUnit, 
                    Rate, Amount, Sale_Rate, DiscountPer, AdditionalDiscountPer, Deal, Landed_Value, ReferenceDocID, ReferenceTSr, ReferenceDocIDSr, '" & mSubRecordType_StockTransfer & "' As SubRecordType 
                    From Stock Where DocId = '" & mSearchCode & "'
                    And TSr = " & TSr & " And Sr = " & Sr & ""
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
        End If
    End Sub
    Private Sub InsertStockProcess(DocID As String, TSr As Integer, Sr As Integer, LineGridRowIndex As Integer,
                            bSalesTaxGroupParty As String, bProcess As String,
                            bQty_Issue As Double, bQty_Receive As Double, bPcs_Issue As Double, bPcs_Receive As Double, bDealQty_Issue As Double, bDealQty_Receive As Double,
                            ByRef Conn As Object, ByRef Cmd As Object)
        If CType(AgL.VNull(FGetSettings(SettingFields.PostInStockProcessYn, SettingType.General)), Boolean) = True Then
            mQry = "Insert Into StockProcess(DocID, TSr, Sr, V_Type, V_Prefix, V_Date, V_No, RecID, Div_Code, Site_Code, 
                    SubCode, SalesTaxGroupParty, Item, SalesTaxGroupItem,  LotNo, 
                    EType_IR, Qty_Iss, Qty_Rec, Pcs_Iss, Pcs_Rec, Unit, UnitMultiplier, DealQty_Iss , DealQty_Rec, DealUnit, 
                    Rate, Amount, Landed_Value, Process, ReferenceDocID, ReferenceTSr, ReferenceDocIDSr, 
                    StockProcess, StockProcessTSr, StockProcessSr) 
                    Values (
                    '" & mSearchCode & "', " & TSr & ", " & mDimensionSrl & ", 
                    " & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_Type).Tag) & ", 
                    " & AgL.Chk_Text(LblPrefix.Text) & ",
                    " & AgL.Chk_Date(DglMain.Item(Col1Value, rowV_Date).Value) & ", 
                    " & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_No).Value) & ", 
                    " & AgL.Chk_Text(DglMain.Item(Col1Value, rowReferenceNo).Value) & ",  
                    " & AgL.Chk_Text(TxtDivision.Tag) & ", 
                    " & AgL.Chk_Text(DglMain.Item(Col1Value, rowSite_Code).Tag) & ",
                    " & AgL.Chk_Text(DglMain.Item(Col1Value, rowVendor).Tag) & ", 
                    " & AgL.Chk_Text(bSalesTaxGroupParty) & ", 
                    " & AgL.Chk_Text(Dgl1.Item(Col1SKU, LineGridRowIndex).Tag) & ", 
                    " & AgL.Chk_Text(Dgl1.Item(Col1SalesTaxGroup, LineGridRowIndex).Value) & ", 
                    " & AgL.Chk_Text(Dgl1.Item(Col1LotNo, LineGridRowIndex).Value) & ",
                    '', " & Val(bQty_Issue) & "," & Val(bQty_Receive) & ",
                    " & Val(bPcs_Issue) & "," & Val(bPcs_Receive) & ",
                    " & AgL.Chk_Text(Dgl1.Item(Col1Unit, LineGridRowIndex).Value) & ",
                    " & Val(Dgl1.Item(Col1UnitMultiplier, LineGridRowIndex).Value) & ",
                    " & Val(bDealQty_Receive) & ", " & Val(bDealQty_Issue) & ",  
                    " & AgL.Chk_Text(Dgl1.Item(Col1DealUnit, LineGridRowIndex).Value) & ", 
                    " & Val(Dgl1.Item(Col1Rate, LineGridRowIndex).Value) & ", 
                    " & Val(Dgl1.Item(Col1Amount, LineGridRowIndex).Value) & ",0,
                    " & AgL.Chk_Text(DglMain.Item(Col1Value, rowProcess).Tag) & ",
                    " & AgL.Chk_Text(Dgl1.Item(Col1ReferenceDocID, LineGridRowIndex).Value) & ", 
                    " & Val(Dgl1.Item(Col1ReferenceTSr, LineGridRowIndex).Value) & ", 
                    " & Val(Dgl1.Item(Col1ReferenceSr, LineGridRowIndex).Value) & ",
                    " & AgL.Chk_Text(Dgl1.Item(Col1StockProcess, LineGridRowIndex).Tag) & ", 
                    " & Val(Dgl1.Item(Col1StockProcessTSr, LineGridRowIndex).Value) & ", 
                    " & Val(Dgl1.Item(Col1StockProcessSr, LineGridRowIndex).Value) & "
                    )"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
        End If
    End Sub
    Private Sub UpdateStockProcess(DocID As String, TSr As Integer, Sr As Integer, LineGridRowIndex As Integer,
                            bSalesTaxGroupParty As String, bProcess As String,
                            bQty_Issue As Double, bQty_Receive As Double, bPcs_Issue As Double, bPcs_Receive As Double, bDealQty_Issue As Double, bDealQty_Receive As Double,
                            ByRef Conn As Object, ByRef Cmd As Object)
        If CType(AgL.VNull(FGetSettings(SettingFields.PostInStockProcessYn, SettingType.General)), Boolean) = True Then
            If AgL.XNull(Dgl1.Item(Col1StockProcess, LineGridRowIndex).Tag) = "" Then
                If AgL.Dman_Execute(" Select Count(*) From PurchInvoiceDimensionDetail L With (NoLock)
                            Where L.DocId = '" & DocID & "' And TSr = " & TSr & "", IIf(AgL.PubServerName = "", Conn, AgL.GcnRead)).ExecuteScalar() = 0 Then
                    If Dgl1.Item(Col1TransactionStockProcessSr, LineGridRowIndex).Value <> "" Then
                        'If Dgl1.Item(Col1StockSr, LineGridRowIndex).Value.ToString.Contains(",") = 0 Then
                        mQry = "Update StockProcess Set
                                V_Type = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_Type).Tag) & ", 
                                V_Prefix = " & AgL.Chk_Text(LblPrefix.Text) & ",
                                V_Date = " & AgL.Chk_Date(DglMain.Item(Col1Value, rowV_Date).Value) & ", 
                                V_No = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_No).Value) & ", 
                                RecId = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowReferenceNo).Value) & ",  
                                Div_Code = " & AgL.Chk_Text(TxtDivision.Tag) & ", 
                                Site_Code = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowSite_Code).Tag) & ",
                                Subcode = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowVendor).Tag) & ", 
                                SalesTaxGroupParty = " & AgL.Chk_Text(bSalesTaxGroupParty) & ", 
                                Barcode = " & AgL.Chk_Text(Dgl1.Item(Col1Barcode, LineGridRowIndex).Tag) & ", 
                                Item = " & AgL.Chk_Text(Dgl1.Item(Col1SKU, LineGridRowIndex).Tag) & ", 
                                SalesTaxGroupItem = " & AgL.Chk_Text(Dgl1.Item(Col1SalesTaxGroup, LineGridRowIndex).Tag) & ", 
                                LotNo = " & AgL.Chk_Text(Dgl1.Item(Col1LotNo, LineGridRowIndex).Value) & ",
                                EType_IR = '', 
                                Qty_Rec = " & Val(bQty_Receive) & ",
                                Qty_Iss = " & Val(bQty_Issue) & ",
                                Unit = " & AgL.Chk_Text(Dgl1.Item(Col1Unit, LineGridRowIndex).Value) & ",
                                Pcs_Rec = " & Val(bPcs_Receive) & ",
                                Pcs_Iss = " & Val(bPcs_Issue) & ",
                                UnitMultiplier = " & Val(Dgl1.Item(Col1UnitMultiplier, LineGridRowIndex).Value) & ",
                                DealQty_Rec = " & Val(bDealQty_Issue) & ",
                                DealQty_Iss = " & Val(bDealQty_Receive) & ",
                                DealUnit = " & AgL.Chk_Text(Dgl1.Item(Col1DealUnit, LineGridRowIndex).Value) & ", 
                                Rate = " & Val(Dgl1.Item(Col1Rate, LineGridRowIndex).Value) & ", 
                                Amount = " & Val(Dgl1.Item(Col1Amount, LineGridRowIndex).Value) & ",
                                Landed_Value = 0,
                                Process = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowProcess).Tag) & ", 
                                ReferenceDocId = " & AgL.Chk_Text(Dgl1.Item(Col1ReferenceDocID, LineGridRowIndex).Value) & ", 
                                ReferenceTSr = " & AgL.Chk_Text(Dgl1.Item(Col1ReferenceTSr, LineGridRowIndex).Value) & ", 
                                ReferenceDocIdSr = " & AgL.Chk_Text(Dgl1.Item(Col1ReferenceSr, LineGridRowIndex).Value) & ",
                                StockProcess = " & AgL.Chk_Text(Dgl1.Item(Col1StockProcess, LineGridRowIndex).Value) & ", 
                                StockProcessTSr = " & AgL.Chk_Text(Dgl1.Item(Col1StockProcessTSr, LineGridRowIndex).Value) & ", 
                                StockProcessSr = " & AgL.Chk_Text(Dgl1.Item(Col1StockProcessSr, LineGridRowIndex).Value) & " 
                                Where DocId = '" & DocID & "' and TSr =" & TSr & " And Sr =" & Sr & " "
                        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
                        'End If
                    Else
                        mDimensionSrl += 1
                        mQry = "Insert Into StockProcess(DocID, TSr, Sr, V_Type, V_Prefix, V_Date, V_No, RecID, Div_Code, Site_Code, 
                            SubCode, SalesTaxGroupParty, Barcode, Item, SalesTaxGroupItem,  LotNo, 
                            EType_IR, Qty_Iss, Qty_Rec, Pcs_Iss, Pcs_Rec, Unit, UnitMultiplier, DealQty_Iss , DealQty_Rec, DealUnit, 
                            Rate, Amount, Landed_Value, Process, ReferenceDocID, ReferenceTSr, ReferenceDocIDSr,
                            StockProcess, StockProcessTSr, StockProcessSr) 
                            Values (
                            '" & mSearchCode & "', " & TSr & ", " & Sr & ", 
                            " & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_Type).Tag) & ", 
                            " & AgL.Chk_Text(LblPrefix.Text) & ",
                            " & AgL.Chk_Date(DglMain.Item(Col1Value, rowV_Date).Value) & ", 
                            " & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_No).Value) & ", 
                            " & AgL.Chk_Text(DglMain.Item(Col1Value, rowReferenceNo).Value) & ",  
                            " & AgL.Chk_Text(TxtDivision.Tag) & ", 
                            " & AgL.Chk_Text(DglMain.Item(Col1Value, rowSite_Code).Tag) & ",
                            " & AgL.Chk_Text(DglMain.Item(Col1Value, rowVendor).Tag) & ", 
                            " & AgL.Chk_Text(bSalesTaxGroupParty) & ", 
                            " & AgL.Chk_Text(Dgl1.Item(Col1Barcode, LineGridRowIndex).Tag) & ", 
                            " & AgL.Chk_Text(Dgl1.Item(Col1SKU, LineGridRowIndex).Tag) & ", 
                            " & AgL.Chk_Text(Dgl1.Item(Col1SalesTaxGroup, LineGridRowIndex).Value) & ", 
                            " & AgL.Chk_Text(Dgl1.Item(Col1LotNo, LineGridRowIndex).Value) & ",
                            '', " & Val(bQty_Issue) & "," & Val(bQty_Receive) & ", 
                            " & Val(bPcs_Issue) & "," & Val(bPcs_Receive) & ", 
                            " & AgL.Chk_Text(Dgl1.Item(Col1Unit, LineGridRowIndex).Value) & ",
                            " & Val(Dgl1.Item(Col1UnitMultiplier, LineGridRowIndex).Value) & ",
                            " & Val(bDealQty_Receive) & ", " & Val(bDealQty_Issue) & ",  
                            " & AgL.Chk_Text(Dgl1.Item(Col1DealUnit, LineGridRowIndex).Value) & ", 
                            " & Val(Dgl1.Item(Col1Rate, LineGridRowIndex).Value) & ", 
                            " & Val(Dgl1.Item(Col1Amount, LineGridRowIndex).Value) & ",0,
                            " & AgL.Chk_Text(DglMain.Item(Col1Value, rowProcess).Tag) & ", 
                            " & AgL.Chk_Text(Dgl1.Item(Col1ReferenceDocID, LineGridRowIndex).Value) & ", 
                            " & Val(Dgl1.Item(Col1ReferenceTSr, LineGridRowIndex).Value) & ", 
                            " & Val(Dgl1.Item(Col1ReferenceSr, LineGridRowIndex).Value) & ",
                            " & AgL.Chk_Text(Dgl1.Item(Col1StockProcess, LineGridRowIndex).Tag) & ", 
                            " & Val(Dgl1.Item(Col1StockProcessTSr, LineGridRowIndex).Value) & ", 
                            " & Val(Dgl1.Item(Col1StockProcessSr, LineGridRowIndex).Value) & "
                            )"
                        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
                    End If
                End If
            End If
        End If
    End Sub
    Private Sub UpdatePurchInvoiceDetail(DocID As String, Sr As Integer, LineGridRowIndex As Integer, MultiplyWithMinus As Boolean, ByRef Conn As Object, ByRef Cmd As Object)
        mQry = "Update PurchInvoiceDetail " &
                                " SET Item = " & AgL.Chk_Text(Dgl1.Item(Col1SKU, LineGridRowIndex).Tag) & ", " &
                                " Barcode = " & AgL.Chk_Text(Dgl1.Item(Col1Barcode, LineGridRowIndex).Tag) & ", " &
                                " Specification = " & AgL.Chk_Text(Dgl1.Item(Col1Specification, LineGridRowIndex).Value) & ", " &
                                " SalesTaxGroupItem = " & AgL.Chk_Text(Dgl1.Item(Col1SalesTaxGroup, LineGridRowIndex).Tag) & ", " &
                                " ProfitMarginPer = " & Val(Dgl1.Item(Col1ProfitMarginPer, LineGridRowIndex).Value) & ", " &
                                " DocQty = " & Val(Dgl1.Item(Col1DocQty, LineGridRowIndex).Value) & ", " &
                                " RejQty = " & Val(Dgl1.Item(Col1RejQty, LineGridRowIndex).Value) & ", " &
                                " LossQty = " & Val(Dgl1.Item(Col1LossQty, LineGridRowIndex).Value) & ", " &
                                " 	FreeQty = " & Val(Dgl1.Item(Col1FreeQty, LineGridRowIndex).Value) & ", " &
                                " 	Qty = " & Val(Dgl1.Item(Col1Qty, LineGridRowIndex).Value) & ", " &
                                " 	Unit = " & AgL.Chk_Text(Dgl1.Item(Col1Unit, LineGridRowIndex).Value) & ", " &
                                " 	Pcs = " & Val(Dgl1.Item(Col1Pcs, LineGridRowIndex).Value) & ", " &
                                " 	DealUnit = " & AgL.Chk_Text(Dgl1.Item(Col1DealUnit, LineGridRowIndex).Value) & ", " &
                                " 	DocDealQty = " & Val(Dgl1.Item(Col1DocDealQty, LineGridRowIndex).Value) & ", " &
                                "   FreeDealQty = " & Val(Dgl1.Item(Col1FreeDealQty, LineGridRowIndex).Value) & ", " &
                                "   LossDealQtyPer = " & Val(Dgl1.Item(Col1LossDealQtyPer, LineGridRowIndex).Value) & ", " &
                                "   LossDealQty = " & Val(Dgl1.Item(Col1LossDealQty, LineGridRowIndex).Value) & ", " &
                                "   DealQty = " & Val(Dgl1.Item(Col1DealQty, LineGridRowIndex).Value) & ", " &
                                " 	StockUnit = " & AgL.Chk_Text(Dgl1.Item(Col1StockUnit, LineGridRowIndex).Value) & ", " &
                                " 	StockUnitMultiplier = " & Val(Dgl1.Item(Col1StockUnitMultiplier, LineGridRowIndex).Value) & ", " &
                                " 	StockQty = " & Val(Dgl1.Item(Col1StockQty, LineGridRowIndex).Value) & ", " &
                                " 	Rate = " & Val(Dgl1.Item(Col1Rate, LineGridRowIndex).Value) & ", " &
                                " 	DiscountPer = " & Val(Dgl1.Item(Col1DiscountPer, LineGridRowIndex).Value) & ", " &
                                " 	DiscountAmount = " & Val(Dgl1.Item(Col1DiscountAmount, LineGridRowIndex).Value) & ", " &
                                " 	AdditionalDiscountPer = " & Val(Dgl1.Item(Col1AdditionalDiscountPer, LineGridRowIndex).Value) & ", " &
                                " 	AdditionalDiscountAmount = " & Val(Dgl1.Item(Col1AdditionalDiscountAmount, LineGridRowIndex).Value) & ", " &
                                " 	AdditionPer = " & Val(Dgl1.Item(Col1AdditionPer, LineGridRowIndex).Value) & ", " &
                                " 	AdditionAmount = " & Val(Dgl1.Item(Col1AdditionAmount, LineGridRowIndex).Value) & ", " &
                                " 	Amount = " & Val(Dgl1.Item(Col1Amount, LineGridRowIndex).Value) & ", " &
                                " 	Sale_Rate = " & Val(Dgl1.Item(Col1SaleRate, LineGridRowIndex).Value) & ", " &
                                " 	MRP = " & Val(Dgl1.Item(Col1MRP, LineGridRowIndex).Value) & ", " &
                                " 	FromProcess = " & AgL.Chk_Text(Dgl1.Item(Col1FromProcess, LineGridRowIndex).Tag) & ", " &
                                "   Catalog = " & AgL.Chk_Text(Dgl1.Item(Col1Catalog, LineGridRowIndex).Tag) & ", " &
                                " 	Remark = " & AgL.Chk_Text(Dgl1.Item(Col1Remark, LineGridRowIndex).Value) & ", " &
                                " 	SaleInvoice = " & AgL.Chk_Text(Dgl1.Item(Col1SaleInvoice, LineGridRowIndex).Tag) & ", " &
                                " 	SaleInvoiceSr = " & Val(Dgl1.Item(Col1SaleInvoiceSr, LineGridRowIndex).Value) & ", " &
                                " 	LRNo = " & AgL.Chk_Text(Dgl1.Item(Col1LRNo, LineGridRowIndex).Value) & ", " &
                                " 	LRDate = " & AgL.Chk_Date(Dgl1.Item(Col1LRDate, LineGridRowIndex).Value) & ", " &
                                " 	HSN = " & AgL.Chk_Text(Dgl1.Item(Col1HSN, LineGridRowIndex).Value) & ", " &
                                " 	LotNo = " & AgL.Chk_Text(Dgl1.Item(Col1LotNo, LineGridRowIndex).Value) & ", " &
                                "   Godown = " & AgL.Chk_Text(Dgl1.Item(Col1Godown, LineGridRowIndex).Tag) & ", " &
                                " 	ReferenceNo = " & AgL.Chk_Text(Dgl1.Item(Col1ReferenceNo, LineGridRowIndex).Value) & ", " &
                                " 	ReferenceDate = " & AgL.Chk_Date(Dgl1.Item(Col1ReferenceDate, LineGridRowIndex).Value) & ", " &
                                " 	ReferenceDocID = " & AgL.Chk_Text(Dgl1.Item(Col1ReferenceDocID, LineGridRowIndex).Value) & ", " &
                                " 	ReferenceTSr = " & AgL.Chk_Text(Dgl1.Item(Col1ReferenceTSr, LineGridRowIndex).Value) & ", " &
                                " 	ReferenceSr = " & AgL.Chk_Text(Dgl1.Item(Col1ReferenceSr, LineGridRowIndex).Value) & ", " &
                                "   ReferenceDocIdBalanceQty = " & Val(Dgl1.Item(Col1ReferenceDocIdBalanceQty, LineGridRowIndex).Value) & ", " &
                                "   PurchInvoice = " & AgL.Chk_Text(Dgl1.Item(Col1PurchaseInvoice, LineGridRowIndex).Tag) & ", " &
                                "   PurchInvoiceSr = " & Val(Dgl1.Item(Col1PurchaseInvoiceSr, LineGridRowIndex).Value) & ", " &
                                "   PurchPlan = " & AgL.Chk_Text(Dgl1.Item(Col1PurchasePlan, LineGridRowIndex).Tag) & ", " &
                                "   PurchPlanSr = " & Val(Dgl1.Item(Col1PurchasePlanSr, LineGridRowIndex).Value) & ", " &
                                " 	BaleNo = " & AgL.Chk_Text(Dgl1.Item(Col1BaleNo, LineGridRowIndex).Value) & ", " &
                                " 	LrBaleCode = " & AgL.Chk_Text(Dgl1.Item(Col1BaleNo, LineGridRowIndex).Tag) & ", " &
                                " 	RawMaterial = " & AgL.Chk_Text(Dgl1.Item(Col1RawMaterial, LineGridRowIndex).Tag) & ", " &
                                "   RawMaterialConsumptionQty = " & Val(Dgl1.Item(Col1RawMaterialConsumptionQty, LineGridRowIndex).Value) & ", " &
                                " 	ExpiryDate = " & AgL.Chk_Date(Dgl1.Item(Col1ExpiryDate, LineGridRowIndex).Value) & ", " &
                                " 	DealAmount = " & Val(Dgl1.Item(Col1DealAmount, LineGridRowIndex).Value) & ", " &
                                " 	Deal = " & AgL.Chk_Text(Dgl1.Item(Col1Deal, LineGridRowIndex).Value) & IIf(TxtStructure.Tag = "", "", ",") &
                                " " & AgCalcGrid1.FLineTableUpdateStr(LineGridRowIndex, MultiplyWithMinus) & " " &
                                "   Where DocId = '" & mSearchCode & "' " &
                                "   And Sr = " & Dgl1.Item(ColSNo, LineGridRowIndex).Tag & " "
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

        mQry = "Update PurchInvoiceDetailSku " &
                                " SET ItemCategory = " & AgL.Chk_Text(Dgl1.Item(Col1ItemCategory, LineGridRowIndex).Tag) & ", " &
                                " ItemGroup = " & AgL.Chk_Text(Dgl1.Item(Col1ItemGroup, LineGridRowIndex).Tag) & ", " &
                                " Item = " & AgL.Chk_Text(Dgl1.Item(Col1Item, LineGridRowIndex).Tag) & ", " &
                                " Dimension1 = " & AgL.Chk_Text(Dgl1.Item(Col1Dimension1, LineGridRowIndex).Tag) & ", " &
                                " Dimension2 = " & AgL.Chk_Text(Dgl1.Item(Col1Dimension2, LineGridRowIndex).Tag) & ", " &
                                " Dimension3 = " & AgL.Chk_Text(Dgl1.Item(Col1Dimension3, LineGridRowIndex).Tag) & ", " &
                                " Dimension4 = " & AgL.Chk_Text(Dgl1.Item(Col1Dimension4, LineGridRowIndex).Tag) & ", " &
                                " Size = " & AgL.Chk_Text(Dgl1.Item(Col1Size, LineGridRowIndex).Tag) & " " &
                                " Where DocId = '" & mSearchCode & "' " &
                                " And Sr = " & Dgl1.Item(ColSNo, LineGridRowIndex).Tag & " "
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
    End Sub
    Private Sub FSaveTransferDetail(DocID As String, Sr As Integer, LineGridRowIndex As Integer, ByRef Conn As Object, ByRef Cmd As Object)
        If AgL.XNull(Dgl1(Col1ToGodown, LineGridRowIndex).Tag) <> "" Then
            If AgL.Dman_Execute("Select Count(*) From PurchInvoiceDetailTransfer With (NoLock) 
                        Where DocId = '" & DocID & "' And Sr = " & Sr & "", IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar = 0 Then
                mQry = "INSERT INTO PurchInvoiceDetailTransfer(DocId, Sr, FromGodown, ToGodown)
                    Values('" & mSearchCode & "', " & Sr & ",
                    " & AgL.Chk_Text(Dgl1(Col1FromGodown, LineGridRowIndex).Tag) & ", 
                    " & AgL.Chk_Text(Dgl1(Col1ToGodown, LineGridRowIndex).Tag) & ")"
                AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            Else
                mQry = "UPDATE PurchInvoiceDetailTransfer Set 
                        FromGodown = " & AgL.Chk_Text(Dgl1(Col1FromGodown, LineGridRowIndex).Tag) & ",
                        ToGodown = " & AgL.Chk_Text(Dgl1(Col1ToGodown, LineGridRowIndex).Tag) & "
                        Where DocID = '" & DocID & "' And Sr = '" & Sr & "' "
                AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            End If
        End If
    End Sub
    Private Sub UpdateItemGroupPerson(LineGridRowIndex As Integer, ByRef Conn As Object, ByRef Cmd As Object)
        'We will  record personal discount in ItemGroupPerson table only if we are not providing default discount                
        If Val(Dgl1.Item(Col1DiscountPer, LineGridRowIndex).Value) > 0 Then
            If Val(Dgl1.Item(Col1PersonalDiscountPer, LineGridRowIndex).Value) = 0 And Val(Dgl1.Item(Col1DiscountPer, LineGridRowIndex).Value) <> Val(Dgl1.Item(Col1DefaultDiscountPer, LineGridRowIndex).Value) Then

                If AgL.Dman_Execute("Select Count(*) From ItemGroupPerson With (NoLock) 
                    Where IfNull(ItemCategory,'') = '" & Dgl1.Item(Col1ItemCategory, LineGridRowIndex).Tag & "'
                    And IfNull(ItemGroup,'') = '" & Dgl1.Item(Col1ItemGroup, LineGridRowIndex).Tag & "'
                    And IfNull(Person,'') = '" & DglMain.Item(Col1Value, rowVendor).Tag & "'", IIf(AgL.PubServerName = "", Conn, AgL.GcnRead)).ExecuteScalar = 0 Then


                    mQry = " Insert Into ItemGroupPerson
                            (ItemCategory, ItemGroup, Person, DiscountCalculationPattern, DiscountPer, AdditionalDiscountCalculationPattern, AdditionalDiscountPer, AdditionCalculationPattern, AdditionPer)
                            Values
                            (" & AgL.Chk_Text(Dgl1.Item(Col1ItemCategory, LineGridRowIndex).Tag) & "," & AgL.Chk_Text(Dgl1.Item(Col1ItemGroup, LineGridRowIndex).Tag) & ", " & AgL.Chk_Text(DglMain.Item(Col1Value, rowVendor).Tag) & ",
                             " & AgL.Chk_Text(Dgl1(Col1DiscountCalculationPattern, LineGridRowIndex).Value) & "," & Val(Dgl1.Item(Col1DiscountPer, LineGridRowIndex).Value) & ", " & AgL.Chk_Text(Dgl1(Col1AdditionalDiscountCalculationPattern, LineGridRowIndex).Value) & ", " & Val(Dgl1.Item(Col1AdditionalDiscountPer, LineGridRowIndex).Value) & ", " & AgL.Chk_Text(Dgl1(Col1AdditionCalculationPattern, LineGridRowIndex).Value) & ", " & Val(Dgl1.Item(Col1AdditionPer, LineGridRowIndex).Value) & "
                            )
                           "
                    AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
                End If
                'ElseIf Val(Dgl1.Item(Col1PersonalDiscountPer, LineGridRowIndex).Value) > 0 And Val(Dgl1.Item(Col1PersonalDiscountPer, LineGridRowIndex).Value) <> Val(Dgl1.Item(Col1DiscountPer, LineGridRowIndex).Value) Then
            ElseIf Val(Dgl1.Item(Col1PersonalDiscountPer, LineGridRowIndex).Value) <> Val(Dgl1.Item(Col1DiscountPer, LineGridRowIndex).Value) Or
                Val(Dgl1.Item(Col1PersonalAdditionalDiscountPer, LineGridRowIndex).Value) <> Val(Dgl1.Item(Col1AdditionalDiscountPer, LineGridRowIndex).Value) Then
                mQry = "
                                Update ItemGroupPerson 
                                Set 
                                DiscountCalculationPattern = " & AgL.Chk_Text(Dgl1(Col1DiscountCalculationPattern, LineGridRowIndex).Value) & ",
                                DiscountPer=" & Val(Dgl1.Item(Col1DiscountPer, LineGridRowIndex).Value) & ",
                                AdditionalDiscountPer=" & Val(Dgl1.Item(Col1AdditionalDiscountPer, LineGridRowIndex).Value) & ",
                                AdditionalDiscountCalculationPattern = " & AgL.Chk_Text(Dgl1(Col1AdditionalDiscountCalculationPattern, LineGridRowIndex).Value) & ",
                                AdditionPer=" & Val(Dgl1.Item(Col1AdditionPer, LineGridRowIndex).Value) & ",
                                AdditionCalculationPattern = " & AgL.Chk_Text(Dgl1(Col1AdditionCalculationPattern, LineGridRowIndex).Value) & "
                                Where ItemCategory=" & AgL.Chk_Text(Dgl1.Item(Col1ItemCategory, LineGridRowIndex).Tag) & "
                                And ItemGroup=" & AgL.Chk_Text(Dgl1.Item(Col1ItemGroup, LineGridRowIndex).Tag) & "
                                And Person=" & AgL.Chk_Text(DglMain.Item(Col1Value, rowVendor).Tag) & "
                               "
                AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            End If
        End If
    End Sub

    Private Sub GenerateAndInsertBarcode(DocID As String, ByRef Conn As Object, ByRef Cmd As Object)
        Dim DtStock As DataTable
        Dim I As Integer
        mQry = "Select Pid.Rate As PurchaseRate, Pid.Sale_Rate As SaleRate, Pid.Mrp, 
                IfNull(S.Item,Pid.Item) As Item, S.Qty_Rec, S.DocId, S.Sr
                From Stock S With (NoLock) 
                LEFT JOIN PurchInvoiceDetail Pid With (NoLock) On S.DocId = Pid.DocId and S.Tsr = Pid.Sr
                Where S.DocID = '" & DocID & "' 
                And IfNull(S.Qty_Rec,0) > 0 "
        DtStock = AgL.FillData(mQry, IIf(AgL.PubServerName = "", Conn, AgL.GcnRead)).Tables(0)

        If DtStock.Rows.Count > 0 Then
            For I = 0 To DtStock.Rows.Count - 1
                Dim BarcodeCntForDocIdSr As Integer = 0
                mQry = "Select (Case When IsNull(Ig.BarcodeType,'N/A') = 'N/A' Then Ic.BarcodeType Else IsNull(Ig.BarcodeType,'N/A') End) As BarcodeType, 
                        (Case When IsNull(Ig.BarcodePattern,'N/A') = 'N/A' Then Ic.BarcodePattern Else IsNull(Ig.BarcodePattern,'N/A') End) As BarcodePattern
                        From Item I  With (NoLock) 
                        LEFT JOIN ItemGroup Ig  With (NoLock) On I.ItemGroup = Ig.Code 
                        LEFT JOIN ItemCategory Ic With (NoLock) ON I.ItemCategory = Ic.Code
                        Where I.Code = '" & AgL.XNull(DtStock.Rows(I)("Item")) & "'"
                Dim DtBarcodeType As DataTable = AgL.FillData(mQry, IIf(AgL.PubServerName = "", Conn, AgL.GcnRead)).Tables(0)
                If (AgL.XNull(DtBarcodeType.Rows(0)("BarCodePattern")) = AgLibrary.ClsMain.agConstants.BarcodePattern.Auto) Then
                    BarcodeCntForDocIdSr = AgL.Dman_Execute("Select Count(*) From BarCode  With (NoLock) Where GenDocId = '" & DocID & "' And GenSr = " & AgL.VNull(DtStock.Rows(I)("Sr")) & "", IIf(AgL.PubServerName = "", Conn, AgL.GcnRead)).ExecuteScalar
                    If BarcodeCntForDocIdSr = 0 Then
                        If AgL.XNull(DtBarcodeType.Rows(0)("BarCodeType")) = BarcodeType.UniquePerPcs Then
                            InsertBarCodes(DocID, AgL.VNull(DtStock.Rows(I)("Sr")), AgL.XNull(DtStock.Rows(I)("Item")), AgL.VNull(DtStock.Rows(I)("Qty_Rec")), 1, AgL.XNull(DtBarcodeType.Rows(0)("BarCodeType")), AgL.VNull(DtStock.Rows(I)("SaleRate")), AgL.VNull(DtStock.Rows(I)("PurchaseRate")), AgL.VNull(DtStock.Rows(I)("MRP")), Conn, Cmd)
                        ElseIf AgL.XNull(DtBarcodeType.Rows(0)("BarCodeType")) = BarcodeType.LotWise Or AgL.XNull(DtBarcodeType.Rows(0)("BarCodeType")) = BarcodeType.Fixed Then
                            InsertBarCodes(DocID, AgL.VNull(DtStock.Rows(I)("Sr")), AgL.XNull(DtStock.Rows(I)("Item")), 1, AgL.VNull(DtStock.Rows(I)("Qty_Rec")), AgL.XNull(DtBarcodeType.Rows(0)("BarCodeType")), AgL.VNull(DtStock.Rows(I)("SaleRate")), AgL.VNull(DtStock.Rows(I)("PurchaseRate")), AgL.VNull(DtStock.Rows(I)("MRP")), Conn, Cmd)
                        End If
                    Else
                        If AgL.XNull(DtBarcodeType.Rows(0)("BarCodeType")) = BarcodeType.UniquePerPcs Then
                            If BarcodeCntForDocIdSr < AgL.VNull(DtStock.Rows(I)("Qty_Rec")) Then
                                InsertBarCodes(DocID, AgL.VNull(DtStock.Rows(I)("Sr")), AgL.XNull(DtStock.Rows(I)("Item")), AgL.VNull(DtStock.Rows(I)("Qty_Rec")) - BarcodeCntForDocIdSr, 1, AgL.XNull(DtBarcodeType.Rows(0)("BarCodeType")), AgL.VNull(DtStock.Rows(I)("SaleRate")), AgL.VNull(DtStock.Rows(I)("PurchaseRate")), AgL.VNull(DtStock.Rows(I)("MRP")), Conn, Cmd)
                            ElseIf BarcodeCntForDocIdSr > AgL.VNull(DtStock.Rows(I)("Qty_Rec")) Then
                                mQry = " DELETE From BarcodeSiteDetail Where Code in
                                        (Select Code From Barcode  With (NoLock) Where GenDocId = '" & DocID & "' And GenSr = " & AgL.VNull(DtStock.Rows(I)("Sr")) & " 
                                        LIMIT " & BarcodeCntForDocIdSr - AgL.VNull(DtStock.Rows(I)("Qty_Rec")) & ") "
                                AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

                                mQry = " DELETE From Barcode Where Code in
                                        (Select Code From Barcode  With (NoLock) Where GenDocId = '" & DocID & "' And GenSr = " & AgL.VNull(DtStock.Rows(I)("Sr")) & " 
                                        LIMIT " & BarcodeCntForDocIdSr - AgL.VNull(DtStock.Rows(I)("Qty_Rec")) & ") "
                                AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
                            End If
                        ElseIf AgL.XNull(DtBarcodeType.Rows(0)("BarCodeType")) = BarcodeType.LotWise Or
                                AgL.XNull(DtBarcodeType.Rows(0)("BarCodeType")) = BarcodeType.Fixed Then
                            mQry = "UPDATE Barcode 
                                    Set Qty = " & AgL.VNull(DtStock.Rows(I)("Qty_Rec")) & ", 
                                    SaleRate = " & AgL.VNull(DtStock.Rows(I)("SaleRate")) & ", 
                                    PurchaseRate = " & AgL.VNull(DtStock.Rows(I)("PurchaseRate")) & ", 
                                    MRP = " & AgL.VNull(DtStock.Rows(I)("MRP")) & " 
                                    Where GenDocId = '" & DocID & "' And GenSr = " & AgL.VNull(DtStock.Rows(I)("Sr")) & " "
                            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
                        End If
                    End If
                    If (AgL.Dman_Execute("Select Count(*) From BarCode  With (NoLock) Where GenDocId = '" & DocID & "' And GenSr = " & AgL.VNull(DtStock.Rows(I)("Sr")) & " 
                                    And Item <> '" & AgL.XNull(DtStock.Rows(I)("Item")) & "'", IIf(AgL.PubServerName = "", Conn, AgL.GcnRead)).ExecuteScalar) Then
                        mQry = "UPDATE Barcode Set Item = '" & AgL.XNull(DtStock.Rows(I)("Item")) & "' Where GenDocId = '" & DocID & "' And GenSr = " & AgL.VNull(DtStock.Rows(I)("Sr")) & " "
                        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
                    End If
                End If
            Next
        End If
    End Sub
    Public Sub InsertManualBarCodes(DocID As String, Sr As Integer, LineGridRowIndex As Integer, ByRef Conn As Object, ByRef Cmd As Object)
        If CType(AgL.VNull(FGetSettings(SettingFields.GenerateBarcodeYn, SettingType.General)), Boolean) = True Then
            If Dgl1.Item(Col1BarcodeType, LineGridRowIndex).Value = BarcodeType.Fixed And
                Dgl1.Item(Col1BarcodePattern, LineGridRowIndex).Value = BarcodePattern.Manual And
                Dgl1.Item(Col1Barcode, LineGridRowIndex).Value <> "" Then
                Dim mBarcodeCode As String = AgL.Dman_Execute("Select IfNull(Max(Code),0) + 1 From BarCode  With (NoLock)", IIf(AgL.PubServerName = "", Conn, AgL.GcnRead)).ExecuteScalar()
                mQry = " INSERT INTO Barcode (Code, Description, Div_Code, Item, GenDocID, GenSr, Qty, SaleRate, PurchaseRate, MRP, BarcodeType)
                        VALUES (" & AgL.Chk_Text(mBarcodeCode) & ", " & AgL.Chk_Text(Dgl1.Item(Col1Barcode, LineGridRowIndex).Value) & ", 
                        " & AgL.Chk_Text(TxtDivision.Tag) & ", " & AgL.Chk_Text(Dgl1.Item(Col1SKU, LineGridRowIndex).Tag) & ",
                        " & AgL.Chk_Text(mSearchCode) & ", " & Sr & ", 1, 
                        " & Val(Dgl1.Item(Col1SaleRate, LineGridRowIndex).Value) & ", 
                        " & Val(Dgl1.Item(Col1Rate, LineGridRowIndex).Value) & ", 
                        " & Val(Dgl1.Item(Col1MRP, LineGridRowIndex).Value) & ", 
                        " & AgL.Chk_Text(Dgl1.Item(Col1BarcodeType, LineGridRowIndex).Value) & ") "
                AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

                mQry = " INSERT INTO BarcodeSiteDetail (Code,Div_Code, Site_Code, LastTrnDocID,
                        LastTrnSr, LastTrnV_Type, LastTrnManualRefNo,
                        LastTrnSubcode, LastTrnProcess, CurrentGodown, Status, CurrentStock)
                        VALUES (" & AgL.Chk_Text(mBarcodeCode) & ", " & AgL.Chk_Text(TxtDivision.Tag) & ", " & AgL.Chk_Text(DglMain.Item(Col1Value, rowSite_Code).Tag) & ",
                        " & AgL.Chk_Text(mSearchCode) & ", " & Val(Sr) & ", " & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_Type).Tag) & ", " & AgL.Chk_Text(DglMain.Item(Col1Value, rowReferenceNo).Value) & ",
                        " & AgL.Chk_Text(DglMain.Item(Col1Value, rowVendor).Tag) & ", " & AgL.Chk_Text(DglMain.Item(Col1Value, rowProcess).Tag) & ", Null, 'Receive', 1) "
                AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

                mQry = " UPDATE Item Set Barcode = '" & mBarcodeCode & "' Where Code = '" & Dgl1.Item(Col1SKU, LineGridRowIndex).Tag & "'"
                AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

                Dgl1.Item(Col1Barcode, LineGridRowIndex).Tag = mBarcodeCode
            End If
        End If
    End Sub
    Public Sub UpdateManualBarCodes(DocID As String, Sr As Integer, LineGridRowIndex As Integer, ByRef Conn As Object, ByRef Cmd As Object)
        If CType(AgL.VNull(FGetSettings(SettingFields.GenerateBarcodeYn, SettingType.General)), Boolean) = True Then
            If Dgl1.Item(Col1BarcodeType, LineGridRowIndex).Value = BarcodeType.Fixed And
                    Dgl1.Item(Col1BarcodePattern, LineGridRowIndex).Value = BarcodePattern.Manual And
                    Dgl1.Item(Col1Barcode, LineGridRowIndex).Value <> "" Then
                If AgL.VNull(AgL.Dman_Execute("Select Count(*) From Barcode With (NoLock)
                                    Where GenDocID = '" & mSearchCode & "' 
                                    And GenSr = " & Dgl1.Item(ColSNo, LineGridRowIndex).Tag & "", IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar()) = 0 Then
                    Dim mBarcodeCode As String = AgL.Dman_Execute("Select IfNull(Max(Code),0) + 1 From BarCode  With (NoLock)", IIf(AgL.PubServerName = "", Conn, AgL.GcnRead)).ExecuteScalar()
                    mQry = " INSERT INTO Barcode (Code, Description, Div_Code, Item, GenDocID, GenSr, Qty, SaleRate, PurchaseRate, MRP, BarcodeType)
                            VALUES (" & AgL.Chk_Text(mBarcodeCode) & ", " & AgL.Chk_Text(Dgl1.Item(Col1Barcode, LineGridRowIndex).Value) & ", 
                            " & AgL.Chk_Text(TxtDivision.Tag) & ", " & AgL.Chk_Text(Dgl1.Item(Col1SKU, LineGridRowIndex).Tag) & ",
                            " & AgL.Chk_Text(mSearchCode) & ", " & Dgl1.Item(ColSNo, LineGridRowIndex).Tag & ", 1, 
                            " & Val(Dgl1.Item(Col1SaleRate, LineGridRowIndex).Value) & ", 
                            " & Val(Dgl1.Item(Col1Rate, LineGridRowIndex).Value) & ", 
                            " & Val(Dgl1.Item(Col1MRP, LineGridRowIndex).Value) & ", 
                            " & AgL.Chk_Text(Dgl1.Item(Col1BarcodeType, LineGridRowIndex).Value) & ") "
                    AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

                    mQry = " INSERT INTO BarcodeSiteDetail (Code,Div_Code, Site_Code, LastTrnDocID,
                            LastTrnSr, LastTrnV_Type, LastTrnManualRefNo,
                            LastTrnSubcode, LastTrnProcess, CurrentGodown, Status, CurrentStock)
                            VALUES (" & AgL.Chk_Text(mBarcodeCode) & ", " & AgL.Chk_Text(TxtDivision.Tag) & ", " & AgL.Chk_Text(DglMain.Item(Col1Value, rowSite_Code).Tag) & ",
                            " & AgL.Chk_Text(mSearchCode) & ", " & Val(Dgl1.Item(ColSNo, LineGridRowIndex).Tag) & ", " & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_Type).Tag) & ", " & AgL.Chk_Text(DglMain.Item(Col1Value, rowReferenceNo).Value) & ",
                            " & AgL.Chk_Text(DglMain.Item(Col1Value, rowVendor).Tag) & ", " & AgL.Chk_Text(DglMain.Item(Col1Value, rowProcess).Tag) & ", Null, 'Receive', 1) "
                    AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

                    mQry = " UPDATE Item Set Barcode = '" & mBarcodeCode & "' Where Code = '" & Dgl1.Item(Col1SKU, LineGridRowIndex).Tag & "'"
                    AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

                    Dgl1.Item(Col1Barcode, LineGridRowIndex).Tag = mBarcodeCode
                Else
                    If Dgl1.Item(Col1BarcodeGenDocId, LineGridRowIndex).Value = mSearchCode And
                            Dgl1.Item(Col1BarcodeGenSr, LineGridRowIndex).Value = Dgl1.Item(ColSNo, LineGridRowIndex).Tag Then
                        mQry = " UPDATE BarCode 
                                Set Description = '" & Dgl1.Item(Col1Barcode, LineGridRowIndex).Value & "', 
                                Item = '" & Dgl1.Item(Col1SKU, LineGridRowIndex).Tag & "'
                                Where Code = '" & Dgl1.Item(Col1Barcode, LineGridRowIndex).Tag & "'"
                        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

                        mQry = " UPDATE Item Set Barcode = '" & Dgl1.Item(Col1Barcode, LineGridRowIndex).Tag & "' 
                                Where Code = '" & Dgl1.Item(Col1SKU, LineGridRowIndex).Tag & "'"
                        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
                    End If
                End If
            End If
        End If
    End Sub

    Public Sub InsertBarCodes(mDocId As String, mSr As Integer, mItemCode As String, mQty As Integer,
                              mLotQty As Double, mBarcodeType As String, mSaleRate As Double, mPurchaseRate As Double,
                              mMrp As Double, ByRef Conn As Object, ByRef Cmd As Object)
        Dim J As Integer = 0



        For J = 0 To mQty - 1
            Dim mBarcodeCode$ = ""
            Dim mBarcodeDesc$ = ""

            If mBarcodeType = BarcodeType.Fixed Then
                mQry = " Select Code From Barcode With (NoLock) Where Item = '" & mItemCode & "'"
                mBarcodeCode = AgL.XNull(AgL.Dman_Execute(mQry, IIf(AgL.PubServerName = "", Conn, AgL.GcnRead)).ExecuteScalar())
            End If

            If mBarcodeCode = "" Then
                mBarcodeCode = AgL.Dman_Execute("Select IfNull(Max(Code),0) + 1 From BarCode  With (NoLock)", IIf(AgL.PubServerName = "", Conn, AgL.GcnRead)).ExecuteScalar()

                Dim mBarcodeMinimumValue As Integer = AgL.VNull(FGetSettings(SettingFields.BarcodeMinimumValue, SettingType.General))
                Dim mBarcodeMaximumValue As Integer = AgL.VNull(FGetSettings(SettingFields.BarcodeMaximumValue, SettingType.General))

                If AgL.PubServerName = "" Then
                    mQry = "Select IfNull(Max(CAST(Description as BIGINT)),0) + 1 From BarCode  With (NoLock) Where Item Not In ('" & ItemCode.Lr & "','" & ItemCode.LrBale & "') "
                Else
                    mQry = "Select IfNull(Max(CAST(Description as BIGINT)),0) + 1 From BarCode  With (NoLock) Where Isnumeric(Description) <> 0 And Item Not In ('" & ItemCode.Lr & "','" & ItemCode.LrBale & "') "
                End If
                If mBarcodeMinimumValue <> 0 Then mQry += " And IfNull(CAST(Description as BIGINT),0) >= " & mBarcodeMinimumValue & " "
                If mBarcodeMaximumValue <> 0 Then mQry += " And IfNull(CAST(Description as BIGINT),0) <= " & mBarcodeMaximumValue & " "
                mBarcodeDesc = AgL.Dman_Execute(mQry, IIf(AgL.PubServerName = "", Conn, AgL.GcnRead)).ExecuteScalar()

                If mBarcodeMinimumValue <> 0 And Convert.ToInt64(mBarcodeDesc) < mBarcodeMinimumValue Then
                    mBarcodeDesc = mBarcodeMinimumValue + Convert.ToInt64(mBarcodeDesc)
                End If

                If mBarcodeMaximumValue <> 0 And Convert.ToInt64(mBarcodeDesc) > mBarcodeMaximumValue Then
                    Err.Raise(1, "", "Barcode Value is going to upper limit.")
                End If

                mQry = " INSERT INTO Barcode (Code, Description, Div_Code, Item, GenDocID, GenSr, Qty, SaleRate, PurchaseRate, MRP, BarcodeType)
                    VALUES (" & AgL.Chk_Text(mBarcodeCode) & ", " & AgL.Chk_Text(mBarcodeDesc) & ", " & AgL.Chk_Text(TxtDivision.Tag) & ", " & AgL.Chk_Text(mItemCode) & ",
                    " & AgL.Chk_Text(mSearchCode) & ", " & mSr & ", " & mLotQty & ", 
                    " & Val(mSaleRate) & "," & Val(mPurchaseRate) & "," & Val(mMrp) & ",
                    " & AgL.Chk_Text(mBarcodeType) & ") "
                AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

                mQry = " INSERT INTO BarcodeSiteDetail (Code,Div_Code, Site_Code, LastTrnDocID,
                    LastTrnSr, LastTrnV_Type, LastTrnManualRefNo,
                    LastTrnSubcode, LastTrnProcess, CurrentGodown, Status, CurrentStock)
                    VALUES (" & AgL.Chk_Text(mBarcodeCode) & ", " & AgL.Chk_Text(TxtDivision.Tag) & ", " & AgL.Chk_Text(DglMain.Item(Col1Value, rowSite_Code).Tag) & ",
                    " & AgL.Chk_Text(mSearchCode) & ", " & Val(mSr) & ", " & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_Type).Tag) & ", " & AgL.Chk_Text(DglMain.Item(Col1Value, rowReferenceNo).Value) & ",
                    " & AgL.Chk_Text(DglMain.Item(Col1Value, rowVendor).Tag) & ", " & AgL.Chk_Text(DglMain.Item(Col1Value, rowProcess).Tag) & ", Null, 'Receive', " & mLotQty & ") "
                AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            End If

            If mBarcodeType = BarcodeType.Fixed Then
                mQry = " UPDATE Item Set BarCode = '" & mBarcodeCode & "'
                    Where Code = '" & mItemCode & "'"
                AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            End If

            If mBarcodeType = BarcodeType.Fixed Or mBarcodeType = BarcodeType.LotWise Then
                mQry = " UPDATE Stock Set BarCode = '" & mBarcodeCode & "'
                    Where DocId = '" & mSearchCode & "'
                    And Sr = " & mSr & ""
                AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            End If
        Next
    End Sub

    Private Sub FrmSaleOrder_BaseFunction_MoveRec(ByVal SearchCode As String) Handles Me.BaseFunction_MoveRec
        Dim I As Integer

        Dim DsTemp As DataSet
        Dim mMultiplyWithMinus As Boolean = False

        If LblV_Type.Tag = Ncat.PurchaseReturn Then
            mMultiplyWithMinus = True
        End If

        mIsEntryLocked = False

        mQry = " Select H.*, Sg.Name || (Case When C.CityName Is Not Null Then ',' || C.CityName Else '' End) AS  VendorDispName, 
                LinkedParty.Name as LinkedPartyDesc, ShiptoParty.Name as ShipToPartyDesc,
                 Sg.Nature,                  
                 Sg1.Name || (Case When C2.CityName Is Not Null Then ',' || C2.CityName Else '' End) AS  BillToPartyName,
                 Vt.Category As Voucher_Category, VC.CityName as VendorCityName, VC.State as VendorStateCode, VS.Description as VendorStateName,
                 P.Name As ProcessDesc, Prcd.PrevProcess, Prcd.FirstProcessOfCombination, Prcd.LastProcessOfCombination, Agent.Name As AgentName, RT.Description as RateTypeName, St.Description As StructureDesc
                 From (Select * From PurchInvoice  With (NoLock) Where DocID='" & SearchCode & "') H 
                 LEFT JOIN SubGroup Sg  With (NoLock) ON H.Vendor = Sg.SubCode 
                 LEFT JOIN City C  With (NoLock) On Sg.CityCode = C.CityCode                   
                 LEFT JOIN SubGroup Sg1  With (NoLock) On H.BillToParty = Sg1.SubCode 
                 LEFT JOIN City C2  With (NoLock) On Sg1.CityCode = C2.CityCode                   
                 Left Join viewHelpSubgroup Agent  With (NoLock) On H.Agent = Agent.Code                  
                 LEFT JOIN viewHelpSubGroup LinkedParty With (NoLock) On H.LinkedParty = LinkedParty.Code 
                 LEFT JOIN viewHelpSubGroup ShipToParty With (NoLock) On H.ShipToParty = ShipToParty.Code 
                 Left Join City VC  With (NoLock) on H.VendorCity = VC.CityCode
                 Left Join State VS  With (NoLock) on VC.State = VS.Code
                 Left Join Voucher_Type Vt  With (NoLock) On H.V_Type = Vt.V_Type 
                 LEFT JOIN SubGroup P  With (NoLock) On H.Process = P.SubCode
                 LEFT JOIN ProcessDetail Prcd On P.SubCode = Prcd.SubCode
                 LEFT JOIN RateType RT With (NoLock) On H.RateType = RT.Code 
                 LEFT JOIN Structure St With (NoLock) On H.Structure = St.Code
                 "
        DsTemp = AgL.FillData(mQry, AgL.GCn)

        With DsTemp.Tables(0)
            If .Rows.Count > 0 Then

                If AgL.XNull(.Rows(0)("Structure")) <> "" Then
                    TxtStructure.Tag = AgL.XNull(.Rows(0)("Structure"))
                End If
                AgCalcGrid1.FrmType = Me.FrmType
                AgCalcGrid1.AgStructure = TxtStructure.Tag
                AgCalcGrid1.AgVoucherCategory = "PURCH"

                If AgL.XNull(.Rows(0)("CustomFields")) <> "" Then
                    TxtCustomFields.AgSelectedValue = AgL.XNull(.Rows(0)("CustomFields"))
                End If
                AgCustomGrid1.FrmType = Me.FrmType
                AgCustomGrid1.AgCustom = TxtCustomFields.AgSelectedValue

                DglMain.Item(Col1Value, rowProcess).Tag = AgL.XNull(.Rows(0)("Process"))
                DglMain.Item(Col1Value, rowProcess).Value = AgL.XNull(.Rows(0)("ProcessDesc"))

                DglMain.Item(Col1Value, rowPrevProcess).Tag = AgL.XNull(.Rows(0)("PrevProcess"))
                DglMain.Item(Col1Value, rowFirstProcessOfCombination).Tag = AgL.XNull(.Rows(0)("FirstProcessOfCombination"))
                DglMain.Item(Col1Value, rowLastProcessOfCombination).Tag = AgL.XNull(.Rows(0)("LastProcessOfCombination"))

                IniGrid()
                FGetStructureForInputField()

                DglMain.Item(Col1Value, rowReferenceNo).Value = AgL.XNull(.Rows(0)("ManualRefNo"))
                DglMain.Item(Col1Value, rowVendor).Tag = AgL.XNull(.Rows(0)("Vendor"))
                DglMain.Item(Col1Value, rowVendor).Value = AgL.XNull(.Rows(0)("VendorDispName"))
                FGetCurrBal(DglMain.Item(Col1Value, rowVendor).Tag)

                TxtNature.Text = AgL.XNull(.Rows(0)("Nature"))

                DglMain.Item(Col1Value, rowBillToParty).Tag = AgL.XNull(.Rows(0)("BillToParty"))
                DglMain.Item(Col1Value, rowBillToParty).Value = AgL.XNull(.Rows(0)("BillToPartyName"))

                DglMain.Item(Col1Value, rowLinkedParty).Tag = AgL.XNull(.Rows(0)("LinkedParty"))
                DglMain.Item(Col1Value, rowLinkedParty).Value = AgL.XNull(.Rows(0)("LinkedPartyDesc"))

                Dgl2.Item(Col1Value, rowShipToParty).Tag = AgL.XNull(.Rows(0)("ShiptoParty"))
                Dgl2.Item(Col1Value, rowShipToParty).Value = AgL.XNull(.Rows(0)("ShiptoPartyDesc"))

                Dgl2.Item(Col1Value, rowVendorDocNo).Value = AgL.XNull(.Rows(0)("VendorDocNo"))
                Dgl2.Item(Col1Value, rowVendorDocDate).Value = ClsMain.FormatDate(AgL.XNull(.Rows(0)("VendorDocDate")))

                Dgl2.Item(Col1Value, rowRateType).Tag = AgL.XNull(.Rows(0)("RateType"))
                Dgl2.Item(Col1Value, rowRateType).Value = AgL.XNull(.Rows(0)("RateTypeName"))



                Dgl2.Item(Col1Value, rowPaidAmount).Value = AgL.XNull(.Rows(0)("Payment_PaidAmount"))


                Dgl2.Item(Col1Value, rowDeliveryDate).Value = ClsMain.FormatDate(AgL.XNull(.Rows(0)("DeliveryDate")))

                'Topctrl1.tAdd = False

                Dgl2.Item(Col1Value, rowAgent).Tag = AgL.XNull(.Rows(0)("Agent"))
                Dgl2.Item(Col1Value, rowAgent).Value = AgL.XNull(.Rows(0)("AgentName"))

                mQry = " SELECT Max(CASE WHEN Sgr.RegistrationType = 'Sales Tax No' THEN Sgr.RegistrationNo ELSE NULL END) AS SalesTaxNo
                        FROM SubgroupRegistration Sgr
                        WHERE Sgr.Subcode = '" & DglMain.Item(Col1Value, rowVendor).Tag & "'
                        GROUP BY Sgr.Subcode"
                Dim DtRegistration As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)
                If DtRegistration.Rows.Count > 0 Then
                    Dgl2.Item(Col1Value, rowSalesTaxNo).Value = DtRegistration.Rows(0)("SalesTaxNo")
                End If


                DglMain.Item(Col1BtnDetail, rowVendor).Tag = Nothing
                'Dim FrmObj As New FrmPurchPartyDetail
                'FrmObj.TxtVendorMobile.Text = AgL.XNull(.Rows(0)("VendorMobile"))
                'FrmObj.TxtVendorName.Text = AgL.XNull(.Rows(0)("VendorName"))
                'FrmObj.TxtVendorAdd1.Text = AgL.XNull(.Rows(0)("VendorAddress"))
                'FrmObj.TxtVendorCity.Tag = AgL.XNull(.Rows(0)("VendorCity"))
                'FrmObj.TxtVendorCity.Text = AgL.XNull(.Rows(0)("VendorCityName"))
                'FrmObj.TxtState.Tag = AgL.XNull(.Rows(0)("VendorStateCode"))
                'FrmObj.TxtState.Text = AgL.XNull(.Rows(0)("VendorStateName"))

                'DglMain.Item(Col1BtnDetail, rowVendor).Tag = FrmObj

                'AgCalcGrid1.AgPostingGroupSalesTaxItem = AgL.XNull(AgL.PubDtEnviro.Rows(0)("Default_SalesTaxGroupItem"))

                Dgl2.Item(Col1Value, rowRemarks).Value = AgL.XNull(.Rows(0)("Remarks"))
                Dgl2.Item(Col1Value, rowTags).Value = AgL.XNull(.Rows(0)("Tags"))




                Dgl2.Item(Col1Value, rowBtnTransportDetail).Tag = Nothing
                ShowPurchInvoiceHeader(False)


                Dim bMaterialIssueNo As String = ""
                mQry = " Select Distinct H.V_Type || '-' || H.ManualRefNo As MaterialIssueNo 
                    From StockHead H 
                    LEFT JOIN StockHeadDetail L ON H.DocId = L.DocId 
                    LEFT JOIN Voucher_Type Vt On H.V_Type = Vt.V_Type
                    Where Vt.NCat In ('" & Ncat.StockIssue & "','" & Ncat.StockReceive & "')
                    And L.ReferenceDocId = '" & mSearchCode & "'"
                Dim DtMaterialIssue As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)
                For M As Integer = 0 To DtMaterialIssue.Rows.Count - 1
                    If bMaterialIssueNo <> "" Then bMaterialIssueNo += ","
                    bMaterialIssueNo += AgL.XNull(DtMaterialIssue.Rows(M)("MaterialIssueNo"))
                Next
                If bMaterialIssueNo <> "" Then
                    Dgl2.Item(Col1Value, rowBtnMaterialIssue).Value = bMaterialIssueNo
                    Dgl2.Item(Col1Value, rowBtnMaterialIssue).Style.Alignment = DataGridViewContentAlignment.MiddleCenter
                    Dgl2.Item(Col1Value, rowBtnMaterialIssue).Style.BackColor = Color.LightSalmon
                    Dgl2.Item(Col1Value, rowBtnMaterialIssue).Style.ForeColor = Color.Blue
                End If

                mQry = " Select L.StockInDocId, Max(S.V_Type + '-' + S.RecId) AS StockInNo 
                        From PurchInvoiceUnRelatedStockIn L 
                        LEFT JOIN Stock S On L.StockInDocId = S.DocId
                        Where L.DocId = '" & mSearchCode & "'
                        Group By L.StockInDocId "
                Dim DtPurchInvoiceUnRelatedStockIn As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)

                For I = 0 To DtPurchInvoiceUnRelatedStockIn.Rows.Count - 1
                    If Dgl2.Item(Col1Value, rowStockInNo).Tag <> "" Then Dgl2.Item(Col1Value, rowStockInNo).Tag += ","
                    Dgl2.Item(Col1Value, rowStockInNo).Tag += AgL.XNull(DtPurchInvoiceUnRelatedStockIn.Rows(I)("StockInDocId"))

                    If Dgl2.Item(Col1Value, rowStockInNo).Value <> "" Then Dgl2.Item(Col1Value, rowStockInNo).Value += ","
                    Dgl2.Item(Col1Value, rowStockInNo).Value += AgL.XNull(DtPurchInvoiceUnRelatedStockIn.Rows(I)("StockInNo"))
                Next


                ShowPurchInvoicePayment(False)


                AgCalcGrid1.FMoveRecFooterTable(DsTemp.Tables(0), LblV_Type.Tag, DglMain.Item(Col1Value, rowV_Date).Value, mMultiplyWithMinus)

                AgCustomGrid1.FMoveRecFooterTable(DsTemp.Tables(0))

                LblTotalPcs.Text = "0"
                LblTotalQty.Text = "0"
                LblTotalAmount.Text = "0"
                LblTotalDealQty.Text = "0"

                LblTotalBomQty.Text = "0"

                '-------------------------------------------------------------
                'Line Records are showing in Grid
                '-------------------------------------------------------------
                Dim strQryPurchaseShipped$ = "Select L.ReferenceDocId, L.ReferenceDocIdSr, Sum(L.Qty) As Qty " &
                                             "FROM SaleInvoiceDetail L  With (NoLock) " &
                                             "Where L.ReferenceDocId = '" & mSearchCode & "' " &
                                             "GROUP BY L.ReferenceDocId, L.ReferenceDocIdSr "

                Dim strQryPurchaseReturn$ = "SELECT L.PurchInvoice, L.PurchInvoiceSr, Sum(L.Qty) AS Qty " &
                         "FROM PurchInvoiceDetail L  With (NoLock) " &
                         "Where L.PurchInvoice = '" & SearchCode & "' And L.PurchInvoice <> L.DocId " &
                         "GROUP BY L.PurchInvoice, L.PurchInvoiceSr  "

                Dim mQryStockSr As String
                If AgL.PubServerName = "" Then
                    mQryStockSr = "Select  group_concat(Sr ,',') from Stock  With (NoLock) Where DocID = L.DocID And TSr = L.Sr"
                Else
                    mQryStockSr = "Select  Convert(Varchar,Sr) + ',' from Stock  With (NoLock) Where DocID = L.DocID And TSr = L.Sr for xml path('')"
                End If

                Dim mQryStockProcessSr As String
                If AgL.PubServerName = "" Then
                    mQryStockProcessSr = "Select  group_concat(Sr ,',') from StockProcess  With (NoLock) Where DocID = L.DocID And TSr = L.Sr"
                Else
                    mQryStockProcessSr = "Select  Convert(Varchar,Sr) + ',' from StockProcess  With (NoLock) Where DocID = L.DocID And TSr = L.Sr for xml path('')"
                End If


                'mQry = "Select L.*, I.Description As ItemDesc, I.ManualCode, I.ItemGroup as ItemGroupCode, IG.Description as ItemGroupName, 
                '        I.ItemCategory as ItemCategoryCode, IC.Description as ItemCategoryName,  I.ItemType as ItemTypeCode, IT.Name as ItemTypeName,
                '         U.DecimalPlaces as QtyDecimalPlaces, U.showdimensiondetailInPurchase, MU.DecimalPlaces as DealDecimalPlaces,                          
                '         HV.*,
                '         (Case When IfNull(PurShipped.Qty,0) <> 0 Or IfNull(PurReturn.Qty,0) <> 0 Then 1 Else 0 End) As RowLocked,
                '        (" & mQryStockSr & ") as StockSr 
                '         From (Select * From PurchInvoiceDetail  With (NoLock) Where DocId = '" & SearchCode & "') As L 
                '         Left Join PurchInvoiceDetailHelpValues HV  With (NoLock) On L.DocID = HV.DocId And L.Sr = HV.Sr
                '         Left Join Item I  With (NoLock) ON L.Item = I.Code 
                '         Left join ItemGroup IG  With (NoLock) on I.ItemGroup = IG.Code
                '         Left Join ItemCategory IC  With (NoLock) On I.ItemCategory = IC.Code
                '         Left Join ItemType IT  With (NoLock) On I.ItemType = IT.Code
                '         LEFT JOIN Unit U  With (NoLock) On L.Unit = U.Code 
                '         Left Join Unit MU  With (NoLock) ON L.DealUnit = MU.Code                          
                '         Left Join(" & strQryPurchaseShipped & ") as PurShipped On L.DocID = PurShipped.ReferenceDocID And L.Sr = PurShipped.ReferenceDocIDSr 
                '         Left Join (" & strQryPurchaseReturn & ") as PurReturn On L.DocID = PurReturn.PurchInvoice And L.Sr = PurReturn.PurchInvoiceSr 
                '         Order By L.Sr "

                'mQry = "Select L.*, HV.*, Ppl.ManualRefNo As PurchPlanNo,
                '        Case When Vt.NCat = '" & Ncat.PurchaseOrder & "' Then Pi.V_Type || '-' || Pi.ManualRefNo Else Null End As PurchInvoiceNo, 
                '        I.Description As ItemDesc, I.ManualCode, 
                '        U.DecimalPlaces, U.DecimalPlaces As QtyDecimalPlaces, U.ShowDimensionDetailInPurchase,
                '        MU.DecimalPlaces As DealQtyDecimalPlaces,
                '        Sku.Code As SkuCode, Sku.Description As SkuDescription, 
                '        It.Code As ItemType, It.Name As ItemTypeDesc,
                '        IG.Description As ItemGroupDesc, I.ItemCategory, I.ItemGroup, 
                '        IC.Description As ItemCategoryDesc, 
                '        SKU.Dimension1, SKU.Dimension2, 
                '        Sku.Dimension3, Sku.Dimension4, Sku.Size, 
                '        D1.Description as Dimension1Desc, D2.Description as Dimension2Desc,
                '        D3.Description as Dimension3Desc, D4.Description as Dimension4Desc, Size.Description as SizeDesc,
                '        I.ItemCategory as MItemCategory, I.ItemGroup as MItemGroup, I.Specification as MItemSpecification, 
                '        I.Dimension1 as MDimension1,  I.Dimension2 as MDimension2,  I.Dimension3 as MDimension3,  I.Dimension4 as MDimension4,  I.Size as MSize, 
                '        (Case When IfNull(PurShipped.Qty,0) <> 0 Or IfNull(PurReturn.Qty,0) <> 0 Then 1 Else 0 End) As RowLocked,
                '        (" & mQryStockSr & ") as StockSr 
                '        From (Select * From PurchInvoiceDetail  With (NoLock)  Where DocId = '" & SearchCode & "') As L 
                '        Left Join PurchInvoiceDetailHelpValues HV  With (NoLock) On L.DocID = HV.DocId And L.Sr = HV.Sr
                '        LEFT JOIN PurchInvoice Pi  With (NoLock) On L.PurchInvoice = Pi.DocId 
                '        LEFT JOIN PurchPlan Ppl On L.PurchPlan = Ppl.DocId
                '        LEFT JOIN Voucher_Type Vt With (NoLock) On Pi.V_Type = Vt.V_Type
                '        LEFT JOIN Item Sku ON Sku.Code = L.Item
                '        LEFT JOIN Item I ON I.Code = IsNull(Sku.BaseItem,Sku.Code) And I.V_Type <> '" & ItemV_Type.SKU & "'
                '        LEFT JOIN ItemType It On Sku.ItemType = It.Code
                '        Left Join Item IC On Sku.ItemCategory = IC.Code
                '        Left Join Item IG On Sku.ItemGroup = IG.Code
                '        LEFT JOIN Item D1 ON D1.Code = Sku.Dimension1  
                '        LEFT JOIN Item D2 ON D2.Code = Sku.Dimension2
                '        LEFT JOIN Item D3 ON D3.Code = Sku.Dimension3
                '        LEFT JOIN Item D4 ON D4.Code = Sku.Dimension4
                '        LEFT JOIN Item Size ON Size.Code = Sku.Size
                '        Left Join Unit U  With (NoLock) On L.Unit = U.Code 
                '        Left Join Unit MU  With (NoLock) On L.DealUnit = MU.Code 
                '        Left Join(" & strQryPurchaseShipped & ") as PurShipped On L.DocID = PurShipped.ReferenceDocID And L.Sr = PurShipped.ReferenceDocIDSr 
                '        Left Join (" & strQryPurchaseReturn & ") as PurReturn On L.DocID = PurReturn.PurchInvoice And L.Sr = PurReturn.PurchInvoiceSr 
                '        Order By L.Sr "

                Dim strQryPurchase$ = "Select Max(L.DocId) As DocId, L.PurchInvoice, L.PurchInvoiceSr, Sum(L.Qty) As Qty " &
                                    "FROM PurchInvoiceDetail L  With (NoLock) " &
                                    "Where L.PurchInvoice = '" & mSearchCode & "' " &
                                    "And L.DocId <> L.PurchInvoice " &
                                    "GROUP BY L.PurchInvoice, L.PurchInvoiceSr "

                Dim strQryStock$ = "Select Max(L.DocId) As DocId, L.ReferenceDocId, L.ReferenceTSr, Sum(L.Qty) As Qty " &
                                    "FROM PurchInvoiceDetail L  With (NoLock) " &
                                    "Where L.ReferenceDocId = '" & mSearchCode & "' " &
                                    "GROUP BY L.ReferenceDocId, L.ReferenceTSr "




                mQry = "Select L.*, HV.*, Ppl.ManualRefNo As PurchPlanNo, Barcode.Description as BarcodeName, 
                        Case When Vt.Nature = '" & NCatNature.Order & "' Then Pi.V_Type || '-' || Pi.ManualRefNo Else Null End As PurchInvoiceNo, 
                        Sh.V_Date As ReferenceDocIdDate,
                        I.Description As ItemDesc, I.ManualCode, I.Specification As ItemSpecification, I.GenDocId As ItemGenDocId,
                        U.DecimalPlaces, U.DecimalPlaces As QtyDecimalPlaces, 
                        Case When IfNull(U.ShowDimensionDetailInPurchase,0) = 1 Or IfNull(Ic.ShowDimensionDetailInPurchase,0) = 1 Then 1
                            Else 0 End As ShowDimensionDetailInPurchase, 
                        MU.DecimalPlaces As DealQtyDecimalPlaces,
                        SU.DecimalPlaces As StockQtyDecimalPlaces,
                        Sku.Code As SkuCode, Sku.Description As SkuDescription, 
                        It.Code As ItemType, It.Name As ItemTypeDesc,
                        IG.Description As ItemGroupDesc, IC.Description As ItemCategoryDesc, 
                        Prs.Name As FromProcessName, 
                        Pids.Item As ItemCode, Pids.ItemCategory, Pids.ItemGroup, 
                        Pids.Dimension1, Pids.Dimension2, 
                        Pids.Dimension3, Pids.Dimension4, Pids.Size, 
                        D1.Description as Dimension1Desc, D2.Description as Dimension2Desc,
                        D3.Description as Dimension3Desc, D4.Description as Dimension4Desc, Size.Description as SizeDesc,
                        I.ItemCategory as MItemCategory, I.ItemGroup as MItemGroup, I.Specification as MItemSpecification, 
                        I.Dimension1 as MDimension1,  I.Dimension2 as MDimension2,  I.Dimension3 as MDimension3,  I.Dimension4 as MDimension4,  I.Size as MSize, 
                        Ic.IsNewItemAllowedPurch, Ic.IsNewDimension1AllowedPurch, Ic.IsNewDimension2AllowedPurch, 
                        Ic.IsNewDimension3AllowedPurch, Ic.IsNewDimension4AllowedPurch,
                        Godown.Name as GodownName, RawMaterial.Description As RawMaterialDesc,
                        CASE WHEN Pid.DocID IS NOT NULL OR Shd.DocID IS NOT NULL THEN 1 ELSE 0 END As RowLocked,
                        D1.Specification As Dimension1Specification, D1.GenDocId As Dimension1GenDocId,
                        C.Description As CatalogDesc, 
                        IsNull(Ig.BarcodeType,Ic.BarcodeType) As BarcodeType, 
                        IsNull(Ig.BarcodePattern,Ic.BarcodePattern) As BarcodePattern,
                        Barcode.GenDocId As BarcodeGenDocId, Barcode.GenSr As BarcodeGenSr,
                        Pidt.FromGodown, FGodown.Name As FromGodownName, Pidt.ToGodown, TGodown.Name As ToGodownName,
                        Si.ManualRefNo As SaleInvoiceNo,
                        (" & mQryStockSr & ") as StockSr,
                        (" & mQryStockProcessSr & ") as StockProcessSr 
                        From (Select * From PurchInvoiceDetail  With (NoLock)  Where DocId = '" & SearchCode & "' 
                                And SubRecordType Is Null) As L 
                        LEFT JOIN PurchInvoiceDetailSku Pids With (NoLock) On L.DocId = Pids.DocId And L.Sr = Pids.Sr
                        Left Join PurchInvoiceDetailHelpValues HV  With (NoLock) On L.DocID = HV.DocId And L.Sr = HV.Sr
                        LEFT JOIN PurchInvoice Pi  With (NoLock) On L.PurchInvoice = Pi.DocId 
                        LEFT JOIN PurchPlan Ppl On L.PurchPlan = Ppl.DocId
                        LEFT JOIN PurchInvoice Sh On L.ReferenceDocId = Sh.DocId
                        LEFT JOIN Voucher_Type Vt With (NoLock) On Pi.V_Type = Vt.V_Type
                        LEFT JOIN PurchInvoiceDetailTransfer Pidt On L.DocId = Pidt.DocId And L.Sr = Pidt.Sr
                        LEFT JOIN SaleInvoice Si With (NoLock) On L.SaleInvoice = Si.DocId
                        LEFT JOIN Item Sku ON Sku.Code = L.Item
                        LEFT JOIN ItemType It On Sku.ItemType = It.Code
                        Left Join Item IC On Pids.ItemCategory = IC.Code
                        Left Join Item IG On Pids.ItemGroup = IG.Code
                        LEFT JOIN Item I ON Pids.Item = I.Code
                        LEFT JOIN Item D1 ON Pids.Dimension1 = D1.Code
                        LEFT JOIN Item D2 ON Pids.Dimension2 = D2.Code
                        LEFT JOIN Item D3 ON Pids.Dimension3 = D3.Code
                        LEFT JOIN Item D4 ON Pids.Dimension4 = D4.Code
                        LEFT JOIN Item Size ON Pids.Size = Size.Code
                        Left Join Barcode  With (NoLock) On L.Barcode = Barcode.Code
                        Left Join Unit U With (NoLock) On L.Unit = U.Code 
                        Left Join Unit MU With (NoLock) On L.DealUnit = MU.Code 
                        Left Join Unit SU With (NoLock) On L.StockUnit = SU.Code 
                        LEFT JOIN Catalog C On L.Catalog = C.Code
                        Left Join Subgroup Godown On L.Godown = Godown.Subcode
                        LEFT JOIN SubGroup Prs On L.FromProcess = Prs.SubCode
                        LEFT JOIN SubGroup FGodown On Pidt.FromGodown = FGodown.SubCode
                        LEFT JOIN SubGroup TGodown On Pidt.ToGodown = TGodown.SubCode
                        LEFT JOIN Item RawMaterial ON L.RawMaterial = RawMaterial.Code
                        LEFT JOIN (" & strQryPurchase & ") Pid ON L.DocID <> Pid.DocID AND  L.DocID = Pid.PurchInvoice AND L.Sr = Pid.PurchInvoiceSr
                        LEFT JOIN (" & strQryStock & ") Shd ON L.DocID = Shd.ReferenceDocID AND L.Sr = Shd.ReferenceTSr
                        Order By L.Sr "
                DsTemp = AgL.FillData(mQry, AgL.GCn)
                With DsTemp.Tables(0)
                    Dgl1.RowCount = 1
                    Dgl1.Rows.Clear()
                    If .Rows.Count > 0 Then
                        For I = 0 To DsTemp.Tables(0).Rows.Count - 1
                            Dgl1.Rows.Add()
                            Dgl1.Item(ColSNo, I).Value = Dgl1.Rows.Count - 1
                            Dgl1.Item(ColSNo, I).Tag = AgL.XNull(.Rows(I)("Sr"))

                            Dgl1.Item(Col1TransactionStockSr, I).Value = AgL.XNull(.Rows(I)("StockSr"))
                            If Dgl1.Item(Col1TransactionStockSr, I).Value <> "" Then
                                If Dgl1.Item(Col1TransactionStockSr, I).Value.ToString.Substring(Dgl1.Item(Col1TransactionStockSr, I).Value.ToString.Length - 1, 1) = "," Then
                                    Dgl1.Item(Col1TransactionStockSr, I).Value = Dgl1.Item(Col1TransactionStockSr, I).Value.ToString.Substring(0, Dgl1.Item(Col1TransactionStockSr, I).Value.ToString.Length - 1)
                                End If
                            End If

                            Dgl1.Item(Col1TransactionStockProcessSr, I).Value = AgL.XNull(.Rows(I)("StockProcessSr"))
                            If Dgl1.Item(Col1TransactionStockProcessSr, I).Value <> "" Then
                                If Dgl1.Item(Col1TransactionStockProcessSr, I).Value.ToString.Substring(Dgl1.Item(Col1TransactionStockProcessSr, I).Value.ToString.Length - 1, 1) = "," Then
                                    Dgl1.Item(Col1TransactionStockProcessSr, I).Value = Dgl1.Item(Col1TransactionStockProcessSr, I).Value.ToString.Substring(0, Dgl1.Item(Col1TransactionStockProcessSr, I).Value.ToString.Length - 1)
                                End If
                            End If

                            Dgl1.Item(Col1Barcode, I).Tag = AgL.XNull(.Rows(I)("Barcode"))
                            Dgl1.Item(Col1Barcode, I).Value = AgL.XNull(.Rows(I)("BarcodeName"))

                            Dgl1.Item(Col1BarcodeGenDocId, I).Value = AgL.XNull(.Rows(I)("BarcodeGenDocId"))
                            Dgl1.Item(Col1BarcodeGenSr, I).Value = AgL.VNull(.Rows(I)("BarcodeGenSr"))


                            Dgl1.Item(Col1Godown, I).Tag = AgL.XNull(.Rows(I)("Godown"))
                            Dgl1.Item(Col1Godown, I).Value = AgL.XNull(.Rows(I)("GodownName"))


                            Dgl1.Item(Col1FromGodown, I).Tag = AgL.XNull(.Rows(I)("FromGodown"))
                            Dgl1.Item(Col1FromGodown, I).Value = AgL.XNull(.Rows(I)("FromGodownName"))

                            Dgl1.Item(Col1ToGodown, I).Tag = AgL.XNull(.Rows(I)("ToGodown"))
                            Dgl1.Item(Col1ToGodown, I).Value = AgL.XNull(.Rows(I)("ToGodownName"))

                            Dgl1.Item(Col1SKU, I).Tag = AgL.XNull(.Rows(I)("SkuCode"))
                            Dgl1.Item(Col1SKU, I).Value = AgL.XNull(.Rows(I)("SkuDescription"))

                            Dgl1.Item(Col1ItemType, I).Tag = AgL.XNull(.Rows(I)("ItemType"))
                            Dgl1.Item(Col1ItemType, I).Value = AgL.XNull(.Rows(I)("ItemTypeDesc"))

                            Dgl1.Item(Col1ItemCategory, I).Tag = AgL.XNull(.Rows(I)("ItemCategory"))
                            Dgl1.Item(Col1ItemCategory, I).Value = AgL.XNull(.Rows(I)("ItemCategoryDesc"))

                            Dgl1.Item(Col1ItemGroup, I).Tag = AgL.XNull(.Rows(I)("ItemGroup"))
                            Dgl1.Item(Col1ItemGroup, I).Value = AgL.XNull(.Rows(I)("ItemGroupDesc"))

                            Dgl1.Item(Col1ItemCode, I).Tag = AgL.XNull(.Rows(I)("ItemCode"))
                            Dgl1.Item(Col1ItemCode, I).Value = AgL.XNull(.Rows(I)("ManualCode"))

                            Dgl1.Item(Col1Item, I).Tag = AgL.XNull(.Rows(I)("ItemCode"))
                            If AgL.XNull(.Rows(I)("ItemGenDocId")) = mSearchCode Then
                                Dgl1.Item(Col1Item, I).Value = AgL.XNull(.Rows(I)("ItemSpecification"))
                            Else
                                Dgl1.Item(Col1Item, I).Value = AgL.XNull(.Rows(I)("ItemDesc"))
                            End If

                            Dgl1.Item(Col1Dimension1, I).Tag = AgL.XNull(.Rows(I)("Dimension1"))
                            If AgL.XNull(.Rows(I)("Dimension1GenDocId")) = mSearchCode Then
                                Dgl1.Item(Col1Dimension1, I).Value = AgL.XNull(.Rows(I)("Dimension1Specification"))
                            Else
                                Dgl1.Item(Col1Dimension1, I).Value = AgL.XNull(.Rows(I)("Dimension1Desc"))
                            End If

                            Dgl1.Item(Col1Dimension2, I).Tag = AgL.XNull(.Rows(I)("Dimension2"))
                            Dgl1.Item(Col1Dimension2, I).Value = AgL.XNull(.Rows(I)("Dimension2Desc"))

                            Dgl1.Item(Col1Dimension3, I).Tag = AgL.XNull(.Rows(I)("Dimension3"))
                            Dgl1.Item(Col1Dimension3, I).Value = AgL.XNull(.Rows(I)("Dimension3Desc"))

                            Dgl1.Item(Col1Dimension4, I).Tag = AgL.XNull(.Rows(I)("Dimension4"))
                            Dgl1.Item(Col1Dimension4, I).Value = AgL.XNull(.Rows(I)("Dimension4Desc"))

                            Dgl1.Item(Col1Size, I).Tag = AgL.XNull(.Rows(I)("Size"))
                            Dgl1.Item(Col1Size, I).Value = AgL.XNull(.Rows(I)("SizeDesc"))

                            Dgl1.Item(Col1PurchaseInvoice, I).Tag = AgL.XNull(.Rows(I)("PurchInvoice"))
                            Dgl1.Item(Col1PurchaseInvoice, I).Value = AgL.XNull(.Rows(I)("PurchInvoiceNo"))
                            Dgl1.Item(Col1PurchaseInvoiceSr, I).Value = AgL.VNull(.Rows(I)("PurchInvoiceSr"))

                            Dgl1.Item(Col1SaleInvoice, I).Tag = AgL.XNull(.Rows(I)("SaleInvoice"))
                            Dgl1.Item(Col1SaleInvoice, I).Value = AgL.XNull(.Rows(I)("SaleInvoiceNo"))
                            Dgl1.Item(Col1SaleInvoiceSr, I).Value = AgL.VNull(.Rows(I)("SaleInvoiceSr"))

                            Dgl1.Item(Col1PurchasePlan, I).Tag = AgL.XNull(.Rows(I)("PurchPlan"))
                            Dgl1.Item(Col1PurchasePlan, I).Value = AgL.XNull(.Rows(I)("PurchPlanNo"))
                            Dgl1.Item(Col1PurchasePlanSr, I).Value = AgL.VNull(.Rows(I)("PurchPlanSr"))





                            'Dgl1.Item(Col1ItemCode, I).Tag = AgL.XNull(.Rows(I)("Item"))
                            'Dgl1.Item(Col1ItemGroup, I).Tag = AgL.XNull(.Rows(I)("ItemGroup"))
                            'Dgl1.Item(Col1ItemGroup, I).Value = AgL.XNull(.Rows(I)("ItemGroupDesc"))
                            'Dgl1.Item(Col1ItemCategory, I).Tag = AgL.XNull(.Rows(I)("ItemCategory"))
                            'Dgl1.Item(Col1ItemCategory, I).Value = AgL.XNull(.Rows(I)("ItemCategoryDesc"))

                            'Dgl1.Item(Col1ItemCode, I).Value = AgL.XNull(.Rows(I)("ManualCode"))
                            'Dgl1.Item(Col1Item, I).Tag = AgL.XNull(.Rows(I)("Item"))
                            'Dgl1.Item(Col1Item, I).Value = AgL.XNull(.Rows(I)("ItemDesc"))



                            Dgl1.Item(Col1Specification, I).Value = AgL.XNull(.Rows(I)("Specification"))
                            Dgl1.Item(Col1LotNo, I).Value = AgL.XNull(.Rows(I)("LotNo"))
                            Dgl1.Item(Col1BaleNo, I).Value = AgL.XNull(.Rows(I)("BaleNo"))
                            Dgl1.Item(Col1BaleNo, I).Tag = AgL.XNull(.Rows(I)("LrBaleCode"))
                            Dgl1.Item(Col1SalesTaxGroup, I).Tag = AgL.XNull(.Rows(I)("SalesTaxGroupItem"))
                            Dgl1.Item(Col1SalesTaxGroup, I).Value = AgL.XNull(.Rows(I)("SalesTaxGroupItem"))
                            Dgl1.Item(Col1QtyDecimalPlaces, I).Value = AgL.VNull(.Rows(I)("QtyDecimalPlaces"))
                            Dgl1.Item(Col1ProfitMarginPer, I).Value = AgL.VNull(.Rows(I)("ProfitMarginPer"))
                            Dgl1.Item(Col1DocQty, I).Value = Format(Math.Abs(AgL.VNull(.Rows(I)("DocQty"))), "0.".PadRight(AgL.VNull(.Rows(I)("QtyDecimalPlaces")) + 2, "0"))
                            Dgl1.Item(Col1FreeQty, I).Value = Format(Math.Abs(AgL.VNull(.Rows(I)("FreeQty"))), "0.".PadRight(AgL.VNull(.Rows(I)("QtyDecimalPlaces")) + 2, "0"))
                            Dgl1.Item(Col1RejQty, I).Value = Format(Math.Abs(AgL.VNull(.Rows(I)("RejQty"))), "0.".PadRight(AgL.VNull(.Rows(I)("QtyDecimalPlaces")) + 2, "0"))
                            Dgl1.Item(Col1LossQty, I).Value = Format(Math.Abs(AgL.VNull(.Rows(I)("LossQty"))), "0.".PadRight(AgL.VNull(.Rows(I)("QtyDecimalPlaces")) + 2, "0"))
                            Dgl1.Item(Col1Qty, I).Value = Format(Math.Abs(AgL.VNull(.Rows(I)("Qty"))), "0.".PadRight(AgL.VNull(.Rows(I)("QtyDecimalPlaces")) + 2, "0"))
                            Dgl1.Item(Col1Pcs, I).Value = Math.Abs(AgL.VNull(.Rows(I)("Pcs")))

                            Dgl1.Item(Col1Unit, I).Value = AgL.XNull(.Rows(I)("Unit"))
                            'Dgl1.Item(Col1Unit, I).Tag = AgL.XNull(.Rows(I)("ShowDimensionDetailInPurchase"))
                            Dgl1.Item(Col1DealQtyDecimalPlaces, I).Value = AgL.VNull(.Rows(I)("DealQtyDecimalPlaces"))
                            'Dgl1.Item(Col1UnitMultiplier, I).Value = Format(AgL.VNull(.Rows(I)("UnitMultiplier")), "0.".PadRight(AgL.VNull(.Rows(I)("DealDecimalPlaces")) + 2, "0"))                            
                            Dgl1.Item(Col1DealUnit, I).Value = AgL.XNull(.Rows(I)("DealUnit"))

                            Dgl1.Item(Col1DocDealQty, I).Value = Format(Math.Abs(AgL.VNull(.Rows(I)("DocDealQty"))), "0.".PadRight(AgL.VNull(.Rows(I)("DealQtyDecimalPlaces")) + 2, "0"))
                            Dgl1.Item(Col1FreeDealQty, I).Value = Format(Math.Abs(AgL.VNull(.Rows(I)("FreeDealQty"))), "0.".PadRight(AgL.VNull(.Rows(I)("DealQtyDecimalPlaces")) + 2, "0"))
                            Dgl1.Item(Col1LossDealQtyPer, I).Value = Format(Math.Abs(AgL.VNull(.Rows(I)("LossDealQtyPer"))), "0.".PadRight(AgL.VNull(.Rows(I)("DealQtyDecimalPlaces")) + 2, "0"))
                            Dgl1.Item(Col1LossDealQty, I).Value = Format(Math.Abs(AgL.VNull(.Rows(I)("LossDealQty"))), "0.".PadRight(AgL.VNull(.Rows(I)("DealQtyDecimalPlaces")) + 2, "0"))
                            Dgl1.Item(Col1DealQty, I).Value = Format(Math.Abs(AgL.VNull(.Rows(I)("DealQty"))), "0.".PadRight(AgL.VNull(.Rows(I)("DealQtyDecimalPlaces")) + 2, "0"))

                            Dgl1.Item(Col1StockUnitMultiplier, I).Value = Format(AgL.VNull(.Rows(I)("StockUnitMultiplier")), "0.".PadRight(AgL.VNull(.Rows(I)("StockQtyDecimalPlaces")) + 2, "0"))
                            Dgl1.Item(Col1StockUnit, I).Value = AgL.XNull(.Rows(I)("StockUnit"))
                            Dgl1.Item(Col1StockQty, I).Value = Format(AgL.VNull(.Rows(I)("StockQty")), "0.".PadRight(AgL.VNull(.Rows(I)("StockQtyDecimalPlaces")) + 2, "0"))
                            Dgl1.Item(Col1StockQtyDecimalPlaces, I).Value = AgL.VNull(.Rows(I)("StockQtyDecimalPlaces"))

                            Dgl1.Item(Col1Rate, I).Value = Math.Abs(AgL.VNull(.Rows(I)("Rate")))
                            Dgl1.Item(Col1DiscountPer, I).Value = AgL.VNull(.Rows(I)("DiscountPer"))
                            Dgl1.Item(Col1DiscountAmount, I).Value = AgL.VNull(.Rows(I)("DiscountAmount"))
                            Dgl1.Item(Col1AdditionalDiscountPer, I).Value = AgL.VNull(.Rows(I)("AdditionalDiscountPer"))
                            Dgl1.Item(Col1AdditionalDiscountAmount, I).Value = AgL.VNull(.Rows(I)("AdditionalDiscountAmount"))
                            Dgl1.Item(Col1AdditionPer, I).Value = AgL.VNull(.Rows(I)("AdditionPer"))
                            Dgl1.Item(Col1AdditionAmount, I).Value = AgL.VNull(.Rows(I)("AdditionAmount"))
                            Dgl1.Item(Col1Deal, I).Value = AgL.XNull(.Rows(I)("Deal"))
                            Dgl1.Item(Col1DealAmount, I).Value = AgL.XNull(.Rows(I)("DealAmount"))
                            Dgl1.Item(Col1Amount, I).Value = Format(Math.Abs(AgL.VNull(.Rows(I)("Amount"))), "0.00")
                            Dgl1.Item(Col1SaleRate, I).Value = AgL.VNull(.Rows(I)("Sale_Rate"))
                            Dgl1.Item(Col1MRP, I).Value = AgL.VNull(.Rows(I)("MRP"))
                            Dgl1.Item(Col1ExpiryDate, I).Value = ClsMain.FormatDate(AgL.XNull(.Rows(I)("ExpiryDate")))
                            Dgl1.Item(Col1FromProcess, I).Tag = AgL.XNull(.Rows(I)("FromProcess"))
                            Dgl1.Item(Col1FromProcess, I).Value = AgL.XNull(.Rows(I)("FromProcessName"))
                            Dgl1.Item(Col1Remark, I).Value = AgL.XNull(.Rows(I)("Remark"))
                            Dgl1.Item(Col1LRNo, I).Value = AgL.XNull(.Rows(I)("LRNo"))
                            Dgl1.Item(Col1LRDate, I).Value = ClsMain.FormatDate(AgL.XNull(.Rows(I)("LRDate")))
                            Dgl1.Item(Col1HSN, I).Value = AgL.XNull(.Rows(I)("HSN"))
                            Dgl1.Item(Col1ReferenceNo, I).Value = AgL.XNull(.Rows(I)("ReferenceNo"))
                            Dgl1.Item(Col1ReferenceDate, I).Value = ClsMain.FormatDate(AgL.XNull(.Rows(I)("ReferenceDate")))

                            Dgl1.Item(Col1ReferenceDocID, I).Value = AgL.XNull(.Rows(I)("ReferenceDocID"))
                            Dgl1.Item(Col1ReferenceTSr, I).Value = AgL.XNull(.Rows(I)("ReferenceTSr"))
                            Dgl1.Item(Col1ReferenceSr, I).Value = AgL.XNull(.Rows(I)("ReferenceSr"))
                            Dgl1.Item(Col1ReferenceDocIdDate, I).Value = AgL.XNull(.Rows(I)("ReferenceDocIdDate"))
                            Dgl1.Item(Col1ReferenceDocIdBalanceQty, I).Value = AgL.XNull(.Rows(I)("ReferenceDocIdBalanceQty"))

                            'If LblNCatNature.Tag = NCatNature.Invoice Then
                            '    Dgl1.Item(Col1StockProcess, I).Tag = AgL.XNull(.Rows(I)("ReferenceDocID"))
                            '    Dgl1.Item(Col1StockProcessTSr, I).Value = AgL.XNull(.Rows(I)("ReferenceTSr"))
                            '    Dgl1.Item(Col1StockProcessSr, I).Value = AgL.XNull(.Rows(I)("ReferenceSr"))
                            'End If

                            Dgl1.Item(Col1IsNewItemAllowedPurch, I).Value = AgL.VNull(.Rows(I)("IsNewItemAllowedPurch"))
                            Dgl1.Item(Col1IsNewDimension1AllowedPurch, I).Value = AgL.VNull(.Rows(I)("IsNewDimension1AllowedPurch"))
                            Dgl1.Item(Col1IsNewDimension2AllowedPurch, I).Value = AgL.VNull(.Rows(I)("IsNewDimension2AllowedPurch"))
                            Dgl1.Item(Col1IsNewDimension3AllowedPurch, I).Value = AgL.VNull(.Rows(I)("IsNewDimension3AllowedPurch"))
                            Dgl1.Item(Col1IsNewDimension4AllowedPurch, I).Value = AgL.VNull(.Rows(I)("IsNewDimension4AllowedPurch"))

                            Dgl1.Item(Col1BarcodePattern, I).Value = AgL.XNull(.Rows(I)("BarcodePattern"))
                            Dgl1.Item(Col1BarcodeType, I).Value = AgL.XNull(.Rows(I)("BarcodeType"))

                            Dgl1.Item(Col1DefaultDiscountPer, I).Value = AgL.VNull(.Rows(I)("DefaultDiscountPer"))
                            Dgl1.Item(Col1DefaultAdditionalDiscountPer, I).Value = AgL.VNull(.Rows(I)("DefaultAdditionalDiscountPer"))
                            Dgl1.Item(Col1DefaultAdditionPer, I).Value = AgL.VNull(.Rows(I)("DefaultAdditionPer"))
                            Dgl1.Item(Col1PersonalDiscountPer, I).Value = AgL.VNull(.Rows(I)("PersonalDiscountPer"))
                            Dgl1.Item(Col1PersonalAdditionalDiscountPer, I).Value = AgL.VNull(.Rows(I)("PersonalAdditionalDiscountPer"))
                            Dgl1.Item(Col1PersonalAdditionPer, I).Value = AgL.VNull(.Rows(I)("PersonalAdditionPer"))
                            Dgl1.Item(Col1DiscountCalculationPattern, I).Value = AgL.XNull(.Rows(I)("DiscountCalculationPattern"))
                            Dgl1.Item(Col1AdditionalDiscountCalculationPattern, I).Value = AgL.XNull(.Rows(I)("AdditionalDiscountCalculationPattern"))
                            Dgl1.Item(Col1AdditionCalculationPattern, I).Value = AgL.XNull(.Rows(I)("AdditionCalculationPattern"))

                            Dgl1.Item(Col1RawMaterial, I).Tag = AgL.XNull(.Rows(I)("RawMaterial"))
                            Dgl1.Item(Col1RawMaterial, I).Value = AgL.XNull(.Rows(I)("RawMaterialDesc"))

                            Dgl1.Item(Col1RawMaterialConsumptionQty, I).Value = AgL.XNull(.Rows(I)("RawMaterialConsumptionQty"))

                            If AgL.StrCmp(LblV_Type.Tag, Ncat.PurchaseReturn) Then
                                If Dgl1.Item(Col1ReferenceDocID, I).Value = "" And Val(Dgl1.Item(Col1ReferenceTSr, I).Value) = 0 And Val(Dgl1.Item(Col1ReferenceSr, I).Value) = 0 Then
                                    Dgl1.Item(Col1Unit, I).Tag = AgL.VNull(.Rows(I)("ShowDimensionDetailInPurchase"))
                                    If CType(Dgl1.Item(Col1Unit, I).Tag, Boolean) Then
                                        Dgl1.Item(Col1DocQty, I).Style.ForeColor = Color.Blue
                                        ShowPurchInvoiceDimensionDetail(I, False)
                                    End If
                                End If
                            ElseIf AgL.StrCmp(LblV_Type.Tag, Ncat.PurchaseOrder) = False And
                                    AgL.StrCmp(LblV_Type.Tag, Ncat.OpeningBalance) = False Then
                                Dgl1.Item(Col1Unit, I).Tag = AgL.VNull(.Rows(I)("ShowDimensionDetailInPurchase"))
                                If AgL.VNull(Dgl1.Item(Col1Unit, I).Tag) Then
                                    Dgl1.Item(Col1DocQty, I).Style.ForeColor = Color.Blue
                                    ShowPurchInvoiceDimensionDetail(I, False)
                                End If
                            End If

                            'Dgl1.Item(Col1Catalog, I).Tag = AgL.XNull(.Rows(I)("Catalog"))
                            'Dgl1.Item(Col1Catalog, I).Value = AgL.XNull(.Rows(I)("CatalogDesc"))

                            'If I = 0 Then
                            '    Dgl2(Col1Value, rowCatalog).Tag = AgL.XNull(.Rows(I)("Catalog"))
                            '    Dgl2(Col1Value, rowCatalog).Value = AgL.XNull(.Rows(I)("CatalogDesc"))
                            'End If

                            'If Dgl1.Item(Col1Unit, I).Tag Then
                            '    Dgl1.Item(Col1DocQty, I).Style.ForeColor = Color.Blue
                            'End If

                            'If .Rows(I)("RowLocked") > 0 Then Dgl1.Rows(I).DefaultCellStyle.BackColor = AgTemplate.ClsMain.Colours.GridRow_Locked


                            If Not AgL.StrCmp(Dgl1.Item(Col1Unit, I).Value, Dgl1.Item(Col1Unit, 0).Value) Then IsSameUnit = False
                            If Not AgL.StrCmp(Dgl1.Item(Col1DealUnit, I).Value, Dgl1.Item(Col1DealUnit, 0).Value) Then IsSameDealUnit = False

                            If intQtyDecimalPlaces < Val(Dgl1.Item(Col1QtyDecimalPlaces, I).Value) Then intQtyDecimalPlaces = Val(Dgl1.Item(Col1QtyDecimalPlaces, I).Value)
                            If intDealDecimalPlaces < Val(Dgl1.Item(Col1DealQtyDecimalPlaces, I).Value) Then intDealDecimalPlaces = Val(Dgl1.Item(Col1DealQtyDecimalPlaces, I).Value)

                            LblTotalPcs.Text = Val(LblTotalPcs.Text) + Val(Dgl1.Item(Col1Pcs, I).Value)
                            LblTotalQty.Text = Val(LblTotalQty.Text) + Val(Dgl1.Item(Col1Qty, I).Value)
                            LblTotalAmount.Text = Val(LblTotalAmount.Text) + Val(Dgl1.Item(Col1Amount, I).Value)

                            Dgl1.Item(Col1IsRecordLocked, I).Value = AgL.VNull(.Rows(I)("RowLocked"))
                            If Dgl1.Item(Col1IsRecordLocked, I).Value > 0 Then Dgl1.Rows(I).DefaultCellStyle.BackColor = AgTemplate.ClsMain.Colours.GridRow_Locked : Dgl1.Rows(I).ReadOnly = True : mIsEntryLocked = True

                            Dgl1.Item(Col1MItemCategory, I).Tag = AgL.XNull(.Rows(I)("MItemCategory"))
                            Dgl1.Item(Col1MItemGroup, I).Tag = AgL.XNull(.Rows(I)("MItemGroup"))
                            Dgl1.Item(Col1MItemSpecification, I).Value = AgL.XNull(.Rows(I)("MItemSpecification"))
                            Dgl1.Item(Col1MDimension1, I).Tag = AgL.XNull(.Rows(I)("MDimension1"))
                            Dgl1.Item(Col1MDimension2, I).Tag = AgL.XNull(.Rows(I)("MDimension2"))
                            Dgl1.Item(Col1MDimension3, I).Tag = AgL.XNull(.Rows(I)("MDimension3"))
                            Dgl1.Item(Col1MDimension4, I).Tag = AgL.XNull(.Rows(I)("MDimension4"))
                            Dgl1.Item(Col1MSize, I).Tag = AgL.XNull(.Rows(I)("MSize"))


                            Call AgCalcGrid1.FMoveRecLineTable(DsTemp.Tables(0), I, mMultiplyWithMinus)
                        Next I

                        If AgL.Dman_Execute(" Select Count(Distinct FromProcess) 
                                From PurchInvoiceDetail L 
                                Where L.DocId = '" & mSearchCode & "'", AgL.GCn).ExecuteScalar() = 1 Then
                            If AgL.XNull(Dgl1.Item(Col1FromProcess, 0).Tag) <> "" Then
                                Dgl2.Item(Col1Value, rowFromProcess).Tag = Dgl1.Item(Col1FromProcess, 0).Tag
                                Dgl2.Item(Col1Value, rowFromProcess).Value = Dgl1.Item(Col1FromProcess, 0).Value
                            End If
                        End If

                        If AgL.Dman_Execute("Select Count(Distinct Godown) From PurchInvoiceDetail Where DocId = '" & mSearchCode & "'", AgL.GCn).ExecuteScalar() = 1 Then
                            Dgl2.Item(Col1Value, rowGodown).Tag = Dgl1.Item(Col1Godown, 0).Tag
                            Dgl2.Item(Col1Value, rowGodown).Value = Dgl1.Item(Col1Godown, 0).Value
                        End If

                        If AgL.Dman_Execute("Select Count(Distinct FromGodown) From PurchInvoiceDetailTransfer Where DocId = '" & mSearchCode & "'", AgL.GCn).ExecuteScalar() = 1 Then
                            Dgl2.Item(Col1Value, rowFromGodown).Tag = Dgl1.Item(Col1FromGodown, 0).Tag
                            Dgl2.Item(Col1Value, rowFromGodown).Value = Dgl1.Item(Col1FromGodown, 0).Value
                        End If

                        If AgL.Dman_Execute("Select Count(Distinct ToGodown) From PurchInvoiceDetailTransfer Where DocId = '" & mSearchCode & "'", AgL.GCn).ExecuteScalar() = 1 Then
                            Dgl2.Item(Col1Value, rowToGodown).Tag = Dgl1.Item(Col1ToGodown, 0).Tag
                            Dgl2.Item(Col1Value, rowToGodown).Value = Dgl1.Item(Col1ToGodown, 0).Value
                        End If
                    End If
                End With

                mQry = "SELECT Max(L.Item) As Sku, Max(I.Description) As ItemDesc, 
                        Max(U.DecimalPlaces) AS DecimalPlaces, Max(U.DecimalPlaces) As QtyDecimalPlaces, 
                        Max(Sku.Code) As SkuCode, Max(Sku.Description) As SkuDescription, 
                        Max(It.Code) As ItemType, Max(It.Name) As ItemTypeDesc,
                        Max(IG.Description) As ItemGroupDesc, Max(IC.Description) As ItemCategoryDesc, 
                        Pids.Item As ItemCode, Pids.ItemCategory, Pids.ItemGroup, 
                        Pids.Dimension1, Pids.Dimension2, 
                        Pids.Dimension3, Pids.Dimension4, Pids.Size, 
                        Max(D1.Description) as Dimension1Desc, Max(D2.Description) as Dimension2Desc,
                        Max(D3.Description) as Dimension3Desc, Max(D4.Description) as Dimension4Desc, Max(Size.Description) as SizeDesc,
                        Sum(L.Qty) AS Qty, Sum(L.Wastage) AS Wastage, 
                        Max(L.Unit) As Unit, Max(Cast(L.ConsiderInIssueYN As BIGINT)) As ConsiderInIssueYN
                        FROM (Select * From PurchInvoiceDetailBom Where DocId = '" & mSearchCode & "') As L 
                        LEFT JOIN PurchInvoiceDetailBomSku Pids ON L.DocID = Pids.DocID AND L.TSr = Pids.TSr AND L.Sr = Pids.Sr
                        LEFT JOIN Item Sku ON Sku.Code = L.Item
                        LEFT JOIN ItemType It On Sku.ItemType = It.Code
                        Left Join Item IC On Pids.ItemCategory = IC.Code
                        Left Join Item IG On Pids.ItemGroup = IG.Code
                        LEFT JOIN Item I ON Pids.Item = I.Code
                        LEFT JOIN Item D1 ON Pids.Dimension1 = D1.Code
                        LEFT JOIN Item D2 ON Pids.Dimension2 = D2.Code
                        LEFT JOIN Item D3 ON Pids.Dimension3 = D3.Code
                        LEFT JOIN Item D4 ON Pids.Dimension4 = D4.Code
                        LEFT JOIN Item Size ON Pids.Size = Size.Code
                        Left Join Unit U With (NoLock) On L.Unit = U.Code 
                        GROUP BY Pids.ItemCategory, Pids.ItemGroup, Pids.Item, Pids.Dimension1, Pids.Dimension2, Pids.Dimension3, Pids.Dimension4, Pids.Size 
                        Order By ItemTypeDesc Desc "
                DsTemp = AgL.FillData(mQry, AgL.GCn)
                With DsTemp.Tables(0)
                    Dgl4.RowCount = 1
                    Dgl4.Rows.Clear()
                    If .Rows.Count > 0 Then
                        For I = 0 To DsTemp.Tables(0).Rows.Count - 1
                            Dgl4.Rows.Add()
                            Dgl4.Item(ColSNo, I).Value = Dgl4.Rows.Count

                            Dgl4.Item(Col4Sku, I).Tag = AgL.XNull(.Rows(I)("Sku"))
                            Dgl4.Item(Col4Sku, I).Value = AgL.XNull(.Rows(I)("SkuDescription"))

                            Dgl4.Item(Col4ItemCategory, I).Tag = AgL.XNull(.Rows(I)("ItemCategory"))
                            Dgl4.Item(Col4ItemCategory, I).Value = AgL.XNull(.Rows(I)("ItemCategoryDesc"))

                            Dgl4.Item(Col4Item, I).Tag = AgL.XNull(.Rows(I)("ItemCode"))
                            Dgl4.Item(Col4Item, I).Value = AgL.XNull(.Rows(I)("ItemDesc"))

                            Dgl4.Item(Col4Dimension1, I).Tag = AgL.XNull(.Rows(I)("Dimension1"))
                            Dgl4.Item(Col4Dimension1, I).Value = AgL.XNull(.Rows(I)("Dimension1Desc"))

                            Dgl4.Item(Col4Dimension2, I).Tag = AgL.XNull(.Rows(I)("Dimension2"))
                            Dgl4.Item(Col4Dimension2, I).Value = AgL.XNull(.Rows(I)("Dimension2Desc"))

                            Dgl4.Item(Col4Dimension3, I).Tag = AgL.XNull(.Rows(I)("Dimension3"))
                            Dgl4.Item(Col4Dimension3, I).Value = AgL.XNull(.Rows(I)("Dimension3Desc"))

                            Dgl4.Item(Col4Dimension4, I).Tag = AgL.XNull(.Rows(I)("Dimension4"))
                            Dgl4.Item(Col4Dimension4, I).Value = AgL.XNull(.Rows(I)("Dimension4Desc"))

                            Dgl4.Item(Col4Qty, I).Value = AgL.VNull(.Rows(I)("Qty"))
                            Dgl4.Item(Col4Unit, I).Value = AgL.XNull(.Rows(I)("Unit"))

                            Dgl4.Item(Col4ConsiderInIssueYN, I).Value = IIf(AgL.VNull(.Rows(I)("ConsiderInIssueYN")) = 0, "o", "þ")
                            Dgl4.Item(Col4CurrentStock, I).Value = FGetStock(I)
                            Dgl4.Item(Col4CurrentStockProcess, I).Value = FGetStockProcess(Dgl4.Item(Col4Sku, I).Tag, DglMain.Item(Col1Value, rowVendor).Tag)

                            Dgl4.Item(Col4Wastage, I).Value = AgL.VNull(.Rows(I)("Wastage"))

                            LblTotalBomQty.Text = Val(LblTotalBomQty.Text) + Val(Dgl4.Item(Col4Qty, I).Value)
                        Next I
                    End If
                End With


                AgCalcGrid1.FMoveRecLineLedgerAc()
                If AgCustomGrid1.Rows.Count = 0 Then AgCustomGrid1.Visible = False

                'Calculation()
                '-------------------------------------------------------------
            End If
        End With
        SetAttachmentCaption()
        Dgl1.ReadOnly = True
        'DglMain.ReadOnly = True
        'Dgl2.ReadOnly = True
    End Sub
    Private Function FGetStockProcess(SkuCode As String, SubCode As String) As Double
        mQry = "SELECT Round(IsNull(Sum(L.Qty_Rec),0) - IsNull(Sum(L.Qty_Iss),0),3) AS Qty
                FROM StockProcess L 
                LEFT JOIN Item I ON L.Item = I.Code
                WHERE L.SubCode = '" & SubCode & "'
                And L.Item = '" & SkuCode & "' "
        FGetStockProcess = AgL.VNull(AgL.Dman_Execute(mQry, AgL.GCn).ExecuteScalar())
    End Function

    Private Sub FrmSaleOrder_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
        Topctrl1.ChangeAgGridState(Dgl1, False)
        AgCalcGrid1.FrmType = Me.FrmType
    End Sub

    Private Sub Txt_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs)
        Dim DrTemp As DataRow() = Nothing
        Dim DtTemp As DataTable = Nothing
        If mFlag_Import = True Then Exit Sub
        Dim FrmObj As New FrmPurchPartyDetail
        Try
            Select Case sender.NAME
                'Case TxtV_Type.Name
                '    If DglMain.Item(Col1Value, rowV_Type).Tag = "" Then Exit Sub

                '    mQry = "Select * from PurchaseInvoiceSetting  With (NoLock)  Where V_Type = '" & DglMain.Item(Col1Value, rowV_Type).Tag & "' And Div_Code ='" & TxtDivision.Tag & "' And Site_Code = '" & DglMain.Item(Col1Value, rowSite_Code).Tag & "' "
                '    DtV_TypeSettings = AgL.FillData(mQry, AgL.GCn).Tables(0)
                '    If DtV_TypeSettings.Rows.Count = 0 Then
                '        mQry = "Select * from PurchaseInvoiceSetting  With (NoLock)  Where V_Type = '" & DglMain.Item(Col1Value, rowV_Type).Tag & "' And Div_Code ='" & TxtDivision.Tag & "' And Site_Code Is Null "
                '        DtV_TypeSettings = AgL.FillData(mQry, AgL.GCn).Tables(0)
                '        If DtV_TypeSettings.Rows.Count = 0 Then
                '            mQry = "Select * from PurchaseInvoiceSetting  With (NoLock)  Where V_Type = '" & DglMain.Item(Col1Value, rowV_Type).Tag & "' And Div_Code Is Null And Site_Code = '" & DglMain.Item(Col1Value, rowSite_Code).Tag & "' "
                '            DtV_TypeSettings = AgL.FillData(mQry, AgL.GCn).Tables(0)
                '            If DtV_TypeSettings.Rows.Count = 0 Then
                '                mQry = "Select * from PurchaseInvoiceSetting  With (NoLock)  Where V_Type = '" & DglMain.Item(Col1Value, rowV_Type).Tag & "' And Div_Code Is Null And Site_Code is Null "
                '                DtV_TypeSettings = AgL.FillData(mQry, AgL.GCn).Tables(0)
                '                If DtV_TypeSettings.Rows.Count = 0 Then
                '                    mQry = "Select * from PurchaseInvoiceSetting  With (NoLock)  Where V_Type Is Null And Div_Code Is Null And Site_Code is Null "
                '                    DtV_TypeSettings = AgL.FillData(mQry, AgL.GCn).Tables(0)
                '                End If
                '            End If
                '        End If
                '    End If
                '    If DtV_TypeSettings.Rows.Count = 0 Then
                '        MsgBox("Voucher Type settings not found")
                '        Topctrl1.FButtonClick(14, True)
                '        Exit Sub
                '    End If

                '    TxtStructure.AgSelectedValue = AgL.Dman_Execute("Select IfNull(Max(Structure),'') From Voucher_Type  With (NoLock) Where V_Type = '" & DglMain.Item(Col1Value, rowV_Type).Tag & "'", AgL.GcnRead).ExecuteScalar
                '    AgCalcGrid1.AgStructure = TxtStructure.AgSelectedValue
                '    AgCalcGrid1.AgNCat = LblV_Type.Tag

                '    TxtCustomFields.AgSelectedValue = AgCustomFields.ClsMain.FGetCustomFieldFromV_Type(DglMain.Item(Col1Value, rowV_Type).Tag, AgL.GcnRead)
                '    AgCustomGrid1.AgCustom = TxtCustomFields.AgSelectedValue

                '    IniGrid()
                '    DglMain.Item(Col1Value, rowReferenceNo).Value = AgTemplate.ClsMain.FGetManualRefNo("ManualRefNo", "PurchInvoice", DglMain.Item(Col1Value, rowV_Type).Tag, DglMain.Item(Col1Value, rowV_Date).Value, TxtDivision.AgSelectedValue, DglMain.Item(Col1Value, rowSite_Code).Tag, AgTemplate.ClsMain.ManualRefType.Max)

                'Case TxtVendor.Name
                '    If DglMain.Item(Col1Value, rowVendor).Value <> "" Then
                '        If sender.AgDataRow IsNot Nothing Then
                '            TxtNature.Text = AgL.XNull(sender.AgDataRow.Cells("Nature").Value)
                '        End If

                '        If ClsMain.IsPartyBlocked(DglMain.Item(Col1Value, rowVendor).Tag, LblV_Type.Tag) Then
                '            MsgBox("Party is blocked for " & DglMain.Item(Col1Value, rowV_Type).Value & ". Record will not be saved")
                '        End If


                '        If DglMain.Item(Col1Value, rowBillToParty).Value = "" Then
                '            DglMain.Item(Col1Value, rowBillToParty).Tag = DglMain.Item(Col1Value, rowVendor).Tag
                '            DglMain.Item(Col1Value, rowBillToParty).Value = DglMain.Item(Col1Value, rowVendor).Value
                '        End If


                '        DglMain.Item(Col1BtnDetail, rowVendor).Tag = Nothing
                '        ShowPurchaseInvoiceParty("", DglMain.Item(Col1Value, rowVendor).Tag, TxtNature.Text, True)


                '        mQry = "Select H.Agent,Agent.Name as AgentName
                '                    From SubgroupSiteDivisionDetail H  With (NoLock)                                   
                '                    Left Join viewHelpSubgroup agent  With (NoLock) On H.Agent = Agent.Code                                    
                '                    Where Subcode = '" & DglMain.Item(Col1Value, rowVendor).Tag & "'"
                '        DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)
                '        If DtTemp.Rows.Count > 0 Then

                '            Dgl2.Item(Col1Value, rowAgent).Tag = AgL.XNull(DtTemp.Rows(0)("Agent"))
                '            Dgl2.Item(Col1Value, rowAgent).Value = AgL.XNull(DtTemp.Rows(0)("AgentName"))
                '        End If

                '        Dgl1.AgHelpDataSet(Col1ReferenceNo) = Nothing
                '        If Val(LblTotalAmount.Text) > 0 Then Calculation()


                '        FGetCurrBal(DglMain.Item(Col1Value, rowVendor).Tag)

                '    End If

                'Case TxtReferenceNo.Name
                '    e.Cancel = Not AgTemplate.ClsMain.FCheckDuplicateRefNo("ManualRefNo", "PurchInvoice",
                '                    DglMain.Item(Col1Value, rowV_Type).Tag, DglMain.Item(Col1Value, rowV_Date).Value, TxtDivision.AgSelectedValue,
                '                    DglMain.Item(Col1Value, rowSite_Code).Tag, Topctrl1.Mode,
                '                    DglMain.Item(Col1Value, rowReferenceNo).Value, mSearchCode)

                'Case TxtReferenceNo.Name
                '    e.Cancel = Not FCheckDuplicateRefNo()
                'Case TxtVendorDocDate.Name
                '    If LblV_Type.Tag = Ncat.PurchaseInvoice Then
                '        ShowPurchInvoiceHeader()
                '    End If
                'Case TxtVendorDocNo.Name
                '    If Dgl2.Item(Col1Value, rowVendorDocNo).Value <> "" Then
                '        If mFlag_Import = False Then
                '            e.Cancel = Not ClsMain.FCheckDuplicatePartyDocNo("VendorDocNo", "PurchInvoice",
                '                DglMain.Item(Col1Value, rowV_Type).Tag, Dgl2.Item(Col1Value, rowVendorDocNo).Value, mSearchCode, "Vendor", DglMain.Item(Col1Value, rowVendor).Tag)
                '        End If
                '    End If
            End Select
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub
    Private Sub FrmPurchPlanEntry_BaseEvent_DglMainEditingControlValidating(sender As Object, e As CancelEventArgs) Handles Me.BaseEvent_DglMainEditingControlValidating
        Dim mRow As Integer
        Dim mColumn As Integer
        mRow = DglMain.CurrentCell.RowIndex
        mColumn = DglMain.CurrentCell.ColumnIndex

        Select Case mRow
            Case rowV_Type
                If DglMain.Item(Col1Value, rowV_Type).Tag = "" Then Exit Sub
                mQry = "Select * from PurchaseInvoiceSetting  With (NoLock)  Where V_Type = '" & DglMain.Item(Col1Value, rowV_Type).Tag & "' And Div_Code ='" & TxtDivision.Tag & "' And Site_Code = '" & DglMain.Item(Col1Value, rowSite_Code).Tag & "' "
                DtV_TypeSettings = AgL.FillData(mQry, AgL.GCn).Tables(0)
                If DtV_TypeSettings.Rows.Count = 0 Then
                    mQry = "Select * from PurchaseInvoiceSetting  With (NoLock)  Where V_Type = '" & DglMain.Item(Col1Value, rowV_Type).Tag & "' And Div_Code ='" & TxtDivision.Tag & "' And Site_Code Is Null "
                    DtV_TypeSettings = AgL.FillData(mQry, AgL.GCn).Tables(0)
                    If DtV_TypeSettings.Rows.Count = 0 Then
                        mQry = "Select * from PurchaseInvoiceSetting  With (NoLock)  Where V_Type = '" & DglMain.Item(Col1Value, rowV_Type).Tag & "' And Div_Code Is Null And Site_Code = '" & DglMain.Item(Col1Value, rowSite_Code).Tag & "' "
                        DtV_TypeSettings = AgL.FillData(mQry, AgL.GCn).Tables(0)
                        If DtV_TypeSettings.Rows.Count = 0 Then
                            mQry = "Select * from PurchaseInvoiceSetting  With (NoLock)  Where V_Type = '" & DglMain.Item(Col1Value, rowV_Type).Tag & "' And Div_Code Is Null And Site_Code is Null "
                            DtV_TypeSettings = AgL.FillData(mQry, AgL.GCn).Tables(0)
                            If DtV_TypeSettings.Rows.Count = 0 Then
                                mQry = "Select * from PurchaseInvoiceSetting  With (NoLock)  Where V_Type Is Null And Div_Code Is Null And Site_Code is Null "
                                DtV_TypeSettings = AgL.FillData(mQry, AgL.GCn).Tables(0)
                            End If
                        End If
                    End If
                End If
                If DtV_TypeSettings.Rows.Count = 0 Then
                    MsgBox("Voucher Type settings not found")
                    Topctrl1.FButtonClick(14, True)
                    Exit Sub
                End If



                FGetProcessFromVoucher_Type()

                TxtStructure.AgSelectedValue = AgL.Dman_Execute("Select IfNull(Max(Structure),'') From Voucher_Type  With (NoLock) Where V_Type = '" & DglMain.Item(Col1Value, rowV_Type).Tag & "'", AgL.GcnRead).ExecuteScalar
                AgCalcGrid1.AgStructure = TxtStructure.AgSelectedValue
                AgCalcGrid1.AgNCat = LblV_Type.Tag

                TxtCustomFields.AgSelectedValue = AgCustomFields.ClsMain.FGetCustomFieldFromV_Type(DglMain.Item(Col1Value, rowV_Type).Tag, AgL.GcnRead)
                AgCustomGrid1.AgCustom = TxtCustomFields.AgSelectedValue

                IniGrid()
                FGetStructureForInputField()
                DglMain.Item(Col1Value, rowReferenceNo).Value = AgTemplate.ClsMain.FGetManualRefNo("ManualRefNo", "PurchInvoice", DglMain.Item(Col1Value, rowV_Type).Tag, DglMain.Item(Col1Value, rowV_Date).Value, TxtDivision.AgSelectedValue, DglMain.Item(Col1Value, rowSite_Code).Tag, AgTemplate.ClsMain.ManualRefType.Max)

                If CType(AgL.VNull(FGetSettings(SettingFields.BarcodeGunInputYn, SettingType.General)), Boolean) = False Then
                    LblBarcode.Visible = False
                    TxtBarcode.Visible = False
                Else
                    LblBarcode.Visible = True
                    TxtBarcode.Visible = True
                End If
                FGetSettingVariableValuesForAddAndEdit()

            Case rowSettingGroup
                If AgL.StrCmp(Topctrl1.Mode, "Add") Then
                    IniGrid()
                    If DglMain(Col1Value, rowVendor).Visible = True Then
                        DglMain.CurrentCell = DglMain(Col1Value, rowVendor)
                        DglMain.Focus()
                    End If
                    FGetSettingVariableValuesForAddAndEdit()
                Else
                    e.Cancel = True
                End If

            Case rowReferenceNo
                e.Cancel = Not AgTemplate.ClsMain.FCheckDuplicateRefNo("ManualRefNo", "PurchInvoice",
                                DglMain.Item(Col1Value, rowV_Type).Tag, DglMain.Item(Col1Value, rowV_Date).Value, TxtDivision.AgSelectedValue,
                                DglMain.Item(Col1Value, rowSite_Code).Tag, Topctrl1.Mode,
                                DglMain.Item(Col1Value, rowReferenceNo).Value, mSearchCode)

            Case rowProcess
                If AgL.StrCmp(Topctrl1.Mode, "Add") Then
                    IniGrid()
                    If DglMain(Col1Value, rowVendor).Visible = True Then
                        DglMain.CurrentCell = DglMain(Col1Value, rowVendor)
                        DglMain.Focus()
                    End If

                    DglMain.Item(Col1Value, rowVendor).Tag = ""
                    DglMain.Item(Col1Value, rowVendor).Value = ""
                    DglMain.Item(Col1Value, rowBillToParty).Tag = ""
                    DglMain.Item(Col1Value, rowBillToParty).Value = ""

                    DglMain.Item(Col1Head, rowVendor).Tag = Nothing
                    DglMain.Item(Col1Head, rowBillToParty).Tag = Nothing

                    FGetProcessDetail()
                Else
                    e.Cancel = True
                End If
                'ApplyUISettings(LblV_Type.Tag)
                'ApplyUISetting()




            Case rowVendor
                If DglMain.Item(Col1Value, rowVendor).Value <> "" Then
                    TxtNature.Text = AgL.XNull(AgL.Dman_Execute(" Select Nature From SubGroup Where SubCode = '" & DglMain.Item(Col1Value, rowVendor).Tag & "'", AgL.GCn).ExecuteScalar())

                    If ClsMain.IsPartyBlocked(DglMain.Item(Col1Value, rowVendor).Tag, LblV_Type.Tag) Then
                        MsgBox("Party is blocked for " & DglMain.Item(Col1Value, rowV_Type).Value & ". Record will not be saved")
                    End If

                    FValidateSalesTaxGroup()


                    If DglMain.Rows(rowBillToParty).Visible = True Then
                        If DglMain.Item(Col1Value, rowBillToParty).Value = "" Then
                            DglMain.Item(Col1Value, rowBillToParty).Tag = DglMain.Item(Col1Value, rowVendor).Tag
                            DglMain.Item(Col1Value, rowBillToParty).Value = DglMain.Item(Col1Value, rowVendor).Value
                        End If
                    Else
                        DglMain.Item(Col1Value, rowBillToParty).Tag = DglMain.Item(Col1Value, rowVendor).Tag
                        DglMain.Item(Col1Value, rowBillToParty).Value = DglMain.Item(Col1Value, rowVendor).Value
                    End If


                    DglMain.Item(Col1BtnDetail, rowVendor).Tag = Nothing
                    ShowPurchaseInvoiceParty("", DglMain.Item(Col1Value, rowVendor).Tag, TxtNature.Text, True)

                    If DglMain.Item(Col1BtnDetail, rowVendor).Tag IsNot Nothing Then
                        Dgl2.Item(Col1Value, rowSalesTaxNo).Value = CType(DglMain.Item(Col1BtnDetail, rowVendor).Tag, FrmPurchaseInvoiceParty).Dgl1.Item(Col1Value, FrmPurchaseInvoiceParty.rowSalesTaxNo).Value
                    End If



                    mQry = "Select H.RateType, RT.Description as RateTypeName, H.Agent,Agent.Name as AgentName
                                    From SubgroupSiteDivisionDetail H  With (NoLock)                                   
                                    Left Join RateType RT With (NoLock) on H.RateType = RT.Code
                                    Left Join viewHelpSubgroup agent  With (NoLock) On H.Agent = Agent.Code                                    
                                    Where Subcode = '" & DglMain.Item(Col1Value, rowVendor).Tag & "'"
                    Dim DtTemp As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)
                    If DtTemp.Rows.Count > 0 Then
                        Dgl2.Item(Col1Value, rowRateType).Tag = AgL.XNull(DtTemp.Rows(0)("RateType"))
                        Dgl2.Item(Col1Value, rowRateType).Value = AgL.XNull(DtTemp.Rows(0)("RateTypeName"))

                        Dgl2.Item(Col1Value, rowAgent).Tag = AgL.XNull(DtTemp.Rows(0)("Agent"))
                        Dgl2.Item(Col1Value, rowAgent).Value = AgL.XNull(DtTemp.Rows(0)("AgentName"))
                    End If

                    Dgl1.AgHelpDataSet(Col1ReferenceNo) = Nothing
                    If Val(LblTotalAmount.Text) > 0 Then Calculation()


                    FGetCurrBal(DglMain.Item(Col1Value, rowVendor).Tag)
                End If

            Case rowVendorDocDate
                If LblV_Type.Tag = Ncat.PurchaseInvoice Then
                    ShowPurchInvoiceHeader()
                End If

            Case rowVendorDocNo
                If Dgl2.Item(Col1Value, rowVendorDocNo).Value <> "" Then
                    If mFlag_Import = False Then
                        e.Cancel = Not ClsMain.FCheckDuplicatePartyDocNo("VendorDocNo", "PurchInvoice",
                                DglMain.Item(Col1Value, rowV_Type).Tag, Dgl2.Item(Col1Value, rowVendorDocNo).Value, mSearchCode, "Vendor", DglMain.Item(Col1Value, rowVendor).Tag)
                    End If
                End If
        End Select
    End Sub
    Private Sub Dgl2_EditingControl_Validating(sender As Object, e As CancelEventArgs) Handles Dgl2.EditingControl_Validating
        Dim mRow As Integer
        Dim mColumn As Integer
        mRow = Dgl2.CurrentCell.RowIndex
        mColumn = Dgl2.CurrentCell.ColumnIndex

        Select Case mRow
            Case rowVendorDocDate
                If LblV_Type.Tag = Ncat.PurchaseInvoice Then
                    ShowPurchInvoiceHeader()
                End If

            Case rowVendorDocNo
                If Dgl2.Item(Col1Value, rowVendorDocNo).Value <> "" Then
                    If mFlag_Import = False Then
                        e.Cancel = Not ClsMain.FCheckDuplicatePartyDocNo("VendorDocNo", "PurchInvoice",
                                DglMain.Item(Col1Value, rowV_Type).Tag, Dgl2.Item(Col1Value, rowVendorDocNo).Value, mSearchCode, "Vendor", DglMain.Item(Col1Value, rowVendor).Tag)
                    End If
                End If

            Case rowStructure
                If Dgl1.Rows.Count > 1 Then
                    If MsgBox("If you will change billing type then you will loss line data in this entry.Do you want to continue", MsgBoxStyle.Question + MsgBoxStyle.YesNo) = MsgBoxResult.Yes Then
                        FChangeStructure()
                    Else
                        FGetStructureForInputField()
                    End If
                Else
                    FChangeStructure()
                End If

            Case rowCatalog
                'If AgL.XNull(Dgl2.Item(Col1Value, Dgl2.CurrentCell.RowIndex).Tag) <> "" Then
                '    FFillCatalogItems(Dgl2.Item(Col1Value, Dgl2.CurrentCell.RowIndex).Tag)
                'End If
        End Select
    End Sub
    Private Sub FChangeStructure()
        TxtStructure.Tag = Dgl2.Item(Col1Value, rowStructure).Tag
        AgCalcGrid1.AgStructure = TxtStructure.AgSelectedValue
        IniGrid()
        FGetStructureForInputField()
        Dgl2.CurrentCell = Dgl2.Item(Col1Value, rowStructure)
        Dgl2.Focus()
    End Sub
    Private Sub Dgl2_KeyDown(sender As Object, e As KeyEventArgs) Handles Dgl2.KeyDown
        Dim mRow As Integer
        Dim mColumn As Integer

        Try
            If Dgl2.CurrentCell Is Nothing Then Exit Sub

            mRow = Dgl2.CurrentCell.RowIndex
            mColumn = Dgl2.CurrentCell.ColumnIndex

            Select Case mRow
                Case rowVendorDocDate
                    If e.KeyCode = Keys.Enter Then
                        If LblV_Type.Tag = Ncat.PurchaseInvoice Then
                            ShowPurchInvoiceHeader()
                        End If
                    End If

                Case rowStockInNo
                    If ClsMain.IsSpecialKeyPressed(e) = False Then
                        If e.KeyCode <> Keys.Enter Then
                            FHPGD_UnRelatedStockIn(Dgl2.Item(Col1Value, rowStockInNo).Tag, Dgl2.Item(Col1Value, rowStockInNo).Value)
                        End If
                    End If
            End Select

            If e.KeyCode = Keys.Enter Then
                Dim LastCell As DataGridViewCell = LastDisplayedCell(Dgl2)
                If Dgl2.CurrentCell.RowIndex = LastCell.RowIndex And Dgl2.CurrentCell.ColumnIndex = LastCell.ColumnIndex Then
                    If TxtBarcode.Visible = True And TxtBarcode.Enabled = True Then
                        TxtBarcode.Focus()
                    ElseIf Dgl1.Visible Then
                        If Dgl1.Columns(Col1ItemCategory).Visible = True Then
                            Dgl1.CurrentCell = Dgl1.Item(Col1ItemCategory, 0)
                        Else
                            Dgl1.CurrentCell = Dgl1.FirstDisplayedCell
                        End If
                        Dgl1.Focus()
                    End If
                End If
            End If
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub
    Private Sub FrmSaleOrder_BaseEvent_Topctrl_tbAdd() Handles Me.BaseEvent_Topctrl_tbAdd
        mQry = "Select * from PurchaseInvoiceSetting  With (NoLock)  Where V_Type = '" & DglMain.Item(Col1Value, rowV_Type).Tag & "' And Div_Code ='" & TxtDivision.Tag & "' And Site_Code = '" & DglMain.Item(Col1Value, rowSite_Code).Tag & "' "
        DtV_TypeSettings = AgL.FillData(mQry, AgL.GCn).Tables(0)
        If DtV_TypeSettings.Rows.Count = 0 Then
            mQry = "Select * from PurchaseInvoiceSetting  With (NoLock)  Where V_Type = '" & DglMain.Item(Col1Value, rowV_Type).Tag & "' And Div_Code ='" & TxtDivision.Tag & "' And Site_Code Is Null "
            DtV_TypeSettings = AgL.FillData(mQry, AgL.GCn).Tables(0)
            If DtV_TypeSettings.Rows.Count = 0 Then
                mQry = "Select * from PurchaseInvoiceSetting  With (NoLock)  Where V_Type = '" & DglMain.Item(Col1Value, rowV_Type).Tag & "' And Div_Code Is Null And Site_Code = '" & DglMain.Item(Col1Value, rowSite_Code).Tag & "' "
                DtV_TypeSettings = AgL.FillData(mQry, AgL.GCn).Tables(0)
                If DtV_TypeSettings.Rows.Count = 0 Then
                    mQry = "Select * from PurchaseInvoiceSetting  With (NoLock)  Where V_Type = '" & DglMain.Item(Col1Value, rowV_Type).Tag & "' And Div_Code Is Null And Site_Code is Null "
                    DtV_TypeSettings = AgL.FillData(mQry, AgL.GCn).Tables(0)
                    If DtV_TypeSettings.Rows.Count = 0 Then
                        mQry = "Select * from PurchaseInvoiceSetting  With (NoLock)  Where V_Type Is Null And Div_Code Is Null And Site_Code is Null "
                        DtV_TypeSettings = AgL.FillData(mQry, AgL.GCn).Tables(0)
                    End If
                End If
            End If
        End If
        If DtV_TypeSettings.Rows.Count = 0 Then
            MsgBox("Voucher Type settings not found")
            Topctrl1.FButtonClick(14, True)
            Exit Sub
        End If

        FGetProcessFromVoucher_Type()


        TxtStructure.AgSelectedValue = AgL.Dman_Execute("Select IfNull(Max(Structure),'') From Voucher_Type  With (NoLock) Where V_Type = '" & DglMain.Item(Col1Value, rowV_Type).Tag & "'", AgL.GcnRead).ExecuteScalar
        AgCalcGrid1.AgStructure = TxtStructure.AgSelectedValue
        AgCalcGrid1.AgNCat = LblV_Type.Tag

        mIsEntryLocked = False

        TxtCustomFields.AgSelectedValue = AgCustomFields.ClsMain.FGetCustomFieldFromV_Type(DglMain.Item(Col1Value, rowV_Type).Tag, AgL.GCn)
        AgCustomGrid1.AgCustom = TxtCustomFields.AgSelectedValue

        'Try
        '    TxtGodown.Tag = AgL.XNull(DtV_TypeSettings.Rows(0)("DEFAULT_Godown"))
        '    TxtGodown.Text = AgL.XNull(AgL.Dman_Execute(" Select Description From Godown Where Code = '" & TxtGodown.Tag & "'", AgL.GCn).ExecuteScalar)
        'Catch ex As Exception
        '    MsgBox("Default Godown Is Not Set In Enviro", MsgBoxStyle.Information)
        'End Try

        DglMain.Item(Col1Value, rowSettingGroup).Tag = AgL.XNull(FGetSettings(SettingFields.DefaultSettingGroup, SettingType.General))
        DglMain.Item(Col1Value, rowSettingGroup).Value = AgL.XNull(AgL.Dman_Execute(" Select Name 
                        From SettingGroup 
                        Where Code = '" & DglMain.Item(Col1Value, rowSettingGroup).Tag & "'", AgL.GCn).ExecuteScalar())


        IniGrid()
        FGetStructureForInputField()

        TabControl1.SelectedTab = TP1
        'AgCalcGrid1.AgPostingGroupSalesTaxItem = AgL.XNull(AgL.PubDtEnviro.Rows(0)("Default_SalesTaxGroupItem"))
        DglMain.Item(Col1Value, rowReferenceNo).Value = AgTemplate.ClsMain.FGetManualRefNo("ManualRefNo", "PurchInvoice", DglMain.Item(Col1Value, rowV_Type).Tag, DglMain.Item(Col1Value, rowV_Date).Value, TxtDivision.AgSelectedValue, DglMain.Item(Col1Value, rowSite_Code).Tag, AgTemplate.ClsMain.ManualRefType.Max)
        'TxtVendor.Focus()
        mDimensionSrl = 0
        Dgl1.ReadOnly = False
        'DglMain.ReadOnly = False
        'Dgl2.ReadOnly = False

        CheckBoxFullCalculate.Checked = False

        If mV_Type = "" Then
            If DtVoucher_TypeHelpDataSet.Tables(0).Rows.Count > 1 Then
                mQry = "SELECT " & IIf(AgL.PubServerName <> "", "Top 1", "") & " H.V_Type, Vt.Description AS V_TypeDesc  
                FROM PurchInvoice H
                LEFT JOIN Voucher_Type Vt ON H.V_Type = Vt.V_Type
                WHERE H.EntryBy = '" & AgL.PubUserName & "' 
                And Vt.NCat In ('" & EntryNCat & "')
                ORDER BY H.EntryDate DESC " & IIf(AgL.PubServerName = "", "Limit 1", "") & " "
                Dim DtLastVoucher_Type As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)

                If DtLastVoucher_Type.Rows.Count > 0 Then
                    DglMain.Item(Col1Value, rowV_Type).Tag = AgL.XNull(DtLastVoucher_Type.Rows(0)("V_Type"))
                    DglMain.Item(Col1Value, rowV_Type).Value = AgL.XNull(DtLastVoucher_Type.Rows(0)("V_TypeDesc"))
                End If
            End If
        End If


        'Dgl1.CurrentCell = Dgl1.FirstDisplayedCell
        'Dgl1.Focus()

        If DglMain.Visible = True Then
            If DglMain.FirstDisplayedCell IsNot Nothing Then
                If DglMain(Col1Value, rowProcess).Visible = True And DglMain(Col1Value, rowProcess).Value = "" Then
                    DglMain.CurrentCell = DglMain(Col1Value, rowProcess)
                ElseIf DglMain(Col1Value, rowSettingGroup).Visible = True And DglMain(Col1Value, rowSettingGroup).Value = "" Then
                    DglMain.CurrentCell = DglMain(Col1Value, rowSettingGroup)
                ElseIf DglMain(Col1Value, rowVendor).Visible = True Then
                    DglMain.CurrentCell = DglMain(Col1Value, rowVendor)
                Else
                    DglMain.CurrentCell = DglMain(Col1Value, DglMain.FirstDisplayedCell.RowIndex)
                End If
                DglMain.Focus()
            End If
        End If

        FGetSettingVariableValuesForAddAndEdit()

        If SettingFields_MaximumItemLimit = 1 Then
            Dgl1.AllowUserToAddRows = False
            Dgl1.Rows.Clear()
            Dgl1.Rows.Add(1)
        End If

    End Sub

    'Private Sub Dgl1_EditingControl_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles Dgl1.EditingControl_LostFocus
    '    If Topctrl1.Mode = "Browse" Then Exit Sub
    '    Dim mRowIndex As Integer, mColumnIndex As Integer
    '    Dim DrTemp As DataRow() = Nothing
    '    Try
    '        mRowIndex = Dgl1.CurrentCell.RowIndex
    '        mColumnIndex = Dgl1.CurrentCell.ColumnIndex
    '        If Dgl1.Item(mColumnIndex, mRowIndex).Value Is Nothing Then Dgl1.Item(mColumnIndex, mRowIndex).Value = ""
    '        Select Case Dgl1.Columns(Dgl1.CurrentCell.ColumnIndex).Name
    '            Case Col1Rate
    '                If Dgl1.Rows.Count > 50 And Dgl1.Columns(mColumnIndex).Name = Col1DocQty Then
    '                    Call Calculation()
    '                End If
    '                If Dgl1.Rows.Count <= 50 Then
    '                    Call Calculation()
    '                End If
    '        End Select
    '    Catch ex As Exception
    '        MsgBox(ex.Message)
    '    End Try

    'End Sub

    'Private Sub Validating_Item(ByVal Code As String, ByVal mRow As Integer)
    '    Dim DrTemp As DataRow() = Nothing
    '    Dim DtTemp As DataTable = Nothing
    '    Try
    '        If Dgl1.Item(Col1Item, mRow).Value.ToString.Trim = "" Or Dgl1.AgSelectedValue(Col1Item, mRow).ToString.Trim = "" Then
    '            Dgl1.Item(Col1Unit, mRow).Value = ""
    '            Dgl1.Item(Col1SalesTaxGroup, mRow).Value = ""
    '            Dgl1.Item(Col1MeasureUnit, mRow).Value = ""
    '            Dgl1.Item(Col1MeasurePerPcs, mRow).Value = ""
    '            Dgl1.Item(Col1Rate, mRow).Value = ""
    '            Dgl1.Item(Col1DocQty, mRow).Value = ""
    '        Else
    '            If Dgl1.AgHelpDataSet(Col1Item) IsNot Nothing Then
    '                DrTemp = Dgl1.AgHelpDataSet(Col1Item).Tables(0).Select("Code = '" & Code & "'")
    '                Call FSetColumnDecimalPlace(Dgl1.AgSelectedValue(Col1Item, mRow), mRow)
    '                Dgl1.Item(Col1Unit, mRow).Value = AgL.XNull(DrTemp(0)("Unit"))
    '                Dgl1.Item(Col1MeasureUnit, mRow).Value = AgL.XNull(DrTemp(0)("MeasureUnit"))
    '                Dgl1.Item(Col1MeasurePerPcs, mRow).Value = AgL.VNull(DrTemp(0)("MeasurePerPcs"))
    '                Dgl1.Item(Col1Rate, mRow).Value = AgL.VNull(DrTemp(0)("Rate"))
    '                Dgl1.AgSelectedValue(Col1SalesTaxGroup, mRow) = AgL.XNull(DrTemp(0)("SalesTaxPostingGroup"))
    '                If AgL.StrCmp(Dgl1.AgSelectedValue(Col1SalesTaxGroup, mRow), "") Then
    '                    Dgl1.AgSelectedValue(Col1SalesTaxGroup, mRow) = AgL.XNull(AgL.PubDtEnviro.Rows(0)("Default_SalesTaxGroupItem"))
    '                End If

    '            End If
    '        End If
    '    Catch ex As Exception
    '        MsgBox(ex.Message & " On Validating_Item Function ")
    '    End Try
    'End Sub

    Private Sub Dgl1_EditingControl_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles Dgl1.EditingControl_Validating
        If Topctrl1.Mode = "Browse" Then Exit Sub
        Dim mRowIndex As Integer, mColumnIndex As Integer
        Dim DrTemp As DataRow() = Nothing
        Dim I As Integer
        Try
            mRowIndex = Dgl1.CurrentCell.RowIndex
            mColumnIndex = Dgl1.CurrentCell.ColumnIndex
            If Dgl1.Item(mColumnIndex, mRowIndex).Value Is Nothing Then Dgl1.Item(mColumnIndex, mRowIndex).Value = ""
            Select Case Dgl1.Columns(Dgl1.CurrentCell.ColumnIndex).Name
                Case Col1Item
                    'Validating_ItemCode(mColumnIndex, mRowIndex, DrTemp)
                    Validating_ItemCode(Dgl1.Item(mColumnIndex, mRowIndex).Tag, mColumnIndex, mRowIndex)
                    Call FGetUnitMultiplier(mRowIndex)

                    'If CType(AgL.VNull(DtV_TypeSettings.Rows(0)("IsVisible_TransactionHistory")), Boolean) = True Then
                    FShowTransactionHistory(Dgl1.Item(Col1Item, mRowIndex).Tag)
                    'End If

                Case Col1ItemCode
                    'Validating_ItemCode(mColumnIndex, mRowIndex, DrTemp)
                    Validating_ItemCode(Dgl1.Item(mColumnIndex, mRowIndex).Tag, mColumnIndex, mRowIndex)
                    Call FGetUnitMultiplier(mRowIndex)

                    'If CType(AgL.VNull(DtV_TypeSettings.Rows(0)("IsVisible_TransactionHistory")), Boolean) = True Then
                    FShowTransactionHistory(Dgl1.Item(Col1Item, mRowIndex).Tag)
                    'End If

                Case Col1LRNo
                    If Dgl1.Item(Col1LRNo, mRowIndex).Value <> "" Then
                        If MsgBox("Apply To All ?", MsgBoxStyle.Question + MsgBoxStyle.YesNo + MsgBoxStyle.DefaultButton2) = MsgBoxResult.Yes Then
                            For I = mRowIndex To Dgl1.Rows.Count - 1
                                If Dgl1.Item(Col1SKU, I).Value <> "" Then
                                    Dgl1.Item(Col1LRNo, I).Value = Dgl1.Item(Col1LRNo, mRowIndex).Value
                                    Dgl1.Item(Col1LRNo, I).Value = Dgl1.Item(Col1LRNo, mRowIndex).Value
                                End If
                            Next
                        End If
                    End If

                Case Col1ItemCategory
                    Validating_ItemCategory(mColumnIndex, mRowIndex)
                    If Dgl1.Item(Col1Unit, mRowIndex).Tag Then ShowPurchInvoiceDimensionDetail(Dgl1.CurrentCell.RowIndex, False)

                Case Col1ItemGroup
                    Validating_ItemGroup(mColumnIndex, mRowIndex)

                Case Col1Rate
                    FSetSalesTaxGroupItemBasedOnRate(mRowIndex)
                    Dgl1.Item(Col1ProfitMarginPer, mRowIndex).Value = FGetItemMargin(Dgl1.Item(Col1ItemCategory, mRowIndex).Tag,
                                            Dgl1.Item(Col1ItemGroup, mRowIndex).Tag,
                                            Dgl1.Item(Col1Item, mRowIndex).Tag, Val(Dgl1.Item(Col1Rate, mRowIndex).Value))


                Case Col1Dimension1
                    Validating_Dimension1(mColumnIndex, mRowIndex)
                    If Dgl1.Item(Col1Unit, mRowIndex).Tag Then ShowPurchInvoiceDimensionDetail(Dgl1.CurrentCell.RowIndex, False)

                Case Col1Dimension2
                    Validating_Dimension2(mColumnIndex, mRowIndex)
                    If Dgl1.Item(Col1Unit, mRowIndex).Tag Then ShowPurchInvoiceDimensionDetail(Dgl1.CurrentCell.RowIndex, False)


                Case Col1Dimension2
                    Validating_Dimension2(mColumnIndex, mRowIndex)
                    If Dgl1.Item(Col1Unit, mRowIndex).Tag Then ShowPurchInvoiceDimensionDetail(Dgl1.CurrentCell.RowIndex, False)
                Case Col1Dimension3
                    Validating_Dimension3(mColumnIndex, mRowIndex)
                    If Dgl1.Item(Col1Unit, mRowIndex).Tag Then ShowPurchInvoiceDimensionDetail(Dgl1.CurrentCell.RowIndex, False)
                    If FDivisionNameForCustomization(14) = "PRATHAM APPARE" Or
                       FDivisionNameForCustomization(15) = "AGARWAL UNIFORM" Then
                        If Dgl1.Item(Col1Dimension1, mRowIndex).Tag = "" Then
                            FCreateHelpDimension1(mRowIndex)
                            If Dgl1.AgHelpDataSet(Col1Dimension1).Tables(0).Rows.Count = 1 Then
                                Dgl1.Item(Col1Dimension1, mRowIndex).Tag = AgL.XNull(Dgl1.AgHelpDataSet(Col1Dimension1).Tables(0).Rows(0)("Code"))
                                Dgl1.Item(Col1Dimension1, mRowIndex).Value = AgL.XNull(Dgl1.AgHelpDataSet(Col1Dimension1).Tables(0).Rows(0)("Description"))
                            End If
                        End If
                        If Dgl1.Item(Col1Dimension2, mRowIndex).Tag = "" Then
                            FCreateHelpDimension2(mRowIndex)
                            If Dgl1.AgHelpDataSet(Col1Dimension2).Tables(0).Rows.Count = 1 Then
                                Dgl1.Item(Col1Dimension2, mRowIndex).Tag = AgL.XNull(Dgl1.AgHelpDataSet(Col1Dimension2).Tables(0).Rows(0)("Code"))
                                Dgl1.Item(Col1Dimension2, mRowIndex).Value = AgL.XNull(Dgl1.AgHelpDataSet(Col1Dimension2).Tables(0).Rows(0)("Description"))
                                FOpenMultiLineUI(mRowIndex)
                            End If
                        End If
                    End If

                Case Col1Dimension4
                    Validating_DImension4(mColumnIndex, mRowIndex)
                    If Dgl1.Item(Col1Unit, mRowIndex).Tag Then ShowPurchInvoiceDimensionDetail(Dgl1.CurrentCell.RowIndex, False)

                Case Col1Size
                    Validating_Size(mColumnIndex, mRowIndex)
                    If Dgl1.Item(Col1Unit, mRowIndex).Tag Then ShowPurchInvoiceDimensionDetail(Dgl1.CurrentCell.RowIndex, False)

                Case Col1Size
                    Validating_Size(mColumnIndex, mRowIndex)
                    If Dgl1.Item(Col1Unit, mRowIndex).Tag Then ShowPurchInvoiceDimensionDetail(Dgl1.CurrentCell.RowIndex, False)
                Case Col1ReferenceNo
                    If Dgl1.Item(Col1ReferenceNo, mRowIndex).Tag <> "" Then
                        Dgl1.Item(Col1ReferenceDocID, mRowIndex).Value = Dgl1.Item(Col1ReferenceNo, mRowIndex).Tag
                        Dgl1.Item(Col1ReferenceDate, mRowIndex).Value = ClsMain.FormatDate(AgL.Dman_Execute("Select IfNull(VendorDocDate,V_Date) From PurchInvoice Where DocID = '" & Dgl1.Item(Col1ReferenceNo, mRowIndex).Tag & "'", AgL.GCn).executescalar())
                    End If

                Case Col1Barcode
                    Dim DtBarcode As DataTable
                    If Dgl1.Item(Col1Barcode, mRowIndex).Value <> "" And
                            Dgl1.Item(Col1BarcodeType, mRowIndex).Value <> BarcodeType.Fixed Then
                        mQry = "Select * From Barcode  With (NoLock) 
                                Where Description = '" & Dgl1.Item(Col1Barcode, mRowIndex).Value & "'"
                        DtBarcode = AgL.FillData(mQry, AgL.GCn).Tables(0)

                        If FGetBarcodeDetail(DtBarcode) = False Then
                            Dgl1.Item(Col1Barcode, mRowIndex).Value = ""
                            e.Cancel = True
                            Exit Sub
                        End If

                        For I = 0 To Dgl1.Rows.Count - 1
                            If I <> mRowIndex Then
                                If Dgl1.Item(Col1Barcode, I).Value = Dgl1.Item(Col1Barcode, mRowIndex).Value Then
                                    MsgBox("Barcode is already feeded in line no." & (I + 1).ToString, MsgBoxStyle.Information)
                                    Dgl1.Item(Col1Barcode, mRowIndex).Value = ""
                                    e.Cancel = True
                                    Exit Sub
                                End If
                            End If
                        Next

                        Dgl1.Item(Col1Barcode, mRowIndex).Tag = AgL.XNull(DtBarcode.Rows(0)("Code"))
                        Validating_ItemCode(DtBarcode.Rows(0)("Item"), Dgl1.Columns(Col1Item).Index, mRowIndex)
                        Dgl1.Item(Col1Qty, mRowIndex).Value = 1
                        Dgl1.Item(Col1DocQty, mRowIndex).Value = 1
                    End If

                Case Col1RawMaterial
                    If mRowIndex < Dgl1.Rows.Count - 2 Then
                        If MsgBox("Do you want to copy Raw Material below ? ", MsgBoxStyle.Question + MsgBoxStyle.YesNo) = MsgBoxResult.Yes Then
                            For I = mRowIndex To Dgl1.Rows.Count - 1
                                If Dgl1.Item(Col1ItemCategory, I).Tag = Dgl1.Item(Col1ItemCategory, mRowIndex).Tag Then
                                    Dgl1.Item(mColumnIndex, I).Tag = Dgl1.Item(mColumnIndex, mRowIndex).Tag
                                    Dgl1.Item(mColumnIndex, I).Value = Dgl1.Item(mColumnIndex, mRowIndex).Value
                                    Dgl1.Item(Col1RawMaterialConsumptionQty, I).Value = FGetFabricConsumption_Garment(I)
                                End If
                            Next
                        End If
                    Else
                        Dgl1.Item(Col1RawMaterialConsumptionQty, mRowIndex).Value = FGetFabricConsumption_Garment(mRowIndex)
                    End If
            End Select

            FGeterateSkuName(mRowIndex)

            'Only For opening Pending contra window
            Select Case Dgl1.Columns(Dgl1.CurrentCell.ColumnIndex).Name
                Case Col1ItemCategory, Col1ItemGroup, Col1Item, Col1Dimension1, Col1Dimension2, Col1Dimension3, Col1Dimension4
                    If Dgl1.Columns(mColumnIndex).Name = AgL.XNull(ClsMain.FGetSettings(SettingFields.MultiLineUIWindowBaseField, SettingType.Item,
                                                TxtDivision.Tag, DglMain.Item(Col1Value, rowSite_Code).Tag,
                                                "", Dgl1.Item(Col1ItemType, mRowIndex).Tag, "", "", "")) Then
                        FOpenMultiLineUI(mRowIndex)
                    End If

                    If Dgl1.Columns(mColumnIndex).Name = AgL.XNull(ClsMain.FGetSettings(SettingFields.ContraWindowBaseField, SettingType.Item,
                                                TxtDivision.Tag, DglMain.Item(Col1Value, rowSite_Code).Tag,
                                                "", Dgl1.Item(Col1ItemType, mRowIndex).Tag, "", "", "")) Then
                        Select Case LblNCatNature.Tag
                            Case NCatNature.Order
                                If Dgl2.Rows(rowBtnPendingPurchPlan).Visible = True Then
                                    FOpenPurchPlanForPurchOrder(mRowIndex)
                                End If
                            Case NCatNature.Invoice
                                If Dgl2.Rows(rowBtnPendingPurchOrder).Visible = True And Dgl2.Rows(rowBtnPendingStockReceive).Visible = False Then
                                    FOpenPurchOrderForPurchInvoice(mRowIndex)
                                ElseIf Dgl2.Rows(rowBtnPendingPurchOrder).Visible = False And Dgl2.Rows(rowBtnPendingStockReceive).Visible = True Then
                                    'FOpenStockProcessForPurchInvoice(mRowIndex)
                                    FOpenPurchReceiveForPurchInvoice(mRowIndex)
                                ElseIf Dgl2.Rows(rowBtnPendingPurchOrder).Visible = True And Dgl2.Rows(rowBtnPendingStockReceive).Visible = True Then
                                    'FOpenStockProcessForPurchInvoice(mRowIndex)
                                    FOpenPurchReceiveForPurchInvoice(mRowIndex)
                                    mQry = "Select 'Show List Of Pending Orders' As Code, 'Show List Of Pending Orders' As Name 
                                            UNION ALL 
                                            Select 'Show List Of Pending Stock Receive' As Code, 'Show List Of Pending Stock Receive' As Name "
                                    Dim DtOptions As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)

                                    Dim FRH_Single As DMHelpGrid.FrmHelpGrid
                                    FRH_Single = New DMHelpGrid.FrmHelpGrid(New DataView(DtOptions), "", 350, 300, 150, 520, False)
                                    FRH_Single.FFormatColumn(0, , 0, , False)
                                    FRH_Single.FFormatColumn(1, "Option", 200, DataGridViewContentAlignment.MiddleLeft)
                                    FRH_Single.StartPosition = FormStartPosition.Manual
                                    FRH_Single.ShowDialog()

                                    Dim bChoosenOption As String = ""
                                    If FRH_Single.BytBtnValue = 0 Then
                                        bChoosenOption = FRH_Single.DRReturn(1)
                                    End If

                                    If bChoosenOption = "Show List Of Pending Orders" Then
                                        FOpenPurchOrderForPurchInvoice(mRowIndex)
                                    ElseIf bChoosenOption = "Show List Of Pending Stock Receive" Then
                                        'FOpenStockProcessForPurchInvoice(mRowIndex)
                                        FOpenPurchReceiveForPurchInvoice(mRowIndex)
                                    End If
                                End If
                        End Select
                    End If

                    If ClsMain.IsScopeOfWorkContains(IndustryType.KiranaIndustry) And
                                AgL.StrCmp(LblV_Type.Tag, Ncat.PurchaseOrder) = False And
                                    AgL.StrCmp(LblV_Type.Tag, Ncat.OpeningBalance) = False Then
                        If (Dgl1.Item(Col1Unit, mRowIndex).Tag) Then
                            Dgl1.Item(Col1DocQty, mRowIndex).Style.ForeColor = Color.Blue
                            ShowPurchInvoiceDimensionDetail(mRowIndex)
                        End If
                    End If

                    'If Dgl1.Columns(mColumnIndex).Name = AgL.XNull(ClsMain.FGetSettings(SettingFields.DimensionWindowBaseField, SettingType.Item,
                    '        TxtDivision.Tag, DglMain.Item(Col1Value, rowSite_Code).Tag,
                    '        "", Dgl1.Item(Col1ItemType, mRowIndex).Tag, "", "", DglMain.Item(Col1Value, rowSettingGroup).Tag)) Then
                    '    Select Case LblV_Type.Tag
                    '        Case Ncat.PurchaseInvoice
                    '            Dgl1.Item(Col1DocQty, mRowIndex).Tag = Nothing
                    '            If (Dgl1.Item(Col1Unit, mRowIndex).Tag) Then
                    '                Dgl1.Item(Col1DocQty, mRowIndex).Style.ForeColor = Color.Blue
                    '                ShowPurchInvoiceDimensionDetail(mRowIndex)
                    '            End If
                    '    End Select
                    'End If
            End Select

            Call Calculation()


        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub

    Private Sub DGL1_RowsAdded(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewRowsAddedEventArgs) Handles Dgl1.RowsAdded, Dgl1.RowsAdded
        'sender(ColSNo, sender.Rows.Count - 1).Value = Trim(sender.Rows.Count)
        'sender(ColSNo, e.RowIndex).Value = e.RowIndex + 1
        sender(ColSNo, sender.Rows.Count - 1).Value = Trim(sender.Rows.Count)
    End Sub
    Private Sub FrmSaleOrder_BaseFunction_Calculation() Handles Me.BaseFunction_Calculation
        Dim I As Integer
        If Topctrl1.Mode = "Browse" Then Exit Sub

        LblTotalPcs.Text = 0
        LblTotalQty.Text = 0
        LblTotalDealQty.Text = 0

        LblTotalAmount.Text = 0

        LblTotalBomQty.Text = 0

        Dim DEALARR() As String = Nothing
        Dim DEALRATE As Double


        For I = 0 To Dgl1.RowCount - 1
            If Dgl1.Item(Col1SKU, I).Value <> "" And Dgl1.Rows(I).Visible Then
                Dgl1.Item(Col1Qty, I).Value = Val(Dgl1.Item(Col1DocQty, I).Value) - Val(Dgl1.Item(Col1RejQty, I).Value) - Val(Dgl1.Item(Col1LossQty, I).Value) + Val(Dgl1.Item(Col1FreeQty, I).Value)

                If Val(Dgl1.Item(Col1UnitMultiplier, I).Value) <> 0 Then
                    Dgl1.Item(Col1DocDealQty, I).Value = Format(Val(Dgl1.Item(Col1DocQty, I).Value) * Val(Dgl1.Item(Col1UnitMultiplier, I).Value), "0.".PadRight(Val(Dgl1.Item(Col1DealQtyDecimalPlaces, I).Value) + 2, "0"))
                    Dgl1.Item(Col1FreeDealQty, I).Value = Format(Val(Dgl1.Item(Col1FreeQty, I).Value) * Val(Dgl1.Item(Col1UnitMultiplier, I).Value), "0.".PadRight(Val(Dgl1.Item(Col1DealQtyDecimalPlaces, I).Value) + 2, "0"))
                    Dgl1.Item(Col1LossDealQty, I).Value = Format(Val(Dgl1.Item(Col1LossQty, I).Value) * Val(Dgl1.Item(Col1UnitMultiplier, I).Value), "0.".PadRight(Val(Dgl1.Item(Col1DealQtyDecimalPlaces, I).Value) + 2, "0"))
                    Dgl1.Item(Col1DealQty, I).Value = Format(Val(Dgl1.Item(Col1DocQty, I).Value) * Val(Dgl1.Item(Col1UnitMultiplier, I).Value), "0.".PadRight(Val(Dgl1.Item(Col1DealQtyDecimalPlaces, I).Value) + 2, "0"))
                Else
                    If ClsMain.IsScopeOfWorkContains(IndustryType.KiranaIndustry) Then
                        Dgl1.Item(Col1LossDealQty, I).Value = Format(Val(Dgl1.Item(Col1Qty, I).Value) * Val(Dgl1.Item(Col1LossDealQtyPer, I).Value), "0.".PadRight(Val(Dgl1.Item(Col1DealQtyDecimalPlaces, I).Value) + 2, "0"))
                    End If
                    Dgl1.Item(Col1DealQty, I).Value = Format(Val(Dgl1.Item(Col1DocDealQty, I).Value) - Val(Dgl1.Item(Col1LossDealQty, I).Value) + Val(Dgl1.Item(Col1FreeDealQty, I).Value), "0.".PadRight(Val(Dgl1.Item(Col1DealQtyDecimalPlaces, I).Value) + 2, "0"))
                End If


                If Val(Dgl1.Item(Col1DealQty, I).Value) <> 0 Then
                    If AgL.StrCmp(SettingFields_CalculateAmountOn, "Qty") Then
                        Dgl1.Item(Col1Amount, I).Value = Format(Val(Dgl1.Item(Col1DealQty, I).Value) * Val(Dgl1.Item(Col1Rate, I).Value), "0.".PadRight(CType(Dgl1.Columns(Col1Amount), AgControls.AgTextColumn).AgNumberRightPlaces + 2, "0"))
                    Else
                        Dgl1.Item(Col1Amount, I).Value = Format(Val(Dgl1.Item(Col1DocDealQty, I).Value) * Val(Dgl1.Item(Col1Rate, I).Value), "0.".PadRight(CType(Dgl1.Columns(Col1Amount), AgControls.AgTextColumn).AgNumberRightPlaces + 2, "0"))
                    End If
                Else
                    If AgL.StrCmp(SettingFields_CalculateAmountOn, "Qty") Then
                        Dgl1.Item(Col1Amount, I).Value = Format(Val(Dgl1.Item(Col1Qty, I).Value) * Val(Dgl1.Item(Col1Rate, I).Value), "0.".PadRight(CType(Dgl1.Columns(Col1Amount), AgControls.AgTextColumn).AgNumberRightPlaces + 2, "0"))
                    Else
                        Dgl1.Item(Col1Amount, I).Value = Format(Val(Dgl1.Item(Col1DocQty, I).Value) * Val(Dgl1.Item(Col1Rate, I).Value), "0.".PadRight(CType(Dgl1.Columns(Col1Amount), AgControls.AgTextColumn).AgNumberRightPlaces + 2, "0"))
                    End If
                End If


                If Val(Dgl1.Item(Col1DiscountPer, I).Value) > 0 Then
                    If AgL.XNull(Dgl1(Col1DiscountCalculationPattern, I).Value).ToUpper = DiscountCalculationPattern.RatePerQty.ToUpper Then
                        Dgl1.Item(Col1DiscountAmount, I).Value = Format(Val(Dgl1.Item(Col1Amount, I).Value) * Val(Dgl1.Item(Col1DiscountPer, I).Value), "0.00")
                    Else
                        Dgl1.Item(Col1DiscountAmount, I).Value = Format(Val(Dgl1.Item(Col1Amount, I).Value) * Val(Dgl1.Item(Col1DiscountPer, I).Value) / 100, "0.00")
                    End If
                End If


                If Val(Dgl1.Item(Col1AdditionalDiscountPer, I).Value) > 0 Then
                    If AgL.XNull(Dgl1(Col1AdditionalDiscountCalculationPattern, I).Value).ToUpper = DiscountCalculationPattern.RatePerQty.ToUpper Then
                        Dgl1.Item(Col1AdditionalDiscountAmount, I).Value = Format(Val(Dgl1.Item(Col1DocQty, I).Value) * Val(Dgl1.Item(Col1AdditionalDiscountPer, I).Value), "0.00")
                    ElseIf AgL.XNull(Dgl1(Col1AdditionalDiscountCalculationPattern, I).Value).ToUpper = DiscountCalculationPattern.Percentage.ToUpper Then
                        Dgl1.Item(Col1AdditionalDiscountAmount, I).Value = Format(Val(Dgl1.Item(Col1Amount, I).Value) * Val(Dgl1.Item(Col1AdditionalDiscountPer, I).Value) / 100, "0.00")
                    Else
                        Dgl1.Item(Col1AdditionalDiscountAmount, I).Value = Format((Val(Dgl1.Item(Col1Amount, I).Value) - Val(Dgl1.Item(Col1DiscountAmount, I).Value)) * Val(Dgl1.Item(Col1AdditionalDiscountPer, I).Value) / 100, "0.00")
                    End If
                End If


                If Val(Dgl1.Item(Col1AdditionPer, I).Value) > 0 Then
                    If AgL.XNull(Dgl1(Col1AdditionCalculationPattern, I).Value).ToUpper = DiscountCalculationPattern.RatePerQty.ToUpper Then
                        Dgl1.Item(Col1AdditionAmount, I).Value = Format(Val(Dgl1.Item(Col1DocQty, I).Value) * Val(Dgl1.Item(Col1AdditionPer, I).Value), "0.00")
                    ElseIf AgL.XNull(Dgl1(Col1AdditionCalculationPattern, I).Value).ToUpper = DiscountCalculationPattern.Percentage.ToUpper Then
                        Dgl1.Item(Col1AdditionAmount, I).Value = Format(Val(Dgl1.Item(Col1Amount, I).Value) * Val(Dgl1.Item(Col1AdditionPer, I).Value) / 100, "0.00")
                    Else
                        Dgl1.Item(Col1AdditionAmount, I).Value = Format((Val(Dgl1.Item(Col1Amount, I).Value) - Val(Dgl1.Item(Col1DiscountAmount, I).Value) - Val(Dgl1.Item(Col1AdditionalDiscountAmount, I).Value)) * Val(Dgl1.Item(Col1AdditionPer, I).Value) / 100, "0.00")
                    End If
                End If


                Dgl1.Item(Col1Amount, I).Value = Val(Dgl1.Item(Col1Amount, I).Value) - Val(Dgl1.Item(Col1DiscountAmount, I).Value) - Val(Dgl1.Item(Col1AdditionalDiscountAmount, I).Value) + Val(Dgl1.Item(Col1AdditionAmount, I).Value)


                DEALRATE = 0
                If Dgl1.Item(Col1Deal, I).Value <> "" Then
                    DEALARR = Split(Dgl1.Item(Col1Deal, I).Value.ToString, "+", 2)
                    If DEALARR.Length = 2 Then
                        'DEALRATE = Format((Val(Dgl1.Item(Col1Rate, I).Value) * Val(DEALARR(0))) / (Val(DEALARR(0)) + Val(DEALARR(1))), "0.00")
                        'Dgl1.Item(Col1DealAmount, I).Value = Math.Round(Dgl1.Item(Col1Qty, I).Value * (Val(Dgl1.Item(Col1Rate, I).Value) - DEALRATE), 2)
                        Dgl1.Item(Col1DealAmount, I).Value = Format(Val(Dgl1.Item(Col1Amount, I).Value) - (Val(Dgl1.Item(Col1Amount, I).Value) * Val(DEALARR(0))) / (Val(DEALARR(0)) + Val(DEALARR(1))), "0.00")
                    Else
                        Dgl1.Item(Col1DealAmount, I).Value = 0
                    End If
                Else
                    Dgl1.Item(Col1DealAmount, I).Value = 0
                End If

                Dgl1.Item(Col1Amount, I).Value = Val(Dgl1.Item(Col1Amount, I).Value) - Val(Dgl1.Item(Col1DealAmount, I).Value)


                'Footer Calculation
                If AgL.XNull(Dgl1.Item(Col1ItemType, I).Tag) <> ItemTypeCode.ServiceProduct Then
                    LblTotalPcs.Text = Val(LblTotalPcs.Text) + Val(Dgl1.Item(Col1Pcs, I).Value)
                    LblTotalQty.Text = Val(LblTotalQty.Text) + Val(Dgl1.Item(Col1Qty, I).Value)
                    LblTotalDealQty.Text = Val(LblTotalDealQty.Text) + Val(Dgl1.Item(Col1DealQty, I).Value)
                End If
                LblTotalAmount.Text = Val(LblTotalAmount.Text) + Val(Dgl1.Item(Col1Amount, I).Value)
            End If
        Next

        For I = 0 To Dgl4.Rows.Count - 1
            LblTotalBomQty.Text = Val(LblTotalBomQty.Text) + Val(Dgl4.Item(Col4Qty, I).Value)
        Next

        If DglMain.Item(Col1BtnDetail, rowVendor).Tag IsNot Nothing And
            DglMain.Item(Col1Value, rowVendor).Tag <> "" Then
            AgCalcGrid1.AgPostingGroupSalesTaxParty = DglMain.Item(Col1BtnDetail, rowVendor).Tag.Dgl1.Item(DglMain.Item(Col1BtnDetail, rowVendor).Tag.Col1Value, DglMain.Item(Col1BtnDetail, rowVendor).Tag.rowSalesTaxGroup).Value
            AgCalcGrid1.AgPlaceOfSupply = DglMain.Item(Col1BtnDetail, rowVendor).Tag.Dgl1.Item(DglMain.Item(Col1BtnDetail, rowVendor).Tag.Col1Value, DglMain.Item(Col1BtnDetail, rowVendor).Tag.rowPlaceOfSupply).Value
        End If

        AgCalcGrid1.AgVoucherCategory = "PURCH"
        'If ClsMain.IsScopeOfWorkContains(IndustryType.MedicalIndustry) Then
        '    If CheckBoxFullCalculate.Checked Then
        '        AgCalcGrid1.Calculation()
        '    End If
        'Else
        '    AgCalcGrid1.Calculation()
        'End If

        AgCalcGrid1.Calculation()

        For I = 0 To Dgl1.RowCount - 1
            If Dgl1.Item(Col1SKU, I).Value <> "" Then
                Dim mPricePerUnit As Double = 0
                If ClsMain.IsScopeOfWorkContains(IndustryType.MedicalIndustry) Then
                    mPricePerUnit = Val(Dgl1.Item(Col1Rate, I).Value)
                Else
                    If Val(Dgl1.Item(Col1Amount, I).Value) > 0 Then
                        mPricePerUnit = Val(Dgl1.Item(Col1Amount, I).Value) / Val(Dgl1.Item(Col1Qty, I).Value)
                    ElseIf Val(Dgl1.Item(Col1Rate, I).Value) > 0 Then
                        mPricePerUnit = Val(Dgl1.Item(Col1Rate, I).Value)
                    End If
                End If

                'If mPricePerUnit > 0 Then
                '    Dim bItemMargin As Double = FGetItemMargin(Dgl1.Item(Col1ItemCategory, I).Tag,
                '                            Dgl1.Item(Col1ItemGroup, I).Tag,
                '                            Dgl1.Item(Col1Item, I).Tag, mPricePerUnit)
                '    If bItemMargin > 0 Then
                '        Dgl1.Item(Col1ProfitMarginPer, I).Value = bItemMargin
                '    End If
                'End If

                If ClsMain.IsScopeOfWorkContains(IndustryType.MedicalIndustry) Then
                    Dgl1.Item(Col1SaleRate, I).Value = GetSaleRate(I)
                Else
                    If Val(Dgl1.Item(Col1ProfitMarginPer, I).Value) > 0 Then
                        Dgl1.Item(Col1SaleRate, I).Value = GetSaleRate(I) 'Format((Val(AgCalcGrid1.AgChargesValue("LV", I, AgStructure.AgCalcGrid.LineColumnType.Amount)) + (Val(AgCalcGrid1.AgChargesValue("LV", I, AgStructure.AgCalcGrid.LineColumnType.Amount)) * Val(Dgl1.Item(Col1ProfitMarginPer, I).Value) / 100)) / Val(Dgl1.Item(Col1Qty, I).Value), "0.00")
                    End If
                End If
            End If
        Next I




        LblTotalQty.Text = Val(LblTotalQty.Text)
        LblTotalDealQty.Text = Val(LblTotalDealQty.Text)
        LblTotalAmount.Text = Val(LblTotalAmount.Text)

        LblTotalBomQty.Text = Val(LblTotalBomQty.Text)
    End Sub
    Private Sub FrmSaleOrder_BaseEvent_Data_Validation(ByRef passed As Boolean) Handles Me.BaseEvent_Data_Validation
        If mFlag_Import = True Then Exit Sub
        Dim I As Integer = 0
        Dim CheckDuplicateRef As Boolean


        Dgl1.EndEdit()


        'If ClsMain.IsScopeOfWorkContains(IndustryType.MedicalIndustry) Then
        '    If Not CheckBoxFullCalculate.Checked Then
        '        MsgBox("Full Calculation is not checked")
        '        passed = False : Exit Sub
        '    End If
        'End If

        'If AgL.RequiredField(TxtVendor, LblVendor.Text) Then passed = False : Exit Sub
        'If AgL.RequiredField(TxtBillToParty, LblPostToAc.Text) Then passed = False : Exit Sub
        'If AgCL.AgIsBlankGrid(Dgl1, Dgl1.Columns(Col1Item).Index) Then passed = False : Exit Sub

        If ClsMain.IsPartyBlocked(DglMain.Item(Col1Value, rowVendor).Tag, LblV_Type.Tag) Then
            MsgBox("Party is blocked for " & DglMain.Item(Col1Value, rowV_Type).Value & ". Can not continue.")
            passed = False : Exit Sub
        End If

        If FValidateSalesTaxGroup() = False Then
            passed = False : Exit Sub
        End If

        If Dgl2.Visible = True Then
            For I = 0 To Dgl2.Rows.Count - 1
                If Dgl2.Rows(I).Visible = True Then
                    If Dgl2.Item(Col1Mandatory, I).Value <> "" Then
                        If (Dgl2.Item(Col1Value, I).Value = "" Or Dgl2.Item(Col1Value, I).Value Is Nothing) Then
                            MsgBox(Dgl2.Item(Col1Head, I).Value & " is blank...!", MsgBoxStyle.Information)
                            Dgl2.CurrentCell = Dgl2.Item(Col1Value, I) : Dgl2.Focus()
                            passed = False : Exit Sub
                        End If
                    End If
                End If
            Next
        End If

        If DglMain.Visible = True Then
            For I = 0 To DglMain.Rows.Count - 1
                If DglMain.Rows(I).Visible = True Then
                    If DglMain.Item(Col1Mandatory, I).Value <> "" Then
                        If (DglMain.Item(Col1Value, I).Value = "" Or DglMain.Item(Col1Value, I).Value Is Nothing) Then
                            MsgBox(DglMain.Item(Col1Head, I).Value & " is blank...!", MsgBoxStyle.Information)
                            DglMain.CurrentCell = DglMain.Item(Col1Value, I) : DglMain.Focus()
                            passed = False : Exit Sub
                        End If
                    End If
                End If
            Next
        End If

        If AgL.XNull(Dgl2.Item(Col1Value, rowFromGodown).Tag) <> "" And AgL.XNull(Dgl2.Item(Col1Value, rowToGodown).Tag) <> "" And
                Dgl2.Rows(rowFromGodown).Visible = True And Dgl2.Rows(rowToGodown).Visible = True Then
            If AgL.XNull(Dgl2.Item(Col1Value, rowFromGodown).Tag) = AgL.XNull(Dgl2.Item(Col1Value, rowToGodown).Tag) Then
                MsgBox("From Godown and To Godown should not be same.", MsgBoxStyle.Information)
                Dgl2.CurrentCell = Dgl2.Item(Col1Value, rowToGodown) : Dgl2.Focus()
                passed = False : Exit Sub
            End If
        End If

        Dim bCntItemCount As Integer = 0
        If SettingFields_MaximumItemLimit > 0 Then
            For I = 0 To Dgl1.Rows.Count - 1
                If Dgl1.Rows(I).Visible = True And
                    Dgl1.Item(Col1SKU, I).Value <> "" And
                    Dgl1.Item(Col1ItemType, I).Tag <> ItemTypeCode.ServiceProduct Then
                    bCntItemCount += 1
                End If
            Next
            If SettingFields_MaximumItemLimit < bCntItemCount Then
                If AgL.StrCmp(Topctrl1.Mode, "Add") Then
                    MsgBox("Maximum item limit is " & SettingFields_MaximumItemLimit.ToString & ". Can not continue.", MsgBoxStyle.Information)
                    passed = False : Exit Sub
                ElseIf AgL.StrCmp(Topctrl1.Mode, "Edit") Then
                    Dim bExistingItemCount As Integer = AgL.VNull(AgL.Dman_Execute("Select Count(*) 
                            From PurchInvoiceDetail L 
                            Where L.DocId = '" & mSearchCode & "' ", AgL.GCn).ExecuteScalar())
                    If bCntItemCount > bExistingItemCount Then
                        MsgBox("Maximum item limit is " & SettingFields_MaximumItemLimit.ToString & ". Can not continue.", MsgBoxStyle.Information)
                        passed = False : Exit Sub
                    End If
                End If
            End If
        End If


        'If mFlag_Import = False Then
        '    If AgCL.AgIsDuplicate(Dgl1, "" + Dgl1.Columns(Col1Item).Index.ToString + "," + Dgl1.Columns(Col1Specification).Index.ToString + "," + Dgl1.Columns(Col1LotNo).Index.ToString + "," + Dgl1.Columns(Col1BaleNo).Index.ToString + "," & Dgl1.Columns(Col1Dimension1).Index & "," & Dgl1.Columns(Col1Dimension2).Index & "") = True Then passed = False : Exit Sub
        'End If
        Dim bTableName_Stock As String = "[" + Guid.NewGuid().ToString() + "]"
        Dim bTableName_StockProcess As String = "[" + Guid.NewGuid().ToString() + "]"
        Dim bTableName_PurchPlan As String = "[" + Guid.NewGuid().ToString() + "]"
        Dim bTableName_StockReceive As String = "[" + Guid.NewGuid().ToString() + "]"
        Dim bTableName_PurchOrder As String = "[" + Guid.NewGuid().ToString() + "]"

        If AgL.IsTableExist(bTableName_Stock.Replace("[", "").Replace("]", ""), AgL.GCn) Then
            mQry = "Drop Table " + bTableName_Stock
            AgL.Dman_ExecuteNonQry(mQry, AgL.GCn)
        End If

        If AgL.IsTableExist(bTableName_StockProcess.Replace("[", "").Replace("]", ""), AgL.GCn) Then
            mQry = "Drop Table " + bTableName_StockProcess
            AgL.Dman_ExecuteNonQry(mQry, AgL.GCn)
        End If

        If AgL.IsTableExist(bTableName_PurchPlan.Replace("[", "").Replace("]", ""), AgL.GCn) Then
            mQry = "Drop Table " + bTableName_PurchPlan
            AgL.Dman_ExecuteNonQry(mQry, AgL.GCn)
        End If

        If AgL.IsTableExist(bTableName_StockReceive.Replace("[", "").Replace("]", ""), AgL.GCn) Then
            mQry = "Drop Table " + bTableName_StockReceive
            AgL.Dman_ExecuteNonQry(mQry, AgL.GCn)
        End If

        If AgL.IsTableExist(bTableName_PurchOrder.Replace("[", "").Replace("]", ""), AgL.GCn) Then
            mQry = "Drop Table " + bTableName_PurchOrder
            AgL.Dman_ExecuteNonQry(mQry, AgL.GCn)
        End If

        Dim bActionOnStockBalanceExceed As String = FGetSettings(SettingFields.ActionOnStockBalanceExceed, SettingType.General)
        If bActionOnStockBalanceExceed <> ActionOnBalanceExceed.DoNothing And bActionOnStockBalanceExceed <> "" Then
            mQry = " CREATE TABLE " & bTableName_Stock & "(Item nvarchar(10), Process nvarchar(10), Qty Float, RowIndex Int) "
            AgL.Dman_ExecuteNonQry(mQry, AgL.GCn)
        End If


        mQry = " CREATE TABLE " & bTableName_StockProcess & "(StockProcess nvarchar(21), StockProcessTSr Int, StockProcessSr Int, Qty Float, RowIndex Int) "
        AgL.Dman_ExecuteNonQry(mQry, AgL.GCn)

        mQry = " CREATE TABLE " & bTableName_PurchPlan & "(PurchPlan nvarchar(21), PurchPlanSr Int, Qty Float, RowIndex Int) "
        AgL.Dman_ExecuteNonQry(mQry, AgL.GCn)

        Dim bActionOnReceiveBalanceExceed As String = FGetSettings(SettingFields.ActionOnReceiveBalanceExceed, SettingType.General)
        If bActionOnReceiveBalanceExceed <> ActionOnBalanceExceed.DoNothing And bActionOnReceiveBalanceExceed <> "" Then
            mQry = " CREATE TABLE " & bTableName_StockReceive & "(StockReceive nvarchar(21), StockReceiveSr Int, Qty Float, RowIndex Int) "
            AgL.Dman_ExecuteNonQry(mQry, AgL.GCn)
        End If

        Dim bActionOnOrderBalanceExceed As String = FGetSettings(SettingFields.ActionOnOrderBalanceExceed, SettingType.General)
        If bActionOnOrderBalanceExceed <> ActionOnBalanceExceed.DoNothing And bActionOnOrderBalanceExceed <> "" Then
            mQry = " CREATE TABLE " & bTableName_PurchOrder & "(PurchOrder nvarchar(21), PurchOrderSr Int, Qty Float, RowIndex Int) "
            AgL.Dman_ExecuteNonQry(mQry, AgL.GCn)
        End If


        With Dgl1
            For I = 0 To .Rows.Count - 1
                If .Item(Col1SKU, I).Value <> "" And Dgl1.Rows(I).Visible Then
                    If (FDivisionNameForCustomization(14) = "PRATHAM APPARE" Or
                                FDivisionNameForCustomization(15) = "AGARWAL UNIFORM") And
                        LblV_Type.Tag = Ncat.JobReceive Then
                        If AgL.XNull(DglMain.Item(Col1Value, rowProcess).Tag) = ClsGarmentProduction.Process_Cutting Or
                                AgL.XNull(DglMain.Item(Col1Value, rowProcess).Tag) = ClsGarmentProduction.Process_CuttingAndStitching Then
                            If AgL.XNull(Dgl1.Item(Col1RawMaterial, I).Value) = "" Then
                                MsgBox(Dgl1.Columns(Col1RawMaterial).HeaderText & " is blank at row no. " & Dgl1.Item(ColSNo, I).Value & "", MsgBoxStyle.Information)
                                .CurrentCell = .Item(Col1RawMaterial, I) : Dgl1.Focus()
                                passed = False : Exit Sub
                            End If

                            If AgL.VNull(Dgl1.Item(Col1RawMaterialConsumptionQty, I).Value) = 0 Then
                                MsgBox(Dgl1.Columns(Col1RawMaterialConsumptionQty).HeaderText & " is blank at row no. " & Dgl1.Item(ColSNo, I).Value & "", MsgBoxStyle.Information)
                                .CurrentCell = .Item(Col1RawMaterialConsumptionQty, I) : Dgl1.Focus()
                                passed = False : Exit Sub
                            End If
                        End If
                    End If


                    If AgL.StrCmp(FDivisionNameForCustomization(6), "KISHOR") Then
                        If AgL.XNull(Dgl1.Item(Col1Item, I).Value) = "" And Dgl1.Columns(Col1Item).Visible = True Then
                            MsgBox("Item is blank at row no." & Dgl1.Item(ColSNo, I).Value)
                            .CurrentCell = .Item(Col1Item, I) : Dgl1.Focus()
                            passed = False : Exit Sub
                        End If
                    End If



                    If bActionOnStockBalanceExceed <> ActionOnBalanceExceed.DoNothing And bActionOnStockBalanceExceed <> "" Then
                        mQry = " INSERT INTO " & bTableName_Stock & "(Item, Process, Qty, RowIndex)"
                        mQry += " Select " & AgL.Chk_Text(Dgl1.Item(Col1SKU, I).Tag) & " As Item,
                            " & AgL.Chk_Text(Dgl1.Item(Col1FromProcess, I).Tag) & " As Item,
                            " & Val(Dgl1.Item(Col1Qty, I).Value) & " As Qty,
                            " & I + 1 & " As RowIndex "
                        AgL.Dman_ExecuteNonQry(mQry, AgL.GCn)
                    End If


                    If AgL.XNull(Dgl1.Item(Col1StockProcess, I).Tag) <> "" Then
                        mQry = " INSERT INTO " & bTableName_StockProcess & "(StockProcess, StockProcessTSr, StockProcessSr, Qty, RowIndex)"
                        mQry += " Select " & AgL.Chk_Text(Dgl1.Item(Col1StockProcess, I).Tag) & " As StockProcess, 
                            " & Val(Dgl1.Item(Col1StockProcessTSr, I).Value) & " As StockProcessTSr, 
                            " & Val(Dgl1.Item(Col1StockProcessSr, I).Value) & " As StockProcessSr,
                            " & Val(Dgl1.Item(Col1Qty, I).Value) & " As Qty,
                            " & I + 1 & " As RowIndex "
                        AgL.Dman_ExecuteNonQry(mQry, AgL.GCn)
                    End If

                    If AgL.XNull(Dgl1.Item(Col1PurchasePlan, I).Tag) <> "" Then
                        mQry = " INSERT INTO " & bTableName_PurchPlan & "(PurchPlan, PurchPlanSr, Qty, RowIndex)"
                        mQry += " Select " & AgL.Chk_Text(Dgl1.Item(Col1PurchasePlan, I).Tag) & " As PurchPlan, 
                            " & Val(Dgl1.Item(Col1PurchasePlanSr, I).Value) & " As PurchPlanSr,
                            " & Val(Dgl1.Item(Col1Qty, I).Value) & " As Qty,
                            " & I + 1 & " As RowIndex "
                        AgL.Dman_ExecuteNonQry(mQry, AgL.GCn)
                    End If

                    If bActionOnReceiveBalanceExceed <> ActionOnBalanceExceed.DoNothing And bActionOnReceiveBalanceExceed <> "" Then
                        If LblNCatNature.Tag = NCatNature.Invoice Then
                            If AgL.XNull(Dgl1.Item(Col1ReferenceDocID, I).Value) <> "" Then
                                mQry = " INSERT INTO " & bTableName_StockReceive & "(StockReceive, StockReceiveSr, Qty, RowIndex)"
                                mQry += " Select " & AgL.Chk_Text(Dgl1.Item(Col1ReferenceDocID, I).Value) & " As StockReceive, 
                                        " & Val(Dgl1.Item(Col1ReferenceSr, I).Value) & " As StockReceiveSr,
                                        " & Val(Dgl1.Item(Col1Qty, I).Value) & " As Qty,
                                        " & I + 1 & " As RowIndex "
                                AgL.Dman_ExecuteNonQry(mQry, AgL.GCn)
                            End If
                        End If
                    End If

                    If bActionOnOrderBalanceExceed <> ActionOnBalanceExceed.DoNothing And bActionOnOrderBalanceExceed <> "" Then
                        If LblNCatNature.Tag = NCatNature.Receive Or LblNCatNature.Tag = NCatNature.Invoice Then
                            If AgL.XNull(Dgl1.Item(Col1ReferenceDocID, I).Value) <> "" Then
                                mQry = " INSERT INTO " & bTableName_PurchOrder & "(PurchOrder, PurchOrderSr, Qty, RowIndex)"
                                mQry += " Select " & AgL.Chk_Text(Dgl1.Item(Col1ReferenceDocID, I).Value) & " As PurchOrder, 
                                        " & Val(Dgl1.Item(Col1ReferenceTSr, I).Value) & " As PurchOrderSr,
                                        " & Val(Dgl1.Item(Col1Qty, I).Value) & " As Qty,
                                        " & I + 1 & " As RowIndex "
                                AgL.Dman_ExecuteNonQry(mQry, AgL.GCn)
                            End If
                        End If
                    End If


                    If LblV_Type.Tag = Ncat.PurchaseReturn Then
                        If AgL.XNull(Dgl1.Item(Col1ReferenceNo, I).Value) = "" Or AgL.XNull(Dgl1.Item(Col1ReferenceNo, I).Value) = AgL.XNull(Dgl2.Item(Col1Value, rowVendorDocNo).Value) Then
                            Dgl1.Item(Col1ReferenceNo, I).Value = AgL.XNull(Dgl2.Item(Col1Value, rowVendorDocNo).Value)
                            Dgl1.Item(Col1ReferenceDate, I).Value = AgL.XNull(Dgl2.Item(Col1Value, rowVendorDocDate).Value)
                        End If
                    End If

                    If .Item(Col1SKU, I).Value <> "" And Dgl1.Rows(I).Visible Then
                        If Val(.Item(Col1Qty, I).Value) = 0 Then
                            MsgBox("Qty Is 0 At Row No " & Dgl1.Item(ColSNo, I).Value & "")
                            .CurrentCell = .Item(Col1DocQty, I) : Dgl1.Focus()
                            passed = False : Exit Sub
                        End If

                        If LblV_Type.Tag = Ncat.PurchaseReturn Then
                            If .Item(Col1ReferenceNo, I).Value = "" Then
                                MsgBox("Against Invoice No. is blank  at Row No " & Dgl1.Item(ColSNo, I).Value & "")
                                .CurrentCell = .Item(Col1ReferenceNo, I) : Dgl1.Focus()
                                passed = False : Exit Sub
                            End If

                            If .Item(Col1ReferenceDate, I).Value = "" Then
                                If Dgl2.Item(Col1Head, rowVendorDocNo).Value = "" Then
                                    MsgBox("Against Inv. Date is blank  at Row No " & Dgl1.Item(ColSNo, I).Value & "")
                                    .CurrentCell = .Item(Col1ReferenceNo, I) : Dgl1.Focus()
                                Else
                                    MsgBox("Against Inv. Date is blank. Can not continue")
                                    Dgl2.CurrentCell = Dgl2.Item(Col1Head, rowVendorDocDate)
                                    Dgl2.Focus()
                                End If
                                passed = False : Exit Sub
                            End If
                        End If
                    End If

                    If Dgl2.Item(Col1Value, rowBtnTransportDetail).Tag IsNot Nothing Then
                        If CType(Dgl2.Item(Col1Value, rowBtnTransportDetail).Tag, FrmPurchaseInvoiceHeader).Dgl1.Item(FrmPurchaseInvoiceHeader.Col1Value, FrmPurchaseInvoiceHeader.rowLrNo).Value <> "" Then
                            If Dgl1.Item(Col1LRNo, I).Value = "" Or Dgl1.Columns(Col1LRNo).Visible = False Then
                                Dgl1.Item(Col1LRNo, I).Value = CType(Dgl2.Item(Col1Value, rowBtnTransportDetail).Tag, FrmPurchaseInvoiceHeader).Dgl1.Item(FrmPurchaseInvoiceHeader.Col1Value, FrmPurchaseInvoiceHeader.rowLrNo).Value
                                Dgl1.Item(Col1LRDate, I).Value = CType(Dgl2.Item(Col1Value, rowBtnTransportDetail).Tag, FrmPurchaseInvoiceHeader).Dgl1.Item(FrmPurchaseInvoiceHeader.Col1Value, FrmPurchaseInvoiceHeader.rowLrDate).Value
                            End If
                        End If

                        If Dgl1.Item(Col1BaleNo, I).Value = "" Or Dgl1.Columns(Col1BaleNo).Visible = False Then
                            Dgl1.Item(Col1BaleNo, I).Value = CType(Dgl2.Item(Col1Value, rowBtnTransportDetail).Tag, FrmPurchaseInvoiceHeader).Dgl1.Item(FrmPurchaseInvoiceHeader.Col1Value, FrmPurchaseInvoiceHeader.rowLrNo).Value
                        End If
                    End If

                    If AgL.VNull(Dgl1.Item(Col1IsNewItemAllowedPurch, I).Value) <> 0 Then
                        If Dgl1.Item(Col1Item, I).Value <> "" Then
                            Dgl1.Item(Col1Item, I).Tag = FCreateItem(Dgl1.Item(Col1Item, I).Tag, AgL.GCn, AgL.ECmd, ItemV_Type.Item, Dgl1.Item(Col1Item, I).Value, I)
                        End If
                    End If

                    If AgL.VNull(Dgl1.Item(Col1IsNewDimension1AllowedPurch, I).Value) <> 0 Then
                        If Dgl1.Item(Col1Dimension1, I).Value <> "" Then
                            Dgl1.Item(Col1Dimension1, I).Tag = FCreateItem(Dgl1.Item(Col1Dimension1, I).Tag, AgL.GCn, AgL.ECmd, ItemV_Type.Dimension1, Dgl1.Item(Col1Dimension1, I).Value, I)
                        End If
                    End If

                    If AgL.VNull(Dgl1.Item(Col1IsNewDimension2AllowedPurch, I).Value) <> 0 Then
                        If Dgl1.Item(Col1Dimension2, I).Value <> "" Then
                            Dgl1.Item(Col1Dimension2, I).Tag = FCreateItem(Dgl1.Item(Col1Dimension2, I).Tag, AgL.GCn, AgL.ECmd, ItemV_Type.Dimension2, Dgl1.Item(Col1Dimension2, I).Value, I)
                        End If
                    End If

                    If AgL.VNull(Dgl1.Item(Col1IsNewDimension3AllowedPurch, I).Value) <> 0 Then
                        If Dgl1.Item(Col1Dimension3, I).Value <> "" Then
                            Dgl1.Item(Col1Dimension3, I).Tag = FCreateItem(Dgl1.Item(Col1Dimension3, I).Tag, AgL.GCn, AgL.ECmd, ItemV_Type.Dimension3, Dgl1.Item(Col1Dimension3, I).Value, I)
                        End If
                    End If

                    If AgL.VNull(Dgl1.Item(Col1IsNewDimension4AllowedPurch, I).Value) <> 0 Then
                        If Dgl1.Item(Col1Dimension4, I).Value <> "" Then
                            Dgl1.Item(Col1Dimension4, I).Tag = FCreateItem(Dgl1.Item(Col1Dimension4, I).Tag, AgL.GCn, AgL.ECmd, ItemV_Type.Dimension4, Dgl1.Item(Col1Dimension4, I).Value, I)
                        End If
                    End If

                    If CType(AgL.VNull(ClsMain.FGetSettings(SettingFields.SkuManagementApplicableYN, SettingType.General, AgL.PubDivCode, AgL.PubSiteCode, Dgl1.Item(Col1ItemType, I).Tag, "", ItemV_Type.SKU, "", "")), Boolean) = True Then
                        If AgL.XNull(Dgl1.Item(Col1ItemCategory, I).Value) <> "" _
                                Or AgL.XNull(Dgl1.Item(Col1ItemGroup, I).Value) <> "" _
                                Or AgL.XNull(Dgl1.Item(Col1Item, I).Value) <> "" _
                                Or AgL.XNull(Dgl1.Item(Col1Dimension1, I).Value) <> "" _
                                Or AgL.XNull(Dgl1.Item(Col1Dimension2, I).Value) <> "" _
                                Or AgL.XNull(Dgl1.Item(Col1Dimension3, I).Value) <> "" _
                                Or AgL.XNull(Dgl1.Item(Col1Dimension4, I).Value) <> "" _
                                Or AgL.XNull(Dgl1.Item(Col1Size, I).Value) <> "" _
                   Then
                            Dgl1.Item(Col1SKU, I).Tag = ClsMain.FGetSKUCode(Dgl1.Item(ColSNo, I).Value, Dgl1.Item(Col1ItemType, I).Tag _
                                                       , Dgl1.Item(Col1ItemCategory, I).Tag, Dgl1.Item(Col1ItemCategory, I).Value _
                                                       , Dgl1.Item(Col1ItemGroup, I).Tag, Dgl1.Item(Col1ItemGroup, I).Value _
                                                       , Dgl1.Item(Col1Item, I).Tag, Dgl1.Item(Col1Item, I).Value _
                                                       , Dgl1.Item(Col1Dimension1, I).Tag, Dgl1.Item(Col1Dimension1, I).Value _
                                                       , Dgl1.Item(Col1Dimension2, I).Tag, Dgl1.Item(Col1Dimension2, I).Value _
                                                       , Dgl1.Item(Col1Dimension3, I).Tag, Dgl1.Item(Col1Dimension3, I).Value _
                                                       , Dgl1.Item(Col1Dimension4, I).Tag, Dgl1.Item(Col1Dimension4, I).Value _
                                                       , Dgl1.Item(Col1Size, I).Tag, Dgl1.Item(Col1Size, I).Value _
                                                       , Dgl1.Item(Col1MItemCategory, I).Tag _
                                                       , Dgl1.Item(Col1MItemGroup, I).Tag _
                                                       , Dgl1.Item(Col1MItemSpecification, I).Tag _
                                                       , Dgl1.Item(Col1MDimension1, I).Tag _
                                                       , Dgl1.Item(Col1MDimension2, I).Tag _
                                                       , Dgl1.Item(Col1MDimension3, I).Tag _
                                                       , Dgl1.Item(Col1MDimension4, I).Tag _
                                                       , Dgl1.Item(Col1MSize, I).Tag
                                                       )
                            If Dgl1.Item(Col1SKU, I).Tag = "" Then
                                passed = False
                                Exit Sub
                            End If

                            If Dgl1.Item(Col1DocQty, I).Tag IsNot Nothing Then
                                If CType(Dgl1.Item(Col1DocQty, I).Tag, FrmPurchaseInvoiceDimension_WithDimension).FData_Validation() = False Then
                                    passed = False
                                    Exit Sub
                                End If
                            End If
                        End If
                    Else
                        Dgl1.Item(Col1SKU, I).Tag = Dgl1.Item(Col1Item, I).Tag
                    End If
                End If
            Next
        End With



        If bActionOnStockBalanceExceed <> ActionOnBalanceExceed.DoNothing And bActionOnStockBalanceExceed <> "" Then
            If AgL.FillData(" Select * From " & bTableName_Stock & "", AgL.GCn).Tables(0).Rows.Count > 0 Then
                mQry = " Select Temp.RowIndex, Temp.Qty, VStock.BalanceQty
                From (
                    SELECT L.Item, IfNull(L.Process,'') As Process, 
                    Max(L.RowIndex) As RowIndex, IsNull(Sum(L.Qty),0) AS Qty
                    FROM " & bTableName_Stock & " L 
                    GROUP BY L.Item, L.Process) As Temp
                LEFT JOIN (
                    SELECT L.Item, IfNull(L.Process,'') As Process, 
                    IsNull(Sum(L.Qty_Rec),0) - IsNull(Sum(L.Qty_Iss),0) AS BalanceQty
                    FROM Stock L 
                    Where L.DocId <> '" & mSearchCode & "'
                    GROUP BY L.Item, L.Process
                ) As VStock On Temp.Item = VStock.Item
                        And IfNull(Temp.Process,'') = IfNull(VStock.Process,'')
                Where IfNull(Temp.Qty,0) > IfNull(VStock.BalanceQty,0)"
                Dim DtStockBalance As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)

                If DtStockBalance.Rows.Count > 0 Then
                    If bActionOnStockBalanceExceed = ActionOnBalanceExceed.AlertAndStop Then
                        MsgBox("Qty entered is greater then balance qty at row number " & DtStockBalance.Rows(0)("RowIndex") & "...!", MsgBoxStyle.Information)
                        passed = False
                        Exit Sub
                    ElseIf bActionOnStockBalanceExceed = ActionOnBalanceExceed.AlertAndAskToContinue Then
                        If MsgBox("Qty entered is greater then balance qty at row number " & DtStockBalance.Rows(0)("RowIndex") & "...!", MsgBoxStyle.Question + MsgBoxStyle.YesNo) = MsgBoxResult.No Then
                            passed = False
                            Exit Sub
                        End If
                    End If
                End If
            End If
        End If


        If AgL.FillData(" Select * From " & bTableName_StockProcess & "", AgL.GCn).Tables(0).Rows.Count > 0 Then
            mQry = " Select Temp.RowIndex, Temp.Qty, VStockProcess.BalanceQty
                From (
                    SELECT IfNull(L.StockProcess,'') As StockProcess, 
                    IfNull(L.StockProcessTSr,0) As StockProcessTSr, 
                    IfNull(L.StockProcessSr,0) As StockProcessSr, 
                    Max(L.RowIndex) As RowIndex,
                    IsNull(Sum(L.Qty),0) AS Qty
                    FROM " & bTableName_StockProcess & " L 
                    GROUP BY L.StockProcess, L.StockProcessTSr, L.StockProcessSr) As Temp
                LEFT JOIN (
                    SELECT IfNull(L.StockProcess,'') As StockProcess, 
                    IfNull(L.StockProcessTSr,0) As StockProcessTSr, 
                    IfNull(L.StockProcessSr,0) As StockProcessSr, 
                    IsNull(Sum(L.Qty_Iss),0) - IsNull(Sum(L.Qty_Rec),0) AS BalanceQty
                    FROM StockProcess L 
                    Where L.DocId <> '" & mSearchCode & "'
                    GROUP BY L.StockProcess, L.StockProcessTSr, L.StockProcessSr
                ) As VStockProcess On Temp.StockProcess = VStockProcess.StockProcess
                        And Temp.StockProcessTSr = VStockProcess.StockProcessTSr 
                        And Temp.StockProcessSr = VStockProcess.StockProcessSr 
                Where IfNull(Temp.Qty,0) > IfNull(VStockProcess.BalanceQty,0)"
            Dim DtStockProcessBalance As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)

            If DtStockProcessBalance.Rows.Count > 0 Then
                MsgBox("Qty entered is greater then balance qty at row number " & DtStockProcessBalance.Rows(0)("RowIndex") & "...!", MsgBoxStyle.Information)
                passed = False
                Exit Sub
            End If
        End If

        If AgL.FillData(" Select * From " & bTableName_PurchPlan & "", AgL.GCn).Tables(0).Rows.Count > 0 Then
            Dim bPendingPlanQry As String = " SELECT VPlan.PurchPlan, VPlan.PurchPlanSr, IsNull(VPlan.PlanQty,0) - IsNull(VOrder.OrderQty,0) AS BalanceQty
                FROM (
                    SELECT L.PurchPlan, L.PurchPlanSr, Sum(L.Qty) AS PlanQty
                    FROM PurchPlan H 
                    LEFT JOIN PurchPlanDetail L ON H.DocID = L.DocID
                    LEFT JOIN Voucher_Type Vt ON H.V_Type = Vt.V_Type
                    Where L.Process = '" & DglMain.Item(Col1Value, rowProcess).Tag & "'
	                GROUP BY L.PurchPlan, L.PurchPlanSr
                ) AS VPlan
                LEFT JOIN (
                    SELECT L.PurchPlan, L.PurchPlanSr, Sum(L.Qty) AS OrderQty
                    FROM PurchInvoiceDetail L 
                    GROUP BY L.PurchPlan, L.PurchPlanSr	
                ) AS VOrder ON VPlan.PurchPlan = VOrder.PurchPlan AND VPlan.PurchPlanSr = VOrder.PurchPlanSr 
                WHERE 1=1 
                And IsNull(VPlan.PlanQty,0) - IsNull(VOrder.OrderQty,0) > 0 "

            mQry = " Select Temp.RowIndex, Temp.Qty, VPendingPlan.BalanceQty
                From (
                    SELECT IfNull(L.PurchPlan,'') As PurchPlan, 
                    IfNull(L.PurchPlanSr,0) As PurchPlanSr, 
                    Max(L.RowIndex) As RowIndex,
                    IsNull(Sum(L.Qty),0) AS Qty
                    FROM " & bTableName_PurchPlan & " L 
                    GROUP BY L.PurchPlan, L.PurchPlanSr) As Temp
                LEFT JOIN (" & bPendingPlanQry & ") As VPendingPlan On Temp.PurchPlan = VPendingPlan.PurchPlan
                        And Temp.PurchPlanSr = VPendingPlan.PurchPlanSr
                Where IfNull(Temp.Qty,0) > IfNull(VPendingPlan.BalanceQty,0)"
            Dim DtPlanBalance As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)

            If DtPlanBalance.Rows.Count > 0 Then
                MsgBox("Qty entered is greater then balance qty at row number " & DtPlanBalance.Rows(0)("RowIndex") & "...!", MsgBoxStyle.Information)
                passed = False
                Exit Sub
            End If
        End If

        If bActionOnReceiveBalanceExceed <> ActionOnBalanceExceed.DoNothing And bActionOnReceiveBalanceExceed <> "" Then
            If AgL.FillData(" Select * From " & bTableName_StockReceive & "", AgL.GCn).Tables(0).Rows.Count > 0 Then
                Dim bPendingReceiveQry As String = " SELECT VReceive.StockReceive, VReceive.StockReceiveSr, IsNull(VReceive.ReceiveQty,0) - IsNull(VInvoice.InvoiceQty,0) AS BalanceQty
                FROM (
                    SELECT L.DocId As StockReceive, L.Sr As StockReceiveSr, Sum(L.Qty) AS ReceiveQty
                    FROM PurchInvoice H 
                    LEFT JOIN PurchInvoiceDetail L ON H.DocID = L.DocID
                    LEFT JOIN Voucher_Type Vt ON H.V_Type = Vt.V_Type
                    And Vt.Nature = 'Receive'
                    And L.SubRecordType Is Null
	                GROUP BY L.DocId, L.Sr
                ) AS VReceive
                LEFT JOIN (
                    SELECT L.ReferenceDocId, L.ReferenceTSr, Sum(L.Qty) AS InvoiceQty
                    FROM PurchBillDetail L 
                    Where L.DocId <> '" & mSearchCode & "'
                    GROUP BY L.ReferenceDocId, L.ReferenceTSr	
                ) AS VInvoice ON VReceive.StockReceive = VInvoice.ReferenceDocId AND VReceive.StockReceiveSr = VInvoice.ReferenceTSr 
                WHERE 1=1 
                And IsNull(VReceive.ReceiveQty,0) - IsNull(VInvoice.InvoiceQty,0) > 0 "

                mQry = " Select Temp.StockReceive, Temp.StockReceiveSr, Temp.RowIndex, Temp.Qty, VStockReceive.BalanceQty
                From (
                    SELECT IfNull(L.StockReceive,'') As StockReceive, 
                    IfNull(L.StockReceiveSr,0) As StockReceiveSr, 
                    Max(L.RowIndex) As RowIndex,
                    IsNull(Sum(L.Qty),0) AS Qty
                    FROM " & bTableName_StockReceive & " L 
                    GROUP BY L.StockReceive, L.StockReceiveSr) As Temp
                LEFT JOIN (" & bPendingReceiveQry & ") As VStockReceive On Temp.StockReceive = VStockReceive.StockReceive
                        And Temp.StockReceiveSr = VStockReceive.StockReceiveSr 
                Where IfNull(Temp.Qty,0) > IfNull(VStockReceive.BalanceQty,0)"
                Dim DtStockReceiveBalance As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)

                If DtStockReceiveBalance.Rows.Count > 0 Then
                    If bActionOnOrderBalanceExceed = ActionOnBalanceExceed.AlertAndStop Then
                        MsgBox("Qty entered is greater then balance qty at row number " & DtStockReceiveBalance.Rows(0)("RowIndex") & "...!", MsgBoxStyle.Information)
                        passed = False
                        Exit Sub
                    ElseIf bActionOnOrderBalanceExceed = ActionOnBalanceExceed.AlertAndAskToContinue Then
                        If MsgBox("Qty entered is greater then balance qty at row number " & DtStockReceiveBalance.Rows(0)("RowIndex") & "...!", MsgBoxStyle.Question + MsgBoxStyle.YesNo) = MsgBoxResult.No Then
                            passed = False
                            Exit Sub
                        End If
                    End If
                End If
            End If
        End If

        If bActionOnOrderBalanceExceed <> ActionOnBalanceExceed.DoNothing And bActionOnOrderBalanceExceed <> "" Then
            If AgL.FillData(" Select * From " & bTableName_PurchOrder & "", AgL.GCn).Tables(0).Rows.Count > 0 Then
                Dim bPendingOrderQry As String = " SELECT VOrder.PurchOrder, VOrder.PurchOrderSr, IsNull(VOrder.OrderQty,0) - IsNull(VReceive.ReceiveQty,0) AS BalanceQty
                FROM (
                    SELECT L.PurchOrder, L.PurchOrderSr, Sum(L.Qty) AS OrderQty
                    FROM PurchOrder H 
                    LEFT JOIN PurchOrderDetail L ON H.DocID = L.DocID
                    LEFT JOIN Voucher_Type Vt ON H.V_Type = Vt.V_Type
                    Where H.Vendor = '" & DglMain.Item(Col1Value, rowVendor).Tag & "'
                    And IfNull(H.Process,'') = '" & DglMain.Item(Col1Value, rowProcess).Tag & "'
	                GROUP BY L.PurchOrder, L.PurchOrderSr
                ) AS VOrder
                LEFT JOIN (
                    SELECT L.ReferenceDocId As PurchOrder, L.ReferenceTSr As PurchOrderSr, Sum(L.Qty_Rec) AS ReceiveQty
                    FROM (Select ReferenceDocId, ReferenceTSr, Qty_Rec From Stock Where DocId <> '" & mSearchCode & "') L 
                    GROUP BY L.ReferenceDocId, L.ReferenceTSr	
                ) AS VReceive ON VOrder.PurchOrder = VReceive.PurchOrder AND VOrder.PurchOrderSr = VReceive.PurchOrderSr 
                WHERE 1=1 
                And IsNull(VOrder.OrderQty,0) - IsNull(VReceive.ReceiveQty,0) > 0 "

                mQry = " Select Temp.RowIndex, Temp.Qty, VPendingOrder.BalanceQty
                From (
                    SELECT IfNull(L.PurchOrder,'') As PurchOrder, 
                    IfNull(L.PurchOrderSr,0) As PurchOrderSr, 
                    Max(L.RowIndex) As RowIndex,
                    IsNull(Sum(L.Qty),0) AS Qty
                    FROM " & bTableName_PurchOrder & " L 
                    GROUP BY L.PurchOrder, L.PurchOrderSr) As Temp
                LEFT JOIN (" & bPendingOrderQry & ") As VPendingOrder On Temp.PurchOrder = VPendingOrder.PurchOrder
                        And Temp.PurchOrderSr = VPendingOrder.PurchOrderSr
                Where IfNull(Temp.Qty,0) > IfNull(VPendingOrder.BalanceQty,0)"
                Dim DtOrderBalance As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)

                If DtOrderBalance.Rows.Count > 0 Then
                    If bActionOnOrderBalanceExceed = ActionOnBalanceExceed.AlertAndStop Then
                        MsgBox("Qty entered is greater then balance qty at row number " & DtOrderBalance.Rows(0)("RowIndex") & "...!", MsgBoxStyle.Information)
                        passed = False
                        Exit Sub
                    ElseIf bActionOnOrderBalanceExceed = ActionOnBalanceExceed.AlertAndAskToContinue Then
                        If MsgBox("Qty entered is greater then balance qty at row number " & DtOrderBalance.Rows(0)("RowIndex") & "...!", MsgBoxStyle.Question + MsgBoxStyle.YesNo) = MsgBoxResult.No Then
                            passed = False
                            Exit Sub
                        End If
                    End If
                End If
            End If
        End If

        If AgL.IsTableExist(bTableName_StockProcess.Replace("[", "").Replace("]", ""), AgL.GCn) Then
            mQry = "Drop Table " + bTableName_StockProcess
            AgL.Dman_ExecuteNonQry(mQry, AgL.GCn)
        End If

        If AgL.IsTableExist(bTableName_PurchPlan.Replace("[", "").Replace("]", ""), AgL.GCn) Then
            mQry = "Drop Table " + bTableName_PurchPlan
            AgL.Dman_ExecuteNonQry(mQry, AgL.GCn)
        End If

        If AgL.IsTableExist(bTableName_StockReceive.Replace("[", "").Replace("]", ""), AgL.GCn) Then
            mQry = "Drop Table " + bTableName_StockReceive
            AgL.Dman_ExecuteNonQry(mQry, AgL.GCn)
        End If

        If AgL.IsTableExist(bTableName_PurchOrder.Replace("[", "").Replace("]", ""), AgL.GCn) Then
            mQry = "Drop Table " + bTableName_PurchOrder
            AgL.Dman_ExecuteNonQry(mQry, AgL.GCn)
        End If


        If Dgl1.Columns(Col1Godown).Visible = False Then
            If Dgl2.Rows(rowGodown).Visible = True Then
                If AgL.XNull(Dgl2(Col1Value, rowGodown).Value) <> "" Then
                    For I = 0 To Dgl1.Rows.Count - 1
                        If AgL.XNull(Dgl1(Col1SKU, I).Value) <> "" Then
                            Dgl1(Col1Godown, I).Value = Dgl2(Col1Value, rowGodown).Value
                            Dgl1(Col1Godown, I).Tag = Dgl2(Col1Value, rowGodown).Tag
                        End If
                    Next
                End If
            End If
        End If

        If Dgl1.Columns(Col1FromGodown).Visible = False Then
            If Dgl2.Rows(rowFromGodown).Visible = True Then
                If AgL.XNull(Dgl2(Col1Value, rowFromGodown).Value) <> "" Then
                    For I = 0 To Dgl1.Rows.Count - 1
                        If AgL.XNull(Dgl1(Col1SKU, I).Value) <> "" Then
                            Dgl1(Col1FromGodown, I).Value = Dgl2(Col1Value, rowFromGodown).Value
                            Dgl1(Col1FromGodown, I).Tag = Dgl2(Col1Value, rowFromGodown).Tag
                        End If
                    Next
                End If
            End If
        End If

        If Dgl1.Columns(Col1ToGodown).Visible = False Then
            If Dgl2.Rows(rowToGodown).Visible = True Then
                If AgL.XNull(Dgl2(Col1Value, rowToGodown).Value) <> "" Then
                    For I = 0 To Dgl1.Rows.Count - 1
                        If AgL.XNull(Dgl1(Col1SKU, I).Value) <> "" Then
                            Dgl1(Col1ToGodown, I).Value = Dgl2(Col1Value, rowToGodown).Value
                            Dgl1(Col1ToGodown, I).Tag = Dgl2(Col1Value, rowToGodown).Tag
                        End If
                    Next
                End If
            End If
        End If

        If (FDivisionNameForCustomization(14) = "PRATHAM APPARE" Or
            FDivisionNameForCustomization(15) = "AGARWAL UNIFORM") And LblV_Type.Tag = Ncat.JobInvoice Then
            If AgL.StrCmp(Topctrl1.Mode, "Add") Then
                ShowPurchInvoicePayment()
            End If
        End If



        CheckDuplicateRef = AgTemplate.ClsMain.FCheckDuplicateRefNo("ManualRefNo", "PurchInvoice",
                                    DglMain.Item(Col1Value, rowV_Type).Tag, DglMain.Item(Col1Value, rowV_Date).Value, TxtDivision.AgSelectedValue,
                                    DglMain.Item(Col1Value, rowSite_Code).Tag, Topctrl1.Mode,
                                    DglMain.Item(Col1Value, rowReferenceNo).Value, mSearchCode)
        If Not CheckDuplicateRef Then
            DglMain.Item(Col1Value, rowReferenceNo).Value = AgTemplate.ClsMain.FGetManualRefNo("ManualRefNo", "PurchInvoice", DglMain.Item(Col1Value, rowV_Type).Tag, DglMain.Item(Col1Value, rowV_Date).Value, TxtDivision.AgSelectedValue, DglMain.Item(Col1Value, rowSite_Code).Tag, AgTemplate.ClsMain.ManualRefType.Max)
            CheckDuplicateRef = True
        End If

        passed = CheckDuplicateRef

        If Dgl2.Item(Col1Value, rowVendorDocNo).Value <> "" Then
            If mFlag_Import = False Then
                passed = ClsMain.FCheckDuplicatePartyDocNo("VendorDocNo", "PurchInvoice",
                DglMain.Item(Col1Value, rowV_Type).Tag, Dgl2.Item(Col1Value, rowVendorDocNo).Value, mSearchCode, "Vendor", DglMain.Item(Col1Value, rowVendor).Tag)
                If Dgl2.Item(Col1Value, rowBtnTransportDetail).Tag IsNot Nothing Then
                    If CType(Dgl2.Item(Col1Value, rowBtnTransportDetail).Tag, FrmPurchaseInvoiceHeader).Dgl1.Item(FrmPurchaseInvoiceHeader.Col1Value, FrmPurchaseInvoiceHeader.rowLrNo).Value <> "" Then
                        mQry = "Select Count(*) From PurchInvoiceTransport 
                    Where LrNo = '" & CType(Dgl2.Item(Col1Value, rowBtnTransportDetail).Tag, FrmPurchaseInvoiceHeader).Dgl1.Item(FrmPurchaseInvoiceHeader.Col1Value, FrmPurchaseInvoiceHeader.rowLrNo).Value & "'
                    And Transporter = '" & CType(Dgl2.Item(Col1Value, rowBtnTransportDetail).Tag, FrmPurchaseInvoiceHeader).Dgl1.Item(FrmPurchaseInvoiceHeader.Col1Value, FrmPurchaseInvoiceHeader.rowTransporter).Tag & "'
                    And DocId <> '" & mSearchCode & "'"
                        If AgL.VNull(AgL.Dman_Execute(mQry, AgL.GCn).ExecuteScalar()) > 0 Then
                            MsgBox("LR No " & CType(Dgl2.Item(Col1Value, rowBtnTransportDetail).Tag, FrmPurchaseInvoiceHeader).Dgl1.Item(FrmPurchaseInvoiceHeader.Col1Value, FrmPurchaseInvoiceHeader.rowLrNo).Value & " is alredy entered for " & CType(Dgl2.Item(Col1Value, rowBtnTransportDetail).Tag, FrmPurchaseInvoiceHeader).Dgl1.Item(FrmPurchaseInvoiceHeader.Col1Value, FrmPurchaseInvoiceHeader.rowTransporter).Value, MsgBoxStyle.Information)
                            passed = False
                            Exit Sub
                        End If
                    End If
                End If
            End If
        End If

        If Math.Round(Val(AgCalcGrid1.AgChargesValue(AgTemplate.ClsMain.Charges.NETAMOUNT, AgStructure.AgCalcGrid.AgCalcGridColumn.Col_Amount)), 0) <> Val(AgCalcGrid1.AgChargesValue(AgTemplate.ClsMain.Charges.NETAMOUNT, AgStructure.AgCalcGrid.AgCalcGridColumn.Col_Amount)) Then
            Calculation()
            Calculation()
        End If
    End Sub

    Private Sub FrmSaleOrder_BaseFunction_BlankText() Handles Me.BaseFunction_BlankText
        Dgl1.RowCount = 1 : Dgl1.Rows.Clear()
        Dgl4.RowCount = 1 : Dgl4.Rows.Clear()
        Dgl2.Item(Col1Value, rowBtnTransportDetail).Tag = Nothing

        UserMovedOverItemGroup = False
        UserMovedOverItemCategory = False
    End Sub

    Private Sub Dgl1_CellEnter(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles Dgl1.CellEnter
        If AgL.VNull(AgL.PubDtEnviro.Rows(0)("IsAdvanceSearchOnItem")) = True Then
            Dgl1.AgSearchMethod = AgControls.AgLib.TxtSearchMethod.Comprehensive
        Else
            Dgl1.AgSearchMethod = AgControls.AgLib.TxtSearchMethod.Simple
        End If
        If mFlag_Import = True Then Exit Sub
        Try
            If AgL.StrCmp(Topctrl1.Mode, "Browse") Then Exit Sub
            If Dgl1.CurrentCell Is Nothing Then Exit Sub

            If AgL.VNull(Dgl1.Item(Col1IsRecordLocked, Dgl1.CurrentCell.RowIndex).Value) > 0 Then
                Dgl1.CurrentCell.ReadOnly = True
                Exit Sub
            End If

            Select Case Dgl1.Columns(Dgl1.CurrentCell.ColumnIndex).Name
                Case ColSNo
                    'SendKeys.Send("{Tab}")
                Case Col1Barcode
                    If (Dgl1.Item(Col1BarcodeType, Dgl1.CurrentCell.RowIndex).Value = BarcodeType.Fixed Or
                        Dgl1.Item(Col1BarcodeType, Dgl1.CurrentCell.RowIndex).Value = BarcodeType.LotWise) And
                        Dgl1.Item(Col1BarcodePattern, Dgl1.CurrentCell.RowIndex).Value = BarcodePattern.Manual Then
                        Dgl1.CurrentCell.ReadOnly = False
                    Else
                        Dgl1.CurrentCell.ReadOnly = True
                    End If
                Case Col1Item
                    If AgL.VNull(Dgl1.Item(Col1Unit, Dgl1.CurrentCell.RowIndex).Tag) And AgL.VNull(Dgl1.Item(Col1DocQty, Dgl1.CurrentCell.RowIndex).Value) <> 0 Then
                        Dgl1.CurrentCell.ReadOnly = True
                    Else
                        Dgl1.CurrentCell.ReadOnly = False
                    End If
                Case Col1Qty, Col1RejQty, Col1LossQty
                    CType(Dgl1.Columns(Dgl1.CurrentCell.ColumnIndex), AgControls.AgTextColumn).AgNumberRightPlaces = Val(Dgl1.Item(Col1QtyDecimalPlaces, Dgl1.CurrentCell.RowIndex).Value)
                Case Col1DocQty
                    CType(Dgl1.Columns(Dgl1.CurrentCell.ColumnIndex), AgControls.AgTextColumn).AgNumberRightPlaces = Val(Dgl1.Item(Col1QtyDecimalPlaces, Dgl1.CurrentCell.RowIndex).Value)
                    If Dgl1.CurrentCell.Tag IsNot Nothing Then Dgl1.CurrentCell.ReadOnly = True

                Case Col1UnitMultiplier, Col1DocDealQty
                    CType(Dgl1.Columns(Dgl1.CurrentCell.ColumnIndex), AgControls.AgTextColumn).AgNumberRightPlaces = Val(Dgl1.Item(Col1DealQtyDecimalPlaces, Dgl1.CurrentCell.RowIndex).Value)
                    If AgL.StrCmp(LblV_Type.Tag, Ncat.PurchaseOrder) = False Then
                        If AgL.XNull(Dgl1.Item(Col1Unit, Dgl1.CurrentCell.RowIndex).Tag) <> "" Then
                            Dgl1.CurrentCell.ReadOnly = Dgl1.Item(Col1Unit, Dgl1.CurrentCell.RowIndex).Tag
                        End If
                    End If

                Case Col1Rate
                    If Topctrl1.Mode = "Edit" Then Dgl1.CurrentCell.ReadOnly = False
                Case Col1ItemCategory
                    UserMovedOverItemCategory = True
                    Try
                        If Dgl1.Item(Dgl1.CurrentCell.ColumnIndex, Dgl1.CurrentCell.RowIndex).Value = "" Then
                            If Dgl1.Item(Dgl1.CurrentCell.ColumnIndex, Dgl1.CurrentCell.RowIndex - 1).Value IsNot Nothing Then
                                Dgl1.Item(Dgl1.CurrentCell.ColumnIndex, Dgl1.CurrentCell.RowIndex).Tag = Dgl1.Item(Dgl1.CurrentCell.ColumnIndex, Dgl1.CurrentCell.RowIndex - 1).Tag
                                Dgl1.Item(Dgl1.CurrentCell.ColumnIndex, Dgl1.CurrentCell.RowIndex).Value = Dgl1.Item(Dgl1.CurrentCell.ColumnIndex, Dgl1.CurrentCell.RowIndex - 1).Value
                                Dgl1.Item(Col1Unit, Dgl1.CurrentCell.RowIndex).Value = Dgl1.Item(Col1Unit, Dgl1.CurrentCell.RowIndex - 1).Value
                                Validating_ItemCategory(Dgl1.CurrentCell.ColumnIndex, Dgl1.CurrentCell.RowIndex)
                            End If
                        End If
                    Catch ex As Exception
                    End Try

                Case Col1ItemGroup
                    UserMovedOverItemGroup = True
                    Try
                        If Dgl1.Item(Dgl1.CurrentCell.ColumnIndex, Dgl1.CurrentCell.RowIndex).Value = "" Then
                            If Dgl1.Item(Dgl1.CurrentCell.ColumnIndex, Dgl1.CurrentCell.RowIndex - 1).Value IsNot Nothing Then
                                Dgl1.Item(Dgl1.CurrentCell.ColumnIndex, Dgl1.CurrentCell.RowIndex).Tag = Dgl1.Item(Dgl1.CurrentCell.ColumnIndex, Dgl1.CurrentCell.RowIndex - 1).Tag
                                Dgl1.Item(Dgl1.CurrentCell.ColumnIndex, Dgl1.CurrentCell.RowIndex).Value = Dgl1.Item(Dgl1.CurrentCell.ColumnIndex, Dgl1.CurrentCell.RowIndex - 1).Value
                            End If
                        End If
                    Catch ex As Exception
                    End Try

                Case Col1Dimension1
                    If Dgl1.AgHelpDataSet(Col1Dimension1) IsNot Nothing Then Dgl1.AgHelpDataSet(Col1Dimension1) = Nothing
                Case Col1Dimension2
                    If Dgl1.AgHelpDataSet(Col1Dimension2) IsNot Nothing Then Dgl1.AgHelpDataSet(Col1Dimension2) = Nothing
                Case Col1Dimension3
                    If Dgl1.AgHelpDataSet(Col1Dimension3) IsNot Nothing Then Dgl1.AgHelpDataSet(Col1Dimension3) = Nothing
                Case Col1Dimension4
                    If Dgl1.AgHelpDataSet(Col1Dimension4) IsNot Nothing Then Dgl1.AgHelpDataSet(Col1Dimension4) = Nothing
                Case Col1Size
                    If Dgl1.AgHelpDataSet(Col1Size) IsNot Nothing Then Dgl1.AgHelpDataSet(Col1Size) = Nothing
            End Select
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub

    Private Sub TempPurchInvoice_BaseFunction_DispText() Handles Me.BaseFunction_DispText
        Dim I As Integer

        For I = 0 To Dgl1.Columns.Count - 1
            If Dgl1.Columns(I).DefaultCellStyle.BackColor = Dgl1.AgReadOnlyColumnColor Then
                Dgl1.Columns(I).ReadOnly = True
            End If
        Next

        Dgl2.Item(Col1Value, rowSalesTaxNo).ReadOnly = True

        If CType(AgL.VNull(FGetSettings(SettingFields.BarcodeGunInputYn, SettingType.General)), Boolean) = False Then
            LblBarcode.Visible = False
            TxtBarcode.Visible = False
        Else
            LblBarcode.Visible = True
            TxtBarcode.Visible = True
        End If
    End Sub

    Private Sub DGL1_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles Dgl1.KeyDown
        If Dgl1.CurrentCell IsNot Nothing Then
            If e.Control And e.KeyCode = Keys.D And Dgl1.Rows(Dgl1.CurrentCell.RowIndex).DefaultCellStyle.BackColor <> AgTemplate.ClsMain.Colours.GridRow_Locked Then
                sender.CurrentRow.Visible = False
                Calculation()
            End If
        End If

        'If e.KeyCode = Keys.Enter Then
        '    If Dgl1.Columns(Dgl1.CurrentCell.ColumnIndex).Name = Col1DocQty Then
        '        If Dgl1.Item(Col1Item, Dgl1.CurrentCell.RowIndex).Value = "" And Val(Dgl1.Item(Col1DocQty, Dgl1.CurrentCell.RowIndex).Value) = 0 Then
        '            If Dgl2.Visible Then
        '                If Dgl2.Rows(rowRemarks).Visible = True Then
        '                    Dgl2.CurrentCell = Dgl2.Item(Col1Value, rowRemarks)
        '                    Dgl2.Focus()
        '                End If
        '            End If
        '        End If
        '    End If
        'End If

        If e.KeyCode = Keys.Delete Then
            If sender.currentrow.selected Then
                If sender.Rows(sender.currentcell.rowindex).DefaultCellStyle.BackColor = AgTemplate.ClsMain.Colours.GridRow_Locked Then
                    MsgBox("Locked Row is not allowed to select.")
                    e.Handled = True
                Else
                    sender.Rows(sender.currentcell.rowindex).Visible = False
                    Calculation()
                    e.Handled = True
                End If
            End If
        End If

        If e.Control Or e.Shift Or e.Alt Then Exit Sub

        If Dgl1.CurrentCell IsNot Nothing Then
            Select Case Dgl1.Columns(Dgl1.CurrentCell.ColumnIndex).Name
                Case Col1Item
                    If e.KeyCode = Keys.Insert Then
                        FOpenItemMaster(Dgl1.Columns(Col1Item).Index, Dgl1.CurrentCell.RowIndex)
                    End If
                Case Col1DocQty
                    If e.KeyCode = Keys.Space Then ShowPurchInvoiceDimensionDetail(Dgl1.CurrentCell.RowIndex)
            End Select
        End If
        'If e.KeyCode = Keys.Enter Then
        '    If Dgl1.Columns(Dgl1.CurrentCell.ColumnIndex).Name = Col1Item Then
        '        If Dgl1.Item(Dgl1.CurrentCell.ColumnIndex, Dgl1.CurrentCell.RowIndex).Value Is Nothing Then Dgl1.Item(Dgl1.CurrentCell.ColumnIndex, Dgl1.CurrentCell.RowIndex).Value = ""
        '        If Dgl1.Item(Dgl1.CurrentCell.ColumnIndex, Dgl1.CurrentCell.RowIndex).Value = "" Then
        '            AgCalcGrid1.Focus()
        '        End If
        '    End If
        'End If


        'Call FOpenMaster(e)
    End Sub

    Public Shared Sub FPrepareContraText(ByVal BlnOverWrite As Boolean, ByRef StrContraTextVar As String,
                                       ByVal StrContraName As String, ByVal DblAmount As Double, ByVal StrDrCr As String)
        Dim IntNameMaxLen As Integer = 35, IntAmtMaxLen As Integer = 18, IntSpaceNeeded As Integer = 2
        StrContraName = AgL.XNull(AgL.Dman_Execute("Select Name from Subgroup  With (NoLock)  Where SubCode = '" & StrContraName & "'  ", AgL.GcnRead).ExecuteScalar)

        If BlnOverWrite Then
            StrContraTextVar = Mid(Trim(StrContraName), 1, IntNameMaxLen) & Space((IntNameMaxLen + IntSpaceNeeded) - Len(Mid(Trim(StrContraName), 1, IntNameMaxLen))) & Space(IntAmtMaxLen - Len(Format(Val(DblAmount), "##,##,##,##,##0.00"))) & Format(Val(DblAmount), "##,##,##,##,##0.00") & " " & Trim(StrDrCr)
        Else
            StrContraTextVar += Mid(Trim(StrContraName), 1, IntNameMaxLen) & Space((IntNameMaxLen + IntSpaceNeeded) - Len(Mid(Trim(StrContraName), 1, IntNameMaxLen))) & Space(IntAmtMaxLen - Len(Format(Val(DblAmount), "##,##,##,##,##0.00"))) & Format(Val(DblAmount), "##,##,##,##,##0.00") & " " & Trim(StrDrCr)
        End If
    End Sub
    Private Function FGetRelationalData() As Boolean
        Dim DtRelationalData As DataTable
        Try
            mQry = " Select Vt.Description || '-' || H.ManualRefNo As DocNo
                        From PurchInvoiceDetail L
                        LEFT JOIN PurchInvoice H On L.DocId = H.DocId
                        LEFT JOIN Voucher_Type Vt On H.V_Type = Vt.V_Type
                        Where L.PurchInvoice = '" & mSearchCode & "' 
                        And L.PurchInvoice <> L.DocId "
            DtRelationalData = AgL.FillData(mQry, AgL.GCn).Tables(0)
            If DtRelationalData.Rows.Count > 0 Then
                MsgBox("Data Exists For " & DglMain(Col1Value, rowV_Type).Value + "-" + DglMain(Col1Value, rowReferenceNo).Value & " In " + DtRelationalData.Rows(0)("DocNo") + ".Can't Modify Entry", MsgBoxStyle.Information)
                FGetRelationalData = True
                Exit Function
            End If

            mQry = " Select Vt.Description || '-' || H.ManualRefNo As DocNo
                        From PurchInvoiceDetail L
                        LEFT JOIN PurchInvoice H On L.DocId = H.DocId
                        LEFT JOIN Voucher_Type Vt On H.V_Type = Vt.V_Type
                        Where L.ReferenceDocId = '" & mSearchCode & "' "
            DtRelationalData = AgL.FillData(mQry, AgL.GCn).Tables(0)
            If DtRelationalData.Rows.Count > 0 Then
                MsgBox("Data Exists For " & DglMain(Col1Value, rowV_Type).Value + "-" + DglMain(Col1Value, rowReferenceNo).Value & " In " + DtRelationalData.Rows(0)("DocNo") + ".Can't Modify Entry", MsgBoxStyle.Information)
                FGetRelationalData = True
                Exit Function
            End If

            mQry = " Select Vt.Description || '-' || H.ManualRefNo As DocNo
                        From StockHeadDetail L
                        LEFT JOIN StockHead H On L.DocId = H.DocId
                        LEFT JOIN Voucher_Type Vt On H.V_Type = Vt.V_Type
                        Where L.ReferenceDocId = '" & mSearchCode & "' "
            DtRelationalData = AgL.FillData(mQry, AgL.GCn).Tables(0)
            If DtRelationalData.Rows.Count > 0 Then
                MsgBox("Data Exists For " & DglMain(Col1Value, rowV_Type).Value + "-" + DglMain(Col1Value, rowReferenceNo).Value & " In " + DtRelationalData.Rows(0)("DocNo") + ".Can't Modify Entry", MsgBoxStyle.Information)
                FGetRelationalData = True
                Exit Function
            End If

            mQry = " Select Vt.Description || '-' || H.ManualRefNo As DocNo
                        From LedgerHeadDetail L
                        LEFT JOIN LedgerHead H On L.DocId = H.DocId
                        LEFT JOIN Voucher_Type Vt On H.V_Type = Vt.V_Type
                        Where L.SpecificationDocId = '" & mSearchCode & "' "
            DtRelationalData = AgL.FillData(mQry, AgL.GCn).Tables(0)
            If DtRelationalData.Rows.Count > 0 Then
                MsgBox("Data Exists For " & DglMain(Col1Value, rowV_Type).Value + "-" + DglMain(Col1Value, rowReferenceNo).Value & " In " + DtRelationalData.Rows(0)("DocNo") + ".Can't Modify Entry", MsgBoxStyle.Information)
                FGetRelationalData = True
                Exit Function
            End If

            mQry = " Select Vt.Description || '-' || H.ManualRefNo As DocNo
                        From Cloth_SupplierSettlementPayments L
                        LEFT JOIN LedgerHead H On L.DocId = H.DocId
                        LEFT JOIN Voucher_Type Vt On H.V_Type = Vt.V_Type
                        Where L.PaymentDocId = '" & mSearchCode & "' "
            DtRelationalData = AgL.FillData(mQry, AgL.GCn).Tables(0)
            If DtRelationalData.Rows.Count > 0 Then
                MsgBox("Data Exists For " & DglMain(Col1Value, rowV_Type).Value + "-" + DglMain(Col1Value, rowReferenceNo).Value & " In " + DtRelationalData.Rows(0)("DocNo") + ".Can't Modify Entry", MsgBoxStyle.Information)
                FGetRelationalData = True
                Exit Function
            End If

            mQry = " Select Vt.Description || '-' || H.ManualRefNo As DocNo
                        From Cloth_SupplierSettlementInvoices L
                        LEFT JOIN LedgerHead H On L.DocId = H.DocId
                        LEFT JOIN Voucher_Type Vt On H.V_Type = Vt.V_Type
                        Where L.PurchaseInvoiceDocId = '" & mSearchCode & "' "
            DtRelationalData = AgL.FillData(mQry, AgL.GCn).Tables(0)
            If DtRelationalData.Rows.Count > 0 Then
                MsgBox("Data Exists For " & DglMain(Col1Value, rowV_Type).Value + "-" + DglMain(Col1Value, rowReferenceNo).Value & " In " + DtRelationalData.Rows(0)("DocNo") + ".Can't Modify Entry", MsgBoxStyle.Information)
                FGetRelationalData = True
                Exit Function
            End If
        Catch ex As Exception
            MsgBox(ex.Message & " in FGetRelationalData")
            FGetRelationalData = True
        End Try
    End Function
    Private Sub FrmPurchInvoiceDirect_WithDimension_BaseEvent_Topctrl_tbPreEdit(ByRef Passed As Boolean) Handles Me.BaseEvent_Topctrl_tbPreEdit
        mQry = "Select L.DocId As DocId 
                FROM LedgerHead H With (NoLock)
                LEFT JOIN LedgerHeadDetail L  With (NoLock) ON H.DocID = L.DocId
                LEFT JOIN Voucher_Type Vt ON H.V_Type = Vt.V_Type
                Where Vt.NCat = '" & Ncat.ReverseCharge & "' 
                And L.SpecificationDocID = '" & mSearchCode & "' "
        If AgL.FillData(mQry, AgL.GCn).Tables(0).Rows.Count > 0 Then
            mIsEntryLocked = True
        End If

        If mIsEntryLocked Then
            If AgL.PubUserName.ToUpper = "SA" Or AgL.PubUserName.ToUpper = AgLibrary.ClsConstant.PubSuperUserName Then
                If MsgBox("Referential data exist. Do you want to modify record?", MsgBoxStyle.YesNo) = MsgBoxResult.No Then
                    Passed = False
                    Exit Sub
                Else
                    'TxtVendor.Enabled = False
                    DglMain.Item(Col1Value, rowVendor).ReadOnly = True
                End If
            Else
                MsgBox("Referential data exist. Can't modify record.")
                Passed = False
                Exit Sub
            End If
        End If


        ShowPurchaseInvoiceParty(mSearchCode, "", TxtNature.Text)

        If ClsMain.IsEntryLockedWithLockText("PurchInvoice", "DocId", mSearchCode) = True Then
            Passed = False
            Exit Sub
        End If
    End Sub
    Private Sub ME_BaseEvent_Topctrl_tbEdit(ByRef Passed As Boolean) Handles Me.BaseEvent_Topctrl_tbEdit
        Dim DtTemp As DataTable

        mQry = "Select IfNull(Max(Sr),0) From PurchInvoiceDimensionDetail  With (NoLock) Where DocID ='" & mSearchCode & "' "
        mDimensionSrl = AgL.Dman_Execute(mQry, AgL.GCn).ExecuteScalar
        mQry = "Select IfNull(Max(Sr),0) From Stock  With (NoLock) Where DocID ='" & mSearchCode & "' "
        DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)
        If AgL.VNull(DtTemp.Rows(0)(0)) > mDimensionSrl Then
            mDimensionSrl = AgL.VNull(DtTemp.Rows(0)(0))
        End If

        If Dgl1.Rows.Count > 0 Then
            If Dgl1.Columns(Col1Item).Visible = True Then
                Dgl1.CurrentCell = Dgl1.Item(Col1Item, Dgl1.Rows.Count - 1) : Dgl1.Focus()
            Else
                Dgl1.CurrentCell = Dgl1.Item(Dgl1.FirstDisplayedCell.ColumnIndex, Dgl1.Rows.Count - 1) : Dgl1.Focus()
            End If
        End If

        Dgl1.ReadOnly = False
        'DglMain.ReadOnly = False
        'Dgl2.ReadOnly = False
        FGetSettingVariableValuesForAddAndEdit()

        If SettingFields_MaximumItemLimit = 1 Then
            Dgl1.AllowUserToAddRows = False
        End If
    End Sub
    Private Sub FrmPurchInvoiceDirect_WithDimension_BaseEvent_Topctrl_tbPreDel(ByRef Passed As Boolean) Handles Me.BaseEvent_Topctrl_tbPreDel
        Dim mQry As String
        If mIsEntryLocked Then
            MsgBox("Referential data exist. Can't delete record.")
            Passed = False
        End If

        If ClsMain.IsEntryLockedWithLockText("PurchInvoice", "DocId", mSearchCode) = True Then
            Passed = False
            Exit Sub
        End If

        Passed = Not FGetRelationalData()

        mQry = "Select Count(*) 
                From Barcode H With (NoLock) 
                Left Join BarcodeSiteDetail L With (NoLock) On H.Code = L.Code
                Where H.GenDocID <> L.LastTrnDocID and H.GenDocID = '" & mSearchCode & "'
                And BarcodeType <> '" & BarcodeType.Fixed & "'
               "
        If AgL.Dman_Execute(mQry, AgL.GCn).ExecuteScalar() > 0 Then
            MsgBox("Some Barcodes are in transaction. Can not continue.")
            Passed = False
        End If
    End Sub
    Private Sub ME_BaseEvent_Topctrl_tbDel(ByRef Passed As Boolean) Handles Me.BaseEvent_Topctrl_tbDel

    End Sub

    'Private Function FCheckDuplicateRefNo() As Boolean
    '    FCheckDuplicateRefNo = True

    '    If Topctrl1.Mode = "Add" Then
    '        mQry = " SELECT COUNT(*) FROM PurchInvoice  With (NoLock) WHERE ManualRefNo = '" & DglMain.Item(Col1Value, rowReferenceNo).Value & "'   " &
    '               " AND V_Type ='" & DglMain.Item(Col1Value, rowV_Type).Tag & "'  And Div_Code = '" & TxtDivision.AgSelectedValue & "' And Site_Code = '" & DglMain.Item(Col1Value, rowSite_Code).Tag & "'   "
    '        If AgL.Dman_Execute(mQry, AgL.GCn).ExecuteScalar > 0 Then FCheckDuplicateRefNo = False : MsgBox("Reference No. Already Exists") : TxtReferenceNo.Focus()
    '    Else
    '        mQry = " SELECT COUNT(*) FROM PurchInvoice  With (NoLock) WHERE ManualRefNo = '" & DglMain.Item(Col1Value, rowReferenceNo).Value & "'  " &
    '               " AND V_Type ='" & DglMain.Item(Col1Value, rowV_Type).Tag & "'  And Div_Code = '" & TxtDivision.AgSelectedValue & "' And Site_Code = '" & DglMain.Item(Col1Value, rowSite_Code).Tag & "'  AND DocID <>'" & mSearchCode & "'  "
    '        If AgL.Dman_Execute(mQry, AgL.GCn).ExecuteScalar > 0 Then FCheckDuplicateRefNo = False : MsgBox("Reference No. Already Exists") : TxtReferenceNo.Focus()
    '    End If

    '    If Topctrl1.Mode = "Add" Then
    '        mQry = " SELECT COUNT(*) FROM PurchInvoice  With (NoLock) WHERE VendorDocNo = '" & Dgl2.Item(Col1Value, rowVendorDocNo).Value & "' And Vendor = '" & DglMain.Item(Col1Value, rowVendor).Tag & "'  " &
    '               " AND V_Type ='" & DglMain.Item(Col1Value, rowV_Type).Tag & "'  And Div_Code = '" & TxtDivision.AgSelectedValue & "' And Site_Code = '" & DglMain.Item(Col1Value, rowSite_Code).Tag & "'   "
    '        If AgL.Dman_Execute(mQry, AgL.GCn).ExecuteScalar > 0 Then FCheckDuplicateRefNo = False : MsgBox("Vendor Doc. No. Already Exists") : TxtReferenceNo.Focus()
    '    Else
    '        mQry = " SELECT COUNT(*) FROM PurchInvoice  With (NoLock) WHERE VendorDocNo = '" & Dgl2.Item(Col1Value, rowVendorDocNo).Value & "'  And Vendor = '" & DglMain.Item(Col1Value, rowVendor).Tag & "'  " &
    '               " AND V_Type ='" & DglMain.Item(Col1Value, rowV_Type).Tag & "'  And Div_Code = '" & TxtDivision.AgSelectedValue & "' And Site_Code = '" & DglMain.Item(Col1Value, rowSite_Code).Tag & "'  AND DocID <>'" & mSearchCode & "'  "
    '        If AgL.Dman_Execute(mQry, AgL.GCn).ExecuteScalar > 0 Then FCheckDuplicateRefNo = False : MsgBox("Vendor Doc No. Already Exists") : TxtReferenceNo.Focus()
    '    End If
    'End Function

    Private Sub FrmCarpetMaterialPlan_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
        ''AgL.WinSetting(Me, 654, 990, 0, 0)
        AgCustomGrid1.FrmType = Me.FrmType

        If Not AgL.StrCmp(AgL.PubUserName, AgLibrary.ClsConstant.PubSuperUserName) Then
            MnuImportFromDos.Visible = False
            MnuImportFromExcel.Visible = False
            MnuImportFromTally.Visible = False
            MnuEditSave.Visible = False
        End If

        If LblV_Type.Tag = Ncat.PurchaseReturn Then
            MnuGenerateEWayBill.Visible = True
        Else
            MnuGenerateEWayBill.Visible = False
        End If
    End Sub

    Private Sub Form_Paint(ByVal sender As Object, ByVal e As System.Windows.Forms.PaintEventArgs) Handles Me.Paint
        AgL.FPaintForm(Me, e, Topctrl1.Height)
    End Sub




    'Private Sub FPostInStock(ByVal Conn As Object, ByVal Cmd As Object)
    '    Dim I As Integer = 0, Cnt As Integer = 0
    '    Dim bSelectionQry$ = ""

    '    mQry = " Delete From Stock Where DocId = '" & mSearchCode & "' "
    '    AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

    '    mQry = " INSERT INTO  Stock(DocID, TSr, Sr, V_Type, V_Prefix, V_Date, V_No, Div_Code, Site_Code,  
    '             SubCode,  SalesTaxGroupParty, Structure, Item,  
    '             Godown,EType_IR, Qty_Iss, Qty_Rec, Unit, LotNo, DealQty_Iss, DealQty_Rec, DealUnit, 
    '             Rate, Amount, Remarks, RecId, ReferenceDocId, ReferenceDocIdSr, ExpiryDate, Sale_Rate, MRP, Process) 
    '             Select L.DocId, L.Sr, L.Sr, H.V_Type, H.V_Prefix, H.V_Date, H.V_No, H.Div_Code, H.Site_Code, 
    '             H.Vendor, H.SalesTaxGroupParty, H.Structure, L.Item, L.Godown,'R', 0, L.Qty, 
    '             L.Unit, L.LotNo,0, L.DealQty, L.DealUnit, L.Rate, L.Amount, 
    '             L.Remark, H.ManualRefNo, L.DocId, L.Sr, L.ExpiryDate, L.Sale_Rate, L.MRP, Process 
    '             FROM PurchInvoiceDetail L  
    '             LEFT JOIN PurchInvoice H On L.DocId = H.DocId 
    '             Where L.DocId = '" & mSearchCode & "' "
    '    AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
    'End Sub

    Private Sub FrmPurchInvoice_BaseEvent_Topctrl_tbRef() Handles Me.BaseEvent_Topctrl_tbRef
        Dim I As Integer
        If mFlag_Import = True Then Exit Sub
        Try
            If Dgl1.AgHelpDataSet(Col1ItemCategory) IsNot Nothing Then Dgl1.AgHelpDataSet(Col1ItemCategory).Dispose() : Dgl1.AgHelpDataSet(Col1ItemCategory) = Nothing
        Catch ex As Exception
        End Try
        Try
            If Dgl1.AgHelpDataSet(Col1ItemGroup) IsNot Nothing Then Dgl1.AgHelpDataSet(Col1ItemGroup).Dispose() : Dgl1.AgHelpDataSet(Col1ItemGroup) = Nothing
        Catch ex As Exception
        End Try
        Try
            If Dgl1.AgHelpDataSet(Col1Item) IsNot Nothing Then Dgl1.AgHelpDataSet(Col1Item).Dispose() : Dgl1.AgHelpDataSet(Col1Item) = Nothing
        Catch ex As Exception
        End Try
        Try
            If Dgl1.AgHelpDataSet(Col1ItemCode) IsNot Nothing Then Dgl1.AgHelpDataSet(Col1ItemCode).Dispose() : Dgl1.AgHelpDataSet(Col1ItemCode) = Nothing
        Catch ex As Exception
        End Try
        Try
            If Dgl1.AgHelpDataSet(Col1Dimension1) IsNot Nothing Then Dgl1.AgHelpDataSet(Col1Dimension1).Dispose() : Dgl1.AgHelpDataSet(Col1Dimension1) = Nothing
        Catch ex As Exception
        End Try
        Try
            If Dgl1.AgHelpDataSet(Col1Dimension2) IsNot Nothing Then Dgl1.AgHelpDataSet(Col1Dimension2).Dispose() : Dgl1.AgHelpDataSet(Col1Dimension2) = Nothing
        Catch ex As Exception
        End Try
        Try
            If Dgl1.AgHelpDataSet(Col1Dimension3) IsNot Nothing Then Dgl1.AgHelpDataSet(Col1Dimension3).Dispose() : Dgl1.AgHelpDataSet(Col1Dimension3) = Nothing
        Catch ex As Exception
        End Try
        Try
            If Dgl1.AgHelpDataSet(Col1Dimension4) IsNot Nothing Then Dgl1.AgHelpDataSet(Col1Dimension4).Dispose() : Dgl1.AgHelpDataSet(Col1Dimension4) = Nothing
        Catch ex As Exception
        End Try
        Try
            If Dgl1.AgHelpDataSet(Col1BaleNo) IsNot Nothing Then Dgl1.AgHelpDataSet(Col1BaleNo).Dispose() : Dgl1.AgHelpDataSet(Col1BaleNo) = Nothing
        Catch ex As Exception
        End Try


        Try
            If Dgl2.Item(Col1Value, rowBtnTransportDetail).Tag IsNot Nothing Then
                For I = 0 To CType(Dgl2.Item(Col1Value, rowBtnTransportDetail).Tag, FrmPurchaseInvoiceHeader).Dgl1.Rows.Count - 1
                    CType(Dgl2.Item(Col1Value, rowBtnTransportDetail).Tag, FrmPurchaseInvoiceHeader).Dgl1.Item(FrmPurchaseInvoiceHeader.Col1Head, I).Tag = Nothing
                Next
            End If
        Catch ex As Exception
        End Try


        For I = 0 To DglMain.Rows.Count - 1
            DglMain(Col1Head, I).Tag = Nothing
        Next

        For I = 0 To Dgl2.Rows.Count - 1
            Dgl2(Col1Head, I).Tag = Nothing
        Next

        ClsMain.FCreateItemDataTable()
    End Sub

    Public Function FGetSettings(FieldName As String, SettingType As String) As String
        Dim bNCat As String = "", bCategory As String = ""
        If LblV_Type.Tag <> "" Then bNCat = LblV_Type.Tag Else bNCat = EntryNCat

        If bNCat = Ncat.StockIssue Or bNCat = Ncat.StockReceive Then
            bCategory = "Stock"
        Else
            bCategory = "Purch"
        End If

        Dim mValue As String
        mValue = ClsMain.FGetSettings(FieldName, SettingType, TxtDivision.Tag, DglMain.Item(Col1Value, rowSite_Code).Tag, bCategory, bNCat, DglMain.Item(Col1Value, rowV_Type).Tag, DglMain.Item(Col1Value, rowProcess).Tag, DglMain.Item(Col1Value, rowSettingGroup).Tag)
        FGetSettings = mValue
    End Function

    Private Sub BtnFillPartyDetail_Click(ByVal sender As Object, ByVal e As System.EventArgs)
        If Topctrl1.Mode = "Add" Then
            ShowPurchaseInvoiceParty("", DglMain.Item(Col1Value, rowVendor).Tag, TxtNature.Text)
        Else
            ShowPurchaseInvoiceParty(mSearchCode, "", TxtNature.Text)
        End If
    End Sub

    'Private Sub FOpenPartyDetail()
    '    Dim FrmObj As FrmPurchPartyDetail
    '    Try
    '        If DglMain.Item(Col1BtnDetail, rowVendor).Tag Is Nothing Then
    '            FrmObj = New FrmPurchPartyDetail
    '        Else
    '            FrmObj = DglMain.Item(Col1BtnDetail, rowVendor).Tag
    '        End If
    '        FrmObj.DispText(IIf(Topctrl1.Mode = "Browse", False, True))
    '        FrmObj.ShowDialog()
    '        If FrmObj.mOkButtonPressed Then DglMain.Item(Col1BtnDetail, rowVendor).Tag = FrmObj
    '    Catch ex As Exception
    '        MsgBox(ex.Message)
    '    End Try
    'End Sub
    Public Sub FGetPrint(ByVal SearchCode As String, mPrintFor As ClsMain.PrintFor,
                         Optional ByVal IsPrintToPrinter As Boolean = False)
        'For SSRS Print Out
        Dim DtTemp As DataTable

        mQry = "SELECT H.DocID  FROM PurchInvoice H With (NoLock)
                LEFT JOIN PurchInvoiceDetail L With (NoLock) ON H.DocID = L.DocID 
                WHERE H.DocID ='" & SearchCode & "' And H.Gross_Amount > 0
                GROUP BY H.DocID 
                HAVING Round(Sum(L.Amount),2)<>Round(Max(H.Gross_Amount),2)"
        If AgL.FillData(mQry, AgL.GCn).Tables(0).Rows.Count > 0 Then
            MsgBox("Something went wrong with gross amount. Can not print Invoice. Please check once.")
            Exit Sub
        End If

        mQry = "SELECT H.DocID, H.Sr, I.Description as ItemName, Round(Sum(L.TotalQty),2),Round(Max(H.Qty),2)  
                FROM PurchInvoiceDetail H With (NoLock)
                LEFT JOIN PurchInvoiceDimensionDetail L With (NoLock) ON H.DocID = L.DocID And H.Sr = L.TSr
                Left Join Item I With (NoLock) On H.Item = I.Code
                WHERE H.DocID ='" & SearchCode & "' 
                GROUP BY H.DocID, H.Sr, I.Description 
                HAVING abs(Round(Sum(L.TotalQty),2))<>abs(Round(Max(H.Qty),2))"

        DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)
        If DtTemp.Rows.Count > 0 Then
            MsgBox("Something went wrong with dimension detail at item " & AgL.XNull(DtTemp.Rows(0)("ItemName")) & ". Can not print Invoice. Please check once.")
            Exit Sub
        End If

        'FGetPrintSSRS(mPrintFor)
        FGetPrintCrystal(SearchCode, mPrintFor, IsPrintToPrinter)
        'If ClsMain.IsScopeOfWorkContains("+Cloth Aadhat Module") Then
        '    FGetPrintCrystal_Aadhat(SearchCode, mPrintFor)
        'Else
        '    FGetPrintCrystal(SearchCode, mPrintFor)
        'End If
    End Sub

    Sub FGetPrintCrystal(ByVal SearchCode As String, mPrintFor As ClsMain.PrintFor, Optional ByVal IsPrintToPrinter As Boolean = False)
        Dim mPrintTitle As String
        Dim PrintingCopies() As String
        Dim I As Integer, J As Integer
        Dim sQryBom As String = ""
        Dim sQryMaterialIssue As String = ""
        Dim mMaterialIssueDocIDs As String = ""


        mPrintTitle = DglMain.Item(Col1Value, rowV_Type).Value

        Dim mDocNoCaption As String = FGetSettings(SettingFields.DocumentPrintEntryNoCaption, SettingType.General)
        Dim mDocDateCaption As String = FGetSettings(SettingFields.DocumentPrintEntryDateCaption, SettingType.General)
        Dim mDocReportFileName As String = FGetSettings(SettingFields.DocumentPrintReportFileName, SettingType.General)
        Dim mTermsAndConditions As String = FGetSettings(SettingFields.TermsAndConditions, SettingType.General)
        Dim mBomExists As Integer = AgL.Dman_Execute("Select IsNull(Count(*),0) from PurchInvoiceDetailBom Where DocID = '" & mSearchCode & "'", AgL.GcnRead).executescalar()
        Dim mVoucherCategory As String = AgL.Dman_Execute("Select IfNull(Max(Category),'') From Voucher_Type where V_Type = '" & DglMain.Item(Col1Value, rowV_Type).Tag & "'", AgL.GcnRead).ExecuteScalar()

        If AgL.PubServerName <> "" Then
            'mMaterialIssueDocIDs = AgL.Dman_Execute("Select DocId + ',' From StockHead Where ReferenceDocId = '" & mSearchCode & "' for xml path('')", AgL.GcnRead).executescalar()
            'mMaterialIssueDocIDs = AgL.Dman_Execute("Select DocId + ',' From StockHeadDetail Where ReferenceDocId = '" & mSearchCode & "' for xml path('')", AgL.GcnRead).executescalar()
            mMaterialIssueDocIDs = AgL.Dman_Execute("Select H.DocId + ',' 
                        From PurchInvoice H 
                        LEFT JOIN PurchInvoiceDetail L On H.DocId = L.DocID 
                        LEFT JOIN Voucher_Type Vt ON H.V_Type = Vt.V_Type
                        Where Vt.NCat In ('" & Ncat.StockIssue & "')
                        And L.ReferenceDocId = '" & mSearchCode & "' for xml path('')", AgL.GcnRead).executescalar()
        End If



        If LblV_Type.Tag = Ncat.PurchaseReturn Then
            'If AgL.PubDtDivisionSiteSetting.Rows(0)("IsSalesTaxApplicable") Then
            If CType(AgL.VNull(FGetSettings(SettingFields.SalesTaxApplicableInPurchase, SettingType.General)), Boolean) = True Then
                mPrintTitle = DglMain.Item(Col1Value, rowV_Type).Value & " (Debit Note)"
            End If
        ElseIf LblV_Type.Tag = Ncat.PurchaseInvoice Then
            mDocNoCaption = "Invoice No."
            mDocDateCaption = "Invoice Date"
        End If

        PrintingCopies = AgL.XNull(DtV_TypeSettings.Rows(0)("PrintingCopyCaptions")).ToString.Split(",")
        mQry = ""
        For I = 1 To PrintingCopies.Length
            If mQry <> "" Then mQry = mQry + " Union All "

            mQry = mQry + "
                Select '" & I & "' as Copies, '" & AgL.XNull(PrintingCopies(I - 1)) & "' as CopyPrintingCaption, '" & mDocNoCaption & "' as DocNoCaption, '" & mDocDateCaption & "' as DocDateCaption, H.DocID, SiteState.ManualCode as SiteStateCode, SiteState.Description as SiteStateName, L.Sr, H.V_Date, VT.Description as Voucher_Type, VT.NCat, H.Div_Code || H.Site_Code || '-' || H.V_Type || '-' || H.ManualRefNo as DocNo,  Agent.DispName as AgentName, '" & AgL.PubDtEnviro.Rows(0)("Caption_SalesAgent") & "' as AgentCaption,
                H.VendorName as PartyName, IfNull(H.VendorAddress,'') as PartyAddress, IfNull(H.VendorPinCode,'') as PartyPinCode, IfNull(C.CityName,'') as PartyCityName, IfNull(State.ManualCode,'') as PartyStateCode, IfNull(State.Description,'') as PartyStateName, 
                IfNull(H.VendorMobile,'') as PartyMobile, IfNull(Sg.ContactPerson,'') as ContactPerson, IfNull(H.VendorSalesTaxNo,'') as PartySalesTaxNo, IfNull((Select RegistrationNo From SubgroupRegistration With (NoLock) Where RegistrationType='" & SubgroupRegistrationType.AadharNo & "' And Subcode=H.Vendor),'') as PartyAadharNo,
                (Select RegistrationNo From SubgroupRegistration  With (NoLock) Where RegistrationType='" & SubgroupRegistrationType.PanNo & "' And Subcode=H.Vendor) as PartyPanNo,
                (Case When BP.Nature = 'Cash' Then IfNull(SP.DispName, BP.DispName || ' - ' || IsNull(H.VendorName,'')) Else IfNull(SP.DispName,H.VendorName) End) as ShipToPartyName,
                (Case When SP.DispName Is Null Then IfNull(H.VendorAddress,'') Else IfNull(Sp.Address,'') End) as ShipToPartyAddress, 
                (Case When SP.DispName Is Null Then IfNull(C.CityName,'') Else IfNull(SC.CityName,'') End) as ShipToPartyCity, 
                (Case When SP.DispName Is Null Then IfNull(H.VendorPinCode,'') Else IfNull(Sp.Pin,'') End) as ShipToPartyPincode, 
                (Case When SP.DispName Is Null Then IfNull(State.ManualCode,'') Else IfNull(SS.ManualCode,'') End) as ShipToPartyStateCode, 
                (Case When SP.DispName Is Null Then IfNull(State.Description,'') Else IfNull(SS.Description,'') End) as ShipToPartyStateName, 
                (Case When SP.DispName Is Null Then IfNull(H.VendorMobile,'') Else IfNull(Sp.Mobile,'') End) as ShipToPartyMobile, 
                (Case When SP.DispName Is Null Then IfNull(H.VendorSalesTaxNo,'') Else IfNull((Select RegistrationNo From SubgroupRegistration Where Subcode=H.ShipToParty And RegistrationType = '" & SubgroupRegistrationType.SalesTaxNo & "'),'') End) as ShipToPartySalesTaxNo, 
                (Case When SP.DispName Is Null Then IfNull(H.VendorAadharNo,'') Else IfNull((Select RegistrationNo From SubgroupRegistration Where Subcode=H.ShipToParty And RegistrationType = '" & SubgroupRegistrationType.AadharNo & "'),'') End) as ShipToPartyAadharNo, 
                (Case When SP.DispName Is Null Then IfNull(H.VendorPanNo,'') Else IfNull((Select RegistrationNo From SubgroupRegistration Where Subcode=H.ShipToParty And RegistrationType = '" & SubgroupRegistrationType.PanNo & "'),'') End) as ShipToPartyPanNo, 
                IfNull(Transporter.Name,IfNull(MTransporter.Name,'')) as TransporterName, IfNull(TD.LrNo,'') LrNo, TD.LrDate, IfNull(TD.PrivateMark,'') PrivateMark, TD.Weight, TD.Freight, IfNull(TD.PaymentType,'') as FreightType, IfNull(TD.RoadPermitNo,'') RoadPermitNo, TD.RoadPermitDate, IfNull(L.ReferenceNo,'') as ReferenceNo,
                I.Description as ItemName, IG.Description as ItemGroupName, IC.Description as ItemCatName, 
                I.Specification as ItemSpecification, L.Specification as InvoiceLineSpecification, IfNull(I.HSN,IC.HSN) as HSN,
                D1.Specification as D1Spec, D2.Specification as D2Spec, D3.Specification as D3Spec, D4.Specification as D4Spec, Size.Specification as SizeSpec,
                '" & AgL.PubCaptionItemType & "' as ItemTypeCaption,'" & AgL.PubCaptionItemCategory & "' as ItemCategoryCaption,
                '" & AgL.PubCaptionItemGroup & "' as ItemGroupCaption,'" & AgL.PubCaptionItem & "' as ItemCaption,'" & AgL.PubCaptionBarcode & "' as BarcodeCaption,
                '" & AgL.PubCaptionDimension1 & "' as D1Caption, '" & AgL.PubCaptionDimension2 & "' as D2Caption, '" & AgL.PubCaptionDimension3 & "' as D3Caption, '" & AgL.PubCaptionDimension4 & "' as D4Caption, 
                L.SalesTaxGroupItem, STGI.GrossTaxRate, 
                (Case when IfNull(Sku.MaintainStockYn,1) =1 AND Sku.ItemType <> '" & ItemTypeCode.ServiceProduct & "' Then L.Pcs Else 0 End) as Pcs, 
                (Case when IfNull(Sku.MaintainStockYn,1) =1 AND Sku.ItemType <> '" & ItemTypeCode.ServiceProduct & "' Then abs(L.Qty) Else 0 End) as Qty, 
                (Case when IfNull(Sku.MaintainStockYn,1) =1 AND Sku.ItemType <> '" & ItemTypeCode.ServiceProduct & "' Then abs(L.DocQty) Else 0 End) as DocQty, 
                (Case when IfNull(Sku.MaintainStockYn,1) =1 AND Sku.ItemType <> '" & ItemTypeCode.ServiceProduct & "' Then abs(L.FreeQty) Else 0 End) as FreeQty, 
                (Case when IfNull(Sku.MaintainStockYn,1) =1 AND Sku.ItemType <> '" & ItemTypeCode.ServiceProduct & "' Then abs(L.LossQty) Else 0 End) as LossQty, 
                (Case when IfNull(Sku.MaintainStockYn,1) =1 AND Sku.ItemType <> '" & ItemTypeCode.ServiceProduct & "' Then abs(L.RejQty) Else 0 End) as RejQty, 
                (Case when IfNull(Sku.MaintainStockYn,1) =1 AND Sku.ItemType <> '" & ItemTypeCode.ServiceProduct & "' Then L.Rate Else 0 End) as Rate, 
                L.Unit, U.DecimalPlaces as UnitDecimalPlaces, L.DiscountPer, L.DiscountAmount, L.AdditionalDiscountPer, L.AdditionalDiscountAmount, 
                L.DiscountAmount+L.AdditionalDiscountAmount-L.AdditionAmount as TotalDiscount, 
                abs(L.Amount)+L.DiscountAmount+L.AdditionalDiscountAmount-L.AdditionAmount as AmountBeforeDiscount,
                Abs(L.Amount) as Amount,Abs(L.Taxable_Amount) as Taxable_Amount,Abs(L.Tax1_Per) Tax1_Per, Abs(L.Tax1) as Tax1, Abs(L.Tax2_Per) as Tax2_Per, Abs(L.Tax2) as Tax2, Abs(L.Tax3_Per) as Tax3_Per, Abs(L.Tax3) as Tax3, Abs(L.Tax4_Per) as Tax4_Per, Abs(L.Tax4) as Tax4, Abs(L.Tax5_Per) as Tax5_Per, Abs(L.Tax5) as Tax5, Abs(L.Net_Amount) as Net_Amount,
                IfNull(H.Remarks,'') as HRemarks, IfNull(L.Remark,'') as LRemarks,
                abs(H.Gross_Amount) as H_Gross_Amount, H.SpecialDiscount_Per as H_SpecialDiscount_Per, H.SpecialDiscount as H_SpecialDiscount,abs(H.Taxable_Amount) as H_Taxable_Amount,abs(H.Tax1_Per) as H_Tax1_Per, abs(H.Tax1) as H_Tax1, 
                abs(H.Tax2_Per) as H_Tax2_Per, abs(H.Tax2) as H_Tax2, abs(H.Tax3_Per) as H_Tax3_Per, abs(H.Tax3) as H_Tax3, abs(H.Tax4_Per) as H_Tax4_Per, abs(H.Tax4) as H_Tax4, 
                abs(H.Tax5_Per) as H_Tax5_Per, abs(H.Tax5) as H_Tax5, abs(H.Deduction_Per) as H_Deduction_Per, abs(H.Deduction) as H_Deduction, abs(H.Other_Charge_Per) as H_Other_Charge_Per, abs(H.Other_Charge) as H_Other_Charge, H.Round_Off, abs(H.Net_Amount) as H_Net_Amount, 
                (Select Sum(L1.DiscountAmount+L1.AdditionalDiscountAmount-L1.AdditionAmount) From PurchInvoiceDetail L1 Where L1.DocID = H.DocID) as H_TotalDiscount, 
                (Select Sum(abs(L1.Amount)+L1.DiscountAmount+L1.AdditionalDiscountAmount-L1.AdditionAmount) From PurchInvoiceDetail L1 Where L1.DocID = H.DocId) as H_AmountBeforeDiscount,
                '" & AgL.XNull(AgL.PubDtEnviro.Rows(0)("Default_BankAccountDetail")) & "' as Default_BankAccountDetail,
                '" & FGetSettings(SettingFields.DocumentPrintHeaderPattern, SettingType.General) & "' as DocumentPrintHeaderPattern, 
                L.DimensionDetail as DimDetail, '' as HsnDescription, '" & AgL.PubUserName & "' as PrintedByUser, '" & mPrintTitle & "' as PrintTitle, '" & mTermsAndConditions & "' as TermsAndConditions
                from PurchInvoice H   With (NoLock)              
                Left Join PurchInvoiceDetail L  With (NoLock) On H.DocID = L.DocID
                Left Join PurchInvoiceDetailSku LS  With (NoLock) On LS.DocID = L.DocID And LS.Sr = L.Sr
                Left Join Item Sku  With (NoLock) On L.Item = Sku.Code
                Left Join Item I  With (NoLock) On LS.Item = I.Code
                Left Join Item D1  With (NoLock) On LS.Dimension1 = D1.Code
                Left Join Item D2  With (NoLock) On LS.Dimension2 = D2.Code
                Left Join Item D3  With (NoLock) On LS.Dimension3 = D3.Code
                Left Join Item D4  With (NoLock) On LS.Dimension4 = D4.Code   
                Left Join Item Size  With (NoLock) On LS.Size = Size.Code
                Left Join Unit U  With (NoLock) On I.Unit = U.Code
                Left Join Item IG  With (NoLock) On LS.ItemGroup = IG.Code
                Left Join Item IC  With (NoLock) On LS.ItemCategory = IC.Code
                Left Join City C  With (NoLock) On H.VendorCity = C.CityCode
                Left Join State  With (NoLock) On C.State = State.Code
                Left Join PurchInvoiceTransport TD  With (NoLock) On H.DocID = TD.DocID
                Left Join ViewHelpSubgroup Transporter  With (NoLock) On TD.Transporter= Transporter.Code
                Left Join PostingGroupSalesTaxItem STGI  With (NoLock) On L.SalesTaxGroupItem = STGI.Description
                Left Join Subgroup Sg  With (NoLock) On H.Vendor = Sg.Subcode     
                Left Join Subgroup SP With (NoLock) On H.ShipToParty = SP.Subcode           
                Left Join Subgroup BP With (NoLock) On H.BillToParty = BP.Subcode           
                Left Join Subgroup Agent  With (NoLock) On H.Agent = Agent.Subcode
                Left Join City SC With (NoLock) On SP.CityCode = SC.CityCode
                Left Join State SS with (NoLock) On SC.State = SS.Code
                Left Join Voucher_Type Vt  With (NoLock) On H.V_Type = Vt.V_Type
                Left Join SiteMast Site On H.Site_Code = Site.Code
                Left Join City SiteCity On Site.City_Code = SiteCity.CityCode
                Left Join State SiteState On SiteCity.State = SiteState.Code
                Left Join SubgroupSiteDivisionDetail SSD On H.Vendor = SSD.Subcode And H.Div_Code = SSD.Div_Code And H.Site_Code = SSD.Site_Code
                Left Join ViewHelpSubgroup MTransporter  With (NoLock) On SSD.Transporter= MTransporter.Code
                Where H.DocID = '" & mSearchCode & "'
                And L.SubRecordType Is Null
                "


            'If mBomExists > 0 Then
            If sQryBom <> "" Then sQryBom = sQryBom + " Union All "

            sQryBom = sQryBom + "Select '" & I & "' as Copies, Max(H.DocID) DocID,
                                    Max(I.Description) AS ItemName, Max(D1.Description) AS Dimension1Name, Max(D2.Description) AS Dimension2Name,
                                    Max(D3.Description) AS Dimension3Name, Max(D4.Description) AS Dimension4Name, Max(Size.Description) AS SizeName,
                                    Max(IG.Description) AS ItemGroupName, Max(IC.Description) AS ItemCategoryName, 
                                    Max(L.Qty) AS Qty, Max(L.Unit) AS Unit, Max(U.DecimalPlaces) as UnitDecimalPlaces,
                                    '" & AgL.PubCaptionItemType & "' as ItemTypeCaption,'" & AgL.PubCaptionItemCategory & "' as ItemCategoryCaption,
                                    '" & AgL.PubCaptionItemGroup & "' as ItemGroupCaption,'" & AgL.PubCaptionItem & "' as ItemCaption,'" & AgL.PubCaptionBarcode & "' as BarcodeCaption,
                                    '" & AgL.PubCaptionDimension1 & "' as D1Caption, '" & AgL.PubCaptionDimension2 & "' as D2Caption, '" & AgL.PubCaptionDimension3 & "' as D3Caption, '" & AgL.PubCaptionDimension4 & "' as D4Caption               
                                    FROM PurchInvoice H  With (NoLock) 
                                    LEFT JOIN PurchInvoiceDetail LB With (NoLock)  ON H.DocID = LB.DocID 
                                    LEFT JOIN PurchInvoiceDetailBom L With (NoLock)  ON LB.DocID = L.DocID AND LB.Sr = L.TSr 
                                    LEFT JOIN PurchInvoiceDetailBomSku LS With (NoLock)  ON L.DocID = LS.DocID AND L.Sr = LS.Sr 
                                    LEFT JOIN voucher_type Vt ON H.V_Type = Vt.V_Type                             
                                    LEFT JOIN Item I With (NoLock)  ON LS.Item = I.Code 
                                    LEFT JOIN Item D1 With (NoLock)  ON LS.Dimension1 = D1.Code 
                                    LEFT JOIN Item D2 With (NoLock)  ON LS.Dimension2 = D2.Code 
                                    LEFT JOIN Item D3 With (NoLock)  ON LS.Dimension3 = D3.Code 
                                    LEFT JOIN Item D4 With (NoLock)  ON LS.Dimension4 = D4.Code 
                                    LEFT JOIN Item Size ON LS.Size = Size.Code 
                                    LEFT JOIN Item IG ON LS.ItemGroup = IG.Code 
                                    LEFT JOIN Item IC ON LS.ItemCategory = IC.Code
                                    Left Join Unit U  With (NoLock) On IfNull(I.Unit,IC.Unit) = U.Code
                                    WHERE H.DocID = '" & mSearchCode & "' And LB.PurchInvoice IS NOT NULL 
                                    GROUP BY LB.PurchInvoice, LB.PurchInvoiceSr   
                                  "
            'End If


            'If mMaterialIssueDocIDs <> "" Then
            If sQryMaterialIssue <> "" Then sQryMaterialIssue = sQryMaterialIssue + " Union All "

            sQryMaterialIssue = sQryMaterialIssue + "Select '" & I & "' as Copies, Max(H.DocID) DocID, Max(H.V_Date) as DocDate,
                                    Max(I.Description) AS ItemName, Max(D1.Description) AS Dimension1Name, Max(D2.Description) AS Dimension2Name,
                                    Max(D3.Description) AS Dimension3Name, Max(D4.Description) AS Dimension4Name, Max(Size.Description) AS SizeName,
                                    Max(IG.Description) AS ItemGroupName, Max(IfNull(IC.Description,I.Description)) AS ItemCategoryName, Max(L.DimensionDetail) as DimensionDetail,
                                    Max(L.Qty) AS Qty, Max(L.Unit) AS Unit, Max(U.DecimalPlaces) as UnitDecimalPlaces,
                                    '" & AgL.PubCaptionItemType & "' as ItemTypeCaption,'" & AgL.PubCaptionItemCategory & "' as ItemCategoryCaption,
                                    '" & AgL.PubCaptionItemGroup & "' as ItemGroupCaption,'" & AgL.PubCaptionItem & "' as ItemCaption,'" & AgL.PubCaptionBarcode & "' as BarcodeCaption,
                                    '" & AgL.PubCaptionDimension1 & "' as D1Caption, '" & AgL.PubCaptionDimension2 & "' as D2Caption, '" & AgL.PubCaptionDimension3 & "' as D3Caption, '" & AgL.PubCaptionDimension4 & "' as D4Caption               
                                    FROM PurchInvoice H  With (NoLock)                                     
                                    LEFT JOIN PurchInvoiceDetail L With (NoLock)  ON H.DocID = L.DocID
                                    LEFT JOIN PurchInvoiceDetailSku LS With (NoLock)  ON L.DocID = LS.DocID AND L.Sr = LS.Sr 
                                    LEFT JOIN voucher_type Vt ON H.V_Type = Vt.V_Type                             
                                    LEFT JOIN Item I With (NoLock)  ON LS.Item = I.Code 
                                    LEFT JOIN Item D1 With (NoLock)  ON LS.Dimension1 = D1.Code 
                                    LEFT JOIN Item D2 With (NoLock)  ON LS.Dimension2 = D2.Code 
                                    LEFT JOIN Item D3 With (NoLock)  ON LS.Dimension3 = D3.Code 
                                    LEFT JOIN Item D4 With (NoLock)  ON LS.Dimension4 = D4.Code 
                                    LEFT JOIN Item Size ON LS.Size = Size.Code 
                                    LEFT JOIN Item IG ON LS.ItemGroup = IG.Code 
                                    LEFT JOIN Item IC ON LS.ItemCategory = IC.Code
                                    Left Join Unit U  With (NoLock) On IfNull(I.Unit,IC.Unit) = U.Code
                                    WHERE (H.DocID In ('" & Replace(mMaterialIssueDocIDs, ",", "','") & "')
                                        Or (H.DocID = '" & mSearchCode & "' And L.SubRecordType = '" & mSubRecordType_StockIssue & "'))
                                    GROUP BY L.DocID, L.Sr   
                                  "
            'End If

        Next
        mQry = mQry + " Order By Copies, H.DocID, L.Sr "


        Dim objRepPrint As Object
        If mPrintFor = ClsMain.PrintFor.EMail Then
            objRepPrint = New AgLibrary.FrmMailComposeWithCrystal(AgL)
            objRepPrint.TxtToEmail.Text = AgL.XNull(AgL.Dman_Execute("Select Sg.Email
                    From SaleInvoice H  With (NoLock)
                    LEFT JOIN SubGroup Sg  With (NoLock) On H.SaleToParty = Sg.SubCode
                    Where H.DocId = '" & mSearchCode & "'", AgL.GCn).ExecuteScalar())
            objRepPrint.TxtCcEmail.Text = AgL.XNull(AgL.Dman_Execute("Select Sg.Email
                    From SaleInvoice H  With (NoLock)
                    LEFT JOIN SubGroup Sg  With (NoLock) On H.Agent = Sg.SubCode
                    Where H.DocId = '" & mSearchCode & "'", AgL.GCn).ExecuteScalar())
            objRepPrint.AttachmentName = "Invoice"
        Else
            objRepPrint = New AgLibrary.RepView(AgL)
        End If


        Dim sQry As String = ""
        Dim sQryRepName As String = ""
        If mVoucherCategory = VoucherCategory.Production Then
            If sQryBom <> "" Then
                If sQry <> "" Then sQry = sQry & "^"
                If sQryRepName <> "" Then sQryRepName = sQryRepName & "^"
                sQry += sQryBom
                sQryRepName += "BomDetail"
            End If
            If sQryMaterialIssue <> "" Then
                If sQry <> "" Then sQry = sQry & "^"
                If sQryRepName <> "" Then sQryRepName = sQryRepName & "^"
                sQry += sQryMaterialIssue
                sQryRepName += "MaterialIssueDetail"
            End If
        End If



        If mDocReportFileName = "" Then
            If mVoucherCategory = VoucherCategory.Production Then
                ClsMain.FPrintThisDocument(Me, objRepPrint, DglMain.Item(Col1Value, rowV_Type).Tag, mQry, "JobInvoice_Print.rpt", mPrintTitle, , sQry, sQryRepName, DglMain.Item(Col1Value, rowVendor).Tag, DglMain.Item(Col1Value, rowV_Date).Value, IsPrintToPrinter)
            Else
                ClsMain.FPrintThisDocument(Me, objRepPrint, DglMain.Item(Col1Value, rowV_Type).Tag, mQry, "PurchInvoice_Print.rpt", mPrintTitle, , sQry, sQryRepName, DglMain.Item(Col1Value, rowVendor).Tag, DglMain.Item(Col1Value, rowV_Date).Value, IsPrintToPrinter)
            End If
        Else
            ClsMain.FPrintThisDocument(Me, objRepPrint, DglMain.Item(Col1Value, rowV_Type).Tag, mQry, mDocReportFileName, mPrintTitle, , sQry, sQryRepName, DglMain.Item(Col1Value, rowVendor).Tag, DglMain.Item(Col1Value, rowV_Date).Value, IsPrintToPrinter)
        End If

    End Sub


    Private Sub FGetPrintSSRS(mPrintFor As ClsMain.PrintFor)
        Dim dsMain As DataTable
        Dim dsCompany As DataTable
        Dim mPrintTitle As String
        Dim PrintingCopies() As String
        Dim I As Integer

        PrintingCopies = AgL.XNull(DtV_TypeSettings.Rows(0)("PrintingCopyCaptions")).ToString.Split(",")



        If LblV_Type.Tag = Ncat.PurchaseReturn Then
            mPrintTitle = DglMain.Item(Col1Value, rowV_Type).Value & " (Debit Note)"
        Else
            mPrintTitle = "Purchase Invoice"





        End If

        mQry = ""
        For I = 1 To PrintingCopies.Length
            If mQry <> "" Then mQry = mQry + " Union All "


            mQry = mQry + "
                Select '" & I & "' as Copies, '" & AgL.XNull(PrintingCopies(I - 1)) & "' as CopyPrintingCaption, H.DocID, L.Sr, H.V_Date, VT.Description as Voucher_Type, VT.NCat, H.Div_Code || H.Site_Code || '-' || H.V_Type || '-' || H.ManualRefNo as DocNo,  Agent.DispName as AgentName, '" & AgL.PubDtEnviro.Rows(0)("Caption_SalesAgent") & "' as AgentCaption,
                H.VendorName as PartyName, H.VendorAddress as PartyAddress, C.CityName as CityName, State.ManualCode as StateCode, State.Description as StateName, 
                H.VendorMobile as PartyMobile, Sg.ContactPerson, H.VendorSalesTaxNo as PartySalesTaxNo, (Select RegistrationNo From SubgroupRegistration With (NoLock) Where RegistrationType='" & SubgroupRegistrationType.AadharNo & "' And Subcode=H.Vendor) as PartyAadharNo,
                (Select RegistrationNo From SubgroupRegistration  With (NoLock) Where RegistrationType='" & SubgroupRegistrationType.PanNo & "' And Subcode=H.Vendor) as PanNo,
                Transporter.Name as TransporterName, TD.LrNo, TD.LrDate, TD.PrivateMark, TD.Weight, TD.Freight, TD.PaymentType as FreightType, TD.RoadPermitNo, TD.RoadPermitDate, L.ReferenceNo,
                I.Description as ItemName, IG.Description as ItemGroupName, IC.Description as ItemCatName, I.Specification as ItemSpecification, L.Specification as InvoiceLineSpecification, I.HSN,
                L.SalesTaxGroupItem, STGI.GrossTaxRate, L.Pcs, Abs(L.Qty) as Qty, L.Rate, L.Unit, U.DecimalPlaces as UnitDecimalPlaces, L.DiscountPer, L.DiscountAmount, L.AdditionalDiscountPer, L.AdditionalDiscountAmount, 
                Abs(L.Amount) as Amount,Abs(L.Taxable_Amount) as Taxable_Amount,Abs(L.Tax1_Per) Tax1_Per, Abs(L.Tax1) as Tax1, Abs(L.Tax2_Per) as Tax2_Per, Abs(L.Tax2) as Tax2, Abs(L.Tax3_Per) as Tax3_Per, Abs(L.Tax3) as Tax3, Abs(L.Tax4_Per) as Tax4_Per, Abs(L.Tax4) as Tax4, Abs(L.Tax5_Per) as Tax5_Per, Abs(L.Tax5) as Tax5, Abs(L.Net_Amount) as Net_Amount,
                H.Remarks as HRemarks, IfNull(L.Remark,'') as LRemarks,
                abs(H.Gross_Amount) as H_Gross_Amount,abs(H.Taxable_Amount) as H_Taxable_Amount,abs(H.Tax1_Per) as H_Tax1_Per, abs(H.Tax1) as H_Tax1, 
                abs(H.Tax2_Per) as H_Tax2_Per, abs(H.Tax2) as H_Tax2, abs(H.Tax3_Per) as H_Tax3_Per, abs(H.Tax3) as H_Tax3, abs(H.Tax4_Per) as H_Tax4_Per, abs(H.Tax4) as H_Tax4, 
                abs(H.Tax5_Per) as H_Tax5_Per, abs(H.Tax5) as H_Tax5, abs(H.Deduction_Per) as H_Deduction_Per, abs(H.Deduction) as H_Deduction, abs(H.Other_Charge_Per) as H_Other_Charge_Per, abs(H.Other_Charge) as H_Other_Charge, H.Round_Off, abs(H.Net_Amount) as H_Net_Amount, '" & AgL.XNull(AgL.PubDtEnviro.Rows(0)("Default_BankAccountDetail")) & "' as Default_BankAccountDetail,
                '" & AgL.VNull(AgL.PubDtEnviro.Rows(0)("IsCenterAlignedCompanyInfoOnDocuments")) & "' as IsCenterAlignedCompanyInfoOnDocuments, 
                L.DimensionDetail as DimDetail, '' as HsnDescription, '" & AgL.PubUserName & "' as PrintedByUser, '" & mPrintTitle & "' as PrintTitle
                from PurchInvoice H   With (NoLock)              
                Left Join PurchInvoiceDetail L  With (NoLock) On H.DocID = L.DocID
                Left Join Item I  With (NoLock) On L.Item = I.Code
                Left Join Unit U  With (NoLock) On I.Unit = U.Code
                Left Join ItemGroup IG  With (NoLock) On I.ItemGroup = IG.Code
                Left Join ItemCategory IC  With (NoLock) On I.ItemCategory = IC.Code
                Left Join City C  With (NoLock) On H.VendorCity = C.CityCode
                Left Join State  With (NoLock) On C.State = State.Code
                Left Join PurchInvoiceTransport TD  With (NoLock) On H.DocID = TD.DocID
                Left Join ViewHelpSubgroup Transporter  With (NoLock) On TD.Transporter= Transporter.Code
                Left Join PostingGroupSalesTaxItem STGI  With (NoLock) On L.SalesTaxGroupItem = STGI.Description
                Left Join Subgroup Sg  With (NoLock) On H.Vendor = Sg.Subcode                
                
                Left Join Subgroup Agent  With (NoLock) On H.Agent = Agent.Subcode
                Left Join Voucher_Type Vt  With (NoLock) On H.V_Type = Vt.V_Type
                Where H.DocID = '" & mSearchCode & "'
                "

        Next
        mQry = mQry + " Order By Copies, H.DocID, L.Sr "







        dsMain = AgL.FillData(mQry, AgL.GCn).Tables(0)


        FReplaceInvoiceVariables(dsMain, TxtDivision.Tag, DglMain.Item(Col1Value, rowSite_Code).Tag)

        dsCompany = ClsMain.GetDocumentHeaderDataTable(TxtDivision.Tag, DglMain.Item(Col1Value, rowSite_Code).Tag, DglMain.Item(Col1Value, rowV_Type).Tag)

        Dim objRepPrint As FrmRepPrint
        objRepPrint = New FrmRepPrint(AgL)
        objRepPrint.reportViewer1.Visible = True
        Dim id As Integer = 0
        objRepPrint.reportViewer1.ProcessingMode = ProcessingMode.Local


        If AgL.PubUserName.ToUpper = "SUPER" Then
            dsMain = ClsMain.RemoveNullFromDataTable(dsMain)
            dsCompany = ClsMain.RemoveNullFromDataTable(dsCompany)
            dsMain.WriteXml(AgL.PubReportPath + "\PurchaseInvoice_DsMain.xml")
            dsCompany.WriteXml(AgL.PubReportPath + "\PurchaseInvoice_DsCompany.xml")
        End If

        If ClsMain.IsScopeOfWorkContains("+CLOTH TRADING WHOLESALE") Then
            'objRepPrint.reportViewer1.LocalReport.ReportPath = AgL.PubReportPath + "\PurchaseInvoice_Cloth.rdl"
            objRepPrint.reportViewer1.LocalReport.ReportPath = AgL.PubReportPath + "\PurchInvoice_Cloth.rdl"
        Else
            objRepPrint.reportViewer1.LocalReport.ReportPath = AgL.PubReportPath + "\PurchaseInvoice.rdl"
        End If


        If (dsMain.Rows.Count = 0) Then
            MsgBox("No records found to print.")
        End If
        Dim rds As New ReportDataSource("DsMain", dsMain)
        Dim rdsCompany As New ReportDataSource("DsCompany", dsCompany)

        objRepPrint.reportViewer1.LocalReport.DataSources.Clear()
        objRepPrint.reportViewer1.LocalReport.DataSources.Add(rds)
        objRepPrint.reportViewer1.LocalReport.DataSources.Add(rdsCompany)


        objRepPrint.reportViewer1.LocalReport.Refresh()
        objRepPrint.reportViewer1.RefreshReport()
        objRepPrint.MdiParent = Me.MdiParent
        objRepPrint.Show()

    End Sub


    Private Sub FrmPurchInvoice_StoreItem_BaseEvent_Topctrl_tbPrn(ByVal SearchCode As String) Handles Me.BaseEvent_Topctrl_tbPrn
        FGetPrint(SearchCode, PrintFor.DocumentPrint)
    End Sub
    Public Sub FPrintThisDocument(ByVal objFrm As Object, ByVal objRepFrm As Object, ByVal V_Type As String,
         Optional ByVal Report_QueryList As String = "", Optional ByVal Report_NameList As String = "",
         Optional ByVal Report_TitleList As String = "", Optional ByVal Report_FormatList As String = "",
         Optional ByVal SubReport_QueryList As String = "",
         Optional ByVal SubReport_NameList As String = "", Optional ByVal PartyCode As String = "", Optional ByVal V_Date As String = "", Optional ByVal IsPrintToPrinter As Boolean = False
         )

        Dim DtVTypeSetting As DataTable = Nothing
        Dim mQry As String = ""
        Dim mCrd As New ReportDocument
        Dim DsRep As New DataSet
        Dim strQry As String = ""

        Dim RepName As String = ""
        Dim RepTitle As String = ""
        Dim RepQry As String = ""

        Dim RetIndex As Integer = 0

        Dim Report_QryArr() As String = Nothing
        Dim Report_NameArr() As String = Nothing
        Dim Report_TitleArr() As String = Nothing
        Dim Report_FormatArr() As String = Nothing

        Dim SubReport_QryArr() As String = Nothing
        Dim SubReport_NameArr() As String = Nothing
        Dim SubReport_DataSetArr() As DataSet = Nothing

        Dim I As Integer = 0

        Try


            If Report_QueryList <> "" Then Report_QryArr = Split(Report_QueryList, "~")
            If Report_TitleList <> "" Then Report_TitleArr = Split(Report_TitleList, "|")
            If Report_NameList <> "" Then Report_NameArr = Split(Report_NameList, "|")

            If Report_FormatList <> "" Then
                Report_FormatArr = Split(Report_FormatList, "|")

                For I = 0 To Report_FormatArr.Length - 1
                    If strQry <> "" Then strQry += " UNION ALL "
                    strQry += " Select " & I & " As Code, '" & Report_FormatArr(I) & "' As Name "
                Next

                Dim FRH_Single As DMHelpGrid.FrmHelpGrid
                FRH_Single = New DMHelpGrid.FrmHelpGrid(New DataView(AgL.FillData(strQry, AgL.GCn).TABLES(0)), "", 300, 350, , , False)
                FRH_Single.FFormatColumn(0, , 0, , False)
                FRH_Single.FFormatColumn(1, "Report Format", 250, DataGridViewContentAlignment.MiddleLeft)
                FRH_Single.StartPosition = FormStartPosition.CenterScreen
                FRH_Single.ShowDialog()

                If FRH_Single.BytBtnValue = 0 Then
                    RetIndex = FRH_Single.DRReturn("Code")
                End If

                If Report_NameArr.Length = Report_FormatArr.Length Then RepName = Report_NameArr(RetIndex) Else RepName = Report_NameArr(0)
                If Report_TitleArr.Length = Report_FormatArr.Length Then RepTitle = Report_TitleArr(RetIndex) Else RepTitle = Report_TitleArr(0)
                If Report_QryArr.Length = Report_FormatArr.Length Then RepQry = Report_QryArr(RetIndex) Else RepQry = Report_QryArr(0)
            Else
                RepName = Report_NameArr(0)
                RepTitle = Report_TitleArr(0)
                RepQry = Report_QryArr(0)
            End If

            DsRep = AgL.FillData(RepQry, AgL.GCn)
            FReplaceInvoiceVariables(DsRep.Tables(0), TxtDivision.Tag, DglMain.Item(Col1Value, rowSite_Code).Tag)
            AgPL.CreateFieldDefFile1(DsRep, AgL.PubReportPath & "\" & RepName & ".ttx", True)

            If SubReport_QueryList <> "" Then SubReport_QryArr = Split(SubReport_QueryList, "|")
            If SubReport_NameList <> "" Then SubReport_NameArr = Split(SubReport_NameList, "|")

            If SubReport_QryArr IsNot Nothing And SubReport_NameArr IsNot Nothing Then
                If SubReport_QryArr.Length <> SubReport_NameArr.Length Then
                    MsgBox("Number Of SubReport Qries And SubReport Names Are Not Equal.", MsgBoxStyle.Information)
                    Exit Sub
                End If

                For I = 0 To SubReport_QryArr.Length - 1
                    ReDim Preserve SubReport_DataSetArr(I)
                    SubReport_DataSetArr(I) = New DataSet
                    SubReport_DataSetArr(I) = AgL.FillData(SubReport_QryArr(I).ToString, AgL.GCn)
                    AgPL.CreateFieldDefFile1(SubReport_DataSetArr(I), AgL.PubReportPath & "\" & Report_NameList & (I + 1).ToString & ".ttx", True)
                Next
            End If

            mCrd.Load(AgL.PubReportPath & "\" & RepName)
            mCrd.SetDataSource(DsRep.Tables(0))

            If SubReport_QryArr IsNot Nothing And SubReport_NameArr IsNot Nothing Then
                For I = 0 To SubReport_NameArr.Length - 1
                    mCrd.OpenSubreport(SubReport_NameArr(I).ToString).Database.Tables(0).SetDataSource(SubReport_DataSetArr(I).Tables(0))
                Next
            End If

            CType(objRepFrm.Controls("CrvReport"), CrystalDecisions.Windows.Forms.CrystalReportViewer).ReportSource = mCrd
            Formula_Set(mCrd, RepTitle)
            'ClsMain.Formula_Set(mCrd, CType(objFrm, AgTemplate.TempTransaction).TxtDivision.Tag, CType(objFrm, AgTemplate.TempTransaction1).DglMain.Item(Col1Value, rowSite_Code).Tag)
            ClsMain.Formula_Set(mCrd, CType(objFrm, AgTemplate.TempTransaction1).TxtDivision.Tag, CType(objFrm, AgTemplate.TempTransaction1).DglMain.Item(Col1Value, rowSite_Code).Tag, CType(objFrm, AgTemplate.TempTransaction1).DglMain.Item(Col1Value, rowV_Type).Tag, RepTitle)
            'AgPL.Show_Report(objRepFrm, "* " & RepTitle & " *", objFrm.MdiParent)

            If IsPrintToPrinter = True Then
                mCrd.PrintToPrinter(1, True, 0, 0)
            Else
                objRepFrm.MdiParent = Me.MdiParent
                objRepFrm.Show()
            End If

            Call AgL.LogTableEntry(objFrm.mSearchCode, objFrm.Text, "P", AgL.PubMachineName, AgL.PubUserName, AgL.PubLoginDate, AgL.GCn, AgL.ECmd)
        Catch Ex As Exception
            MsgBox(Ex.Message)
        End Try
    End Sub

    Public Sub Formula_Set(ByVal mCRD As ReportDocument, Optional ByVal mRepTitle As String = "", Optional ByVal Date1 As String = "", Optional ByVal Date2 As String = "")
        Dim i As Integer
        For i = 0 To mCRD.DataDefinition.FormulaFields.Count - 1
            Select Case AgL.UTrim(mCRD.DataDefinition.FormulaFields(i).Name)
                Case AgL.UTrim("Title")
                    mCRD.DataDefinition.FormulaFields(i).Text = "'" & mRepTitle & "'"
                Case AgL.UTrim("comp_name")
                    mCRD.DataDefinition.FormulaFields(i).Text = "'" & AgL.PubCompName & "'"
                Case AgL.UTrim("comp_add")
                    mCRD.DataDefinition.FormulaFields(i).Text = "'" & AgL.PubCompAdd1 & "'"
                Case AgL.UTrim("RegOffice_FullAddress")
                    mCRD.DataDefinition.FormulaFields(i).Text = "'" & AgL.PubCompAdd1 & "'"
                Case AgL.UTrim("RegOffice_City")
                    mCRD.DataDefinition.FormulaFields(i).Text = "'" & AgL.PubCompAdd2 & "'"
                Case AgL.UTrim("comp_add1")
                    mCRD.DataDefinition.FormulaFields(i).Text = "'" & AgL.PubCompAdd2 & "'"
                Case AgL.UTrim("comp_Pin")
                    mCRD.DataDefinition.FormulaFields(i).Text = "'" & AgL.PubCompPinCode & "'"
                Case AgL.UTrim("comp_phone")
                    mCRD.DataDefinition.FormulaFields(i).Text = "'" & AgL.PubCompPhone & "'"
                Case AgL.UTrim("comp_city")
                    mCRD.DataDefinition.FormulaFields(i).Text = "'" & AgL.PubCompCity & "'"
                Case AgL.UTrim("Title")
                    mCRD.DataDefinition.FormulaFields(i).Text = "'" & mRepTitle & "'"
                Case AgL.UTrim("Division")
                    If AgL.PubDivName IsNot Nothing Then
                        mCRD.DataDefinition.FormulaFields(i).Text = "'" & AgL.PubDivName.ToUpper & " DIVISION" & "'"
                    End If
                Case AgL.UTrim("Tin_No")
                    mCRD.DataDefinition.FormulaFields(i).Text = "'" & "TIN NO : " & AgL.PubCompTIN & "'"
                Case AgL.UTrim("DateBetween")
                    If Date1 <> "" And Date2 <> "" Then
                        mCRD.DataDefinition.FormulaFields(i).Text = "'" & "From Date " & Date1 & " To " & Date2 & " '"
                    ElseIf Date1 <> "" And Date2 = "" Then
                        mCRD.DataDefinition.FormulaFields(i).Text = "' " & "For Date : " & Date1 & " '"
                    End If

            End Select
        Next
    End Sub


    Public Sub FPrintThisDocumentPurch(ByVal objFrm As Object, ByVal V_Type As String,
         Optional ByVal Report_QueryList As String = "", Optional ByVal Report_NameList As String = "",
         Optional ByVal Report_TitleList As String = "", Optional ByVal Report_FormatList As String = "",
         Optional ByVal SubReport_QueryList As String = "",
         Optional ByVal SubReport_NameList As String = "", Optional ByVal PartyCode As String = "", Optional ByVal V_Date As String = "")

        Dim DtVTypeSetting As DataTable = Nothing
        Dim mQry As String = ""
        Dim mCrd As New ReportDocument
        Dim ReportView As New AgLibrary.RepView
        Dim DsRep As New DataSet
        Dim strQry As String = ""

        Dim RepName As String = ""
        Dim RepTitle As String = ""
        Dim RepQry As String = ""

        Dim RetIndex As Integer = 0

        Dim Report_QryArr() As String = Nothing
        Dim Report_NameArr() As String = Nothing
        Dim Report_TitleArr() As String = Nothing
        Dim Report_FormatArr() As String = Nothing

        Dim SubReport_QryArr() As String = Nothing
        Dim SubReport_NameArr() As String = Nothing
        Dim SubReport_DataSetArr() As DataSet = Nothing

        Dim I As Integer = 0

        Try


            If Report_QueryList <> "" Then Report_QryArr = Split(Report_QueryList, "~")
            If Report_TitleList <> "" Then Report_TitleArr = Split(Report_TitleList, "|")
            If Report_NameList <> "" Then Report_NameArr = Split(Report_NameList, "|")

            If Report_FormatList <> "" Then
                Report_FormatArr = Split(Report_FormatList, "|")

                For I = 0 To Report_FormatArr.Length - 1
                    If strQry <> "" Then strQry += " UNION ALL "
                    strQry += " Select " & I & " As Code, '" & Report_FormatArr(I) & "' As Name "
                Next

                Dim FRH_Single As DMHelpGrid.FrmHelpGrid
                FRH_Single = New DMHelpGrid.FrmHelpGrid(New DataView(AgL.FillData(strQry, AgL.GCn).TABLES(0)), "", 300, 350, , , False)
                FRH_Single.FFormatColumn(0, , 0, , False)
                FRH_Single.FFormatColumn(1, "Report Format", 250, DataGridViewContentAlignment.MiddleLeft)
                FRH_Single.StartPosition = FormStartPosition.CenterScreen
                FRH_Single.ShowDialog()

                If FRH_Single.BytBtnValue = 0 Then
                    RetIndex = FRH_Single.DRReturn("Code")
                End If

                If Report_NameArr.Length = Report_FormatArr.Length Then RepName = Report_NameArr(RetIndex) Else RepName = Report_NameArr(0)
                If Report_TitleArr.Length = Report_FormatArr.Length Then RepTitle = Report_TitleArr(RetIndex) Else RepTitle = Report_TitleArr(0)
                If Report_QryArr.Length = Report_FormatArr.Length Then RepQry = Report_QryArr(RetIndex) Else RepQry = Report_QryArr(0)
            Else
                RepName = Report_NameArr(0)
                RepTitle = Report_TitleArr(0)
                RepQry = Report_QryArr(0)
            End If

            DsRep = AgL.FillData(RepQry, AgL.GCn)

            FReplaceInvoiceVariables(DsRep.Tables(0), TxtDivision.Tag, DglMain.Item(Col1Value, rowSite_Code).Tag)
            AgPL.CreateFieldDefFile1(DsRep, AgL.PubReportPath & "\" & RepName & ".ttx", True)

            If SubReport_QueryList <> "" Then SubReport_QryArr = Split(SubReport_QueryList, "|")
            If SubReport_NameList <> "" Then SubReport_NameArr = Split(SubReport_NameList, "|")

            If SubReport_QryArr IsNot Nothing And SubReport_NameArr IsNot Nothing Then
                If SubReport_QryArr.Length <> SubReport_NameArr.Length Then
                    MsgBox("Number Of SubReport Qries And SubReport Names Are Not Equal.", MsgBoxStyle.Information)
                    Exit Sub
                End If

                For I = 0 To SubReport_QryArr.Length - 1
                    ReDim Preserve SubReport_DataSetArr(I)
                    SubReport_DataSetArr(I) = New DataSet
                    SubReport_DataSetArr(I) = AgL.FillData(SubReport_QryArr(I).ToString, AgL.GCn)
                    AgPL.CreateFieldDefFile1(SubReport_DataSetArr(I), AgL.PubReportPath & "\" & Report_NameList & (I + 1).ToString & ".ttx", True)
                Next
            End If

            mCrd.Load(AgL.PubReportPath & "\" & RepName & ".rpt")
            mCrd.SetDataSource(DsRep.Tables(0))

            If SubReport_QryArr IsNot Nothing And SubReport_NameArr IsNot Nothing Then
                For I = 0 To SubReport_NameArr.Length - 1
                    mCrd.OpenSubreport(SubReport_NameArr(I).ToString).Database.Tables(0).SetDataSource(SubReport_DataSetArr(I).Tables(0))
                Next
            End If

            CType(ReportView.Controls("CrvReport"), CrystalDecisions.Windows.Forms.CrystalReportViewer).ReportSource = mCrd
            AgPL.Formula_Set(mCrd, RepTitle)
            'ClsMain.Formula_Set(mCrd, CType(objFrm, AgTemplate.TempTransaction).TxtDivision.Tag, CType(objFrm, AgTemplate.TempTransaction1).DglMain.Item(Col1Value, rowSite_Code).Tag)
            ClsMain.Formula_Set(mCrd, CType(objFrm, AgTemplate.TempTransaction1).TxtDivision.Tag, CType(objFrm, AgTemplate.TempTransaction1).DglMain.Item(Col1Value, rowSite_Code).Tag, CType(objFrm, AgTemplate.TempTransaction1).DglMain.Item(Col1Value, rowV_Type).Tag, RepTitle)
            AgPL.Show_Report(ReportView, "* " & RepTitle & " *", objFrm.MdiParent)

            Call AgL.LogTableEntry(objFrm.mSearchCode, objFrm.Text, "P", AgL.PubMachineName, AgL.PubUserName, AgL.PubLoginDate, AgL.GCn, AgL.ECmd)
        Catch Ex As Exception
            MsgBox(Ex.Message)
        End Try
    End Sub

    Public Function FReplaceInvoiceVariables(ByRef dtTable As DataTable, DivisionCode As String, SiteCode As String) As DataTable
        Dim I As Integer, J As Integer
        For I = 0 To dtTable.Rows.Count - 1
            For J = 0 To dtTable.Columns.Count - 1
                If AgL.XNull(dtTable.Rows(I)(J)) <> "" Then
                    dtTable.Rows(I)(J) = FReplaceInvoiceVariables(dtTable.Rows(I)(J), DivisionCode, SiteCode)
                End If
            Next J
        Next I

        FReplaceInvoiceVariables = dtTable
    End Function

    Public Function FReplaceInvoiceVariables(ByRef mText As String, DivisionCode As String, SiteCode As String) As String
        Dim mQry As String
        Dim dtTemp As DataTable

        If mText.IndexOf("<") >= 0 And mText.IndexOf(">") > 0 Then
            mText = Replace(mText, "<Default_DebtorsInterestRate>", AgL.XNull(AgL.PubDtEnviro.Rows(0)("Default_DebtorsInterestRate")))

            mQry = "Select *
                    From PurchInvoice H  With (NoLock)
                    Where H.DocID = '" & mSearchCode & "'"
            dtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)


            'mText = Replace(mText, "<CreditDays>", AgL.XNull(dtTemp.Rows(0)("CreditDays")))
            ClsMain.FReplacePubVariables(mText, TxtDivision.Tag, DglMain.Item(Col1Value, rowSite_Code).Tag)

        End If

        FReplaceInvoiceVariables = mText
    End Function

    Private Sub TxtDescription_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs)
        If e.KeyCode = Keys.Enter Then
            If MsgBox("Do you want to save?", MsgBoxStyle.YesNo + MsgBoxStyle.DefaultButton2, "Save") = MsgBoxResult.Yes Then
                Topctrl1.FButtonClick(13)
            End If
        End If
    End Sub

    Private Function AccountPosting() As Boolean
        Dim LedgAry() As AgLibrary.ClsMain.LedgRec
        Dim I As Integer, J As Integer = 0
        Dim DsTemp As DataSet = Nothing
        Dim mNarr As String = "", mCommonNarr$ = ""
        Dim mNetAmount As Double, mRoundOff As Double = 0
        Dim GcnRead As Object
        GcnRead = New Object
        GcnRead.ConnectionString = AgL.Gcn_ConnectionString
        GcnRead.Open()

        mNetAmount = 0
        mCommonNarr = ""
        mCommonNarr = ""
        If mCommonNarr.Length > 255 Then mCommonNarr = AgL.MidStr(mCommonNarr, 0, 255)

        ReDim Preserve LedgAry(I)
        I = UBound(LedgAry) + 1
        ReDim Preserve LedgAry(I)
        LedgAry(I).SubCode = AgL.XNull(AgL.PubDtEnviro.Rows(0)("PurchaseAc"))
        LedgAry(I).ContraSub = DglMain.Item(Col1Value, rowVendor).Tag
        LedgAry(I).AmtCr = 0
        LedgAry(I).AmtDr = Val(AgCalcGrid1.AgChargesValue(AgTemplate.ClsMain.Charges.NETAMOUNT, AgStructure.AgCalcGrid.AgCalcGridColumn.Col_Amount))
        If mNarr.Length > 255 Then mNarr = AgL.MidStr(mNarr, 0, 255)
        LedgAry(I).Narration = mNarr

        I = UBound(LedgAry) + 1
        ReDim Preserve LedgAry(I)
        LedgAry(I).SubCode = DglMain.Item(Col1Value, rowVendor).Tag
        LedgAry(I).ContraSub = AgL.XNull(AgL.PubDtEnviro.Rows(0)("PurchaseAc"))
        LedgAry(I).AmtCr = Val(AgCalcGrid1.AgChargesValue(AgTemplate.ClsMain.Charges.NETAMOUNT, AgStructure.AgCalcGrid.AgCalcGridColumn.Col_Amount))
        LedgAry(I).AmtDr = 0
        LedgAry(I).Narration = mNarr

        If AgL.PubManageOfflineData Then
            If AgL.LedgerPost(AgL.MidStr(Topctrl1.Mode, 0, 1), LedgAry, AgL.GcnSite, AgL.ECmdSite, mSearchCode, CDate(DglMain.Item(Col1Value, rowV_Date).Value), AgL.PubUserName, AgL.PubLoginDate, mCommonNarr, , AgL.GcnSite_ConnectionString) = False Then
                AccountPosting = False : Err.Raise(1, , "Error in Ledger Posting")
            Else
            End If
        End If

        If AgL.LedgerPost(AgL.MidStr(Topctrl1.Mode, 0, 1), LedgAry, AgL.GCn, AgL.ECmd, mSearchCode, CDate(DglMain.Item(Col1Value, rowV_Date).Value), AgL.PubUserName, AgL.PubLoginDate, mCommonNarr, , AgL.Gcn_ConnectionString) = False Then
            AccountPosting = False : Err.Raise(1, , "Error in Ledger Posting")
        End If
        GcnRead.Close()
        GcnRead.Dispose()
    End Function

    Private Sub Dgl1_EditingControl_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles Dgl1.EditingControl_KeyDown
        Dim DsTemp As DataSet
        Try
            If AgL.StrCmp(Topctrl1.Mode, "Browse") Then Exit Sub
            If Dgl1.CurrentCell Is Nothing Then Exit Sub


            Select Case Dgl1.Columns(Dgl1.CurrentCell.ColumnIndex).Name
                Case Col1ItemCategory
                    If e.KeyCode <> Keys.Enter And e.KeyCode <> Keys.Insert Then
                        If Dgl1.AgHelpDataSet(Col1ItemCategory) Is Nothing Then
                            FCreateHelpItemCategory()
                        End If
                    ElseIf e.KeyCode = Keys.Insert Then
                        FOpenItemMaster(Dgl1.Columns(Col1Item).Index, Dgl1.CurrentCell.RowIndex)
                    End If

                Case Col1ItemGroup
                    If e.KeyCode <> Keys.Enter And e.KeyCode <> Keys.Insert Then
                        If Dgl1.AgHelpDataSet(Col1ItemGroup) Is Nothing Then
                            FCreateHelpItemGroup(Dgl1.CurrentCell.RowIndex)
                        End If
                    ElseIf e.KeyCode = Keys.Insert Then
                        FOpenItemGroupMaster(Dgl1.Columns(Col1Item).Index, Dgl1.CurrentCell.RowIndex)
                    End If

                Case Col1Item
                    'If e.KeyCode <> Keys.Enter And e.KeyCode <> Keys.Insert Then
                    '    If Dgl1.AgHelpDataSet(Col1Item) Is Nothing Then
                    '        FCreateHelpItem(Dgl1.CurrentCell.RowIndex)
                    '    End If
                    'ElseIf e.KeyCode = Keys.Insert Then
                    '    FOpenItemMaster(Dgl1.Columns(Col1Item).Index, Dgl1.CurrentCell.RowIndex)
                    'End If
                    If e.KeyCode = Keys.Insert Then
                        Call FOpenItemMaster(Dgl1.Columns(Col1Item).Index, Dgl1.CurrentCell.RowIndex)
                    ElseIf e.KeyCode <> Keys.Enter Then
                        If Dgl1.AgHelpDataSet(Col1Item) Is Nothing Then
                            If LblV_Type.Tag = Ncat.PurchaseInvoice Then
                                If CType(AgL.VNull(FGetSettings(SettingFields.ItemHelpFromOrderYN, SettingType.General)), Boolean) = True Then
                                    FCreateHelpItemFromPurchaseOrder(Dgl1.CurrentCell.RowIndex)
                                Else
                                    FCreateHelpItem(Dgl1.CurrentCell.RowIndex)
                                End If
                            Else
                                FCreateHelpItem(Dgl1.CurrentCell.RowIndex)
                            End If
                        End If
                    End If

                Case Col1PurchaseInvoice
                    If e.KeyCode <> Keys.Enter Then
                        If LblV_Type.Tag = Ncat.PurchaseInvoice And
                                CType(AgL.VNull(FGetSettings(SettingFields.OrderApplicableYn, SettingType.General)), Boolean) = True Then
                            If Dgl1.AgHelpDataSet(Col1PurchaseInvoice) Is Nothing Then
                                FCreateHelpPurchaseOrder()
                            End If
                        End If
                    End If

                Case Col1DealQty
                    If Dgl1.AgHelpDataSet(Col1DealQty) Is Nothing Then
                        mQry = " SELECT Code, Code AS Description, DecimalPlaces FROM Unit  With (NoLock) "
                        Dgl1.AgHelpDataSet(Col1DealQty, 1) = AgL.FillData(mQry, AgL.GCn)
                    End If
                Case Col1SalesTaxGroup
                    If Dgl1.AgHelpDataSet(Col1SalesTaxGroup) Is Nothing Then
                        mQry = " SELECT Description as Code, Description FROM PostingGroupSalesTaxItem  With (NoLock) "
                        Dgl1.AgHelpDataSet(Col1SalesTaxGroup) = AgL.FillData(mQry, AgL.GCn)
                    End If

                Case Col1Dimension1
                    If e.KeyCode <> Keys.Enter Then
                        If Dgl1.AgHelpDataSet(Col1Dimension1) Is Nothing Then
                            FCreateHelpDimension1(Dgl1.CurrentCell.RowIndex)
                        End If
                    End If

                Case Col1Dimension2
                    If e.KeyCode <> Keys.Enter Then
                        If Dgl1.AgHelpDataSet(Col1Dimension2) Is Nothing Then
                            FCreateHelpDimension2(Dgl1.CurrentCell.RowIndex)
                        End If
                    End If

                Case Col1Dimension3
                    If e.KeyCode <> Keys.Enter Then
                        If Dgl1.AgHelpDataSet(Col1Dimension3) Is Nothing Then
                            FCreateHelpDimension3(Dgl1.CurrentCell.RowIndex)
                        End If
                    End If

                Case Col1Dimension4
                    If e.KeyCode <> Keys.Enter Then
                        If Dgl1.AgHelpDataSet(Col1Dimension4) Is Nothing Then
                            FCreateHelpDimension4(Dgl1.CurrentCell.RowIndex)
                        End If
                    End If

                Case Col1Size
                    If e.KeyCode <> Keys.Enter Then
                        If Dgl1.AgHelpDataSet(Col1Size) Is Nothing Then
                            mQry = " SELECT Code, Description  FROM Size I With (NoLock) Where 1=1  "
                            If AgL.XNull(Dgl1.Item(Col1ItemCategory, Dgl1.CurrentCell.RowIndex).Tag) <> "" Then
                                mQry += " And (I.ItemCategory = '" & AgL.XNull(Dgl1.Item(Col1ItemCategory, Dgl1.CurrentCell.RowIndex).Tag) & "' 
                                        Or I.ItemCategory Is Null ) "
                            End If
                            Dgl1.AgHelpDataSet(Col1Size) = AgL.FillData(mQry, AgL.GCn)
                        End If
                    End If

                Case Col1RawMaterial
                    If e.KeyCode <> Keys.Enter Then
                        If Dgl1.AgHelpDataSet(Col1RawMaterial) Is Nothing Then
                            FCreateHelpRawMaterial(Dgl1.CurrentCell.RowIndex)
                        End If
                    End If

                Case Col1ReferenceNo
                    If e.KeyCode <> Keys.Enter Then
                        If Dgl1.AgHelpDataSet(Col1ReferenceNo) Is Nothing And mFirstInvoiceForSelectedParty = False Then
                            mQry = " SELECT H.DocID, IfNull(H.VendorDocNo, H.ManualRefNo) as [Party Doc No], H.ManualRefNo as [Invoice No], H.V_Date as [Invoice Date]  
                                    FROM PurchInvoice H  With (NoLock) 
                                    Left Join Voucher_Type Vt With (NoLock) On H.V_Type = Vt.V_Type  
                                    Where H.Vendor = '" & DglMain.Item(Col1Value, rowVendor).Tag & "' 
                                    And Vt.NCat = '" & Ncat.PurchaseInvoice & "'  
                                    And H.V_Date <= " & AgL.Chk_Date(DglMain.Item(Col1Value, rowV_Date).Value) & "  
                                    And H.Div_Code = '" & TxtDivision.Tag & "' And H.Site_Code = '" & DglMain(Col1Value, rowSite_Code).Tag & "'"
                            DsTemp = AgL.FillData(mQry, AgL.GCn)
                            If DsTemp.Tables(0).Rows.Count > 0 Then
                                Dgl1.AgHelpDataSet(Col1ReferenceNo) = DsTemp
                            Else
                                Dgl1.AgHelpDataSet(Col1ReferenceNo) = Nothing
                            End If
                        End If
                    End If

                Case Col1BaleNo
                    If e.KeyCode <> Keys.Enter Then
                        If Dgl1.AgHelpDataSet(Col1BaleNo) Is Nothing Then
                            If Dgl2.Item(Col1Value, rowBtnTransportDetail).Tag IsNot Nothing Then
                                If AgL.XNull(CType(Dgl2.Item(Col1Value, rowBtnTransportDetail).Tag, FrmPurchaseInvoiceHeader).Dgl1.Item(FrmPurchaseInvoiceHeader.Col1Value, FrmPurchaseInvoiceHeader.rowFill).Tag) <> "" Then
                                    mQry = " SELECT Code, LrBaleNo FROM LrBale WHERE GenDocID = '" & AgL.XNull(CType(Dgl2.Item(Col1Value, rowBtnTransportDetail).Tag, FrmPurchaseInvoiceHeader).Dgl1.Item(FrmPurchaseInvoiceHeader.Col1Value, FrmPurchaseInvoiceHeader.rowFill).Tag) & "'  "
                                    Dgl1.AgHelpDataSet(Col1BaleNo) = AgL.FillData(mQry, AgL.GCn)
                                End If
                            End If
                        End If
                    End If

                Case Col1Unit
                    If Dgl1.AgHelpDataSet(Col1Unit) Is Nothing Then
                        mQry = " SELECT Code, Code AS Description FROM Unit  With (NoLock) "
                        Dgl1.AgHelpDataSet(Col1Unit) = AgL.FillData(mQry, AgL.GCn)
                    End If

                Case Col1StockUnit
                    If Dgl1.AgHelpDataSet(Col1StockUnit) Is Nothing Then
                        mQry = " SELECT Code, Code AS Description FROM Unit  With (NoLock) "
                        Dgl1.AgHelpDataSet(Col1StockUnit) = AgL.FillData(mQry, AgL.GCn)
                    End If

                Case Col1Godown
                    If e.KeyCode <> Keys.Enter Then
                        If Dgl1.AgHelpDataSet(Col1Godown) Is Nothing Then
                            mQry = "SELECT Sg.SubCode As Code, Sg.Name 
                                    From SubGroup Sg  With (NoLock) 
                                    Where Sg.SubgroupType ='" & SubgroupType.Godown & "' "
                            Dgl1.AgHelpDataSet(Col1Godown) = AgL.FillData(mQry, AgL.GCn)
                        End If
                    End If

                Case Col1LotNo
                    If ClsMain.IsScopeOfWorkContains(IndustryType.KiranaIndustry) Then
                        If e.KeyCode <> Keys.Enter Then
                            If Dgl1.AgHelpDataSet(Col1LotNo) Is Nothing Then
                                mQry = "SELECT I.Description As Code, I.Description As Description
                                    From Item I With (NoLock) 
                                    Where I.V_Type ='" & ItemV_Type.Lot & "' "
                                Dgl1.AgHelpDataSet(Col1LotNo) = AgL.FillData(mQry, AgL.GCn)
                            End If
                        End If
                    End If
            End Select

            'If e.KeyCode = Keys.Delete Then
            '    Select Case Dgl1.Columns(Dgl1.CurrentCell.ColumnIndex).Name
            '        Case Col1ItemCategory
            '            Dgl1(Col1Value, Dgl1.CurrentCell.RowIndex).Value = ""
            '            Dgl1(Col1Value, Dgl1.CurrentCell.RowIndex).Tag = ""
            '            Validating_ItemCategory(Dgl1.CurrentCell.ColumnIndex, Dgl1.CurrentCell.RowIndex)
            '        Case Else
            '            Dgl1(Col1Value, Dgl1.CurrentCell.RowIndex).Value = ""
            '            Dgl1(Col1Value, Dgl1.CurrentCell.RowIndex).Tag = ""
            '    End Select
            'End If

        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub
    Private Sub FCreateHelpItemFromPurchaseOrder(RowIndex As Integer)
        Dim strCond As String = ""
        If DtV_TypeSettings.Rows.Count > 0 Then
            If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) <> "" Then
                If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")).ToString.Substring(0, 1) = "+" Then
                    strCond += " And CharIndex('+' || I.ItemType,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) & "') > 0 "
                ElseIf AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")).ToString.Substring(0, 1) = "-" Then
                    strCond += " And CharIndex('-' || I.ItemType,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) & "') <= 0 "
                End If
            End If

            If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemGroup")) <> "" Then
                If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemGroup")).ToString.Substring(0, 1) = "+" Then
                    strCond += " And CharIndex('+' || I.ItemGroup,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemGroup")) & "') > 0 "
                ElseIf AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemGroup")).ToString.Substring(0, 1) = "-" Then
                    strCond += " And CharIndex('-' || I.ItemGroup,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemGroup")) & "') <= 0 "
                End If
            End If

            If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_Item")) <> "" Then
                If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_Item")).ToString.Substring(0, 1) = "+" Then
                    strCond += " And CharIndex('+' || I.Code,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_Item")) & "') > 0 "
                ElseIf AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_Item")).ToString.Substring(0, 1) = "+" Then
                    strCond += " And CharIndex('-' || I.Code,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_Item")) & "') <= 0 "
                End If
            End If

            If Dgl1.Item(Col1ItemCategory, RowIndex).Value <> "" And Dgl1.Columns(Col1ItemCategory).Visible Then
                strCond += " And I.ItemCategory = '" & Dgl1.Item(Col1ItemCategory, RowIndex).Tag & "' "
            End If

            If Dgl1.Item(Col1ItemGroup, RowIndex).Value <> "" And Dgl1.Columns(Col1ItemGroup).Visible Then
                strCond += " And I.ItemGroup = '" & Dgl1.Item(Col1ItemGroup, RowIndex).Tag & "' "
            End If
        End If


        Dim bItemGroupPurchOrder As Integer = 0
        If Dgl1.Item(Col1PurchaseInvoice, RowIndex).Tag <> "" Then
            bItemGroupPurchOrder = AgL.VNull(AgL.Dman_Execute(" Select Count(*) As cnt
                    From PurchInvoiceDetail L 
                    LEFT JOIN Item I On L.Item = I.Code 
                    Where L.DocId = '" & Dgl1.Item(Col1PurchaseInvoice, RowIndex).Tag & "' And I.V_Type = 'IG'", AgL.GCn).ExecuteScalar())
        End If

        If Dgl1.Item(Col1PurchaseInvoice, RowIndex).Tag <> "" Then
            If bItemGroupPurchOrder > 0 Then
                mQry = "SELECT I.Code As Code,  Max(I.Description) As Description 
                FROM (" & FGetPurchaseOrderBalanceQry(CType(AgL.VNull(FGetSettings(SettingFields.ContraBalanceOnValueYN, SettingType.General)), Boolean),
                                    DglMain.Item(Col1Value, rowVendor).Tag) & ") VPurchOrderBalance
                LEFT JOIN PurchOrderDetail L ON VPurchOrderBalance.PurchOrder = L.DocID And VPurchOrderBalance.PurchOrderSr = L.Sr 
                LEFT JOIN ItemGroup Ig On L.Item = Ig.Code 
                LEFT JOIN Item I ON Ig.Code = I.ItemGroup 
                LEFT JOIN Unit U  With (NoLock) On I.Unit = U.Code 
                LEFT JOIN Unit U1  With (NoLock) On I.DealUnit = U1.Code 
                WHERE 1=1 
                And I.Code Is Not Null " & strCond
                If Dgl1.Item(Col1PurchaseInvoice, RowIndex).Tag <> "" Then
                    mQry += " And L.DocId = '" & Dgl1.Item(Col1PurchaseInvoice, RowIndex).Tag & "' "
                End If
                mQry += " Group By I.Code "
            Else
                mQry = "SELECT Max(I.Code) As Code,  Max(I.Description) As Description
                FROM (" & FGetPurchaseOrderBalanceQry(CType(AgL.VNull(FGetSettings(SettingFields.ContraBalanceOnValueYN, SettingType.General)), Boolean),
                                    DglMain.Item(Col1Value, rowVendor).Tag) & ") VPurchOrderBalance
                LEFT JOIN PurchOrderDetail L ON VPurchOrderBalance.PurchOrder = L.DocID And VPurchOrderBalance.PurchOrderSr = L.Sr 
                LEFT JOIN Item I ON L.Item = I.Code
                LEFT JOIN Unit U  With (NoLock) On I.Unit = U.Code 
                LEFT JOIN Unit U1  With (NoLock) On I.DealUnit = U1.Code 
                WHERE 1=1 
                And I.Code Is Not Null " & strCond
                If Dgl1.Item(Col1PurchaseInvoice, RowIndex).Tag <> "" Then
                    mQry += " And L.DocId = '" & Dgl1.Item(Col1PurchaseInvoice, RowIndex).Tag & "' "
                End If
                mQry += " Group By L.DocId, L.Sr "
            End If

            mQry = mQry + " UNION ALL "
        Else
            mQry = ""
        End If
        mQry = mQry + " SELECT I.Code As Code,  I.Description As Description
                FROM Item I 
                LEFT JOIN Unit U  With (NoLock) On I.Unit = U.Code 
                LEFT JOIN Unit U1  With (NoLock) On I.DealUnit = U1.Code 
                WHERE 1=1 
                And I.ItemType = '" & ItemTypeCode.ServiceProduct & "'
                And I.V_Type = 'Item' "
        Dgl1.AgHelpDataSet(Col1Item) = AgL.FillData(mQry, AgL.GcnRead)
    End Sub
    Private Sub FCreateHelpPurchaseOrder()
        Dim strCond As String = ""

        mQry = "SELECT H.DocID, Max(H.V_Type || '-' || H.ManualRefNo) AS OrderNo, Sum(VOrderBalance.BalanceAmount) AS OrderBalanceAmount
                    FROM (" & FGetPurchaseOrderBalanceQry(CType(AgL.VNull(FGetSettings(SettingFields.ContraBalanceOnValueYN, SettingType.General)), Boolean),
                                    DglMain.Item(Col1Value, rowVendor).Tag) & " ) AS VOrderBalance
                LEFT JOIN PurchOrder H ON VOrderBalance.PurchOrder = H.DocID
                GROUP BY H.DocID "
        Dgl1.AgHelpDataSet(Col1PurchaseInvoice) = AgL.FillData(mQry, AgL.GCn)
    End Sub
    Private Function FGetPurchaseOrderBalanceQry(Optional bPurchaseOrderContraBalanceOnValueYN As Boolean = False,
                                               Optional bParty As String = "") As String
        mQry = " SELECT VOrder.PurchOrder, VOrder.PurchOrderSr, IsNull(VOrder.OrderQty,0) - IsNull(VBill.BillQty,0) AS BalanceQty,
                IsNull(VOrder.OrderAmount,0) - IsNull(VBill.BillAmount,0) AS BalanceAmount
                FROM (
	                SELECT L.PurchOrder, L.PurchOrderSr, Sum(L.Qty) AS OrderQty, Sum(L.Amount) AS OrderAmount
	                FROM PurchOrder H 
	                LEFT JOIN PurchOrderDetail L ON H.DocID = L.DocID
                    Left Join Voucher_Type Vt ON H.V_Type = Vt.V_Type
                    WHERE Vt.NCat = '" & Ncat.PurchaseOrder & "' "

        If bParty <> "" Then mQry += " And H.Vendor = '" & bParty & "' "

        mQry += " Group BY L.PurchOrder, L.PurchOrderSr
                ) AS VOrder
                LEFT JOIN (
	                SELECT L.PurchOrder, L.PurchOrderSr, Sum(L.Qty) AS BillQty, Sum(L.Amount) AS BillAmount
	                FROM PurchBillDetail L 
	                GROUP BY L.PurchOrder, L.PurchOrderSr	
                ) AS VBill ON VOrder.PurchOrder = VBill.PurchOrder AND VOrder.PurchOrderSr = VBill.PurchOrderSr 
                Where 1=1 "



        If bPurchaseOrderContraBalanceOnValueYN = True Then
            mQry += " And IsNull(VOrder.OrderAmount,0) - IsNull(VBill.BillAmount,0) > 0 "
        Else
            mQry += " And IsNull(VOrder.OrderQty,0) - IsNull(VBill.BillQty,0) > 0 "
        End If

        FGetPurchaseOrderBalanceQry = mQry
    End Function

    'Private Sub Validating_ItemCode(ByVal mColumn As Integer, ByVal mRow As Integer, ByVal DrTemp As DataRow())
    '    Dim DtTemp As DataTable = Nothing
    '    Dim dtInvoices As DataTable
    '    Dim dtItem As DataTable
    '    Try
    '        If Dgl1.Item(mColumn, mRow).Value.ToString.Trim = "" Or Dgl1.AgSelectedValue(mColumn, mRow).ToString.Trim = "" Then
    '            Dgl1.Item(Col1Unit, mRow).Value = ""
    '            Dgl1.Item(Col1Dimension1, mRow).Value = ""
    '            Dgl1.Item(Col1Dimension1, mRow).Tag = ""
    '            Dgl1.Item(Col1Dimension2, mRow).Value = ""
    '            Dgl1.Item(Col1Dimension2, mRow).Tag = ""
    '        Else
    '            If DrTemp IsNot Nothing Then
    '                Dgl1.Item(Col1Item, mRow).Tag = AgL.XNull(DrTemp(0)("Code"))
    '                Dgl1.Item(Col1Item, mRow).Value = AgL.XNull(DrTemp(0)("Description"))
    '                Dgl1.Item(Col1ItemCode, mRow).Tag = AgL.XNull(DrTemp(0)("Code"))
    '                Dgl1.Item(Col1ItemCode, mRow).Value = AgL.XNull(DrTemp(0)("ManualCode"))
    '                Call FCheckDuplicate(mRow)
    '                Dgl1.Item(Col1Specification, mRow).Value = AgL.XNull(DrTemp(0)("Specification"))
    '                Dgl1.Item(Col1Unit, mRow).Value = AgL.XNull(DrTemp(0)("Unit"))
    '                Dgl1.Item(Col1Unit, mRow).Tag = AgL.XNull(DrTemp(0)("showdimensiondetailInPurchase"))
    '                Dgl1.Item(Col1Rate, mRow).Value = AgL.VNull(DrTemp(0)("Rate"))
    '                Dgl1.Item(Col1SalesTaxGroup, mRow).Tag = AgL.XNull(DrTemp(0)("SalesTaxPostingGroup"))
    '                Dgl1.Item(Col1SalesTaxGroup, mRow).Tag = AgL.XNull(DrTemp(0)("SalesTaxPostingGroup"))
    '                If AgL.StrCmp(Dgl1.AgSelectedValue(Col1SalesTaxGroup, mRow), "") Then
    '                    Dgl1.Item(Col1SalesTaxGroup, mRow).Tag = AgL.XNull(AgL.PubDtEnviro.Rows(0)("Default_SalesTaxGroupItem"))
    '                    Dgl1.Item(Col1SalesTaxGroup, mRow).Tag = AgL.XNull(AgL.PubDtEnviro.Rows(0)("Default_SalesTaxGroupItem"))
    '                End If
    '                'Dgl1.Item(Col1Dimension1, mRow).Tag = AgL.XNull(Dgl1.AgDataRow.Cells("Dimension1").Value)
    '                'Dgl1.Item(Col1Dimension1, mRow).Value = AgL.XNull(Dgl1.AgDataRow.Cells("" & ClsMain.FGetDimension1Caption() & "").Value)
    '                'Dgl1.Item(Col1Dimension2, mRow).Tag = AgL.XNull(Dgl1.AgDataRow.Cells("Dimension2").Value)
    '                'Dgl1.Item(Col1Dimension2, mRow).Value = AgL.XNull(Dgl1.AgDataRow.Cells("" & ClsMain.FGetDimension2Caption() & "").Value)

    '                Dgl1.Item(Col1UnitMultiplier, mRow).Value = AgL.VNull(DrTemp(0)("UnitMultiplier"))
    '                Dgl1.Item(Col1DealUnit, mRow).Value = AgL.XNull(DrTemp(0)("DealUnit"))
    '                Dgl1.Item(Col1QtyDecimalPlaces, mRow).Value = AgL.VNull(DrTemp(0)("QtyDecimalPlaces"))
    '                Dgl1.Item(Col1DealDecimalPlaces, mRow).Value = AgL.VNull(DrTemp(0)("DealDecimalPlaces"))

    '                'Dgl1.Item(Col1DocQty, mRow).Value = AgL.VNull(DrTemp(0)("Bal.DocQty"))
    '                'Dgl1.Item(Col1FreeQty, mRow).Value = AgL.VNull(DrTemp(0)("Bal.FreeQty"))
    '                'Dgl1.Item(Col1Qty, mRow).Value = AgL.VNull(DrTemp(0)("Bal.Qty"))
    '            Else
    '                If Dgl1.AgDataRow IsNot Nothing Then
    '                    Dgl1.Item(Col1Item, mRow).Tag = AgL.XNull(Dgl1.AgDataRow.Cells("Code").Value)
    '                    Dgl1.Item(Col1Item, mRow).Value = AgL.XNull(Dgl1.AgDataRow.Cells("Description").Value)
    '                    Dgl1.Item(Col1ItemCode, mRow).Tag = AgL.XNull(Dgl1.AgDataRow.Cells("Code").Value)
    '                    Dgl1.Item(Col1ItemCode, mRow).Value = AgL.XNull(Dgl1.AgDataRow.Cells("ManualCode").Value)
    '                    Call FCheckDuplicate(mRow)
    '                    Dgl1.Item(Col1Specification, mRow).Value = AgL.XNull(Dgl1.AgDataRow.Cells("Specification").Value)
    '                    Dgl1.Item(Col1Unit, mRow).Value = AgL.XNull(Dgl1.AgDataRow.Cells("Unit").Value)
    '                    Dgl1.Item(Col1Unit, mRow).Tag = AgL.XNull(Dgl1.AgDataRow.Cells("showdimensiondetailInPurchase").Value)
    '                    Dgl1.Item(Col1Rate, mRow).Value = AgL.XNull(Dgl1.AgDataRow.Cells("Rate").Value)

    '                    Dgl1.Item(Col1SalesTaxGroup, mRow).Tag = AgL.XNull(Dgl1.AgDataRow.Cells("SalesTaxPostingGroup").Value)
    '                    Dgl1.Item(Col1SalesTaxGroup, mRow).Value = AgL.XNull(Dgl1.AgDataRow.Cells("SalesTaxPostingGroup").Value)
    '                    If AgL.StrCmp(Dgl1.Item(Col1SalesTaxGroup, mRow).Tag, "") Then
    '                        Dgl1.Item(Col1SalesTaxGroup, mRow).Tag = AgL.XNull(AgL.PubDtEnviro.Rows(0)("Default_SalesTaxGroupItem"))
    '                        Dgl1.Item(Col1SalesTaxGroup, mRow).Value = AgL.XNull(AgL.PubDtEnviro.Rows(0)("Default_SalesTaxGroupItem"))
    '                    End If
    '                    Dgl1.Item(Col1UnitMultiplier, mRow).Value = AgL.XNull(Dgl1.AgDataRow.Cells("UnitMultiplier").Value)
    '                    Dgl1.Item(Col1DealUnit, mRow).Value = AgL.XNull(Dgl1.AgDataRow.Cells("DealUnit").Value)
    '                    Dgl1.Item(Col1QtyDecimalPlaces, mRow).Value = AgL.VNull(Dgl1.AgDataRow.Cells("QtyDecimalPlaces").Value)
    '                    Dgl1.Item(Col1DealDecimalPlaces, mRow).Value = AgL.VNull(Dgl1.AgDataRow.Cells("DealDecimalPlaces").Value)


    '                    If Val(Dgl1.Item(Col1Rate, mRow).Value) = 0 Then
    '                        If AgL.PubServerName = "" Then
    '                            mQry = " Select L.Rate, L.MRP From PurchInvoiceDetail L  With (NoLock) LEFT JOIN PurchInvoice H  With (NoLock) ON L.DocId = H.DocId Where L.Item = '" & Dgl1.Item(Col1Item, mRow).Tag & "' Order By H.V_Date Desc Limit 1 "
    '                        Else
    '                            mQry = " Select Top 1 L.Rate, L.MRP From PurchInvoiceDetail L  With (NoLock) LEFT JOIN PurchInvoice H ON L.DocId = H.DocId Where L.Item = '" & Dgl1.Item(Col1Item, mRow).Tag & "' Order By H.V_Date Desc  "
    '                        End If
    '                        DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)

    '                        If DtTemp.Rows.Count > 0 Then
    '                            Dgl1.Item(Col1MRP, mRow).Value = AgL.VNull(DtTemp.Rows(0)("MRP"))
    '                            Dgl1.Item(Col1Rate, mRow).Value = AgL.VNull(DtTemp.Rows(0)("Rate"))
    '                        End If
    '                    End If
    '                End If
    '            End If
    '        End If


    '        If Dgl1.Item(Col1Item, mRow).Value <> "" Then
    '            mQry = "Select I.ProfitMarginPer, I.ItemGroup as ItemGroupCode, IG.Description as ItemGroupName, 
    '                    I.ItemCategory as ItemCategoryCode, IC.Description as ItemCategoryName, 
    '                    IG.Default_DiscountPerPurchase,IG.Default_AdditionalDiscountPerPurchase,IG.Default_AdditionPerPurchase,
    '                    I.ItemType, IT.Name as ItemTypeName 
    '                    From Item I  With (NoLock)
    '                    Left Join ItemGroup IG  With (NoLock) on I.ItemGroup = IG.Code
    '                    Left Join ItemCategory IC  With (NoLock) on I.ItemCategory = IC.Code
    '                    Left Join ItemType IT With (NoLock) On I.ItemType = IT.Code
    '                    Where I.Code = '" & AgL.XNull(Dgl1.Item(Col1Item, mRow).Tag) & "' "
    '            DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)

    '            If DtTemp.Rows.Count > 0 Then
    '                Dgl1.Item(Col1ProfitMarginPer, mRow).Value = AgL.VNull(DtTemp.Rows(0)("ProfitMarginPer"))
    '                Dgl1.Item(Col1ItemType, mRow).Tag = AgL.XNull(DtTemp.Rows(0)("ItemType"))
    '                Dgl1.Item(Col1ItemType, mRow).Value = AgL.XNull(DtTemp.Rows(0)("ItemTypeName"))
    '                Dgl1.Item(Col1ItemCategory, mRow).Tag = AgL.XNull(DtTemp.Rows(0)("ItemCategoryCode"))
    '                Dgl1.Item(Col1ItemCategory, mRow).Value = AgL.XNull(DtTemp.Rows(0)("ItemCategoryName"))
    '                Dgl1.Item(Col1ItemGroup, mRow).Tag = AgL.XNull(DtTemp.Rows(0)("ItemGroupCode"))
    '                Dgl1.Item(Col1ItemGroup, mRow).Value = AgL.XNull(DtTemp.Rows(0)("ItemGroupName"))
    '                Dgl1.Item(Col1DefaultDiscountPer, mRow).Value = AgL.VNull(DtTemp.Rows(0)("Default_DiscountPerPurchase"))
    '                Dgl1.Item(Col1DefaultAdditionalDiscountPer, mRow).Value = AgL.VNull(DtTemp.Rows(0)("Default_AdditionalDiscountPerPurchase"))
    '                Dgl1.Item(Col1DefaultAdditionPer, mRow).Value = AgL.VNull(DtTemp.Rows(0)("Default_AdditionPerPurchase"))
    '            End If
    '        End If

    '        Dim DrItemTypeSetting As DataRow
    '        DrItemTypeSetting = FItemTypeSettings(Dgl1(Col1ItemType, mRow).Tag)
    '        Dgl1(Col1DiscountCalculationPattern, mRow).Value = AgL.XNull(DrItemTypeSetting("DiscountCalculationPatternPurchase"))
    '        Dgl1(Col1AdditionalDiscountCalculationPattern, mRow).Value = AgL.XNull(DrItemTypeSetting("AdditionalDiscountCalculationPatternPurchase"))
    '        Dgl1(Col1AdditionCalculationPattern, mRow).Value = AgL.XNull(DrItemTypeSetting("AdditionCalculationPatternPurchase"))



    '        Dim strReturnTicked As String
    '        mFirstInvoiceForSelectedParty = False
    '        If LblV_Type.Tag = AgLibrary.ClsMain.agConstants.Ncat.PurchaseReturn Then
    '            strReturnTicked = FHPGD_PendingSaleChallan(Dgl1.Item(Col1Item, mRow).Tag)
    '            If strReturnTicked <> "" Then
    '                FillGridForSaleReturn(strReturnTicked, True)
    '            Else
    '                If MsgBox("No Invoice found to return for selected customer. Do you want to continue without invoice references?", vbYesNo) = MsgBoxResult.No Then
    '                    Dgl1.Rows(Dgl1.CurrentCell.RowIndex).Visible = False
    '                    strReturnTicked = "."
    '                    Dgl1.Rows.Add()
    '                Else
    '                    If Dgl1.CurrentCell.RowIndex = 0 Then

    '                        If AgL.PubServerName = "" Then
    '                            mQry = "Select IfNull(H.VendorDocNo,'') as ManualRefNo, H.DocID From PurchInvoice H  With (NoLock) Left Join Voucher_Type Vt With (NoLock) On H.V_Type= Vt.V_Type Where Vt.NCat='" & Ncat.PurchaseInvoice & "' And H.Vendor = '" & DglMain.Item(Col1Value, rowVendor).Tag & "' And H.V_Date > Date(H.V_Date,'-15 days') Order By H.V_Date Desc Limit 1"
    '                        Else
    '                            mQry = "Select Top 1 IfNull(H.VendorDocNo,'') as ManualRefNo, H.DocID From PurchInvoice H  With (NoLock)  Left Join Voucher_Type Vt With (NoLock) On H.V_Type= Vt.V_Type Where Vt.NCat='" & Ncat.PurchaseInvoice & "' And  H.Vendor = '" & DglMain.Item(Col1Value, rowVendor).Tag & "' And H.V_Date > DateAdd(D,-15,H.V_Date)  Order By H.V_Date Desc"
    '                        End If

    '                        dtInvoices = AgL.FillData(mQry, AgL.GcnRead).Tables(0)
    '                        If dtInvoices.Rows.Count > 0 Then
    '                            Dgl1.Item(Col1ReferenceDocID, mRow).Value = AgL.XNull(dtInvoices.Rows(0)("DocID"))
    '                            Dgl1.Item(Col1ReferenceNo, mRow).Value = AgL.XNull(dtInvoices.Rows(0)("ManualRefNo"))
    '                        Else
    '                            mFirstInvoiceForSelectedParty = True
    '                        End If
    '                    Else
    '                        Dgl1.Item(Col1ReferenceDocID, mRow).Value = AgL.XNull(Dgl1.Item(Col1ReferenceDocID, mRow - 1).Value)
    '                        Dgl1.Item(Col1ReferenceNo, mRow).Value = AgL.XNull(Dgl1.Item(Col1ReferenceNo, mRow - 1).Value)
    '                    End If
    '                    Dgl1.Item(Col1DocQty, mRow).Value = 1
    '                    Dgl1.Item(Col1Qty, mRow).Value = 1
    '                End If
    '            End If
    '        End If



    '        FSetSalesTaxGroupItemBasedOnRate(mRow)
    '        mQry = "Select * from ItemGroupPerson  With (NoLock) Where ItemCategory = '" & Dgl1.Item(Col1ItemCategory, mRow).Tag & "' 
    '                    And ItemGroup  = '" & Dgl1.Item(Col1ItemGroup, mRow).Tag & "'
    '                    And Person  = '" & DglMain.Item(Col1Value, rowVendor).Tag & "'
    '                   "
    '        dtItem = AgL.FillData(mQry, AgL.GCn).tables(0)
    '        If dtItem.Rows.Count > 0 Then
    '            If AgL.VNull(dtItem.Rows(0)("DiscountPer")) > 0 Then
    '                If Dgl1(Col1DiscountCalculationPattern, mRow).Value.ToString.ToUpper = AgL.XNull(dtItem.Rows(0)("DiscountCalculationPattern")).toupper() Or Dgl1(Col1DiscountCalculationPattern, mRow).Value.ToString.ToUpper = "" Then
    '                    Dgl1.Item(Col1PersonalDiscountPer, mRow).Value = AgL.VNull(dtItem.Rows(0)("DiscountPer"))
    '                Else
    '                    MsgBox("Discount Calculation Pattern is changes since last invoice.")
    '                End If
    '            End If

    '            If AgL.VNull(dtItem.Rows(0)("AdditionalDiscountPer")) > 0 Then
    '                If Dgl1(Col1AdditionalDiscountCalculationPattern, mRow).Value.ToString.ToUpper = AgL.XNull(dtItem.Rows(0)("AdditionalDiscountCalculationPattern")).toupper() Or Dgl1(Col1AdditionalDiscountCalculationPattern, mRow).Value.ToString.ToUpper = "" Then
    '                    Dgl1.Item(Col1PersonalAdditionalDiscountPer, mRow).Value = AgL.VNull(dtItem.Rows(0)("AdditionalDiscountPer"))
    '                Else
    '                    MsgBox("Additional Discount Calculation Pattern is changes since last invoice.")
    '                End If
    '            End If

    '            If AgL.VNull(dtItem.Rows(0)("AdditionPer")) > 0 Then
    '                If Dgl1(Col1AdditionCalculationPattern, mRow).Value.ToString.ToUpper = AgL.XNull(dtItem.Rows(0)("AdditionCalculationPattern")).toupper() Or Dgl1(Col1AdditionCalculationPattern, mRow).Value.ToString.ToUpper = "" Then
    '                    Dgl1.Item(Col1PersonalAdditionPer, mRow).Value = AgL.VNull(dtItem.Rows(0)("AdditionPer"))
    '                Else
    '                    MsgBox("Additional Discount Calculation Pattern is changes since last invoice.")
    '                End If
    '            End If
    '        End If



    '        If AgL.XNull(DtV_TypeSettings.Rows(0)("DiscountSuggestionPattern")).ToUpper() = DiscountSuggestPattern.FillAutomatically.ToUpper Then
    '            If Val(Dgl1.Item(Col1PersonalDiscountPer, mRow).Value) <> 0 Then
    '                Dgl1.Item(Col1DiscountPer, mRow).Value = Format(Val(Dgl1.Item(Col1PersonalDiscountPer, mRow).Value), "0.000")
    '                Dgl1.Item(Col1AdditionalDiscountPer, mRow).Value = Format(Val(Dgl1.Item(Col1PersonalAdditionalDiscountPer, mRow).Value), "0.000")
    '                Dgl1.Item(Col1AdditionPer, mRow).Value = Format(Val(Dgl1.Item(Col1PersonalAdditionPer, mRow).Value), "0.000")
    '            Else
    '                Dgl1.Item(Col1DiscountPer, mRow).Value = Format(Val(Dgl1.Item(Col1DefaultDiscountPer, mRow).Value), "0.000")
    '                Dgl1.Item(Col1AdditionalDiscountPer, mRow).Value = Format(Val(Dgl1.Item(Col1DefaultAdditionalDiscountPer, mRow).Value), "0.000")
    '                Dgl1.Item(Col1AdditionPer, mRow).Value = Format(Val(Dgl1.Item(Col1DefaultAdditionPer, mRow).Value), "0.000")
    '            End If
    '        End If



    '        If mRow > 1 Then
    '            If Dgl1.Item(Col1LRNo, mRow - 1).Value <> "" Then
    '                Dgl1.Item(Col1LRNo, mRow).Value = Dgl1.Item(Col1LRNo, mRow - 1).Value
    '                Dgl1.Item(Col1LRDate, mRow).Value = Dgl1.Item(Col1LRDate, mRow - 1).Value
    '            End If
    '        End If

    '        Dgl1.Item(Col1DocQty, mRow).Tag = Nothing
    '        If (Dgl1.Item(Col1Unit, mRow).Tag) Then
    '            Dgl1.Item(Col1DocQty, mRow).Style.ForeColor = Color.Blue
    '            ShowPurchInvoiceDimensionDetail(mRow)
    '        End If


    '    Catch ex As Exception
    '        MsgBox(ex.Message & " On Validating_Item Function ")
    '    End Try
    'End Sub


    Private Sub Validating_ItemCode(ItemCode As String, ByVal mColumn As Integer, ByVal mRow As Integer)
        Dim dtInvoices As DataTable
        Dim dtItem As DataTable
        Dim StrReturnTicked As String = ""
        Try
            mQry = "Select I.Code, I.Description, I.ManualCode, I.Unit, U.DecimalPlaces as QtyDecimalPlaces, 
                    Case When IfNull(U.ShowDimensionDetailInPurchase,0) = 1 Or IfNull(Ic.ShowDimensionDetailInPurchase,0) = 1 Then 1
                            Else 0 End As ShowDimensionDetailInPurchase, 
                    I.Specification, I.GenDocId As ItemGenDocId, I.ItemType, It.Name As ItemTypeName
                    , IfNull(I.ItemCategory,I.Code) as ItemCategory, IC.Description as ItemCategoryName
                    , I.ItemGroup, IG.Description as ItemGroupName
                    , I.Dimension1, D1.Description as Dimension1Name
                    , I.Dimension2, D2.Description as Dimension2Name
                    , I.Dimension3, D3.Description as Dimension3Name
                    , I.Dimension4, D4.Description as Dimension4Name
                    , I.Size, Size.Description as SizeName,
                    I.ProfitMarginPer, IG.Default_DiscountPerPurchase, 
                    IG.Default_AdditionalDiscountPerPurchase, IG.Default_AdditionPerPurchase,
                    I.PurchaseRate as Rate, I.SalesTaxPostingGroup,
                    I.DealQty As UnitMultiplier, I.DealUnit, U1.DecimalPlaces As DealDecimalPlaces,
                    I.ProfitMarginPer, IG.Default_DiscountPerPurchase, IG.Default_AdditionalDiscountPerPurchase, 
                    IG.Default_AdditionPerPurchase, I.V_Type As ItemV_Type 
                    From Item I  With (NoLock)
                    Left Join ItemType It On I.ItemType = It.Code
                    Left Join Item IC With (NoLock) On IfNull(I.ItemCategory,I.Code) = IC.Code
                    Left Join Item IG With (NoLock) On I.ItemGroup = IG.Code
                    Left Join Item D1 With (NoLock) On I.Dimension1 = D1.Code
                    Left Join Item D2 With (NoLock) On I.Dimension2 = D2.Code
                    Left Join Item D3 With (NoLock) On I.Dimension3 = D3.Code
                    Left Join Item D4 With (NoLock) On I.Dimension4 = D1.Code
                    Left Join Item Size With (NoLock) On I.Size = Size.Code
                    Left Join Unit U  With (NoLock) On I.Unit = U.Code 
                    LEFT JOIN Unit U1  With (NoLock) On I.DealUnit = U1.Code 
                    Where I.Code ='" & ItemCode & "'"
            dtItem = AgL.FillData(mQry, AgL.GCn).Tables(0)
            If dtItem.Rows.Count > 0 Then
                Dgl1.Item(Col1ItemType, mRow).Tag = AgL.XNull(dtItem.Rows(0)("ItemType"))
                Dgl1.Item(Col1ItemType, mRow).Value = AgL.XNull(dtItem.Rows(0)("ItemTypeName"))
                Dgl1.Item(Col1ItemCategory, mRow).Tag = AgL.XNull(dtItem.Rows(0)("ItemCategory"))
                Dgl1.Item(Col1ItemCategory, mRow).Value = AgL.XNull(dtItem.Rows(0)("ItemCategoryName"))
                If AgL.XNull(dtItem.Rows(0)("ItemGroup")) <> "" Then
                    Dgl1.Item(Col1ItemGroup, mRow).Tag = AgL.XNull(dtItem.Rows(0)("ItemGroup"))
                    Dgl1.Item(Col1ItemGroup, mRow).Value = AgL.XNull(dtItem.Rows(0)("ItemGroupName"))
                End If
                Dgl1.Item(Col1Item, mRow).Tag = AgL.XNull(dtItem.Rows(0)("Code"))

                If AgL.VNull(Dgl1.Item(Col1IsNewItemAllowedPurch, mRow).Value) <> 0 Then
                    If AgL.XNull(dtItem.Rows(0)("ItemGenDocId")) = mSearchCode Then
                        'Dgl1.Item(Col1Item, mRow).Value = AgL.XNull(dtItem.Rows(0)("Specification"))
                    Else
                        Dgl1.Item(Col1Item, mRow).Value = AgL.XNull(dtItem.Rows(0)("Description"))
                    End If
                Else
                    Dgl1.Item(Col1Item, mRow).Value = AgL.XNull(dtItem.Rows(0)("Description"))
                End If

                Dgl1.Item(Col1ItemCode, mRow).Tag = AgL.XNull(dtItem.Rows(0)("Code"))
                Dgl1.Item(Col1ItemCode, mRow).Value = AgL.XNull(dtItem.Rows(0)("ManualCode"))



                Dgl1.Item(Col1ItemCode, mRow).Tag = AgL.XNull(dtItem.Rows(0)("Code"))
                Dgl1.Item(Col1ItemCode, mRow).Value = AgL.XNull(dtItem.Rows(0)("ManualCode"))



                Dgl1.Item(Col1MItemCategory, mRow).Tag = AgL.XNull(dtItem.Rows(0)("ItemCategory"))
                Dgl1.Item(Col1MItemCategory, mRow).Value = AgL.XNull(dtItem.Rows(0)("ItemCategoryName"))
                Dgl1.Item(Col1MItemGroup, mRow).Tag = AgL.XNull(dtItem.Rows(0)("ItemGroup"))
                Dgl1.Item(Col1MItemGroup, mRow).Value = AgL.XNull(dtItem.Rows(0)("ItemGroupName"))
                Dgl1.Item(Col1MItemSpecification, mRow).Tag = AgL.XNull(dtItem.Rows(0)("Specification"))
                Dgl1.Item(Col1MDimension1, mRow).Tag = AgL.XNull(dtItem.Rows(0)("Dimension1"))
                Dgl1.Item(Col1MDimension1, mRow).Value = AgL.XNull(dtItem.Rows(0)("Dimension1Name"))
                Dgl1.Item(Col1MDimension2, mRow).Tag = AgL.XNull(dtItem.Rows(0)("Dimension2"))
                Dgl1.Item(Col1MDimension2, mRow).Value = AgL.XNull(dtItem.Rows(0)("Dimension2Name"))
                Dgl1.Item(Col1MDimension3, mRow).Tag = AgL.XNull(dtItem.Rows(0)("Dimension3"))
                Dgl1.Item(Col1MDimension3, mRow).Value = AgL.XNull(dtItem.Rows(0)("Dimension3Name"))
                Dgl1.Item(Col1MDimension4, mRow).Tag = AgL.XNull(dtItem.Rows(0)("Dimension4"))
                Dgl1.Item(Col1MDimension4, mRow).Value = AgL.XNull(dtItem.Rows(0)("Dimension4Name"))
                Dgl1.Item(Col1MSize, mRow).Tag = AgL.XNull(dtItem.Rows(0)("Size"))
                Dgl1.Item(Col1MSize, mRow).Value = AgL.XNull(dtItem.Rows(0)("SizeName"))

                If AgL.XNull(dtItem.Rows(0)("ItemV_Type")) = ItemV_Type.SKU Then
                    Dgl1.Item(Col1ItemCategory, mRow).Tag = AgL.XNull(dtItem.Rows(0)("ItemCategory"))
                    Dgl1.Item(Col1ItemCategory, mRow).Value = AgL.XNull(dtItem.Rows(0)("ItemCategoryName"))
                    Dgl1.Item(Col1ItemGroup, mRow).Tag = AgL.XNull(dtItem.Rows(0)("ItemGroup"))
                    Dgl1.Item(Col1ItemGroup, mRow).Value = AgL.XNull(dtItem.Rows(0)("ItemGroupName"))
                    Dgl1.Item(Col1Dimension1, mRow).Tag = AgL.XNull(dtItem.Rows(0)("Dimension1"))
                    Dgl1.Item(Col1Dimension1, mRow).Value = AgL.XNull(dtItem.Rows(0)("Dimension1Name"))
                    Dgl1.Item(Col1Dimension2, mRow).Tag = AgL.XNull(dtItem.Rows(0)("Dimension2"))
                    Dgl1.Item(Col1Dimension2, mRow).Value = AgL.XNull(dtItem.Rows(0)("Dimension2Name"))
                    Dgl1.Item(Col1Dimension3, mRow).Tag = AgL.XNull(dtItem.Rows(0)("Dimension3"))
                    Dgl1.Item(Col1Dimension3, mRow).Value = AgL.XNull(dtItem.Rows(0)("Dimension3Name"))
                    Dgl1.Item(Col1Dimension4, mRow).Tag = AgL.XNull(dtItem.Rows(0)("Dimension4"))
                    Dgl1.Item(Col1Dimension4, mRow).Value = AgL.XNull(dtItem.Rows(0)("Dimension4Name"))
                    Dgl1.Item(Col1Size, mRow).Tag = AgL.XNull(dtItem.Rows(0)("Size"))
                    Dgl1.Item(Col1Size, mRow).Value = AgL.XNull(dtItem.Rows(0)("SizeName"))
                End If


                Call FCheckDuplicate(mRow)
                Dgl1.Item(Col1Specification, mRow).Value = AgL.XNull(dtItem.Rows(0)("Specification"))
                Dgl1.Item(Col1Unit, mRow).Value = AgL.XNull(dtItem.Rows(0)("Unit"))
                Dgl1.Item(Col1Unit, mRow).Tag = AgL.XNull(dtItem.Rows(0)("showdimensiondetailInPurchase"))
                Dgl1.Item(Col1Rate, mRow).Value = AgL.VNull(dtItem.Rows(0)("Rate"))
                Dgl1.Item(Col1SalesTaxGroup, mRow).Value = AgL.XNull(dtItem.Rows(0)("SalesTaxPostingGroup"))
                Dgl1.Item(Col1SalesTaxGroup, mRow).Tag = AgL.XNull(dtItem.Rows(0)("SalesTaxPostingGroup"))
                If AgL.StrCmp(Dgl1.AgSelectedValue(Col1SalesTaxGroup, mRow), "") Then
                    Dgl1.Item(Col1SalesTaxGroup, mRow).Value = AgL.XNull(AgL.PubDtEnviro.Rows(0)("Default_SalesTaxGroupItem"))
                    Dgl1.Item(Col1SalesTaxGroup, mRow).Tag = AgL.XNull(AgL.PubDtEnviro.Rows(0)("Default_SalesTaxGroupItem"))
                End If

                'Dgl1.Item(Col1UnitMultiplier, mRow).Value = AgL.VNull(dtItem.Rows(0)("UnitMultiplier"))
                Dgl1.Item(Col1DealUnit, mRow).Value = AgL.XNull(dtItem.Rows(0)("DealUnit"))
                Dgl1.Item(Col1QtyDecimalPlaces, mRow).Value = AgL.VNull(dtItem.Rows(0)("QtyDecimalPlaces"))
                Dgl1.Item(Col1DealQtyDecimalPlaces, mRow).Value = AgL.VNull(dtItem.Rows(0)("DealDecimalPlaces"))

                Dgl1.Item(Col1DefaultDiscountPer, mRow).Value = AgL.VNull(dtItem.Rows(0)("Default_DiscountPerPurchase"))
                Dgl1.Item(Col1DefaultAdditionalDiscountPer, mRow).Value = AgL.VNull(dtItem.Rows(0)("Default_AdditionalDiscountPerPurchase"))
                Dgl1.Item(Col1DefaultAdditionPer, mRow).Value = AgL.VNull(dtItem.Rows(0)("Default_AdditionPerPurchase"))


                If Val(Dgl1.Item(Col1Rate, mRow).Value) = 0 Then
                    'If AgL.PubServerName = "" Then
                    '    mQry = " Select L.Rate, L.MRP From PurchInvoiceDetail L  With (NoLock) LEFT JOIN PurchInvoice H  With (NoLock) ON L.DocId = H.DocId Where L.Item = '" & Dgl1.Item(Col1Item, mRow).Tag & "' Order By H.V_Date Desc Limit 1 "
                    'Else
                    '    mQry = " Select Top 1 L.Rate, L.MRP From PurchInvoiceDetail L  With (NoLock) LEFT JOIN PurchInvoice H ON L.DocId = H.DocId Where L.Item = '" & Dgl1.Item(Col1Item, mRow).Tag & "' Order By H.V_Date Desc  "
                    'End If
                    mQry = " Select " & IIf(AgL.PubServerName = "", "", "Top 1") & " L.Rate, L.MRP 
                            From PurchInvoiceDetail L  With (NoLock) 
                            LEFT JOIN PurchInvoice H  With (NoLock) ON L.DocId = H.DocId 
                            Where L.Item = '" & Dgl1.Item(Col1Item, mRow).Tag & "' 
                            And H.V_Type = '" & DglMain.Item(Col1Value, rowV_Type).Tag & "'
                            And IfNull(H.Process,'') = '" & DglMain.Item(Col1Value, rowProcess).Tag & "'
                            Order By H.V_Date Desc " & IIf(AgL.PubServerName = "", "Limit 1", "") & " "
                    Dim DtTemp As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)

                    If DtTemp.Rows.Count > 0 Then
                        Dgl1.Item(Col1MRP, mRow).Value = AgL.VNull(DtTemp.Rows(0)("MRP"))
                        Dgl1.Item(Col1Rate, mRow).Value = AgL.VNull(DtTemp.Rows(0)("Rate"))
                    End If
                End If


                Dgl1.Item(Col1ProfitMarginPer, mRow).Value = AgL.VNull(dtItem.Rows(0)("ProfitMarginPer"))
            End If

            Dim DrItemTypeSetting As DataRow
            DrItemTypeSetting = FItemTypeSettings(Dgl1(Col1ItemType, mRow).Tag)
            Dgl1(Col1DiscountCalculationPattern, mRow).Value = AgL.XNull(DrItemTypeSetting("DiscountCalculationPatternPurchase"))
            Dgl1(Col1AdditionalDiscountCalculationPattern, mRow).Value = AgL.XNull(DrItemTypeSetting("AdditionalDiscountCalculationPatternPurchase"))
            Dgl1(Col1AdditionCalculationPattern, mRow).Value = AgL.XNull(DrItemTypeSetting("AdditionCalculationPatternPurchase"))

            If LblV_Type.Tag = AgLibrary.ClsMain.agConstants.Ncat.PurchaseReturn Then
                If AgL.XNull(Dgl1(Col1Barcode, mRow).Value) <> "" Then
                    mQry = "Select H.DocID, H.ManualRefNo, H.V_Date From PurchInvoice H Where H.DocID = (Select GenDocID from Barcode Where Description ='" & AgL.XNull(Dgl1(Col1Barcode, mRow).Value) & "')"
                    dtInvoices = AgL.FillData(mQry, AgL.GCn).Tables(0)
                    If dtInvoices.Rows.Count > 0 Then
                        Dgl1(Col1ReferenceDocID, mRow).Value = AgL.XNull(dtInvoices.Rows(0)("DocId"))
                        Dgl1(Col1ReferenceNo, mRow).Value = AgL.XNull(dtInvoices.Rows(0)("ManualRefNo"))
                        Dgl1(Col1ReferenceNo, mRow).Tag = AgL.XNull(dtInvoices.Rows(0)("DocId"))
                        Dgl1(Col1ReferenceDate, mRow).Value = AgL.XNull(dtInvoices.Rows(0)("V_Date"))
                    End If
                Else
                    StrReturnTicked = FPurchaseInvoiceSelectionWindowForReturn(mRow, Col1Item)
                End If
            End If

            If StrReturnTicked = "" Then
                FOpenDimensionWindow(mRow, Col1Item)
            End If

            FSetSalesTaxGroupItemBasedOnRate(mRow)
            mQry = "Select * from ItemGroupPerson  With (NoLock) Where ItemCategory = '" & Dgl1.Item(Col1ItemCategory, mRow).Tag & "' 
                        And ItemGroup  = '" & Dgl1.Item(Col1ItemGroup, mRow).Tag & "'
                        And Person  = '" & DglMain.Item(Col1Value, rowVendor).Tag & "'
                       "
            dtItem = AgL.FillData(mQry, AgL.GCn).tables(0)
            If dtItem.Rows.Count > 0 Then
                If AgL.VNull(dtItem.Rows(0)("DiscountPer")) > 0 Then
                    If Dgl1(Col1DiscountCalculationPattern, mRow).Value.ToString.ToUpper = AgL.XNull(dtItem.Rows(0)("DiscountCalculationPattern")).toupper() Or Dgl1(Col1DiscountCalculationPattern, mRow).Value.ToString.ToUpper = "" Then
                        Dgl1.Item(Col1PersonalDiscountPer, mRow).Value = AgL.VNull(dtItem.Rows(0)("DiscountPer"))
                    Else
                        MsgBox("Discount Calculation Pattern is changes since last invoice.")
                    End If
                End If

                If AgL.VNull(dtItem.Rows(0)("AdditionalDiscountPer")) > 0 Then
                    If Dgl1(Col1AdditionalDiscountCalculationPattern, mRow).Value.ToString.ToUpper = AgL.XNull(dtItem.Rows(0)("AdditionalDiscountCalculationPattern")).toupper() Or Dgl1(Col1AdditionalDiscountCalculationPattern, mRow).Value.ToString.ToUpper = "" Then
                        Dgl1.Item(Col1PersonalAdditionalDiscountPer, mRow).Value = AgL.VNull(dtItem.Rows(0)("AdditionalDiscountPer"))
                    Else
                        MsgBox("Additional Discount Calculation Pattern is changes since last invoice.")
                    End If
                End If

                If AgL.VNull(dtItem.Rows(0)("AdditionPer")) > 0 Then
                    If Dgl1(Col1AdditionCalculationPattern, mRow).Value.ToString.ToUpper = AgL.XNull(dtItem.Rows(0)("AdditionCalculationPattern")).toupper() Or Dgl1(Col1AdditionCalculationPattern, mRow).Value.ToString.ToUpper = "" Then
                        Dgl1.Item(Col1PersonalAdditionPer, mRow).Value = AgL.VNull(dtItem.Rows(0)("AdditionPer"))
                    Else
                        MsgBox("Additional Discount Calculation Pattern is changes since last invoice.")
                    End If
                End If
            End If



            If AgL.XNull(DtV_TypeSettings.Rows(0)("DiscountSuggestionPattern")).ToUpper() = DiscountSuggestPattern.FillAutomatically.ToUpper Then
                If Val(Dgl1.Item(Col1PersonalDiscountPer, mRow).Value) <> 0 Then
                    Dgl1.Item(Col1DiscountPer, mRow).Value = Format(Val(Dgl1.Item(Col1PersonalDiscountPer, mRow).Value), "0.000")
                    Dgl1.Item(Col1AdditionalDiscountPer, mRow).Value = Format(Val(Dgl1.Item(Col1PersonalAdditionalDiscountPer, mRow).Value), "0.000")
                    Dgl1.Item(Col1AdditionPer, mRow).Value = Format(Val(Dgl1.Item(Col1PersonalAdditionPer, mRow).Value), "0.000")
                Else
                    Dgl1.Item(Col1DiscountPer, mRow).Value = Format(Val(Dgl1.Item(Col1DefaultDiscountPer, mRow).Value), "0.000")
                    Dgl1.Item(Col1AdditionalDiscountPer, mRow).Value = Format(Val(Dgl1.Item(Col1DefaultAdditionalDiscountPer, mRow).Value), "0.000")
                    Dgl1.Item(Col1AdditionPer, mRow).Value = Format(Val(Dgl1.Item(Col1DefaultAdditionPer, mRow).Value), "0.000")
                End If
            End If



            If mRow > 1 Then
                If Dgl1.Item(Col1LRNo, mRow - 1).Value <> "" Then
                    Dgl1.Item(Col1LRNo, mRow).Value = Dgl1.Item(Col1LRNo, mRow - 1).Value
                    Dgl1.Item(Col1LRDate, mRow).Value = Dgl1.Item(Col1LRDate, mRow - 1).Value
                End If
            End If
        Catch ex As Exception
            MsgBox(ex.Message & " On Validating_Item Function ")
        End Try
    End Sub
    Private Sub Validating_Dimension1(ByVal mColumn As Integer, ByVal mRow As Integer)
        Dim StrReturnTicked As String = ""
        Try
            If LblV_Type.Tag = Ncat.PurchaseReturn Then
                StrReturnTicked = FPurchaseInvoiceSelectionWindowForReturn(mRow, Col1Dimension1)
            End If

            If StrReturnTicked = "" Then
                FOpenDimensionWindow(mRow, Col1Dimension1)
            End If

            If AgL.XNull(Dgl1.Item(Col1Dimension1, mRow).Tag) <> "" Then
                mQry = " Select PurchaseRate From Item Where Code = '" & Dgl1.Item(Col1Dimension1, mRow).Tag & "'"
                Dgl1.Item(Col1Rate, mRow).Value = AgL.VNull(AgL.Dman_Execute(mQry, AgL.GCn).ExecuteScalar())

                If Dgl1.Item(Col1Rate, mRow).Value = 0 Then
                    mQry = " Select " & IIf(AgL.PubServerName = "", "", "Top 1") & " L.Rate, L.MRP 
                        From PurchInvoiceDetail L  With (NoLock) 
                        LEFT JOIN PurchInvoice H  With (NoLock) ON L.DocId = H.DocId 
                        LEFT JOIN Item Sku On L.Item = Sku.Code
                        Where Sku.Dimension1 = '" & Dgl1.Item(Col1Dimension1, mRow).Tag & "' 
                        And H.Vendor = '" & DglMain.Item(Col1Value, rowVendor).Tag & "'
                        Order By H.V_Date Desc " & IIf(AgL.PubServerName = "", "Limit 1", "") & "  "
                    Dim DtTemp As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)

                    If DtTemp.Rows.Count > 0 Then
                        Dgl1.Item(Col1MRP, mRow).Value = AgL.VNull(DtTemp.Rows(0)("MRP"))
                        Dgl1.Item(Col1Rate, mRow).Value = AgL.VNull(DtTemp.Rows(0)("Rate"))
                    End If
                End If


                If Dgl1.Item(Col1Rate, mRow).Value = 0 Then
                    mQry = " Select " & IIf(AgL.PubServerName = "", "", "Top 1") & " L.Rate, L.MRP 
                        From PurchInvoiceDetail L  With (NoLock) 
                        LEFT JOIN PurchInvoice H  With (NoLock) ON L.DocId = H.DocId 
                        LEFT JOIN Item Sku On L.Item = Sku.Code
                        Where Sku.Dimension1 = '" & Dgl1.Item(Col1Dimension1, mRow).Tag & "' 
                        Order By H.V_Date Desc " & IIf(AgL.PubServerName = "", "Limit 1", "") & "  "
                    Dim DtTemp As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)

                    If DtTemp.Rows.Count > 0 Then
                        Dgl1.Item(Col1MRP, mRow).Value = AgL.VNull(DtTemp.Rows(0)("MRP"))
                        Dgl1.Item(Col1Rate, mRow).Value = AgL.VNull(DtTemp.Rows(0)("Rate"))
                    End If
                End If

                FGetRateConsideringAllDimensions(mRow)
            End If
        Catch ex As Exception
            MsgBox(ex.Message & " On Validating_Dimension1 Function ")
        End Try
    End Sub


    Private Sub ShowCatalogDetail()
        Dim FrmObj As FrmPurchaseInvoiceCatalog

        If Dgl2.Item(Col1Value, rowCatalog).Tag IsNot Nothing Then
            FrmObj = Dgl2.Item(Col1Value, rowCatalog).Tag
            FrmObj.EntryMode = Topctrl1.Mode
            FrmObj.StartPosition = FormStartPosition.CenterParent
            FrmObj.mOkButtonPressed = False
            FrmObj.ShowDialog()
            Dgl2.Item(Col1Value, rowCatalog).Tag = FrmObj
        Else
            FrmObj = New FrmPurchaseInvoiceCatalog
            FrmObj.EntryMode = Topctrl1.Mode
            FrmObj.IniGrid(mSearchCode)
            FrmObj.StartPosition = FormStartPosition.CenterParent
            FrmObj.mOkButtonPressed = False
            FrmObj.ShowDialog()
            Dgl2.Item(Col1Value, rowCatalog).Tag = FrmObj
        End If

        If FrmObj.mOkButtonPressed Then
            If Topctrl1.Mode <> "BROWSE" Then

                Dim IsOverwriteGridData As Boolean = False
                Dim mRow As Integer = 0
                If Dgl1.Rows.Count > 1 Then
                    If MsgBox("Do you want to overwrite existing data in grid ? ", MsgBoxStyle.Question + MsgBoxStyle.YesNo) = MsgBoxResult.Yes Then
                        IsOverwriteGridData = True
                        If Dgl1.Rows.Count > 1 Then
                            If IsOverwriteGridData Then
                                For i As Integer = 0 To Dgl1.Rows.Count - 1
                                    If Dgl1.Item(Col1IsRecordLocked, i).Value = 0 Then
                                        If Not Dgl1.Rows(i).IsNewRow Then
                                            Dgl1.Rows(i).Visible = False
                                        End If
                                    End If
                                Next
                                mRow = Dgl1.Rows.Count - 1
                            Else
                                mRow = Dgl1.Rows.Count - 1
                            End If
                        Else
                            mRow = 0
                        End If

                        If Dgl1.Rows(mRow).IsNewRow = False Then
                            Dgl1.Rows.Remove(Dgl1.Rows(mRow))
                        End If
                    End If
                End If

                For i As Integer = 0 To FrmObj.Dgl1.Rows.Count - 1
                    If AgL.VNull(FrmObj.Dgl1.Item(FrmPurchaseInvoiceCatalog.Col1Qty, i).Value) > 0 Then
                        FFillCatalogItems(AgL.XNull(FrmObj.Dgl1.Item(FrmPurchaseInvoiceCatalog.Col1Site, i).Tag),
                                            AgL.XNull(FrmObj.Dgl1.Item(FrmPurchaseInvoiceCatalog.Col1Catalog, i).Tag),
                                          AgL.XNull(FrmObj.Dgl1.Item(FrmPurchaseInvoiceCatalog.Col1ItemCategory, i).Tag),
                                          AgL.XNull(FrmObj.Dgl1.Item(FrmPurchaseInvoiceCatalog.Col1ItemGroup, i).Tag),
                                          AgL.VNull(FrmObj.Dgl1.Item(FrmPurchaseInvoiceCatalog.Col1Qty, i).Value),
                                          AgL.VNull(FrmObj.Dgl1.Item(FrmPurchaseInvoiceCatalog.Col1DiscPer, i).Value), IsOverwriteGridData, mRow)
                    End If
                Next
            End If
        End If
    End Sub

    Private Sub Validating_Dimension2(ByVal mColumn As Integer, ByVal mRow As Integer)
        Dim StrReturnTicked As String = ""
        Try
            If LblV_Type.Tag = Ncat.PurchaseReturn Then
                StrReturnTicked = FPurchaseInvoiceSelectionWindowForReturn(mRow, Col1Dimension2)
            End If

            If StrReturnTicked = "" Then
                FOpenDimensionWindow(mRow, Col1Dimension2)
            End If

            If AgL.XNull(Dgl1.Item(Col1Dimension2, mRow).Tag) <> "" Then
                mQry = " Select PurchaseRate From Item Where Code = '" & Dgl1.Item(Col1Dimension2, mRow).Tag & "'"
                Dgl1.Item(Col1Rate, mRow).Value = AgL.VNull(AgL.Dman_Execute(mQry, AgL.GCn).ExecuteScalar())



                If Dgl1.Item(Col1Rate, mRow).Value = 0 Then
                    mQry = " Select " & IIf(AgL.PubServerName = "", "", "Top 1") & " L.Rate, L.MRP 
                        From PurchInvoiceDetail L  With (NoLock) 
                        LEFT JOIN PurchInvoice H  With (NoLock) ON L.DocId = H.DocId 
                        LEFT JOIN Item Sku On L.Item = Sku.Code
                        Where Sku.Dimension2 = '" & Dgl1.Item(Col1Dimension2, mRow).Tag & "' 
                        And H.Vendor = '" & DglMain.Item(Col1Value, rowVendor).Tag & "'
                        Order By H.V_Date Desc " & IIf(AgL.PubServerName = "", "Limit 1", "") & "  "
                    Dim DtTemp As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)

                    If DtTemp.Rows.Count > 0 Then
                        Dgl1.Item(Col1MRP, mRow).Value = AgL.VNull(DtTemp.Rows(0)("MRP"))
                        Dgl1.Item(Col1Rate, mRow).Value = AgL.VNull(DtTemp.Rows(0)("Rate"))
                    End If
                End If


                If Dgl1.Item(Col1Rate, mRow).Value = 0 Then
                    mQry = " Select " & IIf(AgL.PubServerName = "", "", "Top 1") & " L.Rate, L.MRP 
                        From PurchInvoiceDetail L  With (NoLock) 
                        LEFT JOIN PurchInvoice H  With (NoLock) ON L.DocId = H.DocId 
                        LEFT JOIN Item Sku On L.Item = Sku.Code
                        Where Sku.Dimension2 = '" & Dgl1.Item(Col1Dimension2, mRow).Tag & "' 
                        Order By H.V_Date Desc " & IIf(AgL.PubServerName = "", "Limit 1", "") & "  "
                    Dim DtTemp As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)

                    If DtTemp.Rows.Count > 0 Then
                        Dgl1.Item(Col1MRP, mRow).Value = AgL.VNull(DtTemp.Rows(0)("MRP"))
                        Dgl1.Item(Col1Rate, mRow).Value = AgL.VNull(DtTemp.Rows(0)("Rate"))
                    End If
                End If

                FGetRateConsideringAllDimensions(mRow)
            End If
        Catch ex As Exception
            MsgBox(ex.Message & " On Validating_Dimension2 Function ")
        End Try
    End Sub

    Private Sub Validating_Dimension3(ByVal mColumn As Integer, ByVal mRow As Integer)
        Dim StrReturnTicked As String = ""
        Try
            If LblV_Type.Tag = Ncat.PurchaseReturn Then
                StrReturnTicked = FPurchaseInvoiceSelectionWindowForReturn(mRow, Col1Dimension3)
            End If

            If StrReturnTicked = "" Then
                FOpenDimensionWindow(mRow, Col1Dimension3)
            End If

            If AgL.XNull(Dgl1.Item(Col1Dimension3, mRow).Tag) <> "" Then
                mQry = " Select PurchaseRate From Item Where Code = '" & Dgl1.Item(Col1Dimension3, mRow).Tag & "'"
                Dgl1.Item(Col1Rate, mRow).Value = AgL.VNull(AgL.Dman_Execute(mQry, AgL.GCn).ExecuteScalar())



                If Dgl1.Item(Col1Rate, mRow).Value = 0 Then
                    mQry = " Select " & IIf(AgL.PubServerName = "", "", "Top 1") & " L.Rate, L.MRP 
                        From PurchInvoiceDetail L  With (NoLock) 
                        LEFT JOIN PurchInvoice H  With (NoLock) ON L.DocId = H.DocId 
                        LEFT JOIN Item Sku On L.Item = Sku.Code
                        Where Sku.Dimension3 = '" & Dgl1.Item(Col1Dimension3, mRow).Tag & "' 
                        And H.Vendor = '" & DglMain.Item(Col1Value, rowVendor).Tag & "'
                        Order By H.V_Date Desc " & IIf(AgL.PubServerName = "", "Limit 1", "") & "  "
                    Dim DtTemp As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)

                    If DtTemp.Rows.Count > 0 Then
                        Dgl1.Item(Col1MRP, mRow).Value = AgL.VNull(DtTemp.Rows(0)("MRP"))
                        Dgl1.Item(Col1Rate, mRow).Value = AgL.VNull(DtTemp.Rows(0)("Rate"))
                    End If
                End If


                If Dgl1.Item(Col1Rate, mRow).Value = 0 Then
                    mQry = " Select " & IIf(AgL.PubServerName = "", "", "Top 1") & " L.Rate, L.MRP 
                        From PurchInvoiceDetail L  With (NoLock) 
                        LEFT JOIN PurchInvoice H  With (NoLock) ON L.DocId = H.DocId 
                        LEFT JOIN Item Sku On L.Item = Sku.Code
                        Where Sku.Dimension3 = '" & Dgl1.Item(Col1Dimension3, mRow).Tag & "' 
                        Order By H.V_Date Desc " & IIf(AgL.PubServerName = "", "Limit 1", "") & "  "
                    Dim DtTemp As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)

                    If DtTemp.Rows.Count > 0 Then
                        Dgl1.Item(Col1MRP, mRow).Value = AgL.VNull(DtTemp.Rows(0)("MRP"))
                        Dgl1.Item(Col1Rate, mRow).Value = AgL.VNull(DtTemp.Rows(0)("Rate"))
                    End If
                End If

                FGetRateConsideringAllDimensions(mRow)
            End If
        Catch ex As Exception
            MsgBox(ex.Message & " On Validating_Dimension3 Function ")
        End Try
    End Sub
    Private Sub Validating_DImension4(ByVal mColumn As Integer, ByVal mRow As Integer)
        Dim StrReturnTicked As String = ""
        Try
            If LblV_Type.Tag = Ncat.PurchaseReturn Then
                StrReturnTicked = FPurchaseInvoiceSelectionWindowForReturn(mRow, Col1Dimension4)
            End If

            If StrReturnTicked = "" Then
                FOpenDimensionWindow(mRow, Col1Dimension4)
            End If

            If AgL.XNull(Dgl1.Item(Col1Dimension4, mRow).Tag) <> "" Then
                mQry = " Select PurchaseRate From Item Where Code = '" & Dgl1.Item(Col1Dimension4, mRow).Tag & "'"
                Dgl1.Item(Col1Rate, mRow).Value = AgL.VNull(AgL.Dman_Execute(mQry, AgL.GCn).ExecuteScalar())



                If Dgl1.Item(Col1Rate, mRow).Value = 0 Then
                    mQry = " Select " & IIf(AgL.PubServerName = "", "", "Top 1") & " L.Rate, L.MRP 
                        From PurchInvoiceDetail L  With (NoLock) 
                        LEFT JOIN PurchInvoice H  With (NoLock) ON L.DocId = H.DocId 
                        LEFT JOIN Item Sku On L.Item = Sku.Code
                        Where Sku.DImension4 = '" & Dgl1.Item(Col1Dimension4, mRow).Tag & "' 
                        And H.Vendor = '" & DglMain.Item(Col1Value, rowVendor).Tag & "'
                        Order By H.V_Date Desc " & IIf(AgL.PubServerName = "", "Limit 1", "") & "  "
                    Dim DtTemp As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)

                    If DtTemp.Rows.Count > 0 Then
                        Dgl1.Item(Col1MRP, mRow).Value = AgL.VNull(DtTemp.Rows(0)("MRP"))
                        Dgl1.Item(Col1Rate, mRow).Value = AgL.VNull(DtTemp.Rows(0)("Rate"))
                    End If
                End If


                If Dgl1.Item(Col1Rate, mRow).Value = 0 Then
                    mQry = " Select " & IIf(AgL.PubServerName = "", "", "Top 1") & " L.Rate, L.MRP 
                        From PurchInvoiceDetail L  With (NoLock) 
                        LEFT JOIN PurchInvoice H  With (NoLock) ON L.DocId = H.DocId 
                        LEFT JOIN Item Sku On L.Item = Sku.Code
                        Where Sku.DImension4 = '" & Dgl1.Item(Col1Dimension4, mRow).Tag & "' 
                        Order By H.V_Date Desc " & IIf(AgL.PubServerName = "", "Limit 1", "") & "  "
                    Dim DtTemp As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)

                    If DtTemp.Rows.Count > 0 Then
                        Dgl1.Item(Col1MRP, mRow).Value = AgL.VNull(DtTemp.Rows(0)("MRP"))
                        Dgl1.Item(Col1Rate, mRow).Value = AgL.VNull(DtTemp.Rows(0)("Rate"))
                    End If
                End If

                FGetRateConsideringAllDimensions(mRow)
            End If
        Catch ex As Exception
            MsgBox(ex.Message & " On Validating_DImension4 Function ")
        End Try
    End Sub

    Private Sub Validating_Size(ByVal mColumn As Integer, ByVal mRow As Integer)
        Dim StrReturnTicked As String = ""
        Try
            If LblV_Type.Tag = Ncat.PurchaseReturn Then
                StrReturnTicked = FPurchaseInvoiceSelectionWindowForReturn(mRow, Col1Size)
            End If

            If StrReturnTicked = "" Then
                FOpenDimensionWindow(mRow, Col1Size)
            End If

            If AgL.XNull(Dgl1.Item(Col1Size, mRow).Tag) <> "" Then
                mQry = " Select PurchaseRate From Item Where Code = '" & Dgl1.Item(Col1Size, mRow).Tag & "'"
                Dgl1.Item(Col1Rate, mRow).Value = AgL.VNull(AgL.Dman_Execute(mQry, AgL.GCn).ExecuteScalar())



                If Dgl1.Item(Col1Rate, mRow).Value = 0 Then
                    mQry = " Select " & IIf(AgL.PubServerName = "", "", "Top 1") & " L.Rate, L.MRP 
                        From PurchInvoiceDetail L  With (NoLock) 
                        LEFT JOIN PurchInvoice H  With (NoLock) ON L.DocId = H.DocId 
                        LEFT JOIN Item Sku On L.Item = Sku.Code
                        Where Sku.DImension4 = '" & Dgl1.Item(Col1Size, mRow).Tag & "' 
                        And H.Vendor = '" & DglMain.Item(Col1Value, rowVendor).Tag & "'
                        Order By H.V_Date Desc " & IIf(AgL.PubServerName = "", "Limit 1", "") & "  "
                    Dim DtTemp As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)

                    If DtTemp.Rows.Count > 0 Then
                        Dgl1.Item(Col1MRP, mRow).Value = AgL.VNull(DtTemp.Rows(0)("MRP"))
                        Dgl1.Item(Col1Rate, mRow).Value = AgL.VNull(DtTemp.Rows(0)("Rate"))
                    End If
                End If


                If Dgl1.Item(Col1Rate, mRow).Value = 0 Then
                    mQry = " Select " & IIf(AgL.PubServerName = "", "", "Top 1") & " L.Rate, L.MRP 
                        From PurchInvoiceDetail L  With (NoLock) 
                        LEFT JOIN PurchInvoice H  With (NoLock) ON L.DocId = H.DocId 
                        LEFT JOIN Item Sku On L.Item = Sku.Code
                        Where Sku.DImension4 = '" & Dgl1.Item(Col1Size, mRow).Tag & "' 
                        Order By H.V_Date Desc " & IIf(AgL.PubServerName = "", "Limit 1", "") & "  "
                    Dim DtTemp As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)

                    If DtTemp.Rows.Count > 0 Then
                        Dgl1.Item(Col1MRP, mRow).Value = AgL.VNull(DtTemp.Rows(0)("MRP"))
                        Dgl1.Item(Col1Rate, mRow).Value = AgL.VNull(DtTemp.Rows(0)("Rate"))
                    End If
                End If

                FGetRateConsideringAllDimensions(mRow)
            End If
        Catch ex As Exception
            MsgBox(ex.Message & " On Validating_DImension4 Function ")
        End Try
    End Sub

    Private Function FPurchaseInvoiceSelectionWindowForReturn(mRow As Integer, mColumnName As String) As String
        Dim StrRtn As String = ""

        Dim bContraWindowBaseField As String = AgL.XNull(ClsMain.FGetSettings(SettingFields.ContraWindowBaseField, SettingType.Item,
                                TxtDivision.Tag, DglMain.Item(Col1Value, rowSite_Code).Tag,
                                "", Dgl1.Item(Col1ItemType, mRow).Tag, "", "", ""))

        If bContraWindowBaseField = "None" Or bContraWindowBaseField = "" Then
            bContraWindowBaseField = Col1Item
        End If

        If bContraWindowBaseField = Dgl1.Columns(mColumnName).Name Then
            mFirstInvoiceForSelectedParty = False
            StrRtn = FHPGD_PendingSaleChallan(mRow)
            If StrRtn <> "" Then
                FillGridForPurchaseReturn(StrRtn, True)
            Else
                If MsgBox("No Invoice found to return for selected customer. Do you want to continue without invoice references?", vbYesNo) = MsgBoxResult.No Then
                    Dgl1.Rows(Dgl1.CurrentCell.RowIndex).Visible = False
                    StrRtn = "."
                    Dgl1.Rows.Add()
                Else
                    If FDivisionNameForCustomization(4) = "X DEVI" Then
                        Dgl1.Item(Col1Rate, mRow).Value = FGetLastPurchaseRate(mRow)
                    End If
                End If
            End If
        End If
        FPurchaseInvoiceSelectionWindowForReturn = StrRtn
    End Function
    Private Sub FOpenDimensionWindow(mRow As Integer, mColumnName As String)
        If ClsMain.IsScopeOfWorkContains(IndustryType.KiranaIndustry) Then Exit Sub
        Dim bDimensionWindowBaseField As String = AgL.XNull(ClsMain.FGetSettings(SettingFields.DimensionWindowBaseField, SettingType.Item,
        TxtDivision.Tag, DglMain.Item(Col1Value, rowSite_Code).Tag,
        "", Dgl1.Item(Col1ItemType, mRow).Tag, "", "", ""))

        If bDimensionWindowBaseField = "None" Or bDimensionWindowBaseField = "" Then
            bDimensionWindowBaseField = Col1Item
        End If

        If bDimensionWindowBaseField = mColumnName Then
            Dgl1.Item(Col1DocQty, mRow).Tag = Nothing
            If (Dgl1.Item(Col1Unit, mRow).Tag) Then
                Dgl1.Item(Col1DocQty, mRow).Style.ForeColor = Color.Blue
                ShowPurchInvoiceDimensionDetail(mRow)
            End If
        End If
    End Sub
    Private Function FHPGD_PendingSaleChallan(mRow As Integer) As String
        Dim FRH_Multiple As DMHelpGrid.FrmHelpGrid_Multi
        Dim StrRtn As String = ""
        Dim mLineCond As String = ""
        Dim DtTemp As DataTable


        mLineCond = " And S.Subcode = '" & DglMain.Item(Col1Value, rowVendor).Tag & "' "

        If AgL.XNull(Dgl1.Item(Col1ItemCategory, mRow).Tag) <> "" Then
            mLineCond = " And Sku.ItemCategory = '" & Dgl1.Item(Col1ItemCategory, mRow).Tag & "' "
        End If
        If AgL.XNull(Dgl1.Item(Col1ItemGroup, mRow).Tag) <> "" Then
            mLineCond = " And Sku.ItemGroup = '" & Dgl1.Item(Col1ItemGroup, mRow).Tag & "' "
        End If
        If AgL.XNull(Dgl1.Item(Col1Item, mRow).Tag) <> "" Then
            mLineCond = " And Sku.Code = '" & Dgl1.Item(Col1Item, mRow).Tag & "' "
        End If
        If AgL.XNull(Dgl1.Item(Col1Dimension1, mRow).Tag) <> "" Then
            mLineCond = " And Sku.Dimension1 = '" & Dgl1.Item(Col1Dimension1, mRow).Tag & "' "
        End If
        If AgL.XNull(Dgl1.Item(Col1Dimension2, mRow).Tag) <> "" Then
            mLineCond = " And Sku.Dimension2 = '" & Dgl1.Item(Col1Dimension2, mRow).Tag & "' "
        End If
        If AgL.XNull(Dgl1.Item(Col1Dimension3, mRow).Tag) <> "" Then
            mLineCond = " And Sku.Dimension3 = '" & Dgl1.Item(Col1Dimension3, mRow).Tag & "' "
        End If
        If AgL.XNull(Dgl1.Item(Col1Dimension4, mRow).Tag) <> "" Then
            mLineCond = " And Sku.Dimension4 = '" & Dgl1.Item(Col1Dimension4, mRow).Tag & "' "
        End If
        If AgL.XNull(Dgl1.Item(Col1Size, mRow).Tag) <> "" Then
            mLineCond = " And Sku.Size = '" & Dgl1.Item(Col1Size, mRow).Tag & "' "
        End If

        mQry = "
                Select 'o' As Tick, SI.DocID || '#' || Cast(SI.TSr as Varchar) || '#' || Cast(SI.Sr as Varchar) as SearchKey, H.Div_Code || H.Site_Code || '-' || H.V_Type || '-' || H.ManualRefNo as InvoiceNo, IfNull(H.VendorDocNo,'') as PartyDocNo, H.V_Date as InvoiceDate, 
                SI.Item, I.Description As Item,
                D1.Description As Dimension1, D2.Description As Dimension2, 
                D3.Description As Dimension3, D4.Description As Dimension4,
                Size.Description As Size, SI.Qty_Rec - IfNull(SR.Qty_Ret,0) Qty_Bal, SI.Unit  
                From
                    (    
                    select S.DocID, S.Tsr, S.Sr,  S.Item, S.Qty_Rec, S.Unit, S.Rate 
                    from Stock S  With (NoLock)
                    LEFT JOIN Item Sku With (NoLock) On S.Item = Sku.Code
                    Left Join Voucher_Type Vt  With (NoLock) on S.V_Type = VT.V_Type
                    where VT.NCat = '" & AgLibrary.ClsMain.agConstants.Ncat.PurchaseInvoice & "' " & mLineCond & "
                    Union All 
                    select S.DocID, S.Tsr, S.Sr,  S.Item, S.Qty_Rec, S.Unit, S.Rate 
                    from StockProcess S  With (NoLock)
                    LEFT JOIN Item Sku With (NoLock) On S.Item = Sku.Code
                    Left Join Voucher_Type Vt  With (NoLock) on S.V_Type = VT.V_Type
                    where VT.NCat = '" & AgLibrary.ClsMain.agConstants.Ncat.PurchaseInvoice & "' " & mLineCond & "
                    ) as SI
                Left Join 
                    (
                    select S.ReferenceDocID, S.ReferenceTsr, S.ReferenceDocIDSr, Sum(S.Qty_Rec) as Qty_Ret
                    from Stock S  With (NoLock)
                    LEFT JOIN Item Sku With (NoLock) On S.Item = Sku.Code
                    Left Join Voucher_Type Vt  With (NoLock) on S.V_Type = VT.V_Type
                    where VT.nCat='" & AgLibrary.ClsMain.agConstants.Ncat.PurchaseReturn & "'  " & mLineCond & "
                    Group By S.ReferenceDocID, S.ReferenceTsr, S.ReferenceDocIDSr
                    ) As SR On SI.DocID = SR.ReferenceDocID And SI.TSr = SR.ReferenceTSr And SI.Sr = SR.ReferenceDocIDSr
                Left Join PurchInvoice H  With (NoLock) On SI.DocID = H.DocID
                LEFT JOIN Item Sku ON Sku.Code = SI.Item
                LEFT JOIN Item I ON I.Code = IsNull(Sku.BaseItem,Sku.Code) And I.V_Type <> '" & ItemV_Type.SKU & "'
                LEFT JOIN Item D1 ON D1.Code = Sku.Dimension1  
                LEFT JOIN Item D2 ON D2.Code = Sku.Dimension2
                LEFT JOIN Item D3 ON D3.Code = Sku.Dimension3
                LEFT JOIN Item D4 ON D4.Code = Sku.Dimension4
                LEFT JOIN Item Size ON Size.Code = Sku.Size 
                Where Vendor='" & DglMain.Item(Col1Value, rowVendor).Tag & "' And SI.Qty_REC - IfNull(SR.Qty_Ret,0) >0
                And H.V_Date <= " & AgL.Chk_Date(DglMain.Item(Col1Value, rowV_Date).Value) & "                
                Order By H.V_Date Desc "


        mQry = "
                Select 'o' As Tick, SI.DocID || '#' || Cast(SI.TSr as Varchar) || '#' || Cast(SI.Sr as Varchar) as SearchKey, H.Div_Code || H.Site_Code || '-' || H.V_Type || '-' || H.ManualRefNo as InvoiceNo, IfNull(H.VendorDocNo,'') as PartyDocNo, H.V_Date as InvoiceDate, 
                SI.Item, I.Description As Item,
                D1.Description As Dimension1, D2.Description As Dimension2, 
                D3.Description As Dimension3, D4.Description As Dimension4,
                Size.Description As Size, SI.Qty_Rec - IfNull(SR.Qty_Ret,0) Qty_Bal, SI.Unit  
                From
                    (    
                    select S.DocID, S.Tsr, S.Sr,  S.Item, S.Qty_Rec, S.Unit, S.Rate 
                    from Stock S  With (NoLock)
                    LEFT JOIN Item Sku With (NoLock) On S.Item = Sku.Code
                    Left Join Voucher_Type Vt  With (NoLock) on S.V_Type = VT.V_Type
                    where VT.NCat = '" & AgLibrary.ClsMain.agConstants.Ncat.PurchaseInvoice & "' " & mLineCond & "
                    ) as SI
                Left Join 
                    (
                    select S.ReferenceDocID, S.ReferenceTsr, S.ReferenceDocIDSr, Sum(S.Qty_Rec) as Qty_Ret
                    from Stock S  With (NoLock)
                    LEFT JOIN Item Sku With (NoLock) On S.Item = Sku.Code
                    Left Join Voucher_Type Vt  With (NoLock) on S.V_Type = VT.V_Type
                    where VT.nCat='" & AgLibrary.ClsMain.agConstants.Ncat.PurchaseReturn & "'  " & mLineCond & "
                    Group By S.ReferenceDocID, S.ReferenceTsr, S.ReferenceDocIDSr
                    ) As SR On SI.DocID = SR.ReferenceDocID And SI.TSr = SR.ReferenceTSr And SI.Sr = SR.ReferenceDocIDSr
                Left Join PurchInvoice H  With (NoLock) On SI.DocID = H.DocID
                LEFT JOIN Item Sku ON Sku.Code = SI.Item
                LEFT JOIN Item I ON I.Code = IsNull(Sku.BaseItem,Sku.Code) And I.V_Type <> '" & ItemV_Type.SKU & "'
                LEFT JOIN Item D1 ON D1.Code = Sku.Dimension1  
                LEFT JOIN Item D2 ON D2.Code = Sku.Dimension2
                LEFT JOIN Item D3 ON D3.Code = Sku.Dimension3
                LEFT JOIN Item D4 ON D4.Code = Sku.Dimension4
                LEFT JOIN Item Size ON Size.Code = Sku.Size 
                Where Vendor='" & DglMain.Item(Col1Value, rowVendor).Tag & "' And SI.Qty_REC - IfNull(SR.Qty_Ret,0) >0
                And H.V_Date <= " & AgL.Chk_Date(DglMain.Item(Col1Value, rowV_Date).Value) & "                
                Order By H.V_Date Desc "


        mQry = "
                Select 'o' As Tick, SI.DocID || '#' || Cast(SI.TSr as Varchar) || '#' || Cast(SI.Sr as Varchar) as SearchKey, H.Div_Code || H.Site_Code || '-' || H.V_Type || '-' || H.ManualRefNo as InvoiceNo, IfNull(H.VendorDocNo,'') as PartyDocNo, H.V_Date as InvoiceDate, 
                SI.Item, I.Description As Item,
                D1.Description As Dimension1, D2.Description As Dimension2, 
                D3.Description As Dimension3, D4.Description As Dimension4,
                Size.Description As Size, SI.Qty_Rec - IfNull(SR.Qty_Ret,0) Qty_Bal, SI.Unit  
                From
                    (    
                    select S.DocID, S.Tsr, S.Sr,  S.Item, S.Qty_Rec, S.Unit, S.Rate 
                    from Stock S  With (NoLock)
                    LEFT JOIN Item Sku With (NoLock) On S.Item = Sku.Code
                    Left Join Voucher_Type Vt  With (NoLock) on S.V_Type = VT.V_Type
                    where VT.NCat = '" & AgLibrary.ClsMain.agConstants.Ncat.PurchaseInvoice & "' " & mLineCond & "
                    ) as SI
                Left Join 
                    (
                    select S.ReferenceDocID, S.ReferenceTsr, S.ReferenceDocIDSr, Sum(S.Qty_Rec) as Qty_Ret
                    from Stock S  With (NoLock)
                    LEFT JOIN Item Sku With (NoLock) On S.Item = Sku.Code
                    Left Join Voucher_Type Vt  With (NoLock) on S.V_Type = VT.V_Type
                    where VT.nCat='" & AgLibrary.ClsMain.agConstants.Ncat.PurchaseReturn & "'  " & mLineCond & "
                    Group By S.ReferenceDocID, S.ReferenceTsr, S.ReferenceDocIDSr
                    ) As SR On SI.DocID = SR.ReferenceDocID And SI.TSr = SR.ReferenceTSr And SI.Sr = SR.ReferenceDocIDSr
                Left Join PurchInvoice H  With (NoLock) On SI.DocID = H.DocID
                LEFT JOIN Item Sku ON Sku.Code = SI.Item
                LEFT JOIN Item I ON I.Code = IsNull(Sku.BaseItem,Sku.Code) And I.V_Type <> '" & ItemV_Type.SKU & "'
                LEFT JOIN Item D1 ON D1.Code = Sku.Dimension1  
                LEFT JOIN Item D2 ON D2.Code = Sku.Dimension2
                LEFT JOIN Item D3 ON D3.Code = Sku.Dimension3
                LEFT JOIN Item D4 ON D4.Code = Sku.Dimension4
                LEFT JOIN Item Size ON Size.Code = Sku.Size 
                Where Vendor='" & DglMain.Item(Col1Value, rowVendor).Tag & "' And SI.Qty_REC - IfNull(SR.Qty_Ret,0) >0
                And H.V_Date <= " & AgL.Chk_Date(DglMain.Item(Col1Value, rowV_Date).Value) & "                
                Order By H.V_Date Desc "

        DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)
        If DtTemp.Rows.Count = 0 Then
            Exit Function
        End If

        FRH_Multiple = New DMHelpGrid.FrmHelpGrid_Multi(New DataView(DtTemp), "", 400, 950, , , False)
        FRH_Multiple.FFormatColumn(0, "Tick", 40, DataGridViewContentAlignment.MiddleCenter, True)
        FRH_Multiple.FFormatColumn(1, , 0, , False)
        FRH_Multiple.FFormatColumn(2, "Invoice No.", 100, DataGridViewContentAlignment.MiddleLeft)
        FRH_Multiple.FFormatColumn(3, "Party Doc No", 100, DataGridViewContentAlignment.MiddleLeft)
        FRH_Multiple.FFormatColumn(4, "Invoice Date", 100, DataGridViewContentAlignment.MiddleLeft)
        FRH_Multiple.FFormatColumn(5, , 0, DataGridViewContentAlignment.MiddleLeft, False)
        FRH_Multiple.FFormatColumn(6, AgL.PubCaptionItem, 250, DataGridViewContentAlignment.MiddleLeft)
        FRH_Multiple.FFormatColumn(7, AgL.PubCaptionDimension1, 100, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension1] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(8, AgL.PubCaptionDimension2, 100, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension2] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(9, AgL.PubCaptionDimension3, 100, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension3] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(10, AgL.PubCaptionDimension4, 100, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension4] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(11, "Size", 100, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Size] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(12, "Bal Qty", 100, DataGridViewContentAlignment.MiddleRight)
        FRH_Multiple.FFormatColumn(13, "Unit", 70, DataGridViewContentAlignment.MiddleLeft)

        FRH_Multiple.StartPosition = FormStartPosition.CenterScreen
        FRH_Multiple.ShowDialog()

        If FRH_Multiple.BytBtnValue = 0 Then
            StrRtn = FRH_Multiple.FFetchData(1, "'", "'", ",", True)
        End If
        FHPGD_PendingSaleChallan = StrRtn

        FRH_Multiple = Nothing
    End Function
    Private Sub FillGridForPurchaseReturn(strInvoiceLines As String, IsFilledFromLine As Boolean)
        Dim DrTemp As DataRow() = Nothing
        Dim DtTemp As DataTable = Nothing
        Dim DtItem As DataTable
        Dim mRow As Integer
        Dim I As Integer
        Try


            mQry = "    Select  H.DocID,  H.Div_Code || H.Site_Code || '-' || H.V_Type || '-' || H.ManualRefNo as InvoiceNo, IfNull(H.VendorDocNo,'') as PartyDocNo, H.VendorDocDate as PartyDocDate, H.V_Date as InvoiceDate, 
                Sku.Description As SkuDescription, It.Name As ItemType, Ic.Description As ItemCategory, 
                Ig.Description As ItemGroup, I.Description As Item, I.ManualCode As ItemManualCode,
                D1.Description As Dimension1, D2.Description As Dimension2, 
                D3.Description As Dimension3, D4.Description As Dimension4,
                Size.Description As Size, 
                SI.Qty_Rec - IfNull(SR.Qty_Ret,0) Qty_Bal, SI.Unit, L.DiscountPer, L.AdditionalDiscountPer, L.Rate,
                Sku.Code As SkuCode, It.Code As ItemTypeCode, Ic.Code As ItemCategoryCode, Ig.Code As ItemGroupCode, I.Code As ItemCode,
                D1.Code As Dimension1Code, D2.Code As Dimension2Code, 
                D3.Code As Dimension3Code, D4.Code As Dimension4Code,
                Size.Code As SizeCode, 
                Case When IfNull(U.ShowDimensionDetailInPurchase,0) = 1 Or IfNull(Ic.ShowDimensionDetailInPurchase,0) = 1 Then 1
                            Else 0 End As ShowDimensionDetailInPurchase, 
                U.DecimalPlaces as QtyDecimalPlaces, IG.Default_DiscountPerPurchase, L.SalesTaxGroupItem, SI.DocID as StockDocID, SI.TSr as StockTSr, SI.Sr as StockSr 
                From
                    (    
                    select S.DocID, S.Tsr, S.Sr,  S.Item, S.Qty_Rec, S.Unit, S.Rate 
                    from Stock S  With (NoLock)
                    Left Join Voucher_Type Vt  With (NoLock) on S.V_Type = VT.V_Type
                    where VT.NCat = '" & AgLibrary.ClsMain.agConstants.Ncat.PurchaseInvoice & "'
                    ) as SI
                Left Join 
                    (
                    select S.ReferenceDocID, S.ReferenceTsr, S.ReferenceDocIDSr, Sum(S.Qty_Rec) as Qty_Ret
                    from Stock S  With (NoLock)
                    Left Join Voucher_Type Vt  With (NoLock) on S.V_Type = VT.V_Type
                    where VT.nCat='" & AgLibrary.ClsMain.agConstants.Ncat.PurchaseReturn & "'
                    Group By S.ReferenceDocID, S.ReferenceTsr, S.ReferenceDocIDSr
                    ) As SR On SI.DocID = SR.ReferenceDocID And SI.TSr = SR.ReferenceTSr And SI.Sr = SR.ReferenceDocIDSr
                Left Join PurchInvoice H  With (NoLock) On SI.DocID = H.DocID
                LEFT JOIN Item Sku ON Sku.Code = SI.Item
                LEFT JOIN Item I ON I.Code = IsNull(Sku.BaseItem,Sku.Code) And I.V_Type <> '" & ItemV_Type.SKU & "'
                LEFT JOIN ItemType It On Sku.ItemType = It.Code
                LEFT JOIN Item IC On Sku.ItemCategory = IC.Code
                LEFT JOIN Item IG On Sku.ItemGroup = IG.Code
                LEFT JOIN Item D1 ON D1.Code = Sku.Dimension1  
                LEFT JOIN Item D2 ON D2.Code = Sku.Dimension2
                LEFT JOIN Item D3 ON D3.Code = Sku.Dimension3
                LEFT JOIN Item D4 ON D4.Code = Sku.Dimension4
                LEFT JOIN Item Size ON Size.Code = Sku.Size 
                Left Join Unit U  With (NoLock) On I.Unit = U.Code 
                Left Join PurchInvoiceDetail L  With (NoLock) On L.DocID = SI.DocID And L.Sr = SI.TSr
                Where SI.DocID || '#' || Cast(SI.TSr as varchar) || '#' || Cast(SI.Sr as Varchar) in (" & strInvoiceLines & ")
                "


            DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)
            If DtTemp.Rows.Count > 0 Then
                'Dgl1.Rows(Dgl1.CurrentCell.RowIndex).Visible = False
                For I = 0 To DtTemp.Rows.Count - 1
                    If I = 0 Then
                        mRow = Dgl1.CurrentCell.RowIndex
                        Dgl1.Item(ColSNo, mRow).Value = Dgl1.CurrentCell.RowIndex + 1
                    Else
                        mRow = Dgl1.Rows.Add()
                        Dgl1.Item(ColSNo, mRow).Value = Dgl1.Rows.Count - 1
                    End If

                    Dgl1.Item(Col1SKU, mRow).Tag = AgL.XNull(DtTemp.Rows(I)("SkuCode"))
                    Dgl1.Item(Col1SKU, mRow).Value = AgL.XNull(DtTemp.Rows(I)("SkuDescription"))
                    Dgl1.Item(Col1ItemType, mRow).Tag = AgL.XNull(DtTemp.Rows(I)("ItemTypeCode"))
                    Dgl1.Item(Col1ItemType, mRow).Value = AgL.XNull(DtTemp.Rows(I)("ItemType"))
                    Dgl1.Item(Col1ItemCategory, mRow).Tag = AgL.XNull(DtTemp.Rows(I)("ItemCategoryCode"))
                    Dgl1.Item(Col1ItemCategory, mRow).Value = AgL.XNull(DtTemp.Rows(I)("ItemCategory"))
                    Dgl1.Item(Col1ItemGroup, mRow).Tag = AgL.XNull(DtTemp.Rows(I)("ItemGroupCode"))
                    Dgl1.Item(Col1ItemGroup, mRow).Value = AgL.XNull(DtTemp.Rows(I)("ItemGroup"))
                    Dgl1.Item(Col1ItemCode, mRow).Tag = AgL.XNull(DtTemp.Rows(I)("ItemCode"))
                    Dgl1.Item(Col1ItemCode, mRow).Value = AgL.XNull(DtTemp.Rows(I)("ItemManualCode"))
                    Dgl1.Item(Col1Item, mRow).Tag = AgL.XNull(DtTemp.Rows(I)("ItemCode"))
                    Dgl1.Item(Col1Item, mRow).Value = AgL.XNull(DtTemp.Rows(I)("Item"))
                    Dgl1.Item(Col1Dimension1, mRow).Tag = AgL.XNull(DtTemp.Rows(I)("Dimension1Code"))
                    Dgl1.Item(Col1Dimension1, mRow).Value = AgL.XNull(DtTemp.Rows(I)("Dimension1"))
                    Dgl1.Item(Col1Dimension2, mRow).Tag = AgL.XNull(DtTemp.Rows(I)("Dimension2Code"))
                    Dgl1.Item(Col1Dimension2, mRow).Value = AgL.XNull(DtTemp.Rows(I)("Dimension2"))
                    Dgl1.Item(Col1Dimension3, mRow).Tag = AgL.XNull(DtTemp.Rows(I)("Dimension3Code"))
                    Dgl1.Item(Col1Dimension3, mRow).Value = AgL.XNull(DtTemp.Rows(I)("Dimension3"))
                    Dgl1.Item(Col1Dimension4, mRow).Tag = AgL.XNull(DtTemp.Rows(I)("Dimension4Code"))
                    Dgl1.Item(Col1Dimension4, mRow).Value = AgL.XNull(DtTemp.Rows(I)("Dimension4"))
                    Dgl1.Item(Col1Size, mRow).Tag = AgL.XNull(DtTemp.Rows(I)("SizeCode"))
                    Dgl1.Item(Col1Size, mRow).Value = AgL.XNull(DtTemp.Rows(I)("Size"))

                    Dgl1.Item(Col1Unit, mRow).Value = AgL.XNull(DtTemp.Rows(I)("Unit"))
                    Dgl1.Item(Col1Unit, mRow).Tag = 0
                    Dgl1.Item(Col1SalesTaxGroup, mRow).Tag = AgL.XNull(DtTemp.Rows(I)("SalesTaxGroupItem"))
                    Dgl1.Item(Col1SalesTaxGroup, mRow).Value = AgL.XNull(DtTemp.Rows(I)("SalesTaxGroupItem"))
                    Dgl1.Item(Col1QtyDecimalPlaces, mRow).Value = AgL.VNull(DtTemp.Rows(I)("QtyDecimalPlaces"))
                    Dgl1.Item(Col1DefaultDiscountPer, mRow).Value = AgL.VNull(DtTemp.Rows(I)("Default_DiscountPerPurchase"))
                    Dgl1.Item(Col1DiscountPer, mRow).Value = AgL.VNull(DtTemp.Rows(I)("DiscountPer"))
                    Dgl1.Item(Col1AdditionalDiscountPer, mRow).Value = AgL.VNull(DtTemp.Rows(I)("AdditionalDiscountPer"))
                    Dgl1.Item(Col1PurchaseInvoice, mRow).Value = AgL.XNull(DtTemp.Rows(I)("DocID"))
                    If AgL.VNull(DtV_TypeSettings.Rows(0)("PickPurchaseRateFromMaster")) = True Then
                        'mQry = "select Rate from RateListDetail  With (NoLock) where Item ='" & Dgl1.Item(Col1Item, mRow).Tag & "' and RateType Is Null"
                        mQry = "select PurchaseRate as Rate from Item With (NoLock) where Code ='" & Dgl1.Item(Col1Item, mRow).Tag & "'"
                        DtItem = AgL.FillData(mQry, AgL.GCn).Tables(0)
                        If DtItem.Rows.Count > 0 Then
                            Dgl1.Item(Col1Rate, mRow).Value = AgL.VNull(DtItem.Rows(0)("Rate"))
                        End If
                        FSetSalesTaxGroupItemBasedOnRate(mRow)
                    Else
                        Dgl1.Item(Col1Rate, mRow).Value = AgL.VNull(DtTemp.Rows(I)("Rate"))
                    End If

                    If FDivisionNameForCustomization(4) = "X DEVI" Then
                        Dgl1.Item(Col1Rate, mRow).Value = FGetLastPurchaseRate(mRow)
                    End If

                    Dgl1.Item(Col1Qty, mRow).Value = 0 'AgL.VNull(DtTemp.Rows(I)("Qty_Bal"))
                    Dgl1.Item(Col1DocQty, mRow).Value = 0 'AgL.VNull(DtTemp.Rows(I)("Qty_Bal"))
                    Dgl1.Item(Col1ReferenceNo, mRow).Value = IIf(AgL.XNull(DtTemp.Rows(I)("PartyDocNo")) = "", AgL.XNull(DtTemp.Rows(I)("InvoiceNo")), AgL.XNull(DtTemp.Rows(I)("PartyDocNo")))
                    Dgl1.Item(Col1ReferenceDate, mRow).Value = IIf(AgL.XNull(DtTemp.Rows(I)("PartyDocDate")) = "", AgL.XNull(DtTemp.Rows(I)("InvoiceDate")), AgL.XNull(DtTemp.Rows(I)("PartyDocDate")))
                    Dgl1.Item(Col1ReferenceDocID, mRow).Value = AgL.XNull(DtTemp.Rows(I)("StockDocID"))
                    Dgl1.Item(Col1ReferenceTSr, mRow).Value = AgL.XNull(DtTemp.Rows(I)("StockTSr"))
                    Dgl1.Item(Col1ReferenceSr, mRow).Value = AgL.XNull(DtTemp.Rows(I)("StockSr"))

                Next

                FShowTransactionHistory(AgL.XNull(DtTemp.Rows(0)("SkuCode")))
                Calculation()
            End If
        Catch ex As Exception
            MsgBox(ex.Message & " On Validating_Item Function ")
        End Try
    End Sub


    Private Sub FSetSalesTaxGroupItemBasedOnRate(mRowIndex As Integer)
        Dim DtMain As DataTable
        If Dgl1.Item(Col1ItemCategory, mRowIndex).Tag <> "" And Val(Dgl1.Item(Col1Rate, mRowIndex).Value) > 0 Then
            If AgL.PubServerName = "" Then
                mQry = "Select SalesTaxGroupItem From ItemCategorySalesTax  With (NoLock) 
                Where Code='" & Dgl1.Item(Col1ItemCategory, mRowIndex).Tag & "' 
                And RateGreaterThan < " & Val(Dgl1.Item(Col1Rate, mRowIndex).Value) & " 
                And WEF <= " & AgL.Chk_Date(CDate(DglMain.Item(Col1Value, rowV_Date).Value).ToString("s")) & " 
                Order By WEF Desc, RateGreaterThan Desc Limit 1"
            Else
                mQry = "Select Top 1 SalesTaxGroupItem From ItemCategorySalesTax  With (NoLock)
                Where Code='" & Dgl1.Item(Col1ItemCategory, mRowIndex).Tag & "' 
                And RateGreaterThan < " & Val(Dgl1.Item(Col1Rate, mRowIndex).Value) & " 
                And WEF <= " & AgL.Chk_Date(CDate(DglMain.Item(Col1Value, rowV_Date).Value).ToString("s")) & " 
                Order By WEF Desc, RateGreaterThan Desc"
            End If
            DtMain = AgL.FillData(mQry, AgL.GCn).Tables(0)
            If DtMain.Rows.Count > 0 Then
                Dgl1.Item(Col1SalesTaxGroup, mRowIndex).Value = AgL.XNull(DtMain.Rows(0)("SalesTaxGroupItem"))
                Dgl1.Item(Col1SalesTaxGroup, mRowIndex).Tag = AgL.XNull(DtMain.Rows(0)("SalesTaxGroupItem"))
            End If
        End If
    End Sub


    Private Function GetSaleRate(RowIndex As Integer) As Double
        Dim mPricePerUnit As Double
        Dim mSaleRate As Double = Math.Round(Val(Dgl1.Item(Col1Rate, RowIndex).Value), 3)
        If Val(Dgl1.Item(Col1ProfitMarginPer, RowIndex).Value) > 0 Then
            If ClsMain.IsScopeOfWorkContains(IndustryType.MedicalIndustry) Or FDivisionNameForCustomization(9) = "CITY LOOK" Then
                mPricePerUnit = Val(Dgl1.Item(Col1Rate, RowIndex).Value)
            Else
                mPricePerUnit = Val(Dgl1.Item(Col1Amount, RowIndex).Value) / Val(Dgl1.Item(Col1Qty, RowIndex).Value)
            End If
            'mSaleRate = Math.Round(mPricePerUnit + mPricePerUnit * Val(Dgl1.Item(Col1ProfitMarginPer, RowIndex).Value) / 100, 2)
            If Val(Dgl1.Item(Col1ProfitMarginPer, RowIndex).Value) > 0 Then
                If ClsMain.IsScopeOfWorkContains(IndustryType.MedicalIndustry) Then
                    mSaleRate = Math.Round(mPricePerUnit + mPricePerUnit * Val(Dgl1.Item(Col1ProfitMarginPer, RowIndex).Value) / 100, 2)
                Else
                    mSaleRate = Math.Round(mPricePerUnit + mPricePerUnit * Val(Dgl1.Item(Col1ProfitMarginPer, RowIndex).Value) / 100, 0)
                End If

                Dim mMarginRoundPlaces As Integer = AgL.VNull(FGetSettings(SettingFields.Default_MarginRoundPlaces, SettingType.General))
                If mMarginRoundPlaces > 0 Then
                    mSaleRate = Math.Round(mSaleRate, 0) + (mMarginRoundPlaces - (Math.Round(mSaleRate, 0) Mod mMarginRoundPlaces))
                End If
            End If
        End If
        GetSaleRate = mSaleRate
    End Function

    Private Sub Validating_ItemCategory(ByVal mColumn As Integer, ByVal mRow As Integer)
        Dim DtTemp As DataTable = Nothing
        Try
            Dgl1.Item(Col1ItemGroup, mRow).Value = ""
            Dgl1.Item(Col1ItemGroup, mRow).Tag = ""
            Dgl1.Item(Col1Item, mRow).Value = ""
            Dgl1.Item(Col1Item, mRow).Tag = ""
            Dgl1.Item(Col1Unit, mRow).Value = ""
            Dgl1.Item(Col1Dimension1, mRow).Value = ""
            Dgl1.Item(Col1Dimension1, mRow).Tag = ""
            Dgl1.Item(Col1Dimension2, mRow).Value = ""
            Dgl1.Item(Col1Dimension2, mRow).Tag = ""

            Dgl1.AgHelpDataSet(Col1ItemGroup) = Nothing
            Dgl1.AgHelpDataSet(Col1Item) = Nothing

            mQry = " Select Ic.Unit, Ic.ItemType, It.Name As ItemTypeName, 
                    Case When IfNull(U.ShowDimensionDetailInPurchase,0) = 1 Or IfNull(Ic.ShowDimensionDetailInPurchase,0) = 1 Then 1
                            Else 0 End As ShowDimensionDetailInPurchase, 
                    U.DecimalPlaces as QtyDecimalPlaces, Ic.* 
                    From ItemCategory Ic 
                    LEFT JOIN ItemType It On Ic.ItemType = It.Code
                    Left Join Unit U  With (NoLock) On Ic.Unit = U.Code 
                    Where Ic.Code = '" & Dgl1.Item(Col1ItemCategory, mRow).Tag & "'"
            Dim DtItemCategory As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)
            If DtItemCategory.Rows.Count > 0 Then
                Dgl1.Item(Col1Unit, mRow).Value = AgL.XNull(DtItemCategory.Rows(0)("Unit"))
                Dgl1.Item(Col1Unit, mRow).Tag = AgL.VNull(DtItemCategory.Rows(0)("ShowDimensionDetailInPurchase"))
                Dgl1.Item(Col1ItemType, mRow).Tag = AgL.XNull(DtItemCategory.Rows(0)("ItemType"))
                Dgl1.Item(Col1ItemType, mRow).Value = AgL.XNull(DtItemCategory.Rows(0)("ItemTypeName"))
                Dgl1.Item(Col1SalesTaxGroup, mRow).Tag = AgL.XNull(DtItemCategory.Rows(0)("SalesTaxGroup"))
                Dgl1.Item(Col1SalesTaxGroup, mRow).Value = AgL.XNull(DtItemCategory.Rows(0)("SalesTaxGroup"))
                Dgl1.Item(Col1QtyDecimalPlaces, mRow).Value = AgL.VNull(DtItemCategory.Rows(0)("QtyDecimalPlaces"))
                Dgl1.Item(Col1BarcodePattern, mRow).Value = AgL.XNull(DtItemCategory.Rows(0)("BarcodePattern"))
                Dgl1.Item(Col1BarcodeType, mRow).Value = AgL.XNull(DtItemCategory.Rows(0)("BarcodeType"))

                Dgl1.Item(Col1HSN, mRow).Value = AgL.XNull(DtItemCategory.Rows(0)("HSN"))
                Dgl1.Item(Col1IsNewItemAllowedPurch, mRow).Value = AgL.VNull(DtItemCategory.Rows(0)("IsNewItemAllowedPurch"))
                Dgl1.Item(Col1IsNewDimension1AllowedPurch, mRow).Value = AgL.VNull(DtItemCategory.Rows(0)("IsNewDimension1AllowedPurch"))
                Dgl1.Item(Col1IsNewDimension2AllowedPurch, mRow).Value = AgL.VNull(DtItemCategory.Rows(0)("IsNewDimension2AllowedPurch"))
                Dgl1.Item(Col1IsNewDimension3AllowedPurch, mRow).Value = AgL.VNull(DtItemCategory.Rows(0)("IsNewDimension3AllowedPurch"))
                Dgl1.Item(Col1IsNewDimension4AllowedPurch, mRow).Value = AgL.VNull(DtItemCategory.Rows(0)("IsNewDimension4AllowedPurch"))
            Else
                Dgl1.Item(Col1IsNewItemAllowedPurch, mRow).Value = ""
                Dgl1.Item(Col1IsNewDimension1AllowedPurch, mRow).Value = ""
                Dgl1.Item(Col1IsNewDimension2AllowedPurch, mRow).Value = ""
                Dgl1.Item(Col1IsNewDimension3AllowedPurch, mRow).Value = ""
                Dgl1.Item(Col1IsNewDimension4AllowedPurch, mRow).Value = ""
            End If
        Catch ex As Exception
            MsgBox(ex.Message & " On Validating_ItemCategory Function ")
        End Try
    End Sub

    Private Sub Validating_ItemGroup(ByVal mColumn As Integer, ByVal mRow As Integer)
        Dim DtTemp As DataTable = Nothing
        Try
            Dgl1.Item(Col1Item, mRow).Value = ""
            Dgl1.Item(Col1Item, mRow).Tag = ""
            'Dgl1.Item(Col1Unit, mRow).Value = ""
            Dgl1.Item(Col1Dimension1, mRow).Value = ""
            Dgl1.Item(Col1Dimension1, mRow).Tag = ""
            Dgl1.Item(Col1Dimension2, mRow).Value = ""
            Dgl1.Item(Col1Dimension2, mRow).Tag = ""

            Dgl1.AgHelpDataSet(Col1Item) = Nothing
        Catch ex As Exception
            MsgBox(ex.Message & " On Validating_ItemGroup Function ")
        End Try
    End Sub

    Private Sub FGetUnitMultiplier(ByVal mRow As Integer)
        Dim DtTemp As DataTable = Nothing
        Try


            'If Dgl1.Item(Col1DealUnit, mRow).Value <> "" And Dgl1.Item(Col1TotalDocDealQty, mRow).Value <> "" Then
            '    If Dgl1.Item(Col1MeasureUnit, mRow).Value = Dgl1.Item(Col1DeliveryMeasure, mRow).Value Then
            '        Dgl1.Item(Col1DeliveryMeasureMultiplier, mRow).Value = 1
            '    Else
            '        mQry = " SELECT Multiplier, Rounding FROM UnitConversion WHERE FromUnit = '" & Dgl1.Item(Col1MeasureUnit, mRow).Value & "' AND ToUnit =  '" & Dgl1.Item(Col1DeliveryMeasure, mRow).Value & "' "
            '        DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)
            '        With DtTemp
            '            If .Rows.Count > 0 Then
            '                Dgl1.Item(Col1DeliveryMeasureMultiplier, mRow).Value = AgL.VNull(.Rows(0)("Multiplier"))
            '            Else
            '                MsgBox("Define Multiplier In Unit Conversion To Convert " & Dgl1.Item(Col1DeliveryMeasure, mRow).Value & " From " & Dgl1.Item(Col1MeasureUnit, mRow).Value & " ", MsgBoxStyle.Information)
            '                Dgl1.Item(Col1DeliveryMeasure, mRow).Value = ""
            '            End If
            '        End With
            '    End If
            'End If

        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub

    Private Sub Txt_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs)
        Try
            If AgL.StrCmp(Topctrl1.Mode, "Browse") Then Exit Sub
            Select Case sender.name


                'Case TxtVendor.Name
                '    If TxtVendor.AgHelpDataSet Is Nothing Then
                '        FCreateHelpSubgroup(sender)
                '    End If


                'Case TxtBillToParty.Name
                '    If CType(sender, AgControls.AgTextBox).AgHelpDataSet Is Nothing Then
                '        If e.KeyCode <> Keys.Enter Then
                '            mQry = "SELECT Sg.SubCode As Code, Sg.Name || ',' || IfNull(C.CityName,'') As Account_Name " &
                '                    " FROM SubGroup Sg  With (NoLock) " &
                '                    " LEFT JOIN City C  With (NoLock) ON Sg.CityCode = C.CityCode  " &
                '                    " Where IfNull(Sg.Status,'" & AgTemplate.ClsMain.EntryStatus.Active & "') = '" & AgTemplate.ClsMain.EntryStatus.Active & "' "
                '            CType(sender, AgControls.AgTextBox).AgHelpDataSet(0, TabControl1.Top + TP1.Top, TabControl1.Left + TP1.Left) = AgL.FillData(mQry, AgL.GCn)
                '        End If
                '    End If



                'Case TxtAgent.Name
                '    If TxtAgent.AgHelpDataSet Is Nothing Then
                '        mQry = "SELECT Code, Name From ViewHelpSubgroup  With (NoLock) Where SubgroupType = '" & SubgroupType.PurchaseAgent & "' Order By Name "
                '        TxtAgent.AgHelpDataSet(0, TabControl1.Top + TP1.Top, TabControl1.Left + TP1.Left) = AgL.FillData(mQry, AgL.GCn)
                '    End If


                'Case TxtProcess.Name
                '    If e.KeyCode <> Keys.Enter Then
                '        If TxtProcess.AgHelpDataSet Is Nothing Then
                '            mQry = "Select P.NCat As Code, P.Description As Process, P.CostCenter, CCM.Name as CostCenterDesc, P.DefaultBillingType, P.Div_Code " &
                '                  " From Process P  With (NoLock)  " &
                '                  " Left Join CostCenterMast CCM On P.CostCenter = CCM.Code " &
                '                  " Order By P.Description "
                '            TxtProcess.AgHelpDataSet(4, TabControl1.Top + TP1.Top, TabControl1.Left + TP1.Left) = AgL.FillData(mQry, AgL.GCn)
                '        End If
                '    End If

                'Case TxtTags.Name
                '    If e.KeyCode <> Keys.Enter Then
                '        Dgl2.Item(Col1Value, rowTags).Value = FHPGD_Tags()
                '    End If
            End Select
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub
    Private Sub FrmStockHeadEntry_BaseEvent_DglMainEditingControlKeyDown(sender As Object, e As KeyEventArgs) Handles Me.BaseEvent_DglMainEditingControlKeyDown
        Try
            Dim mRow As Integer
            Dim mColumn As Integer
            mRow = DglMain.CurrentCell.RowIndex
            mColumn = DglMain.CurrentCell.ColumnIndex
            Select Case mRow
                Case rowVendor
                    If e.KeyCode <> Keys.Enter Then
                        If DglMain.Item(Col1Head, DglMain.CurrentCell.RowIndex).Tag Is Nothing Then
                            DglMain.Item(Col1Head, DglMain.CurrentCell.RowIndex).Tag = FCreateHelpSubgroup()
                        End If

                        If DglMain.AgHelpDataSet(Col1Value) Is Nothing Then
                            DglMain.AgHelpDataSet(Col1Value, 0, TabControl1.Top + TP1.Top, TabControl1.Left + TP1.Left) = DglMain.Item(Col1Head, DglMain.CurrentCell.RowIndex).Tag
                        End If
                    End If

                Case rowBillToParty
                    If e.KeyCode <> Keys.Enter Then
                        If DglMain.Item(Col1Head, DglMain.CurrentCell.RowIndex).Tag Is Nothing Then
                            mQry = "SELECT Sg.SubCode As Code, Sg.Name || ',' || IfNull(C.CityName,'') As Account_Name " &
                                    " FROM SubGroup Sg  With (NoLock) " &
                                    " LEFT JOIN City C  With (NoLock) ON Sg.CityCode = C.CityCode  " &
                                    " Where IfNull(Sg.Status,'" & AgTemplate.ClsMain.EntryStatus.Active & "') = '" & AgTemplate.ClsMain.EntryStatus.Active & "' "
                            DglMain.Item(Col1Head, DglMain.CurrentCell.RowIndex).Tag = AgL.FillData(mQry, AgL.GCn)
                        End If

                        If DglMain.AgHelpDataSet(Col1Value) Is Nothing Then
                            DglMain.AgHelpDataSet(Col1Value, 0, TabControl1.Top + TP1.Top, TabControl1.Left + TP1.Left) = DglMain.Item(Col1Head, DglMain.CurrentCell.RowIndex).Tag
                        End If
                    End If

                Case rowProcess
                    If e.KeyCode <> Keys.Enter Then
                        If DglMain.Item(Col1Head, DglMain.CurrentCell.RowIndex).Tag Is Nothing Then
                            DglMain.Item(Col1Head, DglMain.CurrentCell.RowIndex).Tag = FCreateHelpProcess()
                        End If

                        If DglMain.AgHelpDataSet(Col1Value) Is Nothing Then
                            DglMain.AgHelpDataSet(Col1Value, 0, TabControl1.Top + TP1.Top, TabControl1.Left + TP1.Left) = DglMain.Item(Col1Head, DglMain.CurrentCell.RowIndex).Tag
                        End If
                    End If

                Case rowLinkedParty
                    If e.KeyCode <> Keys.Enter Then
                        If DglMain.Item(Col1Head, DglMain.CurrentCell.RowIndex).Tag Is Nothing Then
                            DglMain.Item(Col1Head, DglMain.CurrentCell.RowIndex).Tag = FCreateHelpLinkedParty()
                        End If

                        If DglMain.AgHelpDataSet(Col1Value) Is Nothing Then
                            DglMain.AgHelpDataSet(Col1Value, 6, TabControl1.Top + TP1.Top, TabControl1.Left + TP1.Left) = DglMain.Item(Col1Head, DglMain.CurrentCell.RowIndex).Tag
                        End If
                    End If
            End Select

            If e.KeyCode = Keys.Enter Then
                Dim LastCell As DataGridViewCell = ClsMain.LastDisplayedCell(DglMain)
                If DglMain.CurrentCell.RowIndex = LastCell.RowIndex And DglMain.CurrentCell.ColumnIndex = LastCell.ColumnIndex Then
                    If Dgl2.Visible Then
                        Dgl2.CurrentCell = Dgl2.FirstDisplayedCell
                        Dgl2.Focus()
                    End If
                End If
            End If
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub
    Private Function FCreateHelpProcess() As DataSet
        Dim strCond As String = ""

        Dim FilterInclude_Process As String = FGetSettings(SettingFields.FilterInclude_Process, SettingType.General)
        If FilterInclude_Process <> "" Then
            strCond += " And (CharIndex('+' || Sg.Code,'" & FilterInclude_Process & "') > 0 Or
                                CharIndex('+' || Sg.Parent,'" & FilterInclude_Process & "') > 0) "
        End If

        mQry = "SELECT Code, Name From viewHelpSubgroup Sg  With (NoLock) 
                Where SubgroupType ='" & SubgroupType.Process & "' 
                And IfNull(Sg.Status,'" & AgTemplate.ClsMain.EntryStatus.Active & "') = '" & AgTemplate.ClsMain.EntryStatus.Active & "' " & strCond
        FCreateHelpProcess = AgL.FillData(mQry, AgL.GCn)
    End Function
    Private Sub Dgl2_EditingControl_KeyDown(sender As Object, e As KeyEventArgs) Handles Dgl2.EditingControl_KeyDown
        Try
            Dim mRow As Integer
            Dim mColumn As Integer

            If Dgl2.CurrentCell Is Nothing Then Exit Sub

            mRow = Dgl2.CurrentCell.RowIndex
            mColumn = Dgl2.CurrentCell.ColumnIndex
            Select Case mRow
                Case rowAgent
                    If e.KeyCode <> Keys.Enter Then
                        If Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag Is Nothing Then
                            mQry = "SELECT Code, Name From ViewHelpSubgroup  With (NoLock) Where SubgroupType = '" & SubgroupType.PurchaseAgent & "' Order By Name "
                            Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag = AgL.FillData(mQry, AgL.GCn)
                        End If

                        If Dgl2.AgHelpDataSet(Col1Value) Is Nothing Then
                            Dgl2.AgHelpDataSet(Col1Value, 0, TabControl1.Top + TP1.Top, TabControl1.Left + TP1.Left) = Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag
                        End If
                    End If
                Case rowShipToParty
                    If e.KeyCode <> Keys.Enter Then
                        If Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag Is Nothing Then
                            Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag = FCreateHelpSubgroup()
                        End If

                        If Dgl2.AgHelpDataSet(Col1Value) Is Nothing Then
                            Dgl2.AgHelpDataSet(Col1Value, 0, TabControl1.Top + TP1.Top, TabControl1.Left + TP1.Left) = Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag
                        End If
                    End If

                Case rowTags
                    If e.KeyCode <> Keys.Enter Then
                        Dgl2.Item(Col1Value, rowTags).Value = FHPGD_Tags()
                    End If

                Case rowRateType
                    If e.KeyCode <> Keys.Enter Then
                        If Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag Is Nothing Then
                            mQry = "SELECT Code, Description FROM RateType With (NoLock) Order By Description "
                            Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag = AgL.FillData(mQry, AgL.GCn)
                        End If

                        If Dgl2.AgHelpDataSet(Col1Value) Is Nothing Then
                            Dgl2.AgHelpDataSet(Col1Value,, TabControl1.Top + TP1.Top, TabControl1.Left + TP1.Left) = Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag
                        End If
                    End If

                Case rowFromProcess
                    If e.KeyCode <> Keys.Enter Then
                        If Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag Is Nothing Then
                            mQry = "SELECT SubCode As Code, Name FROM SubGroup With (NoLock) 
                                    Where SubGroupType = '" & SubgroupType.Process & "' 
                                    Order By Name "
                            Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag = AgL.FillData(mQry, AgL.GCn)
                        End If

                        If Dgl2.AgHelpDataSet(Col1Value) Is Nothing Then
                            Dgl2.AgHelpDataSet(Col1Value,, TabControl1.Top + TP1.Top, TabControl1.Left + TP1.Left) = Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag
                        End If
                    End If

                Case rowGodown, rowFromGodown, rowToGodown
                    If e.KeyCode <> Keys.Enter Then
                        If Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag Is Nothing Then
                            mQry = "SELECT Code, Name From viewHelpSubgroup Sg  With (NoLock) Where SubgroupType ='" & SubgroupType.Godown & "' Order By Name"
                            Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag = AgL.FillData(mQry, AgL.GCn)
                        End If

                        If Dgl2.AgHelpDataSet(Col1Value) Is Nothing Then
                            Dgl2.AgHelpDataSet(Col1Value,, TabControl1.Top + TP1.Top, TabControl1.Left + TP1.Left) = Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag
                        End If
                    End If

                Case rowStructure
                    If e.KeyCode <> Keys.Enter Then
                        If Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag Is Nothing Then
                            mQry = "SELECT Code, Description FROM Structure WHERE Code IN ('GstPur','GstPurMrp')"
                            Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag = AgL.FillData(mQry, AgL.GCn)
                        End If

                        If Dgl2.AgHelpDataSet(Col1Value) Is Nothing Then
                            Dgl2.AgHelpDataSet(Col1Value,, TabControl1.Top + TP1.Top, TabControl1.Left + TP1.Left) = Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag
                        End If
                    End If

                Case rowCatalog
                    If e.KeyCode <> Keys.Enter Then
                        If Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag Is Nothing Then
                            mQry = "SELECT Code, Description FROM Catalog Where Site_Code = '" & DglMain.Item(Col1Value, rowSite_Code).Tag & "' Order By Description "
                            Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag = AgL.FillData(mQry, AgL.GCn)
                        End If

                        If Dgl2.AgHelpDataSet(Col1Value) Is Nothing Then
                            Dgl2.AgHelpDataSet(Col1Value,, TabControl1.Top + TP1.Top, TabControl1.Left + TP1.Left) = Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag
                        End If
                    End If


                    'Case rowStockIssRecNos
                    '    If e.KeyCode <> Keys.Enter Then
                    '        If Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag Is Nothing Then
                    '            mQry = "SELECT H.DocID, H.V_Type + '-' +  H.ManualRefNo AS StockIssRecNo, H.V_Date As Date
                    '                    FROM StockHead H 
                    '                    LEFT JOIN Voucher_Type Vt ON H.V_Type = Vt.V_Type
                    '                    WHERE Vt.NCat = '" & Ncat.StockIssue & "' "
                    '            Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag = AgL.FillData(mQry, AgL.GCn)
                    '        End If

                    '        If Dgl2.AgHelpDataSet(Col1Value) Is Nothing Then
                    '            Dgl2.AgHelpDataSet(Col1Value,, TabControl1.Top + TP1.Top, TabControl1.Left + TP1.Left) = Dgl2.Item(Col1Head, Dgl2.CurrentCell.RowIndex).Tag
                    '        End If
                    '    End If
            End Select

            If e.KeyCode = Keys.Enter Then
                Dim LastCell As DataGridViewCell = ClsMain.LastDisplayedCell(Dgl2)
                If Dgl2.CurrentCell.RowIndex = LastCell.RowIndex And Dgl2.CurrentCell.ColumnIndex = LastCell.ColumnIndex Then
                    If Dgl1.Visible Then
                        Dgl1.CurrentCell = Dgl1.FirstDisplayedCell
                        Dgl1.Focus()
                    End If
                End If
            End If
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub

    Private Function FHPGD_Tags() As String
        Dim FRH_Multiple As DMHelpGrid.FrmHelpGrid_Multi
        Dim StrRtn As String = ""
        Dim mLineCond As String = ""
        Dim DtTemp As DataTable

        mQry = " Select 'o' As Tick, T.Description, T.Description As Tag From Tag T "
        DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)

        FRH_Multiple = New DMHelpGrid.FrmHelpGrid_Multi(New DataView(DtTemp), "", 300, 230, , , False)
        FRH_Multiple.FFormatColumn(0, "Tick", 40, DataGridViewContentAlignment.MiddleCenter, True)
        FRH_Multiple.FFormatColumn(1, , 0, , False)
        FRH_Multiple.FFormatColumn(2, "Tag", 100, DataGridViewContentAlignment.MiddleLeft)
        FRH_Multiple.StartPosition = FormStartPosition.CenterScreen
        FRH_Multiple.ShowDialog()

        If FRH_Multiple.BytBtnValue = 0 Then
            FHPGD_Tags = "+" + FRH_Multiple.FFetchData(2, "", "", "+")
        Else
            FHPGD_Tags = ""
        End If
        FRH_Multiple = Nothing
    End Function

    Private Function FHPGD_UnRelatedStockIn(ByRef Code As String, ByRef Description As String) As String
        Dim FRH_Multiple As DMHelpGrid.FrmHelpGrid_Multi
        Dim StrRtn As String = ""
        Dim mLineCond As String = ""
        Dim DtTemp As DataTable

        mQry = "SELECT 'o' As Tick, L.DocID AS Code, Max(L.V_Type + '-' + L.RecId) AS StockInNo
                FROM Stock L
                LEFT JOIN Voucher_Type Vt ON L.V_Type = Vt.V_Type
                LEFT JOIN (
                    Select Pis.StockInDocId
                    From PurchInvoiceUnRelatedStockIn Pis
                    Where Pis.DocId <> '" & mSearchCode & "'
                ) As VPis On L.DocId = VPis.StockInDocId
                WHERE Vt.NCat = '" & Ncat.PurchaseGoodsReceipt & "'
                And VPis.StockInDocId Is Null
                GROUP BY L.DocID "
        DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)

        FRH_Multiple = New DMHelpGrid.FrmHelpGrid_Multi(New DataView(DtTemp), "", 300, 230, , , False)
        FRH_Multiple.FFormatColumn(0, "Tick", 40, DataGridViewContentAlignment.MiddleCenter, True)
        FRH_Multiple.FFormatColumn(1, , 0, , False)
        FRH_Multiple.FFormatColumn(2, "Stock In No", 100, DataGridViewContentAlignment.MiddleLeft)
        FRH_Multiple.StartPosition = FormStartPosition.CenterScreen
        FRH_Multiple.ShowDialog()

        If FRH_Multiple.BytBtnValue = 0 Then
            Code = FRH_Multiple.FFetchData(1, "", "", ",")
            Description = FRH_Multiple.FFetchData(2, "", "", ",")
        Else
            Code = ""
            Description = ""
        End If
        FRH_Multiple = Nothing
    End Function

    Private Function FCreateHelpSubgroup() As DataSet
        Dim strCond As String = ""
        If DtV_TypeSettings.Rows.Count > 0 Then
            If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_AcGroup")) <> "" Then
                If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_AcGroup")).ToString.Substring(0, 1) = "+" Then
                    strCond += " And CharIndex('+' || H.GroupCode,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_AcGroup")) & "') > 0 "
                ElseIf AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_AcGroup")).ToString.Substring(0, 1) = "-" Then
                    strCond += " And CharIndex('-' || H.GroupCode,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_AcGroup")) & "') <= 0 "
                End If
            End If


            If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_Nature")) <> "" Then
                If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_Nature")).ToString.Substring(0, 1) = "+" Then
                    strCond += " And CharIndex('+' || H.Nature,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_Nature")) & "') > 0 "
                ElseIf AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_Nature")).ToString.Substring(0, 1) = "-" Then
                    strCond += " And CharIndex('-' || H.Nature,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_Nature")) & "') <= 0 "
                End If
            End If
        End If


        Dim bFilterInclude_Process As String = FGetSettings(SettingFields.FilterInclude_Process, SettingType.General)
        If AgL.XNull(DglMain.Item(Col1Value, rowProcess).Tag) <> "" Then
            bFilterInclude_Process = "+" + AgL.XNull(DglMain.Item(Col1Value, rowProcess).Tag)
        End If
        If bFilterInclude_Process <> "" Then
            If bFilterInclude_Process.ToString.Substring(0, 1) = "+" Then
                strCond += " And (CharIndex('+' || IfNull(Sp.Process,'" & Process.Purchase & "'),'" & bFilterInclude_Process & "') > 0
                                   Or CharIndex('+' || IfNull(P.Parent,'" & Process.Purchase & "'),'" & bFilterInclude_Process & "') > 0) "
            ElseIf bFilterInclude_Process.ToString.Substring(0, 1) = "-" Then
                strCond += " And (CharIndex('-' || IfNull(Sp.Process,'" & Process.Purchase & "'),'" & bFilterInclude_Process & "') <= 0 
                                   CharIndex('-' || IfNull(P.Parent,'" & Process.Purchase & "'),'" & bFilterInclude_Process & "') <= 0)  "
            End If
        End If


        'strCond += " And H.Nature In ('" & ClsMain.SubGroupNature.Customer & "','" & ClsMain.SubGroupNature.Supplier & "','" & ClsMain.SubGroupNature.Cash & "')"

        mQry = " SELECT Distinct H.SubCode, H.Name || (Case When C.CityName Is Not Null Then ',' || C.CityName Else '' End) AS [Party], " &
                " H.Nature, H.SalesTaxPostingGroup " &
                " FROM SubGroup H  With (NoLock) " &
                " LEFT JOIN City C ON H.CityCode = C.CityCode  " &
                " Left Join SubgroupProcess SP On H.Subcode = SP.Subcode " &
                " Left Join SubGroup P On Sp.Process = P.Subcode " &
                " Where IfNull(H.Status,'" & AgTemplate.ClsMain.EntryStatus.Active & "') = '" & AgTemplate.ClsMain.EntryStatus.Active & "' " & strCond
        mQry += " Union All SELECT Distinct H.SubCode, H.Name || (Case When C.CityName Is Not Null Then ',' || C.CityName Else '' End) AS [Party], " &
                " H.Nature, H.SalesTaxPostingGroup " &
                " FROM SubGroup H  With (NoLock) " &
                " LEFT JOIN City C ON H.CityCode = C.CityCode  " &
                " Left Join SubgroupProcess SP On H.Subcode = SP.Subcode " &
                " Where IfNull(H.Status,'" & AgTemplate.ClsMain.EntryStatus.Active & "') = '" & AgTemplate.ClsMain.EntryStatus.Active & "' " &
                " And H.Nature In ('" & ClsMain.SubGroupNature.Customer & "')    "
        If bFilterInclude_Process <> "" Then
            mQry += " And CharIndex('+' || IfNull(Sp.Process,'.'),'" & bFilterInclude_Process & "') > 0 "
        End If

        'sender.AgHelpDataSet(2, TabControl1.Top + TP1.Top, TabControl1.Left + TP1.Left) = AgL.FillData(mQry, AgL.GCn)
        Return AgL.FillData(mQry, AgL.GCn)
    End Function
    Private Function FCreateHelpLinkedParty() As DataSet
        Dim strCond As String = ""

        strCond += " And Sg.Nature In ('" & ClsMain.SubGroupNature.Customer & "','" & ClsMain.SubGroupNature.Supplier & "','" & ClsMain.SubGroupNature.Cash & "','" & ClsMain.SubGroupNature.Bank & "')"

        If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_AcTreeNodeType")).ToString.Contains(TreeNodeType.Leaf) Then
            strCond += " And Sg.SubCode In (Select Parent From SubGroup Where Subcode = '" & DglMain.Item(Col1Value, rowVendor).Tag & "')"
        End If

        strCond += " And Sg.Parent = '" & DglMain.Item(Col1Value, rowVendor).Tag & "' "

        mQry = "SELECT Sg.SubCode As Code, Sg.Name || ',' || IfNull(C.CityName,'') As Party, Sg.Address, Ag.GroupName, Sg.SalesTaxPostingGroup, " &
                " Sg.SalesTaxPostingGroup, " &
                " Sg.Div_Code, Sg.CreditDays, Sg.CreditLimit, Sg.Nature " &
                " FROM SubGroup Sg  With (NoLock) " &
                " LEFT JOIN City C  With (NoLock) ON Sg.CityCode = C.CityCode  " &
                " Left Join AcGroup Ag  With (NoLock) on Sg.GroupCode = Ag.GroupCode " &
                " Where 1 = 1 " &
                " And IfNull(Sg.Status,'" & AgTemplate.ClsMain.EntryStatus.Active & "') = '" & AgTemplate.ClsMain.EntryStatus.Active & "' " & strCond
        'TxtBillToParty.AgHelpDataSet(6, TabControl1.Top + TP1.Top, TabControl1.Left + TP1.Left) = AgL.FillData(mQry, AgL.GCn)
        Return AgL.FillData(mQry, AgL.GCn)
    End Function

    Private Sub Dgl1_RowEnter(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles Dgl1.RowEnter
        If mFlag_Import = True Then Exit Sub
        'If CType(AgL.VNull(DtV_TypeSettings.Rows(0)("IsVisible_TransactionHistory")), Boolean) = True Then
        If AgL.XNull(Dgl1.Item(Col1SKU, e.RowIndex).Tag) = "" Then
            FShowTransactionHistory(Dgl1.Item(Col1Item, e.RowIndex).Tag)
        Else
            FShowTransactionHistory(Dgl1.Item(Col1SKU, e.RowIndex).Tag)
        End If
        'End If
    End Sub

    Private Sub Dgl1_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles Dgl1.Leave
        DGL.Visible = False
    End Sub

    'Private Sub FCheckDuplicate(ByVal mRow As Integer)
    '    Dim I As Integer = 0
    '    Try
    '        With Dgl1
    '            For I = 0 To .Rows.Count - 1
    '                If .Item(Col1Item, I).Value <> "" Then
    '                    If mRow <> I Then
    '                        If AgL.StrCmp(.Item(Col1Item, I).Value, .Item(Col1Item, mRow).Value) Then
    '                            If MsgBox("Item " & .Item(Col1Item, I).Value & " Is Already Feeded At Row No " & .Item(ColSNo, I).Value & ".Do You Want To Continue ?", MsgBoxStyle.Information + MsgBoxStyle.YesNo) = MsgBoxResult.No Then
    '                                Dgl1.Item(Col1Item, mRow).Tag = "" : Dgl1.Item(Col1Item, mRow).Value = ""
    '                            End If
    '                            '.CurrentCell = .Item(Col1Item, I) : Dgl1.Focus()
    '                            '.Rows.Remove(.Rows(mRow)) : Exit Sub
    '                        End If
    '                    End If
    '                End If
    '            Next
    '        End With
    '    Catch ex As Exception
    '        MsgBox(ex.Message)
    '    End Try
    'End Sub

    Private Sub FCheckDuplicate(ByVal mRow As Integer)
        Dim I As Integer = 0
        Dim Str1 As String = ""
        Dim Str2 As String = ""
        Try
            If AgL.XNull(DtV_TypeSettings.Rows(0)("ActionOnDuplicateItem")).ToString <> ActionOnDuplicateItem.DoNothing Then
                With Dgl1
                    For I = 0 To .Rows.Count - 1
                        If .Item(Col1Item, I).Value <> "" Then
                            If mRow <> I Then
                                Str1 = Dgl1.Item(Col1Item, I).Value & Dgl1.Item(Col1Specification, I).Value & Dgl1.Item(Col1Dimension1, I).Value & Dgl1.Item(Col1Dimension2, I).Value & Dgl1.Item(Col1Dimension3, I).Value & Dgl1.Item(Col1Dimension4, I).Value
                                Str2 = Dgl1.Item(Col1Item, mRow).Value & Dgl1.Item(Col1Specification, mRow).Value & Dgl1.Item(Col1Dimension1, mRow).Value & Dgl1.Item(Col1Dimension2, mRow).Value & Dgl1.Item(Col1Dimension3, mRow).Value & Dgl1.Item(Col1Dimension4, mRow).Value
                                If AgL.StrCmp(Str1, Str2) Then
                                    If MsgBox("Item " & .Item(Col1Item, I).Value & " Is Already Feeded At Row No " & .Item(ColSNo, I).Value & ".Do You Want To Continue ?", MsgBoxStyle.Information + MsgBoxStyle.YesNo) = MsgBoxResult.No Then
                                        Dgl1.Item(Col1Item, mRow).Tag = "" : Dgl1.Item(Col1Item, mRow).Value = ""
                                    Else
                                        If AgL.XNull(DtV_TypeSettings.Rows(0)("ActionOnDuplicateItem")).ToString = ActionOnDuplicateItem.AlertAndAskToContinue Then
                                        ElseIf AgL.XNull(DtV_TypeSettings.Rows(0)("ActionOnDuplicateItem")).ToString = ActionOnDuplicateItem.AlertAndGoToFirstItem Then
                                            Dim mFirstRowIndex As Integer
                                            mFirstRowIndex = Val(Dgl1.Item(ColSNo, I).Value) - 1
                                            Dgl1.CurrentCell = Dgl1.Item(Col1DocQty, mFirstRowIndex)
                                            Dgl1.Item(Col1Item, mRow).Tag = "" : Dgl1.Item(Col1Item, mRow).Value = ""
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    Next
                End With
            End If
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub

    Private Sub FUpdateDeal(ByVal mRow As Integer, ByVal Conn As Object, ByVal Cmd As Object)
        Dim UPDATEQRY$ = ""
        If AgL.PubServerName = "" Then
            UPDATEQRY = " UPDATE Item Set " &
                " Deal = (Select L.DEAL From PURCHINVOICEDETAIL L  With (NoLock) LEFT JOIN PURCHINVOICE H  With (NoLock) ON L.DOCID = H.DOCID ORDER BY V_DATE DESC Limit 1) " &
                " Where Code = '" & Dgl1.Item(Col1Item, mRow).Tag & "'"
        Else
            UPDATEQRY = " UPDATE Item Set " &
                " Deal = (Select Top 1 L.DEAL From PURCHINVOICEDETAIL L  With (NoLock) LEFT JOIN PURCHINVOICE H  With (NoLock) ON L.DOCID = H.DOCID ORDER BY V_DATE DESC) " &
                " Where Code = '" & Dgl1.Item(Col1Item, mRow).Tag & "'"
        End If
        AgL.Dman_ExecuteNonQry(UPDATEQRY, Conn, Cmd)
    End Sub

    'Private Sub FOpenItemMaster()
    '    Dim FrmObj As Object = Nothing
    '    Dim CFOpen As New ClsFunction
    '    Dim MDI As New MDIMain
    '    Dim DrTemp As DataRow() = Nothing
    '    Dim bRowIndex As Integer = 0, bColumnIndex As Integer = 0
    '    Dim bItemCode$ = ""
    '    Try
    '        bRowIndex = Dgl1.CurrentCell.RowIndex
    '        bColumnIndex = Dgl1.CurrentCell.ColumnIndex

    '        Select Case Dgl1.Columns(Dgl1.CurrentCell.ColumnIndex).Name
    '            Case Col1Item
    '                FrmObj = CFOpen.FOpen("MnuItemMaster", "Item Master", True)
    '                If FrmObj IsNot Nothing Then
    '                    FrmObj.StartPosition = FormStartPosition.Manual
    '                    FrmObj.IsReturnValue = True
    '                    FrmObj.Top = 50
    '                    FrmObj.ShowDialog()
    '                    bItemCode = FrmObj.mItemCode
    '                    FrmObj = Nothing

    '                    Dgl1.Item(Col1Item, bRowIndex).Value = ""
    '                    Dgl1.Item(Col1Item, bRowIndex).Tag = ""

    '                    Dgl1.CurrentCell = Dgl1.Item(Col1DocQty, bRowIndex)

    '                    mQry = "SELECT I.Code, I.Description, I.ManualCode, I.Specification, I.Unit, I.SalesTaxPostingGroup, I.Measure As MeasurePerPcs, " & _
    '                              " I.MeasureUnit, I.Rate, " & _
    '                              " U.DecimalPlaces As QtyDecimalPlaces, U1.DecimalPlaces As MeasureDecimalPlaces " & _
    '                              " FROM Item I " & _
    '                              " LEFT JOIN Unit U On I.Unit = U.Code " & _
    '                              " LEFT JOIN Unit U1 On I.MeasureUnit = U1.Code " & _
    '                              " Where IfNull(I.Status,'" & AgTemplate.ClsMain.EntryStatus.Active & "') = '" & AgTemplate.ClsMain.EntryStatus.Active & "' "
    '                    Dgl1.AgHelpDataSet(Col1Item, 7) = AgL.FillData(mQry, AgL.GCn)

    '                    If Dgl1.AgHelpDataSet(Col1Item) IsNot Nothing Then
    '                        DrTemp = Dgl1.AgHelpDataSet(Col1Item).Tables(0).Select("Code = '" & bItemCode & "'")
    '                        If DrTemp.Length > 0 Then
    '                            Dgl1.Item(Col1Item, bRowIndex).Tag = AgL.XNull(DrTemp(0)("Code"))
    '                            Dgl1.Item(Col1Item, bRowIndex).Value = AgL.XNull(DrTemp(0)("Description"))
    '                            Dgl1.Item(Col1ItemCode, bRowIndex).Tag = AgL.XNull(DrTemp(0)("Code"))
    '                            Dgl1.Item(Col1ItemCode, bRowIndex).Value = AgL.XNull(DrTemp(0)("ManualCode"))
    '                            Dgl1.Item(Col1Specification, bRowIndex).Value = AgL.XNull(DrTemp(0)("Specification"))
    '                            Dgl1.Item(Col1Unit, bRowIndex).Value = AgL.XNull(DrTemp(0)("Unit"))
    '                            Dgl1.Item(Col1QtyDecimalPlaces, bRowIndex).Value = AgL.VNull(DrTemp(0)("QtyDecimalPlaces"))
    '                            Dgl1.Item(Col1MeasurePerPcs, bRowIndex).Value = AgL.XNull(DrTemp(0)("MeasurePerPcs"))
    '                            Dgl1.Item(Col1MeasureUnit, bRowIndex).Value = AgL.XNull(DrTemp(0)("MeasureUnit"))
    '                            Dgl1.Item(Col1MeasureDecimalPlaces, bRowIndex).Value = AgL.VNull(DrTemp(0)("MeasureDecimalPlaces"))
    '                            Dgl1.Item(Col1DeliveryMeasure, bRowIndex).Value = AgL.XNull(DrTemp(0)("MeasureUnit"))
    '                            Dgl1.Item(Col1DeliveryMeasureMultiplier, bRowIndex).Value = 1
    '                            Dgl1.Item(Col1Rate, bRowIndex).Value = AgL.XNull(DrTemp(0)("Rate"))
    '                            Dgl1.Item(Col1SalesTaxGroup, bRowIndex).Tag = AgL.XNull(DrTemp(0)("SalesTaxPostingGroup"))
    '                            Dgl1.Item(Col1SalesTaxGroup, bRowIndex).Value = AgL.XNull(DrTemp(0)("SalesTaxPostingGroup"))
    '                            If AgL.StrCmp(Dgl1.AgSelectedValue(Col1SalesTaxGroup, bRowIndex), "") Then
    '                                Dgl1.Item(Col1SalesTaxGroup, bRowIndex).Tag = AgL.XNull(AgL.PubDtEnviro.Rows(0)("Default_SalesTaxGroupItem"))
    '                                Dgl1.Item(Col1SalesTaxGroup, bRowIndex).Value = AgL.XNull(AgL.PubDtEnviro.Rows(0)("Default_SalesTaxGroupItem"))
    '                            End If
    '                        End If
    '                    End If
    '                End If
    '        End Select
    '    Catch ex As Exception
    '        MsgBox(ex.Message)
    '    End Try
    'End Sub

    Private Sub FGetPurchIndent(ByVal ItemCode As String, ByRef PurchIndent As String)
        mQry = " Select H.DocId From PurchIndent H  With (NoLock) LEFT JOIN PurchIndentDetail L  With (NoLock) On H.DocId = L.DocId " &
                " Where L.Item = '" & ItemCode & "' " &
                " And H.V_Date <= '" & DglMain.Item(Col1Value, rowV_Date).Value & "' " &
                " Order By H.V_Date  "
        PurchIndent = AgL.XNull(AgL.Dman_Execute(mQry, AgL.GCn).ExecuteScalar)
    End Sub
    'Private Sub TxtVendorDocDate_Enter(ByVal sender As Object, ByVal e As System.EventArgs)
    '    Try
    '        Select Case sender.Name
    '            Case TxtVendorDocDate.Name
    '                If Dgl2.Item(Col1Value, rowVendorDocDate).Value = "" Then
    '                    Dgl2.Item(Col1Value, rowVendorDocDate).Value = DglMain.Item(Col1Value, rowV_Date).Value
    '                End If
    '        End Select
    '    Catch ex As Exception
    '        MsgBox(ex.Message)
    '    End Try
    'End Sub
    Private Sub FCreateHelpItem(RowIndex As Integer)
        Dim strCond As String = ""


        If LblV_Type.Tag = Ncat.PurchaseInvoice Or LblV_Type.Tag = Ncat.PurchaseGoodsReceipt Or
            LblV_Type.Tag = Ncat.OpeningStock Then
            If AgL.VNull(Dgl1.Item(Col1IsNewItemAllowedPurch, RowIndex).Value) <> 0 Then
                Dgl1.AgHelpDataSet(Col1Item) = Nothing : Exit Sub
            End If
        End If


        Dim ContraV_TypeCondStr As String = ""

        If DtV_TypeSettings.Rows.Count > 0 Then
            If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) <> "" Then
                If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")).ToString.Substring(0, 1) = "+" Then
                    strCond += " And CharIndex('+' || I.ItemType,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) & "') > 0 "
                ElseIf AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")).ToString.Substring(0, 1) = "-" Then
                    strCond += " And CharIndex('-' || I.ItemType,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) & "') <= 0 "
                End If
            End If

            If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemGroup")) <> "" Then
                If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemGroup")).ToString.Substring(0, 1) = "+" Then
                    strCond += " And CharIndex('+' || I.ItemGroup,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemGroup")) & "') > 0 "
                ElseIf AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemGroup")).ToString.Substring(0, 1) = "-" Then
                    strCond += " And CharIndex('-' || I.ItemGroup,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemGroup")) & "') <= 0 "
                End If
            End If

            If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemCategory")) <> "" Then
                If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemCategory")).ToString.Substring(0, 1) = "+" Then
                    strCond += " And CharIndex('+' || I.ItemCategory,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemCategory")) & "') > 0 "
                ElseIf AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemCategory")).ToString.Substring(0, 1) = "-" Then
                    strCond += " And CharIndex('-' || I.ItemCategory,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemCategory")) & "') <= 0 "
                End If
            End If

            If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemV_Type")) <> "" Then
                If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemV_Type")).ToString.Substring(0, 1) = "+" Then
                    strCond += " And CharIndex('+' || I.V_Type,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemV_Type")) & "') > 0 "
                ElseIf AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemV_Type")).ToString.Substring(0, 1) = "-" Then
                    strCond += " And CharIndex('-' || I.V_Type,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemV_Type")) & "') <= 0 "
                End If
            Else
                strCond += " And I.V_Type In  ('ITEM','IC') "
            End If


            If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_Item")) <> "" Then
                If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_Item")).ToString.Substring(0, 1) = "+" Then
                    strCond += " And CharIndex('+' || I.Code,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_Item")) & "') > 0 "
                ElseIf AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_Item")).ToString.Substring(0, 1) = "-" Then
                    strCond += " And CharIndex('-' || I.Code,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_Item")) & "') <= 0 "
                End If
            End If
        End If

        Dim bFilterInclude_ItemV_Type As String = FGetSettings(SettingFields.FilterInclude_ItemV_Type, SettingType.General)
        If bFilterInclude_ItemV_Type <> "" Then
            If bFilterInclude_ItemV_Type.Substring(0, 1) = "+" Then
                strCond += " And CharIndex('+' || I.V_Type,'" & bFilterInclude_ItemV_Type & "') > 0 "
            ElseIf bFilterInclude_ItemV_Type.Substring(0, 1) = "-" Then
                strCond += " And CharIndex('-' || I.V_Type,'" & bFilterInclude_ItemV_Type & "') <= 0 "
            End If
        End If


        Dim bFilterInclude_ItemType As String = FGetSettings(SettingFields.FilterInclude_ItemType, SettingType.General)
        If bFilterInclude_ItemType <> "" Then
            If bFilterInclude_ItemType.Substring(0, 1) = "+" Then
                strCond += " And CharIndex('+' || I.ItemType,'" & bFilterInclude_ItemType & "') > 0 "
            ElseIf bFilterInclude_ItemType.Substring(0, 1) = "-" Then
                strCond += " And CharIndex('-' || I.ItemType,'" & bFilterInclude_ItemType & "') <= 0 "
            End If
        End If


        If Not AgL.VNull(AgL.PubDtEnviro.Rows(0)("ShowItemsOfOtherDivisions")) Then
            strCond += " And (I.Div_Code = '" & AgL.PubDivCode & "' Or I.Div_Code Is Null Or IfNull(I.ShowItemInOtherDivisions,0) =1)  "
        End If

        If Not AgL.VNull(AgL.PubDtEnviro.Rows(0)("ShowItemsOfOtherSites")) Then
            strCond += " And (I.Site_Code = '" & AgL.PubSiteCode & "' Or I.Site_Code Is Null Or IfNull(I.ShowItemInOtherSites,0) =1)  "
        End If

        If Dgl1.Item(Col1ItemCategory, RowIndex).Value <> "" And UserMovedOverItemCategory Then
            strCond += " And I.ItemCategory = '" & Dgl1.Item(Col1ItemCategory, RowIndex).Tag & "' "
        End If

        If Dgl1.Item(Col1ItemGroup, RowIndex).Value <> "" And UserMovedOverItemGroup Then
            strCond += " And ( I.ItemGroup = '" & Dgl1.Item(Col1ItemGroup, RowIndex).Tag & "' Or I.ItemGroup Is Null ) "
        End If

        If FDivisionNameForCustomization(4) = "X DEVI" Then
            strCond += " And I.ItemGroup = '" & Dgl1.Item(Col1ItemGroup, RowIndex).Tag & "' "
        End If

        mQry = "SELECT I.Code, I.Description, I.HSN, I.ManualCode,  
                        I.Unit, I.PurchaseRate as Rate, I.SalesTaxPostingGroup , 
                        I.DealQty As UnitMultiplier, I.DealUnit, 
                        U.DecimalPlaces As QtyDecimalPlaces, 
                        Case When IfNull(U.ShowDimensionDetailInPurchase,0) = 1 Or IfNull(Ic.ShowDimensionDetailInPurchase,0) = 1 Then 1
                            Else 0 End As ShowDimensionDetailInPurchase, 
                        U1.DecimalPlaces As DealDecimalPlaces, I.Specification
                        FROM Item I  With (NoLock)
                        LEFT JOIN Item Ic With (NoLock) On I.ItemCategory = Ic.Code
                        Left JOIN Unit U  With (NoLock) On I.Unit = U.Code
                        LEFT JOIN Unit U1  With (NoLock) On I.DealUnit = U1.Code 
                        Where I.ItemType <> '" & ItemTypeCode.ServiceProduct & "' 
                        And IfNull(I.Status,'" & AgTemplate.ClsMain.EntryStatus.Active & "') = '" & AgTemplate.ClsMain.EntryStatus.Active & "' " & strCond


        mQry += " UNION ALL "
        mQry += "SELECT I.Code, I.Description, I.HSN, I.ManualCode,  
                        I.Unit, I.PurchaseRate as Rate, I.SalesTaxPostingGroup , 
                        I.DealQty As UnitMultiplier, I.DealUnit, 
                        U.DecimalPlaces As QtyDecimalPlaces, 
                        Case When IfNull(U.ShowDimensionDetailInPurchase,0) = 1 Or IfNull(Ic.ShowDimensionDetailInPurchase,0) = 1 Then 1
                            Else 0 End As ShowDimensionDetailInPurchase, 
                        U1.DecimalPlaces As DealDecimalPlaces, I.Specification
                        FROM Item I  With (NoLock)
                        LEFT JOIN Item Ic With (NoLock) On I.ItemCategory = Ic.Code
                        Left JOIN Unit U  With (NoLock) On I.Unit = U.Code
                        LEFT JOIN Unit U1  With (NoLock) On I.DealUnit = U1.Code 
                        Where I.ItemType = '" & ItemTypeCode.ServiceProduct & "' 
                        And IfNull(I.Status,'" & AgTemplate.ClsMain.EntryStatus.Active & "') = '" & AgTemplate.ClsMain.EntryStatus.Active & "' "


        Dgl1.AgHelpDataSet(Col1Item, 7) = AgL.FillData(mQry, AgL.GCn)
    End Sub

    Private Sub FCreateHelpItemCategory()
        Dim strCond As String = ""

        Dim ContraV_TypeCondStr As String = ""

        If DtV_TypeSettings.Rows.Count > 0 Then
            If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) <> "" Then
                If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")).ToString.Substring(0, 1) = "+" Then
                    strCond += " And CharIndex('+' || I.ItemType,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) & "') > 0 "
                ElseIf AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")).ToString.Substring(0, 1) = "-" Then
                    strCond += " And CharIndex('-' || I.ItemType,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) & "') <= 0 "
                End If
            End If
        End If

        Dim FilterInclude_ItemType As String = FGetSettings(SettingFields.FilterInclude_ItemType, SettingType.General)
        If FilterInclude_ItemType <> "" Then
            If FilterInclude_ItemType.Substring(0, 1) = "+" Then
                strCond += " And CharIndex('+' || I.ItemType,'" & FilterInclude_ItemType & "') > 0 "
            ElseIf FilterInclude_ItemType.Substring(0, 1) = "-" Then
                strCond += " And CharIndex('-' || I.ItemType,'" & FilterInclude_ItemType & "') <= 0 "
            End If
        End If

        mQry = "SELECT I.Code, I.Description
                        FROM ItemCategory I  With (NoLock)
                        Where IfNull(I.Status,'" & AgTemplate.ClsMain.EntryStatus.Active & "') = '" & AgTemplate.ClsMain.EntryStatus.Active & "' " & strCond
        Dgl1.AgHelpDataSet(Col1ItemCategory) = AgL.FillData(mQry, AgL.GCn)
    End Sub
    Private Sub FCreateHelpDimension1(RowIndex As Integer)
        Dim strCond As String = ""

        If LblV_Type.Tag = Ncat.PurchaseInvoice Then
            If AgL.VNull(Dgl1.Item(Col1IsNewDimension1AllowedPurch, RowIndex).Value) <> 0 Then
                Dgl1.AgHelpDataSet(Col1Dimension1) = Nothing : Exit Sub
            End If
        End If

        Dim ContraV_TypeCondStr As String = ""

        If DtV_TypeSettings.Rows.Count > 0 Then
            If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) <> "" Then
                If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")).ToString.Substring(0, 1) = "+" Then
                    strCond += " And CharIndex('+' || I.ItemType,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) & "') > 0 "
                ElseIf AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")).ToString.Substring(0, 1) = "-" Then
                    strCond += " And CharIndex('-' || I.ItemType,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) & "') <= 0 "
                End If
            End If
        End If

        If FDivisionNameForCustomization(15) = "MANISH TEXTILES" Or FDivisionNameForCustomization(15) = "JEET TEXTILES" Then
            If Dgl1.Item(Col1Item, RowIndex).Value <> "" Then
                strCond += " And I.BaseItem = '" & Dgl1.Item(Col1Item, RowIndex).Tag & "'  "
            End If
        Else
            If Dgl1.Item(Col1ItemCategory, RowIndex).Value <> "" Then
                strCond += " And (I.ItemCategory = '" & Dgl1.Item(Col1ItemCategory, RowIndex).Tag & "' Or I.ItemCategory Is Null Or I.BaseItem Is Not Null) "
            End If

            If Dgl1.Item(Col1Item, RowIndex).Value <> "" Then
                strCond += " And (I.BaseItem = '" & Dgl1.Item(Col1Item, RowIndex).Tag & "' Or I.BaseItem Is Null ) "
            End If
        End If




        strCond += " And I.V_Type = '" & ItemV_Type.Dimension1 & "' "

        If DtItemRelation.Rows.Count > 0 Then
            If AgL.XNull(Dgl1.Item(Col1Dimension3, RowIndex).Tag) <> "" Then
                If DtItemRelation.Select("ItemV_Type = '" & ItemV_Type.Dimension3 & "'
                                And RelatedItemV_Type = '" & ItemV_Type.Dimension1 & "'").Length > 0 Then
                    Dim DrItemRelation As DataRow() = DtItemRelation.Select("Item = '" & Dgl1.Item(Col1Dimension3, RowIndex).Tag & "'")
                    Dim bFilterItems As String = ""
                    For I As Integer = 0 To DrItemRelation.Length - 1
                        If bFilterItems <> "" Then bFilterItems += ","
                        bFilterItems += AgL.Chk_Text(AgL.XNull(DrItemRelation(I)("RelatedItem")))
                    Next
                    If bFilterItems <> "" Then
                        strCond += " And I.Code In (" & bFilterItems & ") "
                    Else
                        strCond += " And I.Code In ('') "
                    End If
                End If
            End If
        End If

        'This is only check for pratham not agarwal because there is no design wise rate.
        If FDivisionNameForCustomization(14) = "PRATHAM APPARE" Then
            If AgL.XNull(Dgl1.Item(Col1Dimension3, RowIndex).Tag) <> "" Then
                strCond += " And I.Code In (SELECT DISTINCT L.Dimension1
                    FROM RateList H 
                    LEFT JOIN RateListDetail L ON H.Code = L.Code
                    WHERE H.V_Type = 'RTLE'
                    AND L.ItemCategory = '" & Dgl1.Item(Col1ItemCategory, RowIndex).Tag & "'
                    AND L.Dimension3 = '" & Dgl1.Item(Col1Dimension3, RowIndex).Tag & "')"
            End If
        End If



        mQry = "SELECT I.Code, I.Description
                        FROM Item I  With (NoLock)
                        Where IfNull(I.Status,'" & AgTemplate.ClsMain.EntryStatus.Active & "') = '" & AgTemplate.ClsMain.EntryStatus.Active & "' " & strCond
        Dgl1.AgHelpDataSet(Col1Dimension1) = AgL.FillData(mQry, AgL.GCn)
    End Sub
    Private Sub FCreateHelpDimension2(RowIndex As Integer)
        Dim strCond As String = ""

        If LblV_Type.Tag = Ncat.PurchaseInvoice Then
            If AgL.VNull(Dgl1.Item(Col1IsNewDimension2AllowedPurch, RowIndex).Value) <> 0 Then
                Dgl1.AgHelpDataSet(Col1Dimension2) = Nothing : Exit Sub
            End If
        End If

        Dim ContraV_TypeCondStr As String = ""

        If DtV_TypeSettings.Rows.Count > 0 Then
            If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) <> "" Then
                If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")).ToString.Substring(0, 1) = "+" Then
                    strCond += " And CharIndex('+' || I.ItemType,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) & "') > 0 "
                ElseIf AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")).ToString.Substring(0, 1) = "-" Then
                    strCond += " And CharIndex('-' || I.ItemType,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) & "') <= 0 "
                End If
            End If
        End If

        If Dgl1.Item(Col1ItemCategory, RowIndex).Value <> "" Then
            strCond += " And (I.ItemCategory = '" & Dgl1.Item(Col1ItemCategory, RowIndex).Tag & "' Or I.ItemCategory Is Null ) "
        End If

        strCond += " And I.V_Type = '" & ItemV_Type.Dimension2 & "' "

        If DtItemRelation.Rows.Count > 0 Then
            If AgL.XNull(Dgl1.Item(Col1Dimension3, RowIndex).Tag) <> "" Then
                If DtItemRelation.Select("ItemV_Type = '" & ItemV_Type.Dimension3 & "'
                                And RelatedItemV_Type = '" & ItemV_Type.Dimension2 & "'").Length > 0 Then
                    Dim DrItemRelation As DataRow() = DtItemRelation.Select("Item = '" & Dgl1.Item(Col1Dimension3, RowIndex).Tag & "'")
                    Dim bFilterItems As String = ""
                    For I As Integer = 0 To DrItemRelation.Length - 1
                        If bFilterItems <> "" Then bFilterItems += ","
                        bFilterItems += AgL.Chk_Text(AgL.XNull(DrItemRelation(I)("RelatedItem")))
                    Next
                    If bFilterItems <> "" Then
                        strCond += " And I.Code In (" & bFilterItems & ") "
                    Else
                        strCond += " And I.Code In ('') "
                    End If
                End If
            End If
        End If

        'This is only check for pratham not agarwal because there is no design wise rate.
        If FDivisionNameForCustomization(14) = "PRATHAM APPARE" Then
            If AgL.XNull(Dgl1.Item(Col1Dimension3, RowIndex).Tag) <> "" Then
                strCond += " And I.Code In (SELECT DISTINCT L.Dimension2
                    FROM RateList H 
                    LEFT JOIN RateListDetail L ON H.Code = L.Code
                    WHERE H.V_Type = 'RTLE'
                    AND L.ItemCategory = '" & Dgl1.Item(Col1ItemCategory, RowIndex).Tag & "'
                    AND L.Dimension3 = '" & Dgl1.Item(Col1Dimension3, RowIndex).Tag & "')"
            End If
        End If

        mQry = "SELECT I.Code, I.Description
                        FROM Item I  With (NoLock)
                        Where IfNull(I.Status,'" & AgTemplate.ClsMain.EntryStatus.Active & "') = '" & AgTemplate.ClsMain.EntryStatus.Active & "' " & strCond
        Dgl1.AgHelpDataSet(Col1Dimension2) = AgL.FillData(mQry, AgL.GCn)
    End Sub


    Private Sub FCreateHelpDimension3(RowIndex As Integer)
        Dim strCond As String = ""

        If LblV_Type.Tag = Ncat.PurchaseInvoice Then
            If AgL.VNull(Dgl1.Item(Col1IsNewDimension3AllowedPurch, RowIndex).Value) <> 0 Then
                Dgl1.AgHelpDataSet(Col1Dimension3) = Nothing : Exit Sub
            End If
        End If

        mQry = " SELECT Code, Description  FROM Dimension3  With (NoLock)  "
        Dgl1.AgHelpDataSet(Col1Dimension3) = AgL.FillData(mQry, AgL.GCn)
    End Sub
    Private Sub FCreateHelpDimension4(RowIndex As Integer)
        Dim strCond As String = ""

        If LblV_Type.Tag = Ncat.PurchaseInvoice Then
            If AgL.VNull(Dgl1.Item(Col1IsNewDimension4AllowedPurch, RowIndex).Value) <> 0 Then
                Dgl1.AgHelpDataSet(Col1Dimension4) = Nothing : Exit Sub
            End If
        End If

        mQry = " SELECT Code, Description  FROM Dimension4  With (NoLock)  "
        Dgl1.AgHelpDataSet(Col1Dimension4) = AgL.FillData(mQry, AgL.GCn)
    End Sub
    Private Sub FCreateHelpSize(RowIndex As Integer)
        Dim strCond As String = ""

        Dim ContraV_TypeCondStr As String = ""

        If DtV_TypeSettings.Rows.Count > 0 Then
            If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) <> "" Then
                If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")).ToString.Substring(0, 1) = "+" Then
                    strCond += " And CharIndex('+' || I.ItemType,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) & "') > 0 "
                ElseIf AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")).ToString.Substring(0, 1) = "-" Then
                    strCond += " And CharIndex('-' || I.ItemType,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) & "') <= 0 "
                End If
            End If
        End If

        If Dgl1.Item(Col1ItemCategory, RowIndex).Value <> "" Then
            strCond += " And (I.ItemCategory = '" & Dgl1.Item(Col1ItemCategory, RowIndex).Tag & "' Or I.ItemCategory Is Null ) "
        End If

        strCond += " And I.V_Type = '" & ItemV_Type.SIZE & "' "

        If DtItemRelation.Rows.Count > 0 Then
            If AgL.XNull(Dgl1.Item(Col1Dimension3, RowIndex).Tag) <> "" Then
                If DtItemRelation.Select("ItemV_Type = '" & ItemV_Type.Dimension3 & "'
                                And RelatedItemV_Type = '" & ItemV_Type.SIZE & "'").Length > 0 Then
                    Dim DrItemRelation As DataRow() = DtItemRelation.Select("Item = '" & Dgl1.Item(Col1Dimension3, RowIndex).Tag & "'")
                    Dim bFilterItems As String = ""
                    For I As Integer = 0 To DrItemRelation.Length - 1
                        If bFilterItems <> "" Then bFilterItems += ","
                        bFilterItems += AgL.Chk_Text(AgL.XNull(DrItemRelation(I)("RelatedItem")))
                    Next
                    If bFilterItems <> "" Then
                        strCond += " And I.Code In (" & bFilterItems & ") "
                    Else
                        strCond += " And I.Code In ('') "
                    End If
                End If
            End If
        End If

        mQry = "SELECT I.Code, I.Description
                        FROM Item I  With (NoLock)
                        Where IfNull(I.Status,'" & AgTemplate.ClsMain.EntryStatus.Active & "') = '" & AgTemplate.ClsMain.EntryStatus.Active & "' " & strCond
        Dgl1.AgHelpDataSet(Col1Size) = AgL.FillData(mQry, AgL.GCn)
    End Sub
    Private Sub FCreateHelpRawMaterial(RowIndex As Integer)
        Dim strCond As String = ""

        If FDivisionNameForCustomization(14) = "PRATHAM APPARE" Or
            FDivisionNameForCustomization(15) = "AGARWAL UNIFORM" Then
            strCond += " And I.V_Type = '" & ItemV_Type.Dimension4 & "' "
        End If

        mQry = "SELECT I.Code, I.Description
                        FROM Item I  With (NoLock)
                        Where IfNull(I.Status,'" & AgTemplate.ClsMain.EntryStatus.Active & "') = '" & AgTemplate.ClsMain.EntryStatus.Active & "' " & strCond
        Dgl1.AgHelpDataSet(Col1RawMaterial) = AgL.FillData(mQry, AgL.GCn)
    End Sub

    Private Sub FCreateHelpItemGroup(RowIndex As Integer)
        Dim strCond As String = ""

        Dim ContraV_TypeCondStr As String = ""

        If DtV_TypeSettings.Rows.Count > 0 Then
            If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) <> "" Then
                If AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")).ToString.Substring(0, 1) = "+" Then
                    strCond += " And CharIndex('+' || I.ItemType,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) & "') > 0 "
                ElseIf AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")).ToString.Substring(0, 1) = "-" Then
                    strCond += " And CharIndex('-' || I.ItemType,'" & AgL.XNull(DtV_TypeSettings.Rows(0)("FilterInclude_ItemType")) & "') <= 0 "
                End If
            End If
        End If

        If Dgl1.Item(Col1ItemCategory, RowIndex).Value <> "" Then
            strCond += " And (I.ItemCategory = '" & Dgl1.Item(Col1ItemCategory, RowIndex).Tag & "' OR I.ItemCategory Is Null) "
        End If

        If Not AgL.VNull(AgL.PubDtEnviro.Rows(0)("ShowItemGroupsOfOtherDivisions")) Then
            strCond += " And (I.Div_Code = '" & AgL.PubDivCode & "' Or I.Div_Code Is Null Or IfNull(I.ShowItemGroupInOtherDivisions,0) =1) "
        End If

        If Not AgL.VNull(AgL.PubDtEnviro.Rows(0)("ShowItemGroupsOfOtherSites")) Then
            strCond += " And (I.Site_Code = '" & AgL.PubSiteCode & "' Or I.Site_Code Is Null Or IfNull(I.ShowItemGroupInOtherSites,0) =1) "
        End If

        mQry = "SELECT I.Code, I.Description
                        FROM ItemGroup I  With (NoLock)
                        Where IfNull(I.Status,'" & AgTemplate.ClsMain.EntryStatus.Active & "') = '" & AgTemplate.ClsMain.EntryStatus.Active & "' " & strCond
        Dgl1.AgHelpDataSet(Col1ItemGroup) = AgL.FillData(mQry, AgL.GCn)
    End Sub


    Private Sub FOpenItemMaster(ByVal ColumnIndex As Integer, ByVal RowIndex As Integer)
        Dim DrTemp As DataRow() = Nothing
        Dim bItemCode$ = ""


        Dim DtTemp As DataTable = Nothing

        Dim objMdi As New MDIMain
        Dim StrUserPermission As String
        Dim DTUP As DataTable

        StrUserPermission = AgIniVar.FunGetUserPermission(ClsMain.ModuleName, objMdi.MnuItemMaster.Name, objMdi.MnuItemMaster.Text, DTUP)

        Dim frmObj As FrmItemMaster

        frmObj = New FrmItemMaster(StrUserPermission, DTUP, ItemV_Type.Item)
        frmObj.EntryPointIniMode = AgTemplate.ClsMain.EntryPointIniMode.Insertion
        frmObj.StartPosition = FormStartPosition.CenterParent
        frmObj.IniGrid()
        frmObj.Dgl1(FrmItemMaster.Col1LastValue, FrmItemMaster.rowItemCategory).Value = Dgl1.Item(Col1ItemCategory, RowIndex).Value
        frmObj.Dgl1(FrmItemMaster.Col1LastValue, FrmItemMaster.rowItemCategory).Tag = Dgl1.Item(Col1ItemCategory, RowIndex).Tag
        frmObj.Dgl1(FrmItemMaster.Col1LastValue, FrmItemMaster.rowItemGroup).Value = Dgl1.Item(Col1ItemGroup, RowIndex).Value
        frmObj.Dgl1(FrmItemMaster.Col1LastValue, FrmItemMaster.rowItemGroup).Tag = Dgl1.Item(Col1ItemGroup, RowIndex).Tag
        frmObj.ShowDialog()
        bItemCode = frmObj.mSearchCode
        frmObj = Nothing






        'bItemCode = AgTemplate.ClsMain.FOpenMaster(Me, "Item Master", DglMain.Item(Col1Value, rowV_Type).Tag)
        Dgl1.Item(ColumnIndex, RowIndex).Value = ""
        Dgl1.Item(ColumnIndex, RowIndex).Tag = ""
        Dgl1.CurrentCell = Dgl1.Item(Col1DocQty, RowIndex)
        'FCreateHelpItem(Dgl1.Columns(ColumnIndex).Name)
        FCreateHelpItem(0)
        DrTemp = Dgl1.AgHelpDataSet(ColumnIndex).Tables(0).Select("Code = '" & bItemCode & "'")
        Dgl1.Item(ColumnIndex, RowIndex).Tag = bItemCode
        Dgl1.Item(ColumnIndex, RowIndex).Value = AgL.XNull(AgL.Dman_Execute("Select Description From Item  With (NoLock) Where Code = '" & Dgl1.Item(ColumnIndex, Dgl1.CurrentCell.RowIndex).Tag & "'", AgL.GCn).ExecuteScalar)
        'Validating_ItemCode(ColumnIndex, RowIndex, DrTemp)
        Validating_ItemCode(bItemCode, ColumnIndex, RowIndex)
        Dgl1.CurrentCell = Dgl1.Item(Col1Item, RowIndex)
        SendKeys.Send("{Enter}")
    End Sub

    Private Sub FOpenItemCategoryMaster(ByVal ColumnIndex As Integer, ByVal RowIndex As Integer)
        Dim DrTemp As DataRow() = Nothing
        Dim bItemCode$ = ""
        bItemCode = AgTemplate.ClsMain.FOpenMaster(Me, "Item Category Master", DglMain.Item(Col1Value, rowV_Type).Tag)
        Dgl1.Item(ColumnIndex, RowIndex).Value = ""
        Dgl1.Item(ColumnIndex, RowIndex).Tag = ""
        Dgl1.CurrentCell = Dgl1.Item(Col1ItemGroup, RowIndex)
        'FCreateHelpItem(Dgl1.Columns(ColumnIndex).Name)
        FCreateHelpItemCategory()
        DrTemp = Dgl1.AgHelpDataSet(ColumnIndex).Tables(0).Select("Code = '" & bItemCode & "'")
        Dgl1.Item(ColumnIndex, RowIndex).Tag = bItemCode
        Dgl1.Item(ColumnIndex, RowIndex).Value = AgL.XNull(AgL.Dman_Execute("Select Description From ItemCategory  With (NoLock) Where Code = '" & Dgl1.Item(ColumnIndex, Dgl1.CurrentCell.RowIndex).Tag & "'", AgL.GCn).ExecuteScalar)
        Validating_ItemCategory(ColumnIndex, RowIndex)
        Dgl1.CurrentCell = Dgl1.Item(Col1ItemCategory, RowIndex)
        SendKeys.Send("{Enter}")
    End Sub

    Private Sub FOpenItemGroupMaster(ByVal ColumnIndex As Integer, ByVal RowIndex As Integer)
        Dim DrTemp As DataRow() = Nothing
        Dim bItemCode$ = ""
        bItemCode = AgTemplate.ClsMain.FOpenMaster(Me, "Item Group Master", DglMain.Item(Col1Value, rowV_Type).Tag)
        Dgl1.Item(ColumnIndex, RowIndex).Value = ""
        Dgl1.Item(ColumnIndex, RowIndex).Tag = ""
        Dgl1.CurrentCell = Dgl1.Item(Col1ItemGroup, RowIndex)
        'FCreateHelpItem(Dgl1.Columns(ColumnIndex).Name)
        FCreateHelpItemGroup(RowIndex)
        DrTemp = Dgl1.AgHelpDataSet(ColumnIndex).Tables(0).Select("Code = '" & bItemCode & "'")
        Dgl1.Item(ColumnIndex, RowIndex).Tag = bItemCode
        Dgl1.Item(ColumnIndex, RowIndex).Value = AgL.XNull(AgL.Dman_Execute("Select Description From ItemGroup  With (NoLock) Where Code = '" & Dgl1.Item(ColumnIndex, Dgl1.CurrentCell.RowIndex).Tag & "'", AgL.GCn).ExecuteScalar)
        Validating_ItemGroup(ColumnIndex, RowIndex)
        Dgl1.CurrentCell = Dgl1.Item(Col1ItemGroup, RowIndex)
        SendKeys.Send("{Enter}")
    End Sub

    Private Sub FShowTransactionHistory(ByVal ItemCode As String)
        If CType(AgL.VNull(FGetSettings(SettingFields.ShowLastRatesYn, SettingType.General)), Boolean) = True Then


            If AgL.PubServerName = "" Then
                mQry = " SELECT L.Item, IfNull(H.VendorDocNo, H.ManualRefNo) as [Inv_No], H.V_Date AS [Inv_Date], Sg.DispName As Vendor, " &
                    " L.Rate, L.Qty, L.DiscountPer As Disc, L.AdditionalDiscountPer As ADisc, L.MRP, L.Deal " &
                    " FROM PurchInvoiceDetail L  With (NoLock) " &
                    " LEFT JOIN  PurchInvoice H  With (NoLock) ON L.DocId = H.DocId " &
                    " LEFT JOIN SubGroup Sg  With (NoLock) ON H.Vendor = Sg.SubCode " &
                    " Left Join Voucher_Type Vt  With (NoLock) on H.V_Type = Vt.V_Type " &
                    " Where NCat = '" & AgLibrary.ClsMain.agConstants.Ncat.PurchaseInvoice & "' And L.Item = '" & ItemCode & "'" &
                    " And H.DocId <> '" & mSearchCode & "'" &
                    " ORDER BY H.V_Date DESC Limit 5"
            Else
                mQry = " SELECT Top 5 L.Item, IfNull(H.VendorDocNo, H.ManualRefNo) as [Inv_No], H.V_Date AS [Inv_Date], Sg.DispName As Vendor, " &
                    " L.Rate, L.Qty, L.DiscountPer As Disc_Per, L.AdditionalDiscountPer As Add_Disc_Per, L.Deal " &
                    " FROM PurchInvoiceDetail L  With (NoLock)  " &
                    " LEFT JOIN  PurchInvoice H  With (NoLock) ON L.DocId = H.DocId " &
                    " LEFT JOIN SubGroup Sg  With (NoLock) ON H.Vendor = Sg.SubCode " &
                    " Left Join Voucher_Type Vt  With (NoLock) on H.V_Type = Vt.V_Type " &
                    " Where  NCat = '" & AgLibrary.ClsMain.agConstants.Ncat.PurchaseInvoice & "' And  L.Item = '" & ItemCode & "'" &
                    " And H.DocId <> '" & mSearchCode & "'" &
                    " ORDER BY H.V_Date DESC "
            End If
            FGetTransactionHistory(Me, mSearchCode, mQry, DGL, DtV_TypeSettings, ItemCode)
        End If
    End Sub

    Private Sub BtnHeaderDetail_Click(sender As Object, e As EventArgs)
        ShowPurchInvoiceHeader()
    End Sub


    Private Sub Dgl1_CellDoubleClick(sender As Object, e As DataGridViewCellEventArgs) Handles Dgl1.CellDoubleClick
        Dim mRow As Integer
        mRow = e.RowIndex
        If Dgl1.Columns(e.ColumnIndex).Name = Col1DocQty Then ShowPurchInvoiceDimensionDetail(mRow)
    End Sub

    Private Sub ShowPurchInvoiceDimensionDetail(mRow As Integer, Optional IsShowFrm As Boolean = True)
        If mRow < 0 Then Exit Sub
        If Dgl1.Item(Col1DocQty, mRow).Tag IsNot Nothing Then
            CType(Dgl1.Item(Col1DocQty, mRow).Tag, FrmPurchaseInvoiceDimension_WithDimension).EntryMode = Topctrl1.Mode
            CType(Dgl1.Item(Col1DocQty, mRow).Tag, FrmPurchaseInvoiceDimension_WithDimension).EntryNCatNature = LblNCatNature.Tag
            CType(Dgl1.Item(Col1DocQty, mRow).Tag, FrmPurchaseInvoiceDimension_WithDimension).objFrmPurchInvoice = Me
            CType(Dgl1.Item(Col1DocQty, mRow).Tag, FrmPurchaseInvoiceDimension_WithDimension).DglRow = Dgl1.Rows(mRow)
            CType(Dgl1.Item(Col1DocQty, mRow).Tag, FrmPurchaseInvoiceDimension_WithDimension).FReInitializeDimensionColumns()

            If IsShowFrm = True Then
                Dgl1.Item(Col1DocQty, mRow).Tag.ShowDialog()
                Dgl1.Item(Col1DocQty, mRow).Value = CType(Dgl1.Item(Col1DocQty, mRow).Tag, FrmPurchaseInvoiceDimension_WithDimension).GetTotalQty
                Dgl1.Item(Col1Qty, mRow).Value = CType(Dgl1.Item(Col1DocQty, mRow).Tag, FrmPurchaseInvoiceDimension_WithDimension).GetTotalQty
                Dgl1.Item(Col1Pcs, mRow).Value = CType(Dgl1.Item(Col1DocQty, mRow).Tag, FrmPurchaseInvoiceDimension_WithDimension).GetTotalPcs

                Dgl1.Item(Col1DocDealQty, mRow).Value = Format(CType(Dgl1.Item(Col1DocQty, mRow).Tag, FrmPurchaseInvoiceDimension_WithDimension).GetTotalDealQty, "0.".PadRight(Val(Dgl1.Item(Col1DealQtyDecimalPlaces, mRow).Value) + 2, "0"))
                Dgl1.Item(Col1DealQty, mRow).Value = Format(CType(Dgl1.Item(Col1DocQty, mRow).Tag, FrmPurchaseInvoiceDimension_WithDimension).GetTotalDealQty, "0.".PadRight(Val(Dgl1.Item(Col1DealQtyDecimalPlaces, mRow).Value) + 2, "0"))
            End If
        Else
            If Dgl1.Item(Col1Unit, mRow).Tag Then
                Dim FrmObj As FrmPurchaseInvoiceDimension_WithDimension
                FrmObj = New FrmPurchaseInvoiceDimension_WithDimension
                FrmObj.ItemName = Dgl1.Item(Col1Item, mRow).Value
                FrmObj.Unit = Dgl1.Item(Col1Unit, mRow).Value
                FrmObj.UnitDecimalPlace = Val(Dgl1.Item(Col1QtyDecimalPlaces, mRow).Value)
                FrmObj.DealUnit = Dgl1.Item(Col1DealUnit, mRow).Value
                FrmObj.DealUnitDecimalPlace = Val(Dgl1.Item(Col1DealQtyDecimalPlaces, mRow).Value)
                FrmObj.DglRow = Dgl1.Rows(mRow)
                FrmObj.EntryMode = Topctrl1.Mode
                FrmObj.EntryNCatNature = LblNCatNature.Tag
                FrmObj.DtV_TypeSettings = DtV_TypeSettings
                FrmObj.objFrmPurchInvoice = Me
                FrmObj.IniGrid(mSearchCode, Val(Dgl1.Item(ColSNo, mRow).Tag))
                FrmObj.FReInitializeDimensionColumns()
                Dgl1.Item(Col1DocQty, mRow).Tag = FrmObj

                If IsShowFrm = True Then
                    Dgl1.Item(Col1DocQty, mRow).Tag.ShowDialog()
                    Dgl1.Item(Col1DocQty, mRow).Value = CType(Dgl1.Item(Col1DocQty, mRow).Tag, FrmPurchaseInvoiceDimension_WithDimension).GetTotalQty
                    Dgl1.Item(Col1Qty, mRow).Value = CType(Dgl1.Item(Col1DocQty, mRow).Tag, FrmPurchaseInvoiceDimension_WithDimension).GetTotalQty
                    Dgl1.Item(Col1Pcs, mRow).Value = CType(Dgl1.Item(Col1DocQty, mRow).Tag, FrmPurchaseInvoiceDimension_WithDimension).GetTotalPcs

                    Dgl1.Item(Col1DocDealQty, mRow).Value = Format(CType(Dgl1.Item(Col1DocQty, mRow).Tag, FrmPurchaseInvoiceDimension_WithDimension).GetTotalDealQty, "0.".PadRight(Val(Dgl1.Item(Col1DealQtyDecimalPlaces, mRow).Value) + 2, "0"))
                    Dgl1.Item(Col1DealQty, mRow).Value = Format(CType(Dgl1.Item(Col1DocQty, mRow).Tag, FrmPurchaseInvoiceDimension_WithDimension).GetTotalDealQty, "0.".PadRight(Val(Dgl1.Item(Col1DealQtyDecimalPlaces, mRow).Value) + 2, "0"))
                End If
            End If
        End If
        Calculation()
    End Sub

    Private Sub ShowPurchInvoiceHeader(Optional ShowDialog As Boolean = True)
        If Dgl2.Item(Col1Value, rowBtnTransportDetail).Tag IsNot Nothing Then
            CType(Dgl2.Item(Col1Value, rowBtnTransportDetail).Tag, FrmPurchaseInvoiceHeader).PartyCode = DglMain.Item(Col1Value, rowVendor).Tag
            CType(Dgl2.Item(Col1Value, rowBtnTransportDetail).Tag, FrmPurchaseInvoiceHeader).V_Type = LblV_Type.Tag
            CType(Dgl2.Item(Col1Value, rowBtnTransportDetail).Tag, FrmPurchaseInvoiceHeader).EntryMode = Topctrl1.Mode
            If ShowDialog Then Dgl2.Item(Col1Value, rowBtnTransportDetail).Tag.ShowDialog()
        Else
            Dim FrmObj As FrmPurchaseInvoiceHeader
            FrmObj = New FrmPurchaseInvoiceHeader
            FrmObj.PartyCode = DglMain.Item(Col1Value, rowVendor).Tag
            FrmObj.V_Type = LblV_Type.Tag
            FrmObj.EntryMode = Topctrl1.Mode
            FrmObj.IniGrid(mSearchCode)
            Dgl2.Item(Col1Value, rowBtnTransportDetail).Tag = FrmObj
            If ShowDialog Then Dgl2.Item(Col1Value, rowBtnTransportDetail).Tag.ShowDialog()
        End If
        If Dgl1.AgHelpDataSet(Col1BaleNo) IsNot Nothing Then Dgl1.AgHelpDataSet(Col1BaleNo).Dispose() : Dgl1.AgHelpDataSet(Col1BaleNo) = Nothing
        If Dgl2.Rows(rowStockInNo).Visible = True Then
            'Dgl2.CurrentCell = Dgl2.Item(Col1Value, rowStockInNo)
            Dgl2.Focus()
        Else
            Dgl1.Focus()
        End If
        If CType(Dgl2.Item(Col1Value, rowBtnTransportDetail).Tag, FrmPurchaseInvoiceHeader).Dgl1(FrmPurchaseInvoiceHeader.Col1Value, FrmPurchaseInvoiceHeader.rowLrNo).Value <> "" Then
            Dgl2.Item(Col1Value, rowBtnTransportDetail).Style.BackColor = Color.SkyBlue
        Else
            Dgl2.Item(Col1Value, rowBtnTransportDetail).Style.BackColor = Color.Transparent
        End If
    End Sub
    Private Sub ShowPurchaseInvoiceParty(DocID As String, PartyCode As String, AcGroupNature As String, Optional ShowDialogForCash As Boolean = False)
        If DglMain.Item(Col1BtnDetail, rowVendor).Tag IsNot Nothing Then
            CType(DglMain.Item(Col1BtnDetail, rowVendor).Tag, FrmPurchaseInvoiceParty).EntryMode = Topctrl1.Mode
            DglMain.Item(Col1BtnDetail, rowVendor).Tag.ShowDialog()
        Else
            Dim FrmObj As FrmPurchaseInvoiceParty
            FrmObj = New FrmPurchaseInvoiceParty
            FrmObj.IniGrid(DocID, PartyCode, AcGroupNature)
            FrmObj.EntryMode = Topctrl1.Mode
            DglMain.Item(Col1BtnDetail, rowVendor).Tag = FrmObj
            If AcGroupNature.ToUpper = "CASH" And ShowDialogForCash Then
                DglMain.Item(Col1BtnDetail, rowVendor).Tag.ShowDialog()
            End If
        End If
    End Sub
    Private Sub MnuImport_Click(sender As Object, e As EventArgs) Handles MnuImportFromExcel.Click, MnuImportOpeningFromExcel.Click, MnuImportFromDos.Click, MnuImportFromTally.Click, MnuEditSave.Click, MnuGenerateEWayBill.Click, MnuRequestForPermission.Click, MnuReferenceEntries.Click, MnuHistory.Click, MnuWizard.Click, MnuPrintBarcode.Click, MnuShowLedgerPosting.Click
        Select Case sender.name
            Case MnuImportFromExcel.Name
                FImportFromExcel(ImportFor.Excel)

            Case MnuImportOpeningFromExcel.Name
                FImportOpeningFromExcel()

            Case MnuImportFromDos.Name
                FImportFromExcel(ImportFor.Dos)

            Case MnuImportFromTally.Name
                FImportFromTally()

            Case MnuEditSave.Name
                FEditSaveAllEntries()

            Case MnuRequestForPermission.Name
                FRequestForPermission(EntryAction.Edit)

            Case MnuReferenceEntries.Name
                FShowRefrentialEntries(mSearchCode)

            Case MnuHistory.Name
                FShowHistory(mSearchCode)

            Case MnuPrintBarcode.Name
                Dim FrmObj As FrmPrintBarcode
                FrmObj = New FrmPrintBarcode()
                FrmObj.DocId = mSearchCode
                FrmObj.LblTitle.Text = DglMain.Item(Col1Value, rowV_Type).Value + " - " + DglMain.Item(Col1Value, rowReferenceNo).Value
                FrmObj.StartPosition = FormStartPosition.CenterParent

                FrmObj.ShowDialog()

            Case MnuGenerateEWayBill.Name
                'FCreateJSONFile()
                Dim StrSenderText As String = "EWay Bill Generation"
                GridReportFrm = New AgLibrary.FrmRepDisplay(StrSenderText, AgL)
                GridReportFrm.Filter_IniGrid()
                Dim CRep As ClsReports = New ClsReports(GridReportFrm)
                CRep.GRepFormName = Replace(Replace(Replace(Replace(StrSenderText, "&", ""), " ", ""), "(", ""), ")", "")
                CRep.Ini_Grid()
                ClsMain.FAdjustBackgroudMaximizedWindow(Me.MdiParent)
                GridReportFrm.MdiParent = Me.MdiParent
                GridReportFrm.Show()
                CRep.ProcEWayBillGeneration(,, mSearchCode)

            Case MnuWizard.Name
                FWizard()

            Case MnuShowLedgerPosting.Name
                FShowLedgerPosting()
        End Select
    End Sub
    Private Sub FWizard()
        Dim StrSenderText As String = Me.Text
        GridReportFrm = New AgLibrary.FrmRepDisplay(StrSenderText, AgL)
        GridReportFrm.Filter_IniGrid()

        Dim CRep As ClsPurchaseInvoiceWizard = New ClsPurchaseInvoiceWizard(GridReportFrm)
        CRep.GRepFormName = Replace(Replace(Replace(Replace(StrSenderText, "&", ""), " ", ""), "(", ""), ")", "")
        CRep.V_Type = mV_Type
        CRep.ObjFrm = Me
        CRep.Ini_Grid()
        'GridReportFrm.FilterGrid.Item(AgLibrary.FrmRepDisplay.GFilter, 0).Value = AgL.PubStartDate
        'GridReportFrm.FilterGrid.Item(AgLibrary.FrmRepDisplay.GFilter, 1).Value = AgL.PubLoginDate
        ClsMain.FAdjustBackgroudMaximizedWindow(Me.MdiParent)
        GridReportFrm.MdiParent = Me.MdiParent
        GridReportFrm.Show()
        'CRep.ProcPurchaseInvoiceWizard()
    End Sub
    Public Sub FImportFromTally()
        Dim mTrans As String = ""
        Dim ErrorLog As String = ""
        Dim DtTemp As New DataTable
        Dim I As Integer = 0, J As Integer = 0
        Dim bHeadSubCodeName As String = ""
        Dim FileNameWithPath As String = ""

        OFDMain.Filter = "*.xml|*.XML"
        If OFDMain.ShowDialog() = Windows.Forms.DialogResult.Cancel Then Exit Sub
        FileNameWithPath = OFDMain.FileName

        'Dim FileNameWithPath As String = My.Application.Info.DirectoryPath & "\TallyXML\PaymentRegister.xml"
        'Dim FileNameWithPath As String = My.Application.Info.DirectoryPath & "\TallyXML\ReceiptRegister.xml"

        Dim doc As New XmlDocument()
        doc.Load(FileNameWithPath)

        mFlag_Import = True

        Try
            AgL.ECmd = AgL.GCn.CreateCommand
            AgL.ETrans = AgL.GCn.BeginTransaction(IsolationLevel.ReadCommitted)
            AgL.ECmd.Transaction = AgL.ETrans
            mTrans = "Begin"

            Dim PurchInvoiceElementList As XmlNodeList = doc.GetElementsByTagName("VOUCHER")

            For I = 0 To PurchInvoiceElementList.Count - 1
                Dim PurchInvoiceTableList(0) As StructPurchInvoice
                If PurchInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST") IsNot Nothing Then
                    For J = 0 To PurchInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Count - 1
                        Dim PurchInvoiceTable As New StructPurchInvoice

                        PurchInvoiceTable.DocID = ""

                        If PurchInvoiceElementList(I).SelectSingleNode("VOUCHERTYPENAME") IsNot Nothing Then
                            If PurchInvoiceElementList(I).SelectSingleNode("VOUCHERTYPENAME").ChildNodes.Count > 0 Then
                                If PurchInvoiceElementList(I).SelectSingleNode("VOUCHERTYPENAME").ChildNodes(0).Value = "TAX INVOICE(PURCHASE)" Then
                                    PurchInvoiceTable.V_Type = "PI"
                                ElseIf PurchInvoiceElementList(I).SelectSingleNode("VOUCHERTYPENAME").ChildNodes(0).Value = "Purchase" Then
                                    PurchInvoiceTable.V_Type = "PI"
                                ElseIf PurchInvoiceElementList(I).SelectSingleNode("VOUCHERTYPENAME").ChildNodes(0).Value = "Debit Note" Then
                                    PurchInvoiceTable.V_Type = "PR"
                                End If
                            End If
                        End If


                        PurchInvoiceTable.V_Prefix = ""
                        PurchInvoiceTable.Site_Code = AgL.PubSiteCode
                        PurchInvoiceTable.Div_Code = AgL.PubDivCode








                        If PurchInvoiceElementList(I).SelectSingleNode("VOUCHERNUMBER") IsNot Nothing Then
                            If PurchInvoiceElementList(I).SelectSingleNode("VOUCHERNUMBER").ChildNodes.Count > 0 Then
                                PurchInvoiceTable.V_No = PurchInvoiceElementList(I).SelectSingleNode("VOUCHERNUMBER").ChildNodes(0).Value.Replace("G", "")
                            End If
                        End If

                        If PurchInvoiceElementList(I).SelectSingleNode("DATE") IsNot Nothing Then
                            If PurchInvoiceElementList(I).SelectSingleNode("DATE").ChildNodes.Count > 0 Then
                                PurchInvoiceTable.V_Date = PurchInvoiceElementList(I).SelectSingleNode("DATE").ChildNodes(0).Value.ToString.Substring(6, 2) + "/" +
                                        PurchInvoiceElementList(I).SelectSingleNode("DATE").ChildNodes(0).Value.ToString.Substring(4, 2) + "/" +
                                        PurchInvoiceElementList(I).SelectSingleNode("DATE").ChildNodes(0).Value.ToString.Substring(0, 4)
                            End If
                        End If



                        Dim mManualrefNoPrefix As String = AgL.Dman_Execute("Select Ref_Prefix From Voucher_Prefix  With (NoLock) Where V_Type = '" & PurchInvoiceTable.V_Type & "' 
                                And " & AgL.Chk_Date(PurchInvoiceTable.V_Date) & " >= Date_From 
                                And " & AgL.Chk_Date(PurchInvoiceTable.V_Date) & " <= Date_To ", AgL.GCn).ExecuteScalar()
                        PurchInvoiceTable.ManualRefNo = mManualrefNoPrefix + PurchInvoiceTable.V_No.ToString().PadLeft(4).Replace(" ", "0")



                        PurchInvoiceTable.Vendor = ""
                        PurchInvoiceTable.AgentCode = ""
                        PurchInvoiceTable.AgentName = ""

                        If PurchInvoiceElementList(I).SelectSingleNode("PARTYLEDGERNAME") IsNot Nothing Then
                            If PurchInvoiceElementList(I).SelectSingleNode("PARTYLEDGERNAME").ChildNodes.Count > 0 Then
                                PurchInvoiceTable.VendorName = PurchInvoiceElementList(I).SelectSingleNode("PARTYLEDGERNAME").ChildNodes(0).Value
                            End If
                        End If

                        PurchInvoiceTable.BillToPartyCode = ""
                        PurchInvoiceTable.BillToPartyName = PurchInvoiceTable.VendorName

                        PurchInvoiceTable.VendorAddress = ""
                        PurchInvoiceTable.VendorCity = ""
                        PurchInvoiceTable.VendorMobile = ""
                        PurchInvoiceTable.VendorSalesTaxNo = ""
                        PurchInvoiceTable.ShipToAddress = ""

                        If PurchInvoiceElementList(I).SelectSingleNode("GSTREGISTRATIONTYPE") IsNot Nothing Then
                            If PurchInvoiceElementList(I).SelectSingleNode("GSTREGISTRATIONTYPE").ChildNodes.Count > 0 Then
                                If PurchInvoiceElementList(I).SelectSingleNode("GSTREGISTRATIONTYPE").ChildNodes(0).Value = "Regular" Then
                                    PurchInvoiceTable.SalesTaxGroupParty = "Registered"
                                Else
                                    PurchInvoiceTable.SalesTaxGroupParty = PurchInvoiceElementList(I).SelectSingleNode("GSTREGISTRATIONTYPE").ChildNodes(0).Value
                                End If
                            End If
                        End If



                        PurchInvoiceTable.StructureCode = ""
                        PurchInvoiceTable.CustomFields = ""

                        If PurchInvoiceElementList(I).SelectSingleNode("REFERENCE") IsNot Nothing Then
                            If PurchInvoiceElementList(I).SelectSingleNode("REFERENCE").ChildNodes.Count > 0 Then
                                PurchInvoiceTable.VendorDocNo = PurchInvoiceElementList(I).SelectSingleNode("REFERENCE").ChildNodes(0).Value
                            End If
                        End If

                        If PurchInvoiceElementList(I).SelectSingleNode("REFERENCEDATE") IsNot Nothing Then
                            If PurchInvoiceElementList(I).SelectSingleNode("REFERENCEDATE").ChildNodes.Count > 0 Then
                                PurchInvoiceTable.VendorDocDate = PurchInvoiceElementList(I).SelectSingleNode("REFERENCEDATE").ChildNodes(0).Value.ToString.Substring(6, 2) + "/" +
                                        PurchInvoiceElementList(I).SelectSingleNode("REFERENCEDATE").ChildNodes(0).Value.ToString.Substring(4, 2) + "/" +
                                        PurchInvoiceElementList(I).SelectSingleNode("REFERENCEDATE").ChildNodes(0).Value.ToString.Substring(0, 4)
                            End If
                        End If


                        PurchInvoiceTable.ReferenceDocId = ""
                        PurchInvoiceTable.Remarks = ""

                        PurchInvoiceTable.Status = "Active"
                        PurchInvoiceTable.EntryBy = AgL.PubUserName
                        PurchInvoiceTable.EntryDate = AgL.GetDateTime(AgL.GcnRead)
                        PurchInvoiceTable.ApproveBy = ""
                        PurchInvoiceTable.ApproveDate = ""
                        PurchInvoiceTable.MoveToLog = ""
                        PurchInvoiceTable.MoveToLogDate = ""
                        PurchInvoiceTable.UploadDate = ""
                        PurchInvoiceTable.Line_Sr = J + 1



                        If PurchInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("STOCKITEMNAME") IsNot Nothing Then
                            If PurchInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("STOCKITEMNAME").ChildNodes.Count > 0 Then
                                PurchInvoiceTable.Line_ItemName = PurchInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("STOCKITEMNAME").ChildNodes(0).Value
                            End If
                        End If

                        PurchInvoiceTable.Line_Specification = ""



                        If PurchInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("ACTUALQTY") IsNot Nothing Then
                            If PurchInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("ACTUALQTY").ChildNodes.Count > 0 Then
                                PurchInvoiceTable.Line_DocQty = PurchInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("ACTUALQTY").ChildNodes(0).Value.ToString()
                            End If
                        End If

                        PurchInvoiceTable.Line_FreeQty = 0

                        If PurchInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("BILLEDQTY") IsNot Nothing Then
                            If PurchInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("BILLEDQTY").ChildNodes.Count > 0 Then
                                PurchInvoiceTable.Line_Qty = PurchInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("BILLEDQTY").ChildNodes(0).Value.ToString()

                                Dim bUnitName As String = PurchInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("BILLEDQTY").ChildNodes(0).Value.ToString()
                                If bUnitName.Contains("MTR") Then
                                    PurchInvoiceTable.Line_Unit = "Meter"
                                ElseIf bUnitName.Contains("PCS") Then
                                    PurchInvoiceTable.Line_Unit = "Pcs"
                                End If
                            End If
                        End If

                        If PurchInvoiceTable.Line_DocQty Is Nothing Or Val(PurchInvoiceTable.Line_DocQty) = 0 Then
                            PurchInvoiceTable.Line_DocQty = PurchInvoiceTable.Line_Qty
                        End If


                        PurchInvoiceTable.Line_Pcs = PurchInvoiceTable.Line_DocQty
                        PurchInvoiceTable.Line_UnitMultiplier = 1
                        PurchInvoiceTable.Line_DealUnit = ""
                        PurchInvoiceTable.Line_DocDealQty = PurchInvoiceTable.Line_DocQty

                        If PurchInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("RATE") IsNot Nothing Then
                            If PurchInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("RATE").ChildNodes.Count > 0 Then
                                PurchInvoiceTable.Line_Rate = PurchInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("RATE").ChildNodes(0).Value
                            End If
                        End If

                        PurchInvoiceTable.Line_DiscountPer = 0
                        PurchInvoiceTable.Line_DiscountAmount = 0

                        If PurchInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("DISCOUNT") IsNot Nothing Then
                            If PurchInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("DISCOUNT").ChildNodes.Count > 0 Then
                                PurchInvoiceTable.Line_DiscountPer = PurchInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("DISCOUNT").ChildNodes(0).Value
                                PurchInvoiceTable.Line_DiscountAmount = Math.Round(Val(PurchInvoiceTable.Line_Qty) * Val(PurchInvoiceTable.Line_Rate) * PurchInvoiceTable.Line_DiscountPer / 100, 2)
                            End If
                        End If


                        PurchInvoiceTable.Line_AdditionalDiscountPer = 0
                        PurchInvoiceTable.Line_AdditionalDiscountAmount = 0

                        If PurchInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("AMOUNT") IsNot Nothing Then
                            If PurchInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("AMOUNT").ChildNodes.Count > 0 Then
                                PurchInvoiceTable.Line_Amount = Math.Abs(Convert.ToDouble(PurchInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("AMOUNT").ChildNodes(0).Value))
                            End If
                        End If


                        PurchInvoiceTable.Line_Remark = ""
                        PurchInvoiceTable.Line_BaleNo = ""
                        PurchInvoiceTable.Line_LotNo = ""
                        PurchInvoiceTable.Line_ReferenceDocId = ""
                        PurchInvoiceTable.Line_ReferenceSr = ""
                        PurchInvoiceTable.Line_ReferenceTSr = ""
                        PurchInvoiceTable.Line_PurchInvoice = ""
                        PurchInvoiceTable.Line_PurchInvoiceSr = ""
                        PurchInvoiceTable.Line_GrossWeight = 0
                        PurchInvoiceTable.Line_NetWeight = 0





                        If PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST") IsNot Nothing Then
                            For K As Integer = 0 To PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST").Count
                                If PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K) IsNot Nothing Then
                                    If PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME") IsNot Nothing Then
                                        If PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME").ChildNodes.Count > 0 Then
                                            If PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME").ChildNodes(0).Value.ToString().Contains("IGST") And
                                                    PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME").ChildNodes(0).Value.ToString().Contains("5") Then
                                                PurchInvoiceTable.Line_Tax1_Per = 5
                                            ElseIf PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME").ChildNodes(0).Value.ToString().Contains("CGST") And
                                                    PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME").ChildNodes(0).Value.ToString().Contains("2.5") Then
                                                PurchInvoiceTable.Line_Tax2_Per = 2.5
                                                PurchInvoiceTable.Line_Tax3_Per = 2.5
                                            ElseIf PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME").ChildNodes(0).Value.ToString().Contains("IGST") And
                                                    PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME").ChildNodes(0).Value.ToString().Contains("12") Then
                                                PurchInvoiceTable.Line_Tax1_Per = 12
                                            ElseIf PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME").ChildNodes(0).Value.ToString().Contains("CGST") And
                                                    PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME").ChildNodes(0).Value.ToString().Contains("6") Then
                                                PurchInvoiceTable.Line_Tax2_Per = 6
                                                PurchInvoiceTable.Line_Tax3_Per = 6
                                            ElseIf PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME").ChildNodes(0).Value.ToString().Contains("IGST") And
                                                    PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME").ChildNodes(0).Value.ToString().Contains("18") Then
                                                PurchInvoiceTable.Line_Tax1_Per = 18
                                            ElseIf PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME").ChildNodes(0).Value.ToString().Contains("CGST") And
                                                    PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME").ChildNodes(0).Value.ToString().Contains("9") Then
                                                PurchInvoiceTable.Line_Tax2_Per = 9
                                                PurchInvoiceTable.Line_Tax3_Per = 9
                                            ElseIf PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME").ChildNodes(0).Value.ToString().Contains("IGST") And
                                                    PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME").ChildNodes(0).Value.ToString().Contains("28") Then
                                                PurchInvoiceTable.Line_Tax1_Per = 28
                                            ElseIf PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME").ChildNodes(0).Value.ToString().Contains("CGST") And
                                                    PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME").ChildNodes(0).Value.ToString().Contains("14") Then
                                                PurchInvoiceTable.Line_Tax2_Per = 14
                                                PurchInvoiceTable.Line_Tax3_Per = 14
                                            ElseIf PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME").ChildNodes(0).Value = "FRGT INWARD FRM UNRAGISTER" Then
                                                If PurchInvoiceTable.Line_ItemName = "" Then
                                                    If PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("AMOUNT") IsNot Nothing Then
                                                        PurchInvoiceTable.Line_ItemName = "FRGT INWARD FRM UNRAGISTER"
                                                        PurchInvoiceTable.Line_Amount = Math.Abs(Convert.ToDouble(PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("AMOUNT").ChildNodes(0).Value))
                                                        PurchInvoiceTable.Line_Rate = PurchInvoiceTable.Line_Amount
                                                        PurchInvoiceTable.Line_DocQty = 1
                                                        PurchInvoiceTable.Line_Qty = 1
                                                        PurchInvoiceTable.Line_Unit = "Pcs"
                                                    End If
                                                End If
                                            ElseIf PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME").ChildNodes(0).Value = "FRIEGHT INWARD FROM UNRAGITER" Then
                                                If PurchInvoiceTable.Line_ItemName = "" Then
                                                    If PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("AMOUNT") IsNot Nothing Then
                                                        PurchInvoiceTable.Line_ItemName = "FRIEGHT INWARD FROM UNRAGITER"
                                                        PurchInvoiceTable.Line_Amount = Math.Abs(Convert.ToDouble(PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("AMOUNT").ChildNodes(0).Value))
                                                        PurchInvoiceTable.Line_Rate = PurchInvoiceTable.Line_Amount
                                                        PurchInvoiceTable.Line_DocQty = 1
                                                        PurchInvoiceTable.Line_Qty = 1
                                                        PurchInvoiceTable.Line_Unit = "Pcs"
                                                    End If
                                                End If
                                            ElseIf PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME").ChildNodes(0).Value = "ELECTRICITY EXP." Then
                                                If PurchInvoiceTable.Line_ItemName = "" Then
                                                    If PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("AMOUNT") IsNot Nothing Then
                                                        PurchInvoiceTable.Line_ItemName = "ELECTRICITY EXP."
                                                        PurchInvoiceTable.Line_Amount = Math.Abs(Convert.ToDouble(PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("AMOUNT").ChildNodes(0).Value))
                                                        PurchInvoiceTable.Line_Rate = PurchInvoiceTable.Line_Amount
                                                        PurchInvoiceTable.Line_DocQty = 1
                                                        PurchInvoiceTable.Line_Qty = 1
                                                        PurchInvoiceTable.Line_Unit = "Pcs"
                                                    End If
                                                End If
                                            ElseIf PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME").ChildNodes(0).Value = "BANK CHARGE" + ControlChars.Quote + "S" Then
                                                If PurchInvoiceTable.Line_ItemName = "" Then
                                                    If PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("AMOUNT") IsNot Nothing Then
                                                        PurchInvoiceTable.Line_ItemName = "BANK CHARGE" + ControlChars.Quote + "S"
                                                        PurchInvoiceTable.Line_Amount = Math.Abs(Convert.ToDouble(PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("AMOUNT").ChildNodes(0).Value))
                                                        PurchInvoiceTable.Line_Rate = PurchInvoiceTable.Line_Amount
                                                        PurchInvoiceTable.Line_DocQty = 1
                                                        PurchInvoiceTable.Line_Qty = 1
                                                        PurchInvoiceTable.Line_Unit = "Pcs"
                                                    End If
                                                End If
                                            ElseIf PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME").ChildNodes(0).Value = "CASH DISCOUNT" Then
                                                If J = 0 Then
                                                    If PurchInvoiceTable.Line_DiscountAmount = 0 Then
                                                        PurchInvoiceTable.Line_DiscountAmount = Math.Abs(Convert.ToDouble(PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("AMOUNT").ChildNodes(0).Value))
                                                        PurchInvoiceTable.Line_Amount = PurchInvoiceTable.Line_Amount - PurchInvoiceTable.Line_DiscountAmount
                                                    Else
                                                        PurchInvoiceTable.Line_DiscountAmount = PurchInvoiceTable.Line_DiscountAmount + Math.Abs(Convert.ToDouble(PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("AMOUNT").ChildNodes(0).Value))
                                                        PurchInvoiceTable.Line_Amount = PurchInvoiceTable.Line_Amount - Math.Abs(Convert.ToDouble(PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("AMOUNT").ChildNodes(0).Value))
                                                    End If
                                                End If
                                            ElseIf PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("LEDGERNAME").ChildNodes(0).Value = "ROUND OFF" Then
                                                If PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("AMOUNT") IsNot Nothing Then
                                                    PurchInvoiceTable.Round_Off = Math.Abs(Convert.ToDouble(PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST")(K).SelectSingleNode("AMOUNT").ChildNodes(0).Value))
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            Next
                        End If


                        If Val(PurchInvoiceTable.Line_Qty) = 0 And Val(PurchInvoiceTable.Line_Rate) = 0 And Val(PurchInvoiceTable.Line_Amount) <> 0 Then
                            PurchInvoiceTable.Line_Qty = 1
                            PurchInvoiceTable.Line_Rate = PurchInvoiceTable.Line_Amount
                        End If

                        If PurchInvoiceTable.Line_DocQty Is Nothing Or Val(PurchInvoiceTable.Line_DocQty) = 0 Then
                            PurchInvoiceTable.Line_DocQty = PurchInvoiceTable.Line_Qty
                        End If

                        PurchInvoiceTable.Line_Gross_Amount = PurchInvoiceTable.Line_Amount
                        PurchInvoiceTable.Line_Taxable_Amount = PurchInvoiceTable.Line_Amount

                        If PurchInvoiceTable.Line_Tax1_Per = 5 Or PurchInvoiceTable.Line_Tax2_Per = 2.5 Then
                            PurchInvoiceTable.Line_SalesTaxGroupItem = "GST 5%"
                        ElseIf PurchInvoiceTable.Line_Tax1_Per = 12 Or PurchInvoiceTable.Line_Tax2_Per = 6 Then
                            PurchInvoiceTable.Line_SalesTaxGroupItem = "GST 12%"
                        ElseIf PurchInvoiceTable.Line_Tax1_Per = 18 Or PurchInvoiceTable.Line_Tax2_Per = 9 Then
                            PurchInvoiceTable.Line_SalesTaxGroupItem = "GST 18%"
                        ElseIf PurchInvoiceTable.Line_Tax1_Per = 28 Or PurchInvoiceTable.Line_Tax2_Per = 14 Then
                            PurchInvoiceTable.Line_SalesTaxGroupItem = "GST 28%"
                        End If

                        If PurchInvoiceTable.Line_Tax1_Per > 0 Then
                            PurchInvoiceTable.PlaceOfSupply = AgLibrary.ClsMain.agConstants.PlaceOfSupplay.OutsideState
                        Else
                            PurchInvoiceTable.PlaceOfSupply = AgLibrary.ClsMain.agConstants.PlaceOfSupplay.WithinState
                        End If

                        If PurchInvoiceTable.Line_Tax1_Per > 0 Or PurchInvoiceTable.Line_Tax2_Per > 0 Or PurchInvoiceTable.Line_Tax3_Per > 0 Then
                            PurchInvoiceTable.SalesTaxGroupParty = "Registered"
                        Else
                            PurchInvoiceTable.SalesTaxGroupParty = "Unregistered"
                        End If

                        If PurchInvoiceTable.Line_Unit = "" Or PurchInvoiceTable.Line_Unit Is Nothing Then
                            PurchInvoiceTable.Line_Unit = "Pcs"
                        End If

                        'If PurchInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("ACCOUNTINGALLOCATIONS.LIST") IsNot Nothing Then
                        '    If PurchInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("ACCOUNTINGALLOCATIONS.LIST").SelectNodes("RATEDETAILS.LIST") IsNot Nothing Then
                        '        If PurchInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("ACCOUNTINGALLOCATIONS.LIST").SelectNodes("RATEDETAILS.LIST")(1) IsNot Nothing Then
                        '            If PurchInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("ACCOUNTINGALLOCATIONS.LIST").SelectNodes("RATEDETAILS.LIST")(1).SelectSingleNode("GSTRATE") IsNot Nothing Then
                        '                If PurchInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("ACCOUNTINGALLOCATIONS.LIST").SelectNodes("RATEDETAILS.LIST")(1).SelectSingleNode("GSTRATE").ChildNodes.Count > 0 Then
                        '                    PurchInvoiceTable.Line_Tax2_Per = PurchInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("ACCOUNTINGALLOCATIONS.LIST").SelectNodes("RATEDETAILS.LIST")(1).SelectSingleNode("GSTRATE").ChildNodes(0).Value
                        '                End If
                        '            End If
                        '        End If
                        '    End If
                        'End If



                        'If PurchInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("ACCOUNTINGALLOCATIONS.LIST") IsNot Nothing Then
                        '    If PurchInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("ACCOUNTINGALLOCATIONS.LIST").SelectNodes("RATEDETAILS.LIST") IsNot Nothing Then
                        '        If PurchInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("ACCOUNTINGALLOCATIONS.LIST").SelectNodes("RATEDETAILS.LIST")(1) IsNot Nothing Then
                        '            If PurchInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("ACCOUNTINGALLOCATIONS.LIST").SelectNodes("RATEDETAILS.LIST")(1).SelectSingleNode("GSTRATE") IsNot Nothing Then
                        '                If PurchInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("ACCOUNTINGALLOCATIONS.LIST").SelectNodes("RATEDETAILS.LIST")(1).SelectSingleNode("GSTRATE").ChildNodes.Count > 0 Then
                        '                    PurchInvoiceTable.Line_Tax3_Per = PurchInvoiceElementList(I).SelectNodes("ALLINVENTORYENTRIES.LIST").Item(J).SelectSingleNode("ACCOUNTINGALLOCATIONS.LIST").SelectNodes("RATEDETAILS.LIST")(1).SelectSingleNode("GSTRATE").ChildNodes(0).Value
                        '                End If
                        '            End If
                        '        End If
                        '    End If
                        'End If

                        PurchInvoiceTable.Line_Tax1 = Math.Round(PurchInvoiceTable.Line_Taxable_Amount * PurchInvoiceTable.Line_Tax1_Per / 100, 2)
                        PurchInvoiceTable.Line_Tax2 = Math.Round(PurchInvoiceTable.Line_Taxable_Amount * PurchInvoiceTable.Line_Tax2_Per / 100, 2)
                        PurchInvoiceTable.Line_Tax3 = Math.Round(PurchInvoiceTable.Line_Taxable_Amount * PurchInvoiceTable.Line_Tax3_Per / 100, 2)


                        PurchInvoiceTable.Line_Tax4_Per = 0
                        PurchInvoiceTable.Line_Tax4 = 0
                        PurchInvoiceTable.Line_Tax5_Per = 0
                        PurchInvoiceTable.Line_Tax5 = 0
                        PurchInvoiceTable.Line_SubTotal1 = PurchInvoiceTable.Line_Taxable_Amount + PurchInvoiceTable.Line_Tax1 + PurchInvoiceTable.Line_Tax2 + PurchInvoiceTable.Line_Tax3 + PurchInvoiceTable.Line_Tax4 + PurchInvoiceTable.Line_Tax5
                        PurchInvoiceTable.Line_Deduction_Per = 0
                        PurchInvoiceTable.Line_Deduction = 0
                        PurchInvoiceTable.Line_Other_Charge_Per = 0
                        PurchInvoiceTable.Line_Other_Charge = 0
                        PurchInvoiceTable.Line_Round_Off = 0
                        PurchInvoiceTable.Line_Net_Amount = PurchInvoiceTable.Line_SubTotal1


                        PurchInvoiceTableList(UBound(PurchInvoiceTableList)) = PurchInvoiceTable
                        ReDim Preserve PurchInvoiceTableList(UBound(PurchInvoiceTableList) + 1)
                    Next

                    For J = 0 To PurchInvoiceTableList.Length - 1
                        PurchInvoiceTableList(0).Gross_Amount += PurchInvoiceTableList(J).Line_Gross_Amount
                        PurchInvoiceTableList(0).Taxable_Amount += PurchInvoiceTableList(J).Line_Taxable_Amount
                        PurchInvoiceTableList(0).Tax1_Per += 0
                        PurchInvoiceTableList(0).Tax1 += PurchInvoiceTableList(J).Line_Tax1
                        PurchInvoiceTableList(0).Tax2_Per += 0
                        PurchInvoiceTableList(0).Tax2 += PurchInvoiceTableList(J).Line_Tax2
                        PurchInvoiceTableList(0).Tax3_Per += 0
                        PurchInvoiceTableList(0).Tax3 += PurchInvoiceTableList(J).Line_Tax3
                        PurchInvoiceTableList(0).Tax4_Per += 0
                        PurchInvoiceTableList(0).Tax4 += PurchInvoiceTableList(J).Line_Tax4
                        PurchInvoiceTableList(0).Tax5_Per += 0
                        PurchInvoiceTableList(0).Tax5 += PurchInvoiceTableList(J).Line_Tax5
                        PurchInvoiceTableList(0).SubTotal1 += PurchInvoiceTableList(J).Line_SubTotal1
                        PurchInvoiceTableList(0).Deduction_Per += 0
                        PurchInvoiceTableList(0).Deduction += PurchInvoiceTableList(J).Line_Deduction
                        PurchInvoiceTableList(0).Other_Charge_Per += 0
                        PurchInvoiceTableList(0).Other_Charge += PurchInvoiceTableList(J).Line_Other_Charge
                        'PurchInvoiceTableList(0).Round_Off = 0
                        'PurchInvoiceTableList(0).Net_Amount += PurchInvoiceTableList(J).Line_Net_Amount
                    Next

                    PurchInvoiceTableList(0).Net_Amount = PurchInvoiceTableList(0).SubTotal1 -
                            PurchInvoiceTableList(0).Deduction +
                            PurchInvoiceTableList(0).Other_Charge + PurchInvoiceTableList(0).Round_Off

                    Dim mTallyNetAmount As Double = 0
                    If PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST") IsNot Nothing Then
                        For J = 0 To PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST").Count - 1
                            If PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST").Item(J).SelectSingleNode("LEDGERNAME").ChildNodes(0).Value = PurchInvoiceTableList(0).VendorName Then
                                mTallyNetAmount = Math.Abs(Convert.ToDouble(PurchInvoiceElementList(I).SelectNodes("LEDGERENTRIES.LIST").Item(J).SelectSingleNode("AMOUNT").ChildNodes(0).Value))
                            End If
                        Next
                    End If

                    If mTallyNetAmount > PurchInvoiceTableList(0).Net_Amount Then
                        PurchInvoiceTableList(0).Other_Charge += Math.Round(mTallyNetAmount - PurchInvoiceTableList(0).Net_Amount, 2)
                    ElseIf mTallyNetAmount < PurchInvoiceTableList(0).Net_Amount Then
                        PurchInvoiceTableList(0).Deduction += Math.Round(PurchInvoiceTableList(0).Net_Amount - mTallyNetAmount, 2)
                    End If

                    PurchInvoiceTableList(0).Net_Amount = Math.Round(PurchInvoiceTableList(0).Net_Amount + PurchInvoiceTableList(0).Other_Charge - PurchInvoiceTableList(0).Deduction, 2)


                    InsertPurchInvoice(PurchInvoiceTableList)
                End If
            Next I
            AgL.ETrans.Commit()
            mTrans = "Commit"
            mFlag_Import = False
        Catch ex As Exception
            AgL.ETrans.Rollback()
            mFlag_Import = False
            MsgBox(ex.Message)
        End Try
    End Sub
    Private Sub FEditSaveAllEntries()
        mFlag_Import = True
        For I As Integer = 0 To DTMaster.Rows.Count - 1
            BMBMaster.Position = I
            'MoveRec()
            Topctrl1.FButtonClick(1)
            Calculation()
            Topctrl1.FButtonClick(13)
        Next
        mFlag_Import = False
    End Sub

    Public Shared Function InsertPurchInvoice(PurchInvoiceTableList As StructPurchInvoice(), Optional PurchInvoiceDimensionTableList As StructPurchInvoiceDimensionDetail() = Nothing) As String
        Dim mQry As String = ""

        If PurchInvoiceTableList(0).V_Date IsNot Nothing Then
            'PurchInvoiceTableList(0).DocID = AgL.GetDocId(PurchInvoiceTableList(0).V_Type, CStr(PurchInvoiceTableList(0).V_No),
            '                                         CDate(PurchInvoiceTableList(0).V_Date),
            '                                        IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead), PurchInvoiceTableList(0).Div_Code, PurchInvoiceTableList(0).Site_Code)
            PurchInvoiceTableList(0).DocID = AgL.CreateDocId(AgL, "PurchInvoice", PurchInvoiceTableList(0).V_Type, CStr(PurchInvoiceTableList(0).V_No),
                                                     CDate(PurchInvoiceTableList(0).V_Date),
                                                    IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead), PurchInvoiceTableList(0).Div_Code, PurchInvoiceTableList(0).Site_Code)

            PurchInvoiceTableList(0).V_Prefix = AgL.DeCodeDocID(PurchInvoiceTableList(0).DocID, AgLibrary.ClsMain.DocIdPart.VoucherPrefix)
            PurchInvoiceTableList(0).V_No = Val(AgL.DeCodeDocID(PurchInvoiceTableList(0).DocID, AgLibrary.ClsMain.DocIdPart.VoucherNo))


            'If AgL.Dman_Execute("Select Count(*) From PurchInvoice With (NoLock) Where V_Type = '" & PurchInvoiceTableList(0).V_Type & "'
            '            And ManualRefNo = '" & PurchInvoiceTableList(0).ManualRefNo & "'
            '            And Div_Code = '" & PurchInvoiceTableList(0).Div_Code & "'
            '            And Site_Code = '" & PurchInvoiceTableList(0).Site_Code & "'
            '            And V_Prefix = '" & PurchInvoiceTableList(0).V_Prefix & "'
            '                ", IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar() > 0 Or
            '            PurchInvoiceTableList(0).ManualRefNo = "" Then
            '    Dim mManualrefNoPrefix As String = AgL.XNull(AgL.Dman_Execute("Select Ref_Prefix From Voucher_Prefix Where V_Type = '" & PurchInvoiceTableList(0).V_Type & "' 
            '                    And " & AgL.Chk_Date(PurchInvoiceTableList(0).V_Date) & " >= Date_From 
            '                    And " & AgL.Chk_Date(PurchInvoiceTableList(0).V_Date) & " <= Date_To ", IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar())
            '    PurchInvoiceTableList(0).ManualRefNo = mManualrefNoPrefix + PurchInvoiceTableList(0).V_No.ToString().PadLeft(4).Replace(" ", "0")
            'End If

            If PurchInvoiceTableList(0).ManualRefNo = "" Then
                PurchInvoiceTableList(0).ManualRefNo = AgTemplate.ClsMain.FGetManualRefNo("ManualRefNo", "PurchInvoice",
                                PurchInvoiceTableList(0).V_Type, PurchInvoiceTableList(0).V_Date,
                                PurchInvoiceTableList(0).Div_Code, PurchInvoiceTableList(0).Site_Code,
                                AgTemplate.ClsMain.ManualRefType.Max)
            End If

            If AgL.XNull(PurchInvoiceTableList(0).ManualRefNo) <> "" Then
                Dim bTransactionCompCode As String = AgL.XNull(AgL.Dman_Execute(" Select Comp_Code From Company C 
                    Where " & AgL.Chk_Date(PurchInvoiceTableList(0).V_Date) & " Between C.Start_Dt And C.End_Dt ", IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar())

                If AgL.VNull(AgL.Dman_Execute(" Select Count(*)
                        From PurchInvoice H
                        LEFT JOIN Company C ON H.V_Date BETWEEN C.Start_Dt AND C.End_Dt
                        Where H.V_Type = '" & PurchInvoiceTableList(0).V_Type & "'
                        And H.Site_Code = '" & PurchInvoiceTableList(0).Site_Code & "'
                        And H.Div_Code = '" & PurchInvoiceTableList(0).Div_Code & "'
                        And H.ManualRefNo = '" & PurchInvoiceTableList(0).ManualRefNo & "'
                        And C.Comp_Code = '" & bTransactionCompCode & "'
                        ", IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar()) > 0 Then
                    Err.Raise(1,, "Manual Ref No " & PurchInvoiceTableList(0).ManualRefNo & " already exists.")
                End If
            End If

            Dim DtSubGroup As DataTable = Nothing
            If PurchInvoiceTableList(0).VendorName <> "" Then
                mQry = "SELECT Sg.SubCode As Vendor, Name As VendorName, Address As VendorAddress, CityCode As VendorCity, Mobile As VendorMobile, Sgr.RegistrationNo As SaleToPartySalesTaxNo
                        FROM Subgroup Sg With (NoLock)
                        left join (Select SubCode, RegistrationNo From SubgroupRegistration Where RegistrationType = 'Sales Tax No') As Sgr On Sg.Subcode = Sgr.Subcode
                        Where Upper(RTrim(LTrim(Sg.Name)))  =  " & AgL.Chk_Text(PurchInvoiceTableList(0).VendorName.ToString().Trim().ToUpper) & ""
                DtSubGroup = AgL.FillData(mQry, IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).Tables(0)
            ElseIf PurchInvoiceTableList(0).Vendor <> "" Then
                mQry = "SELECT Sg.SubCode As Vendor, Name As VendorName, Address As VendorAddress, CityCode As VendorCity, Mobile As VendorMobile, Sgr.RegistrationNo As SaleToPartySalesTaxNo
                        FROM Subgroup Sg With (NoLock)
                        left join (Select SubCode, RegistrationNo From SubgroupRegistration Where RegistrationType = 'Sales Tax No') As Sgr On Sg.Subcode = Sgr.Subcode
                        Where Sg.SubCode =  " & AgL.Chk_Text(PurchInvoiceTableList(0).Vendor) & ""
                DtSubGroup = AgL.FillData(mQry, IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).Tables(0)
            End If
            If DtSubGroup IsNot Nothing Then
                If (DtSubGroup.Rows.Count > 0) Then
                    PurchInvoiceTableList(0).Vendor = AgL.XNull(DtSubGroup.Rows(0)("Vendor"))
                    PurchInvoiceTableList(0).VendorName = AgL.XNull(DtSubGroup.Rows(0)("VendorName"))
                    If PurchInvoiceTableList(0).VendorAddress = "" Then PurchInvoiceTableList(0).VendorAddress = AgL.XNull(DtSubGroup.Rows(0)("VendorAddress"))
                    If PurchInvoiceTableList(0).VendorCity = "" Then PurchInvoiceTableList(0).VendorCity = AgL.XNull(DtSubGroup.Rows(0)("VendorCity"))
                    If PurchInvoiceTableList(0).VendorMobile = "" Then PurchInvoiceTableList(0).VendorMobile = AgL.XNull(DtSubGroup.Rows(0)("VendorMobile"))
                    If PurchInvoiceTableList(0).VendorSalesTaxNo = "" Then PurchInvoiceTableList(0).VendorSalesTaxNo = AgL.XNull(DtSubGroup.Rows(0)("SaleToPartySalesTaxNo"))
                End If
            End If

            If PurchInvoiceTableList(0).Vendor <> "" Then
                If AgL.XNull(AgL.Dman_Execute("Select SubGRoupType From SubGroup With (NoLock) Where SubCode = '" & PurchInvoiceTableList(0).Vendor & "'", IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar()) = "" Then
                    mQry = "UPDATE SubGroup Set SubGroupType = '" & SubgroupType.Supplier & "' Where SubCode = '" & PurchInvoiceTableList(0).Vendor & "'"
                    AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)
                End If
            End If




            If PurchInvoiceTableList(0).BillToPartyCode = "" Then
                PurchInvoiceTableList(0).BillToPartyCode = AgL.Dman_Execute("SELECT Sg.SubCode FROM Subgroup Sg Where Sg.Name =  '" & PurchInvoiceTableList(0).BillToPartyName & "'", IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar()
            End If

            If PurchInvoiceTableList(0).BillToPartyCode = "" Or PurchInvoiceTableList(0).BillToPartyCode Is Nothing Then
                PurchInvoiceTableList(0).BillToPartyCode = PurchInvoiceTableList(0).Vendor
            End If

            If PurchInvoiceTableList(0).AgentCode = "" Then
                PurchInvoiceTableList(0).AgentCode = AgL.Dman_Execute("SELECT Sg.SubCode FROM Subgroup Sg With (NoLock) Where Sg.Name =  '" & PurchInvoiceTableList(0).AgentName & "'", IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar()
            End If

            If PurchInvoiceTableList(0).AgentCode <> "" Then
                If AgL.XNull(AgL.Dman_Execute("Select SubGroupType From SubGroup With (NoLock) Where SubCode = '" & PurchInvoiceTableList(0).AgentCode & "'", IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar()) = "" Then
                    mQry = "UPDATE SubGroup Set SubGroupType = '" & SubgroupType.PurchaseAgent & "' Where SubCode = '" & PurchInvoiceTableList(0).AgentCode & "'"
                    AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)
                End If
            End If

            If PurchInvoiceTableList(0).StructureCode = "" Then
                PurchInvoiceTableList(0).StructureCode = AgL.Dman_Execute("Select IfNull(Max(Structure),'') From Voucher_Type With (NoLock) Where V_Type = '" & PurchInvoiceTableList(0).V_Type & "'", IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar()
            End If

            If PurchInvoiceTableList(0).SalesTaxGroupParty Is Nothing Or PurchInvoiceTableList(0).SalesTaxGroupParty = "" Then
                PurchInvoiceTableList(0).SalesTaxGroupParty = AgL.Dman_Execute("Select IfNull(SalesTaxPostingGroup,'') From Subgroup With (NoLock) Where SubCode = '" & PurchInvoiceTableList(0).BillToPartyCode & "'", IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar()
            End If

            If PurchInvoiceTableList(0).SalesTaxGroupParty Is Nothing Or PurchInvoiceTableList(0).SalesTaxGroupParty = "" Or
                PurchInvoiceTableList(0).SalesTaxGroupParty = "Unregistered" Then
            End If

            If PurchInvoiceTableList(0).VendorCity <> "" Then
                PurchInvoiceTableList(0).VendorCity = AgL.Dman_Execute("SELECT CityCode From City With (NoLock) where CityName = '" & PurchInvoiceTableList(0).VendorCity & "' ", IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar
            End If

            If PurchInvoiceTableList(0).PlaceOfSupply = "" Then
                PurchInvoiceTableList(0).PlaceOfSupply = PlaceOfSupplay.WithinState
            End If

            If AgL.XNull(PurchInvoiceTableList(0).VendorAddress).Length > 100 Then
                PurchInvoiceTableList(0).VendorAddress = PurchInvoiceTableList(0).VendorAddress.Substring(0, 99)
            End If

            If AgL.XNull(PurchInvoiceTableList(0).Vendor) = "" And AgL.XNull(PurchInvoiceTableList(0).VendorName) <> "" Then
                Err.Raise(1,, "Vendor is Empty.")
            End If
            If AgL.XNull(PurchInvoiceTableList(0).BillToPartyCode) = "" And AgL.XNull(PurchInvoiceTableList(0).BillToPartyName) <> "" Then
                Err.Raise(1,, "Bill To Party is Empty.")
            End If

            'If AgL.Dman_Execute("SELECT Count(*) From PurchInvoice where V_Type = '" & PurchInvoiceTableList(0).V_Type & "' And ManualRefNo = '" & PurchInvoiceTableList(0).ManualRefNo & "' ", AgL.GCn).ExecuteScalar = 0 Then
            mQry = " INSERT INTO PurchInvoice (DocID,  V_Type,  V_Prefix, V_Date,  V_No,  Div_Code,  Site_Code,
                        ManualRefNo, Process, SettingGroup,  Vendor,  BillToParty,  Agent, VendorName,  VendorAddress,
                        VendorCity,  VendorMobile, 
                        SalesTaxGroupParty, PlaceOfSupply,  Structure,
                        CustomFields,  VendorDocNo, VendorDocDate, VendorSalesTaxNo,  ReferenceDocId, Tags,
                        Remarks, GenDocId, GenDocIdSr, AmsDocNo, AmsDocDate, AmsDocNetAmount, 
                        Commission_Per, Commission, AdditionalCommission_Per, AdditionalCommission,  
                        Gross_Amount,  
                        SpecialDiscount_Per, SpecialDiscount, SpecialAddition_Per, SpecialAddition, 
                        Taxable_Amount,
                        Tax1_Per,  Tax1,  Tax2_Per, Tax2,  Tax3_Per,  Tax3,
                        Tax4_Per,  Tax4,  Tax5_Per, Tax5,  SubTotal1,  Deduction_Per,
                        Deduction,  Other_Charge_Per,  Other_Charge, Other_Charge1_Per,  Other_Charge1, Round_Off,  Net_Amount,  
                        Status, EntryBy,  EntryDate,  ApproveBy,
                        ApproveDate,  MoveToLog,  MoveToLogDate, UploadDate, LockText, OmsId)
                        Select  " & AgL.Chk_Text(PurchInvoiceTableList(0).DocID) & ",  
                        " & AgL.Chk_Text(PurchInvoiceTableList(0).V_Type) & ",  
                        " & AgL.Chk_Text(PurchInvoiceTableList(0).V_Prefix) & ",  
                        " & AgL.Chk_Date(PurchInvoiceTableList(0).V_Date) & ",  
                        " & AgL.Chk_Text(PurchInvoiceTableList(0).V_No) & ",  
                        " & AgL.Chk_Text(PurchInvoiceTableList(0).Div_Code) & ",
                        " & AgL.Chk_Text(PurchInvoiceTableList(0).Site_Code) & ",  
                        " & AgL.Chk_Text(PurchInvoiceTableList(0).ManualRefNo) & ",  
                        " & AgL.Chk_Text(PurchInvoiceTableList(0).Process) & ",  
                        " & AgL.Chk_Text(PurchInvoiceTableList(0).SettingGroup) & ",  
                        " & AgL.Chk_Text(PurchInvoiceTableList(0).Vendor) & ", 
                        " & AgL.Chk_Text(PurchInvoiceTableList(0).BillToPartyCode) & ", 
                        " & AgL.Chk_Text(PurchInvoiceTableList(0).AgentCode) & ", 
                        " & AgL.Chk_Text(PurchInvoiceTableList(0).VendorName) & ",
                        " & AgL.Chk_Text(PurchInvoiceTableList(0).VendorAddress) & ",  
                        " & AgL.Chk_Text(PurchInvoiceTableList(0).VendorCity) & ",  
                        " & AgL.Chk_Text(PurchInvoiceTableList(0).VendorMobile) & ", 
                        " & AgL.Chk_Text(PurchInvoiceTableList(0).SalesTaxGroupParty) & ",  
                        " & AgL.Chk_Text(PurchInvoiceTableList(0).PlaceOfSupply) & ",  
                        " & AgL.Chk_Text(PurchInvoiceTableList(0).StructureCode) & ",  
                        " & AgL.Chk_Text(PurchInvoiceTableList(0).CustomFields) & ",  
                        " & AgL.Chk_Text(PurchInvoiceTableList(0).VendorDocNo) & ",  
                        " & AgL.Chk_Date(PurchInvoiceTableList(0).VendorDocDate) & ",
                        " & AgL.Chk_Text(PurchInvoiceTableList(0).VendorSalesTaxNo) & ",  
                        " & AgL.Chk_Text(PurchInvoiceTableList(0).ReferenceDocId) & ",    
                        " & AgL.Chk_Text(PurchInvoiceTableList(0).Tags) & ",    
                        " & AgL.Chk_Text(PurchInvoiceTableList(0).Remarks) & ",    
                        " & AgL.Chk_Text(PurchInvoiceTableList(0).GenDocId) & ",    
                        " & AgL.Chk_Text(PurchInvoiceTableList(0).GenDocIdSr) & ",    
                        " & AgL.Chk_Text(PurchInvoiceTableList(0).AmsDocNo) & ",    
                        " & AgL.Chk_Date(PurchInvoiceTableList(0).AmsDocDate) & ",    
                        " & Val(PurchInvoiceTableList(0).AmsDocAmount) & ",    
                        " & Val(PurchInvoiceTableList(0).CommissionPer) & ",    
                        " & Val(PurchInvoiceTableList(0).CommissionAmount) & ",    
                        " & Val(PurchInvoiceTableList(0).AdditionalCommissionPer) & ",    
                        " & Val(PurchInvoiceTableList(0).AdditionalCommissionAmount) & ",    
                        " & Val(PurchInvoiceTableList(0).Gross_Amount) & ",    
                        " & Val(PurchInvoiceTableList(0).SpecialDiscount_Per) & ",    
                        " & Val(PurchInvoiceTableList(0).SpecialDiscount) & ",    
                        " & Val(PurchInvoiceTableList(0).SpecialAddition_Per) & ",    
                        " & Val(PurchInvoiceTableList(0).SpecialAddition) & ",    
                        " & Val(PurchInvoiceTableList(0).Taxable_Amount) & ",    
                        " & Val(PurchInvoiceTableList(0).Tax1_Per) & ",    
                        " & Val(PurchInvoiceTableList(0).Tax1) & ",    
                        " & Val(PurchInvoiceTableList(0).Tax2_Per) & ",    
                        " & Val(PurchInvoiceTableList(0).Tax2) & ",    
                        " & Val(PurchInvoiceTableList(0).Tax3_Per) & ",    
                        " & Val(PurchInvoiceTableList(0).Tax3) & ",    
                        " & Val(PurchInvoiceTableList(0).Tax4_Per) & ",    
                        " & Val(PurchInvoiceTableList(0).Tax4) & ",    
                        " & Val(PurchInvoiceTableList(0).Tax5_Per) & ",    
                        " & Val(PurchInvoiceTableList(0).Tax5) & ",    
                        " & Val(PurchInvoiceTableList(0).SubTotal1) & ",    
                        " & Val(PurchInvoiceTableList(0).Deduction_Per) & ",    
                        " & Val(PurchInvoiceTableList(0).Deduction) & ",    
                        " & Val(PurchInvoiceTableList(0).Other_Charge_Per) & ",    
                        " & Val(PurchInvoiceTableList(0).Other_Charge) & ",    
                        " & Val(PurchInvoiceTableList(0).Other_Charge1_Per) & ",    
                        " & Val(PurchInvoiceTableList(0).Other_Charge1) & ",    
                        " & Val(PurchInvoiceTableList(0).Round_Off) & ",    
                        " & Val(PurchInvoiceTableList(0).Net_Amount) & ",    
                        " & AgL.Chk_Text(PurchInvoiceTableList(0).Status) & ",    
                        " & AgL.Chk_Text(PurchInvoiceTableList(0).EntryBy) & ",    
                        " & AgL.Chk_Date(PurchInvoiceTableList(0).EntryDate) & ",    
                        " & AgL.Chk_Text(PurchInvoiceTableList(0).ApproveBy) & ",    
                        " & AgL.Chk_Date(PurchInvoiceTableList(0).ApproveDate) & ",    
                        " & AgL.Chk_Text(PurchInvoiceTableList(0).MoveToLog) & ",    
                        " & AgL.Chk_Date(PurchInvoiceTableList(0).MoveToLogDate) & ",    
                        " & AgL.Chk_Date(PurchInvoiceTableList(0).UploadDate) & ",
                        " & AgL.Chk_Text(PurchInvoiceTableList(0).LockText) & ",
                        " & AgL.Chk_Text(PurchInvoiceTableList(0).OmsId) & ""
            AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)


            mQry = "INSERT INTO LedgerHead(DocID, V_Type, V_Prefix, V_Date,
                    V_No, Div_Code, Site_Code, ManualRefNo, Subcode, DrCr, UptoDate, Remarks, Status, SalesTaxGroupParty, PlaceOfSupply,
                    PartySalesTaxNo, Structure, CustomFields,
                    PartyDocNo, PartyDocDate, EntryBy, EntryDate, ApproveBy, ApproveDate, MoveToLog, MoveToLogDate, UploadDate)
                    SELECT H.DocID, H.V_Type, H.V_Prefix, H.V_Date,
                    H.V_No, H.Div_Code, H.Site_Code, H.ManualRefNo, H.Vendor AS Subcode, 'Cr' AS DrCr, NULL AS UptoDate, 
                    H.Remarks, NULL AS Status, H.SalesTaxGroupParty, 
                    H.PlaceOfSupply, H.VendorSalesTaxNo  AS PartySalesTaxNo, H.Structure, H.CustomFields,
                    H.VendorDocNo AS PartyDocNo, H.VendorDocDate AS PartyDocDate, H.EntryBy, H.EntryDate, NULL AS ApproveBy, NULL AS ApproveDate, 
                    H.MoveToLog, H.MoveToLogDate, NULL AS UploadDate
                    FROM PurchInvoice H 
                    LEFT JOIN LedgerHead HH ON H.DocID = HH.DocID
                    WHERE H.DocId = " & AgL.Chk_Text(PurchInvoiceTableList(0).DocID) & " 
                    And HH.DocID IS NULL "
            AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)


            For I As Integer = 0 To PurchInvoiceTableList.Length - 1
                If PurchInvoiceTableList(I).Line_ItemName IsNot Nothing Then
                    If PurchInvoiceTableList(I).Line_ItemCode = "" Or PurchInvoiceTableList(I).Line_ItemCode Is Nothing Then
                        PurchInvoiceTableList(I).Line_ItemCode = AgL.Dman_Execute("SELECT Code FROM Item Where Description =  " & AgL.Chk_Text(PurchInvoiceTableList(I).Line_ItemName) & "", IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar()
                        If PurchInvoiceTableList(I).Line_ItemCode = "" Or PurchInvoiceTableList(I).Line_ItemCode Is Nothing Then
                            PurchInvoiceTableList(I).Line_ItemCode = AgL.Dman_Execute("SELECT Code FROM Item Where Specification =  " & AgL.Chk_Text(PurchInvoiceTableList(I).Line_ItemName) & "", IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar()
                        End If
                    End If


                    If PurchInvoiceTableList(I).Line_ItemCode = "" Or PurchInvoiceTableList(I).Line_ItemCode Is Nothing Then
                        If PurchInvoiceTableList(I).Line_ItemName <> "" Then
                            Dim ItemTable As New FrmItemMaster.StructItem
                            Dim bItemCode As String = AgL.GetMaxId("Item", "Code", AgL.GCn, AgL.PubDivCode, AgL.PubSiteCode, 4, True, True, AgL.ECmd, AgL.Gcn_ConnectionString)
                            Dim bManualCode As String = AgL.XNull(AgL.Dman_Execute("SELECT  IfNull(Max(CAST(ManualCode AS INTEGER)),0) FROM Item  WHERE ABS(ManualCode)>0", IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar)

                            ItemTable.Code = bItemCode
                            ItemTable.ManualCode = bManualCode
                            ItemTable.DisplayName = PurchInvoiceTableList(I).Line_ItemName
                            ItemTable.Specification = PurchInvoiceTableList(I).Line_ItemName
                            ItemTable.ItemGroupDesc = ""
                            ItemTable.ItemCategoryDesc = ""
                            ItemTable.Description = PurchInvoiceTableList(I).Line_ItemName
                            ItemTable.ItemType = "TP"
                            ItemTable.Unit = "Pcs"
                            ItemTable.PurchaseRate = 0
                            ItemTable.Rate = 0
                            ItemTable.SalesTaxPostingGroup = "GST 5%"
                            ItemTable.HSN = ""
                            ItemTable.EntryBy = AgL.PubUserName
                            ItemTable.EntryDate = AgL.GetDateTime(IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead))
                            ItemTable.EntryType = "Add"
                            ItemTable.EntryStatus = LogStatus.LogOpen
                            ItemTable.Div_Code = AgL.PubDivCode
                            ItemTable.Status = "Active"
                            ItemTable.StockYN = 0
                            ItemTable.IsSystemDefine = 0

                            Dim DTUP As DataTable = AgL.FillData("Select '' As [UP] ", AgL.GCn).Tables(0)
                            Dim FrmObj As New FrmItemMaster("", DTUP, ItemV_Type.Item)
                            FrmObj.ImportItemTable(ItemTable)
                        End If
                    End If

                    If PurchInvoiceTableList(I).Line_ItemCode = "" Then
                        Err.Raise(1,, "Item is saving blank in purch invoice detail for " & PurchInvoiceTableList(0).ManualRefNo)
                    End If

                    If AgL.XNull(PurchInvoiceTableList(I).Line_CatalogCode) = "" Then
                        PurchInvoiceTableList(I).Line_CatalogCode = AgL.Dman_Execute("SELECT Code FROM Catalog With (NoLock) Where Description =  " & AgL.Chk_Text(PurchInvoiceTableList(I).Line_CatalogName) & "", IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar()
                    End If

                    mQry = "Insert Into PurchInvoiceDetail(DocId, Sr, Item, Specification, SalesTaxGroupItem, 
                           DocQty, FreeQty, Qty, Unit, Pcs, UnitMultiplier, DealUnit, 
                           DocDealQty, Rate, DiscountPer, DiscountAmount, AdditionalDiscountPer, AdditionalDiscountAmount,  
                           Amount, Commission_Per, Commission, AdditionalCommission_Per, AdditionalCommission,
                           Remark, BaleNo, LotNo, Catalog, 
                           ReferenceNo, ReferenceDate, ReferenceDocId, ReferenceTSr, ReferenceSr, 
                           PurchInvoice, PurchInvoiceSr, GrossWeight, NetWeight, OmsId, Gross_Amount, 
                           SpecialDiscount_Per, SpecialDiscount, SpecialAddition_Per, SpecialAddition,
                           Taxable_Amount,
                           Tax1_Per, Tax1, Tax2_Per, Tax2, Tax3_Per, Tax3, Tax4_Per, Tax4, Tax5_Per, Tax5, SubTotal1, Deduction_Per, 
                           Deduction, Other_Charge_Per, Other_Charge, Other_Charge1_Per, Other_Charge1, Round_Off, Net_Amount)
                           Select " & AgL.Chk_Text(PurchInvoiceTableList(0).DocID) & ", 
                            " & Val(PurchInvoiceTableList(I).Line_Sr) & ", 
                            " & AgL.Chk_Text(PurchInvoiceTableList(I).Line_ItemCode) & ", 
                            " & AgL.Chk_Text(PurchInvoiceTableList(I).Line_Specification) & ", 
                            " & AgL.Chk_Text(PurchInvoiceTableList(I).Line_SalesTaxGroupItem) & ", 
                            " & Val(PurchInvoiceTableList(I).Line_DocQty) & ", 
                            " & Val(PurchInvoiceTableList(I).Line_FreeQty) & ", 
                            " & Val(PurchInvoiceTableList(I).Line_Qty) & ", 
                            " & AgL.Chk_Text(PurchInvoiceTableList(I).Line_Unit) & ", 
                            " & Val(PurchInvoiceTableList(I).Line_Pcs) & ", 
                            " & Val(PurchInvoiceTableList(I).Line_UnitMultiplier) & ", 
                            " & AgL.Chk_Text(PurchInvoiceTableList(I).Line_DealUnit) & ", 
                            " & Val(PurchInvoiceTableList(I).Line_DocDealQty) & ", 
                            " & Val(PurchInvoiceTableList(I).Line_Rate) & ", 
                            " & Val(PurchInvoiceTableList(I).Line_DiscountPer) & ", 
                            " & Val(PurchInvoiceTableList(I).Line_DiscountAmount) & ", 
                            " & AgL.Chk_Text(PurchInvoiceTableList(I).Line_AdditionalDiscountPer) & ", 
                            " & AgL.Chk_Text(PurchInvoiceTableList(I).Line_AdditionalDiscountAmount) & ", 
                            " & Val(PurchInvoiceTableList(I).Line_Amount) & ", 
                            " & Val(PurchInvoiceTableList(I).Line_CommissionPer) & ", 
                            " & Val(PurchInvoiceTableList(I).Line_CommissionAmount) & ", 
                            " & Val(PurchInvoiceTableList(I).Line_AdditionalCommissionPer) & ", 
                            " & Val(PurchInvoiceTableList(I).Line_AdditionalCommissionAmount) & ", 
                            " & AgL.Chk_Text(PurchInvoiceTableList(I).Line_Remark) & ", 
                            " & AgL.Chk_Text(PurchInvoiceTableList(I).Line_BaleNo) & ", 
                            " & AgL.Chk_Text(PurchInvoiceTableList(I).Line_LotNo) & ", 
                            " & AgL.Chk_Text(PurchInvoiceTableList(I).Line_CatalogCode) & ", 
                            " & AgL.Chk_Text(PurchInvoiceTableList(I).Line_ReferenceNo) & ", 
                            " & AgL.Chk_Date(PurchInvoiceTableList(I).Line_ReferenceDate) & ", 
                            " & AgL.Chk_Text(PurchInvoiceTableList(I).Line_ReferenceDocId) & ", 
                            " & AgL.Chk_Text(PurchInvoiceTableList(I).Line_ReferenceTSr) & ", 
                            " & AgL.Chk_Text(PurchInvoiceTableList(I).Line_ReferenceSr) & ", 
                            " & AgL.Chk_Text(PurchInvoiceTableList(I).Line_PurchInvoice) & ", 
                            " & AgL.Chk_Text(PurchInvoiceTableList(I).Line_PurchInvoiceSr) & ", 
                            " & Val(PurchInvoiceTableList(I).Line_GrossWeight) & ", 
                            " & Val(PurchInvoiceTableList(I).Line_NetWeight) & ", 
                            " & AgL.Chk_Text(PurchInvoiceTableList(I).Line_OmsId) & ", 
                            " & Val(PurchInvoiceTableList(I).Line_Gross_Amount) & ", 
                            " & Val(PurchInvoiceTableList(I).Line_SpecialDiscount_Per) & ", 
                            " & Val(PurchInvoiceTableList(I).Line_SpecialDiscount) & ", 
                            " & Val(PurchInvoiceTableList(I).Line_SpecialAddition_Per) & ", 
                            " & Val(PurchInvoiceTableList(I).Line_SpecialAddition) & ", 
                            " & Val(PurchInvoiceTableList(I).Line_Taxable_Amount) & ", 
                            " & Val(PurchInvoiceTableList(I).Line_Tax1_Per) & ", 
                            " & Val(PurchInvoiceTableList(I).Line_Tax1) & ", 
                            " & Val(PurchInvoiceTableList(I).Line_Tax2_Per) & ", 
                            " & Val(PurchInvoiceTableList(I).Line_Tax2) & ", 
                            " & Val(PurchInvoiceTableList(I).Line_Tax3_Per) & ", 
                            " & Val(PurchInvoiceTableList(I).Line_Tax3) & ", 
                            " & Val(PurchInvoiceTableList(I).Line_Tax4_Per) & ", 
                            " & Val(PurchInvoiceTableList(I).Line_Tax4) & ", 
                            " & Val(PurchInvoiceTableList(I).Line_Tax5_Per) & ", 
                            " & Val(PurchInvoiceTableList(I).Line_Tax5) & ", 
                            " & Val(PurchInvoiceTableList(I).Line_SubTotal1) & ", 
                            " & Val(PurchInvoiceTableList(I).Line_Deduction_Per) & ", 
                            " & Val(PurchInvoiceTableList(I).Line_Deduction) & ", 
                            " & Val(PurchInvoiceTableList(I).Line_Other_Charge_Per) & ", 
                            " & Val(PurchInvoiceTableList(I).Line_Other_Charge) & ", 
                            " & Val(PurchInvoiceTableList(I).Line_Other_Charge1_Per) & ", 
                            " & Val(PurchInvoiceTableList(I).Line_Other_Charge1) & ", 
                            " & Val(PurchInvoiceTableList(I).Line_Round_Off) & ", 
                            " & Val(PurchInvoiceTableList(I).Line_Net_Amount) & ""
                    AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)

                    mQry = "INSERT INTO PurchInvoiceDetailSku (DocID, Sr, ItemCategory, ItemGroup, Item, Dimension1, Dimension2, Dimension3, Dimension4, Size)
                            Select " & AgL.Chk_Text(PurchInvoiceTableList(0).DocID) & ", 
                            " & Val(PurchInvoiceTableList(I).Line_Sr) & ", 
                            " & AgL.Chk_Text(PurchInvoiceTableList(I).Line_ItemCategoryCode) & ",
                            " & AgL.Chk_Text(PurchInvoiceTableList(I).Line_ItemGroupCode) & ",
                            " & AgL.Chk_Text(IIf(PurchInvoiceTableList(I).Line_ItemV_Type = ItemV_Type.SKU, PurchInvoiceTableList(I).Line_BaseItemCode, PurchInvoiceTableList(I).Line_ItemCode)) & ", 
                            " & AgL.Chk_Text(PurchInvoiceTableList(I).Line_Dimension1Code) & ", 
                            " & AgL.Chk_Text(PurchInvoiceTableList(I).Line_Dimension2Code) & ", 
                            " & AgL.Chk_Text(PurchInvoiceTableList(I).Line_Dimension3Code) & ", 
                            " & AgL.Chk_Text(PurchInvoiceTableList(I).Line_Dimension4Code) & ", 
                            " & AgL.Chk_Text(PurchInvoiceTableList(I).Line_SizeCode) & " 
                            "
                    AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)
                End If
            Next

            If PurchInvoiceDimensionTableList IsNot Nothing Then
                For K As Integer = 0 To PurchInvoiceDimensionTableList.Length - 1
                    If Val(PurchInvoiceDimensionTableList(K).Qty) > 0 Then
                        mQry = " INSERT INTO PurchInvoiceDimensionDetail (DocID, TSr, Sr, Specification, Pcs, Qty, TotalQty) 
                            Select " & AgL.Chk_Text(PurchInvoiceTableList(0).DocID) & ", 
                            " & Val(PurchInvoiceDimensionTableList(K).TSr) & " As TSr, 
                            " & Val(PurchInvoiceDimensionTableList(K).Sr) & " As Sr, 
                            " & AgL.Chk_Text(PurchInvoiceDimensionTableList(K).Specification) & ", 
                            " & Val(PurchInvoiceDimensionTableList(K).Pcs) & ", 
                            " & Val(PurchInvoiceDimensionTableList(K).Qty) & ", 
                            " & Val(PurchInvoiceDimensionTableList(K).TotalQty) & ""
                        AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)

                        mQry = "INSERT INTO PurchInvoiceDimensionDetailSku (DocID, TSr, Sr, ItemCategory, ItemGroup, Item, Dimension1, Dimension2, Dimension3, Dimension4, Size)
                            Select " & AgL.Chk_Text(PurchInvoiceTableList(0).DocID) & ", 
                            " & Val(PurchInvoiceDimensionTableList(K).TSr) & ", 
                            " & Val(PurchInvoiceDimensionTableList(K).Sr) & ", 
                            " & AgL.Chk_Text(PurchInvoiceDimensionTableList(K).ItemCategoryCode) & ",
                            " & AgL.Chk_Text(PurchInvoiceDimensionTableList(K).ItemGroupCode) & ",
                            " & AgL.Chk_Text(IIf(PurchInvoiceDimensionTableList(K).ItemV_Type = ItemV_Type.SKU, PurchInvoiceDimensionTableList(K).BaseItemCode, PurchInvoiceDimensionTableList(K).ItemCode)) & ", 
                            " & AgL.Chk_Text(PurchInvoiceDimensionTableList(K).Dimension1Code) & ", 
                            " & AgL.Chk_Text(PurchInvoiceDimensionTableList(K).Dimension2Code) & ", 
                            " & AgL.Chk_Text(PurchInvoiceDimensionTableList(K).Dimension3Code) & ", 
                            " & AgL.Chk_Text(PurchInvoiceDimensionTableList(K).Dimension4Code) & ", 
                            " & AgL.Chk_Text(PurchInvoiceDimensionTableList(K).SizeCode) & " 
                            "
                        AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)
                    End If
                Next
            End If

            mQry = "Insert Into Stock(DocID, TSr, Sr, V_Type, V_Prefix, V_Date, V_No, RecID, Div_Code, Site_Code, 
                                  SubCode, SalesTaxGroupParty,  Item,  LotNo, 
                                  EType_IR, Qty_Iss, Qty_Rec, Unit, UnitMultiplier, DealQty_Iss , DealQty_Rec, DealUnit, 
                                  ReferenceDocID, ReferenceDocIDSr, Rate, Amount, Landed_Value) 
                                  Select L.DocId, L.Sr, L.Sr, H.V_Type, H.V_Prefix, H.V_Date, H.V_No, H.ManualRefNo, 
                                  H.Div_Code, H.Site_Code, H.Vendor,  H.SalesTaxGroupParty,  L.Item,
                                  L.LotNo, 'I', 
                                  Case When IfNull(Vt.Nature,'') In ('" & NCatNature.Receive & "', '" & NCatNature.Invoice & "') Then 0 Else IfNull(Abs(L.Qty),0) End As Qty_Iss,
                                  Case When IfNull(Vt.Nature,'') In ('" & NCatNature.Receive & "', '" & NCatNature.Invoice & "') Then IfNull(Abs(L.Qty),0) Else 0 End As Qty_Rec,
                                  L.Unit, L.UnitMultiplier, 
                                  0 As DealQty_Iss, 
                                  0 As DealQty_Rec, 
                                  L.DealUnit,  
                                  L.ReferenceDocId, L.ReferenceSr, 
                                  L.Amount/L.Qty, L.Amount, L.Amount
                                  FROM PurchInvoiceDetail L    
                                  LEFT JOIN PurchInvoice H On L.DocId = H.DocId 
                                  LEFT JOIN Voucher_Type Vt On H.V_Type = Vt.V_Type
                                  WHERE L.DocId =  '" & PurchInvoiceTableList(0).DocID & "' "
            AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)

            If mFlag_Import = False And AgL.StrCmp(PurchInvoiceTableList(0).V_Type, "REC") = False Then
                FGetCalculationData(PurchInvoiceTableList(0).DocID, AgL.GCn, AgL.ECmd)
            End If
            AgL.UpdateVoucherCounter(PurchInvoiceTableList(0).DocID, CDate(PurchInvoiceTableList(0).V_Date), AgL.GCn, AgL.ECmd, PurchInvoiceTableList(0).Div_Code, PurchInvoiceTableList(0).Site_Code)
        End If
        Return PurchInvoiceTableList(0).DocID
    End Function

    Private Sub FGetCurrBal(ByVal Party As String)
        mQry = " Select IfNull(Sum(AmtDr),0) - IfNull(Sum(AmtCr),0) As CurrBal From Ledger  With (NoLock) Where SubCode = '" & Party & "'"
        LblCurrentBalance.Text = Format(AgL.VNull(AgL.Dman_Execute(mQry, AgL.GCn).ExecuteScalar), "0.00")
        LblCurrentBalance.BackColor = Color.White
        If Val(LblCurrentBalance.Text) < 0 Then
            LblCurrentBalance.ForeColor = Color.Red
            LblCurrentBalance.Text = LblCurrentBalance.Text & " Cr."
        ElseIf Val(LblCurrentBalance.Text) < 0 Then
            LblCurrentBalance.ForeColor = Color.ForestGreen
            LblCurrentBalance.Text = LblCurrentBalance.Text & " Dr."
        Else
            LblCurrentBalance.ForeColor = Color.Black
        End If
    End Sub

    Private Sub Dgl1_CellLeave(sender As Object, e As DataGridViewCellEventArgs) Handles Dgl1.CellLeave
        'If e.ColumnIndex = Dgl1.Columns(Col1Item).Index Then
        '    If Dgl1.Item(Col1Item, e.RowIndex).Value = "" Then
        '        TxtAgent.Focus()
        '    End If
        'End If
    End Sub

    Public Structure StructPurchInvoice
        Dim DocID As String
        Dim V_Type As String
        Dim V_Prefix As String
        Dim V_Date As String
        Dim V_No As String
        Dim Div_Code As String
        Dim Site_Code As String
        Dim SettingGroup As String
        Dim ManualRefNo As String
        Dim Vendor As String
        Dim BillToPartyName As String
        Dim BillToPartyCode As String
        Dim SalesTaxGroupParty As String
        Dim PlaceOfSupply As String
        Dim StructureCode As String
        Dim CustomFields As String
        Dim VendorDocNo As String
        Dim VendorDocDate As String
        Dim ReferenceDocId As String
        Dim GenDocId As String
        Dim GenDocIdSr As String
        Dim Tags As String
        Dim Remarks As String
        Dim Process As String
        Dim AgentCode As String
        Dim AgentName As String
        Dim VendorName As String
        Dim VendorAddress As String
        Dim VendorCity As String
        Dim VendorMobile As String
        Dim VendorSalesTaxNo As String
        Dim ShipToAddress As String
        Dim Remarks1 As String
        Dim Remarks2 As String
        Dim AmsDocNo As String
        Dim AmsDocDate As String
        Dim AmsDocAmount As String
        Dim CommissionPer As String
        Dim CommissionAmount As String
        Dim AdditionalCommissionPer As String
        Dim AdditionalCommissionAmount As String
        Dim Gross_Amount As Double
        Dim SpecialDiscount_Per As Double
        Dim SpecialDiscount As Double
        Dim SpecialAddition_Per As Double
        Dim SpecialAddition As Double
        Dim Taxable_Amount As Double
        Dim Tax1_Per As Double
        Dim Tax1 As Double
        Dim Tax2_Per As Double
        Dim Tax2 As Double
        Dim Tax3_Per As Double
        Dim Tax3 As Double
        Dim Tax4_Per As Double
        Dim Tax4 As Double
        Dim Tax5_Per As Double
        Dim Tax5 As Double
        Dim SubTotal1 As Double
        Dim Deduction_Per As Double
        Dim Deduction As Double
        Dim Other_Charge_Per As Double
        Dim Other_Charge As Double
        Dim Other_Charge1_Per As Double
        Dim Other_Charge1 As Double
        Dim Round_Off As Double
        Dim Net_Amount As Double
        Dim Status As String
        Dim EntryBy As String
        Dim EntryDate As String
        Dim ApproveBy As String
        Dim ApproveDate As String
        Dim MoveToLog As String
        Dim MoveToLogDate As String
        Dim UploadDate As String
        Dim OmsId As String
        Dim LockText As String

        '''''''''''''''''''''''''''''''''Line Detail''''''''''''''''''''''''''''''''''
        Dim Line_Sr As String
        Dim Line_ReferenceNo As String
        Dim Line_ReferenceDate As String
        Dim Line_ItemV_Type As String
        Dim Line_ItemCategoryName As String
        Dim Line_ItemCategoryCode As String
        Dim Line_ItemGroupName As String
        Dim Line_ItemGroupCode As String
        Dim Line_ItemName As String
        Dim Line_ItemCode As String
        Dim Line_Specification As String
        Dim Line_BaseItemCode As String
        Dim Line_BaseItemName As String
        Dim Line_Dimension1Code As String
        Dim Line_Dimension1Name As String
        Dim Line_Dimension2Code As String
        Dim Line_Dimension2Name As String
        Dim Line_Dimension3Code As String
        Dim Line_Dimension3Name As String
        Dim Line_Dimension4Code As String
        Dim Line_Dimension4Name As String
        Dim Line_SizeCode As String
        Dim Line_SizeName As String
        Dim Line_SalesTaxGroupItem As String
        Dim Line_LotNo As String
        Dim Line_BaleNo As String
        Dim Line_Deal As String
        Dim Line_ExpiryDate As String
        Dim Line_LrNo As String
        Dim Line_LrDate As String
        Dim Line_Pcs As String
        Dim Line_DocQty As String
        Dim Line_FreeQty As String
        Dim Line_Qty As String
        Dim Line_RejQty As String
        Dim Line_Unit As String
        Dim Line_UnitMultiplier As String
        Dim Line_DocDealQty As String
        Dim Line_DealQty As String
        Dim Line_RejDealQty As String
        Dim Line_DealUnit As String
        Dim Line_Rate As String
        Dim Line_MRP As String
        Dim Line_DiscountPer As String
        Dim Line_DiscountAmount As String
        Dim Line_AdditionalDiscountPer As String
        Dim Line_AdditionalDiscountAmount As String
        Dim Line_Amount As String
        Dim Line_CommissionPer As String
        Dim Line_CommissionAmount As String
        Dim Line_AdditionalCommissionPer As String
        Dim Line_AdditionalCommissionAmount As String
        Dim Line_ProfitMarginPer As String
        Dim Line_Sale_Rate As String
        Dim Line_ReferenceDocId As String
        Dim Line_ReferenceTSr As String
        Dim Line_ReferenceSr As String
        Dim Line_PurchInvoice As String
        Dim Line_PurchInvoiceSr As String
        Dim Line_Godown As String
        Dim Line_CatalogCode As String
        Dim Line_CatalogName As String
        Dim Line_Remark As String
        Dim Line_GrossWeight As Double
        Dim Line_NetWeight As Double
        Dim Line_Gross_Amount As Double
        Dim Line_SpecialDiscount_Per As Double
        Dim Line_SpecialDiscount As Double
        Dim Line_SpecialAddition_Per As Double
        Dim Line_SpecialAddition As Double
        Dim Line_Taxable_Amount As Double
        Dim Line_Tax1_Per As Double
        Dim Line_Tax1 As Double
        Dim Line_Tax2_Per As Double
        Dim Line_Tax2 As Double
        Dim Line_Tax3_Per As Double
        Dim Line_Tax3 As Double
        Dim Line_Tax4_Per As Double
        Dim Line_Tax4 As Double
        Dim Line_Tax5_Per As Double
        Dim Line_Tax5 As Double
        Dim Line_SubTotal1 As Double
        Dim Line_Deduction_Per As Double
        Dim Line_Deduction As Double
        Dim Line_Other_Charge_Per As Double
        Dim Line_Other_Charge As Double
        Dim Line_Other_Charge1_Per As Double
        Dim Line_Other_Charge1 As Double
        Dim Line_Round_Off As Double
        Dim Line_Net_Amount As Double
        Dim Line_UploadDate As String
        Dim Line_Barcode As String
        Dim Line_Remarks1 As String
        Dim Line_Remarks2 As String
        Dim Line_OmsId As String
    End Structure
    Public Structure StructPurchInvoiceDimensionDetail
        Dim TSr As Integer
        Dim Sr As Integer
        Dim Specification As String
        Dim ItemCategoryCode As String
        Dim ItemGroupCode As String
        Dim ItemCode As String
        Dim ItemV_Type As String
        Dim BaseItemCode As String
        Dim Dimension1Code As String
        Dim Dimension2Code As String
        Dim Dimension3Code As String
        Dim Dimension4Code As String
        Dim SizeCode As String
        Dim Pcs As Integer
        Dim Qty As Double
        Dim TotalQty As Double
    End Structure

    Private Sub FCreateJSONFile()
        mQry = "Select H.ManualRefNo, H.V_Date, I.Description As ItemDesc, I.Specification As ItemSpecification, 
                Sg.DispName As SaleToPartyName, H.VendorAddress As SaleToPartyAddress, H.VendorPinCode As SaleToPartyPinCode,
                S.ManualCode As SaleToPartyStateCode, 
                IfNull(VReg.SalesTaxNo,'URP') As SaleToPartySalesTaxNo,  H.Div_Code, IfNull(VDist.Distance,0) As transDistance,
                TSg.DispName As TransporterName, VTranReg.SalesTaxNo As TransporterSalesTaxNo,
                Sit.LRNo As TransDocNo, IfNull(Sit.LRDate,H.V_Date) As TransDocDate,
                Ic.Description As ItemCategoryDesc, I.ManualCode As ItemCode, L.Qty, L.Sr,
                L.Tax1_Per As LineTax1_Per, L.Tax1 As LineTax1, 
                L.Tax2_Per As LineTax2_Per, L.Tax2 As LineTax2, 
                L.Tax3_Per As LineTax3_Per, L.Tax3 As LineTax3, 
                L.Tax4_Per As LineTax4_Per, L.Tax4 As LineTax4, 
                L.Tax5_Per As LineTax5_Per, L.Tax5 As LineTax5, L.Taxable_Amount As LineTaxable_Amount,
                I.HSN, (Case When L.Unit='Meter' Then 'MTR' Else L.Unit End) as Unit, H.Net_Amount As TotalInvoiceValue,
                H.Tax1_Per As HeaderTax1_Per, H.Tax1 As HeaderTax1, 
                H.Tax2_Per As HeaderTax2_Per, H.Tax2 As HeaderTax2, 
                H.Tax3_Per As HeaderTax3_Per, H.Tax3 As HeaderTax3, 
                H.Tax4_Per As HeaderTax4_Per, H.Tax4 As HeaderTax4, 
                H.Tax5_Per As HeaderTax5_Per, H.Tax5 As HeaderTax5, H.Taxable_Amount As HeaderTaxable_Amount, H.Gross_Amount,
                0 As TotNonAdvolVal, 0 As OthValue, 0 As cessNonAdvol
                From PurchInvoice H  With (NoLock)
                LEFT JOIN City C  With (NoLock) On H.VendorCity = C.CityCode
                LEFT JOIN State S  With (NoLock) On C.State = S.Code
                LEFT JOIN SubGroup Sg  With (NoLock) On H.Vendor = Sg.SubCode
                LEFT JOIN PurchInvoiceDetail L  With (NoLock) On H.DocId = L.DocID
                LEFT JOIN Item I  With (NoLock) ON L.Item = I.Code
                LEFT JOIN ItemCategory Ic  With (NoLock) On I.ItemCategory = Ic.Code
                LEFT JOIN PurchInvoiceTransport Sit  With (NoLock) On H.DocId = Sit.DocId
                LEFT JOIN (Select SubCode, Max(Transporter) as Transporter 
                            From SubgroupSiteDivisionDetail  With (NoLock)
                            Group By SubCode) As Hlt On H.Vendor = Hlt.SubCode
                LEFT JOIN SubGroup TSg  With (NoLock) ON IfNull(Sit.Transporter,Hlt.Transporter) = TSg.SubCode
                LEFT JOIN (Select Subcode, RegistrationNo As SalesTaxNo
                            From SubgroupRegistration  With (NoLock)
                            Where RegistrationType = 'Sales Tax No') As VReg On H.Vendor = VReg.SubCode
                LEFT JOIN (Select Subcode, RegistrationNo As SalesTaxNo
                            From SubgroupRegistration  With (NoLock)
                            Where RegistrationType = 'Sales Tax No') As VTranReg On TSg.SubCode = VTranReg.SubCode
                LEFT JOIN (Select SubCode, Distance
                            From SubgroupSiteDivisionDetail  With (NoLock)
                            Where Site_Code = '" & AgL.PubSiteCode & "'
                            And Div_Code = '" & AgL.PubDivCode & "') As VDist On H.Vendor = VDist.SubCode
                Where H.DocId = '" & mSearchCode & "'"
        Dim DTInvoiceDetail As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)


        mQry = "Select I.HSN, Count(*) As CntHSN
                From PurchInvoiceDetail L  With (NoLock)
                LEFT JOIN Item I  With (NoLock) On L.Item = I.Code
                Where DocId = '" & mSearchCode & "'
                GROUP By I.HSN 
                Order By CntHSN Desc "
        Dim DTMainHSN As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)

        ClsMain.FCreateJSONFile(DTInvoiceDetail, DTMainHSN)
    End Sub
    Public Sub FImportFromExcel_Old()
        Dim mTrans As String = ""
        Dim ErrorLog As String = ""
        Dim DtFile1 As DataTable
        Dim DTFile2 As DataTable
        Dim DtSaleInvoiceDimensionDetail As DataTable
        Dim DtMain As DataTable = Nothing

        Dim I As Integer
        Dim J As Integer
        Dim K As Integer
        Dim M As Integer
        Dim N As Integer
        'Dim FW As System.IO.StreamWriter = New System.IO.StreamWriter("C:\ImportLog.Txt", False, System.Text.Encoding.Default)
        Dim StrErrLog As String = ""

        mQry = "Select '' as Srl, 'V_TYPE' as [Field Name], 'Text' as [Data Type], 5 as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'V_NO' as [Field Name], 'Number' as [Data Type], Null as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'V_Date' as [Field Name], 'Date' as [Data Type], Null as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Invoice No' as [Field Name], 'Text' as [Data Type], 20 as [Length], 'Mandatory, Should be unique.' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Vendor' as [Field Name], 'Text' as [Data Type], 255 as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Vendor Address' as [Field Name], 'Text' as [Data Type], 255 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Vendor City' as [Field Name], 'Text' as [Data Type], 50 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Vendor Pincode' as [Field Name], 'Text' as [Data Type], 6 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Vendor Mobile' as [Field Name], 'Text' as [Data Type], 20 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Vendor Sales Tax No' as [Field Name], 'Text' as [Data Type], 20 as [Length], 'Vendor GST No.' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Vendor Doc No' as [Field Name], 'Text' as [Data Type], 50 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Vendor Doc Date' as [Field Name], 'Date' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Bill To Party' as [Field Name], 'Text' as [Data Type], 255 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Agent' as [Field Name], 'Text' as [Data Type], 255 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Sales Tax Group Party' as [Field Name], 'Text' as [Data Type], 20 as [Length], 'Mandatory, Registered / Unregistered / Composition' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Place Of Supply' as [Field Name], 'Text' as [Data Type], 20 as [Length], 'Mandatory, Outside State / Within State' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Ship To Address' as [Field Name], 'Text' as [Data Type], 255 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Remark' as [Field Name], 'Text' as [Data Type], 255 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'SubTotal1' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Deduction_Per' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Deduction' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Other_Charge_Per' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Other_Charge' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Round_Off' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Net_Amount' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        DtFile1 = AgL.FillData(mQry, AgL.GCn).Tables(0)


        mQry = "Select '' as Srl, 'V_TYPE' as [Field Name], 'Text' as [Data Type], 5 as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Invoice No' as [Field Name], 'Text' as [Data Type], 20 as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Item Name' as [Field Name], 'Text' as [Data Type], 255 as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Specification' as [Field Name], 'Text' as [Data Type], 255 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Bale No' as [Field Name], 'Text' as [Data Type], 50 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Sales Tax Group Item' as [Field Name], 'Text' as [Data Type],  20 as [Length], 'Mandatory, GST 0% / GST 5% / GST 12% / GST 18% / GST 28%' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Profit Margin Per' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Qty' as [Field Name], 'Number' as [Data Type], Null as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Unit' as [Field Name], 'Text' as [Data Type], 50 as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Deal Unit' as [Field Name], 'Text' as [Data Type], 50 as [Length], 'Mandatory, If billing unit is different from unit then that billing unit will be save in deal unit other wise unit will be save here.' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Deal Qty' as [Field Name], 'Number' as [Data Type], Null as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Rate' as [Field Name], 'Number' as [Data Type], Null as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Discount Per' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Discount Amount' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Additional Discount Per' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Additional Discount Amount' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Amount' as [Field Name], 'Number' as [Data Type], Null as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Sale Rate' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'MRP' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Remark' as [Field Name], 'Text' as [Data Type], 255 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'LR No' as [Field Name], 'Text' as [Data Type], 50 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'LR Date' as [Field Name], 'Date' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Lot No' as [Field Name], 'Text' as [Data Type], 50 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Gross_Amount' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Taxable_Amount' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Tax1_Per' as [Field Name], 'Number' as [Data Type], Null as [Length], 'IGST Per' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Tax1' as [Field Name], 'Number' as [Data Type], Null as [Length], 'IGST Amount' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Tax2_Per' as [Field Name], 'Number' as [Data Type], Null as [Length], 'CGST Per' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Tax2' as [Field Name], 'Number' as [Data Type], Null as [Length], 'CGST Amount' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Tax3_Per' as [Field Name], 'Number' as [Data Type], Null as [Length], 'SGST Per' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Tax3' as [Field Name], 'Number' as [Data Type], Null as [Length], 'SGST Amount' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Tax4_Per' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Tax4' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Tax5_Per' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Tax5' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'SubTotal1' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        DTFile2 = AgL.FillData(mQry, AgL.GCn).Tables(0)

        Dim ObjFrmImport As New FrmImportPurchaseFromExcel
        ObjFrmImport.Text = "Purchase Invoice Import From Excel"
        ObjFrmImport.Dgl1.DataSource = DtFile1
        ObjFrmImport.Dgl2.DataSource = DTFile2
        ObjFrmImport.StartPosition = FormStartPosition.CenterScreen
        ObjFrmImport.ShowDialog()

        If Not AgL.StrCmp(ObjFrmImport.UserAction, "OK") Then Exit Sub

        DtFile1 = ObjFrmImport.P_DsExcelData_PurchInvoice.Tables(0)
        DTFile2 = ObjFrmImport.P_DsExcelData_PurchInvoiceDetail.Tables(0)


        Dim DtV_Type = DtFile1.DefaultView.ToTable(True, "V_Type")
        For I = 0 To DtV_Type.Rows.Count - 1
            If AgL.XNull(DtV_Type.Rows(I)("V_Type")) <> "" Then
                If AgL.Dman_Execute("SELECT Count(*) From Voucher_TYpe where V_Type = '" & AgL.XNull(DtV_Type.Rows(I)("V_Type")) & "'", AgL.GCn).ExecuteScalar = 0 Then
                    If ErrorLog.Contains("These Voucher Types Are Not Present In Master") = False Then
                        ErrorLog += vbCrLf & "These Voucher Types Not Present In Master" & vbCrLf
                        ErrorLog += AgL.XNull(DtV_Type.Rows(I)("V_Type")) & ", "
                    Else
                        ErrorLog += AgL.XNull(DtV_Type.Rows(I)("V_Type")) & ", "
                    End If
                End If
            End If
        Next

        Dim DtSaleToParty = DtFile1.DefaultView.ToTable(True, "Sale To Party")
        For I = 0 To DtSaleToParty.Rows.Count - 1
            If AgL.XNull(DtSaleToParty.Rows(I)("Sale To Party")) <> "" Then
                If AgL.Dman_Execute("SELECT Count(*) From SubGroup where Name = '" & AgL.XNull(DtSaleToParty.Rows(I)("Sale To Party")) & "'", AgL.GCn).ExecuteScalar = 0 Then
                    If ErrorLog.Contains("These Parties Are Not Present In Master") = False Then
                        ErrorLog += vbCrLf & "These Parties Are Not Present In Master" & vbCrLf
                        ErrorLog += AgL.XNull(DtSaleToParty.Rows(I)("Sale To Party")) & ", "
                    Else
                        ErrorLog += AgL.XNull(DtSaleToParty.Rows(I)("Sale To Party")) & ", "
                    End If
                End If
            End If
        Next

        Dim DtBillToParty = DtFile1.DefaultView.ToTable(True, "Bill To Party")
        For I = 0 To DtBillToParty.Rows.Count - 1
            If AgL.XNull(DtBillToParty.Rows(I)("Bill To Party")) <> "" Then
                If AgL.Dman_Execute("SELECT Count(*) From SubGroup where Name = '" & AgL.XNull(DtBillToParty.Rows(I)("Bill To Party")) & "'", AgL.GCn).ExecuteScalar = 0 Then
                    If ErrorLog.Contains("These Parties Are Not Present In Master") = False Then
                        ErrorLog += vbCrLf & "These Parties Are Not Present In Master" & vbCrLf
                        ErrorLog += AgL.XNull(DtBillToParty.Rows(I)("Bill To Party")) & ", "
                    Else
                        ErrorLog += AgL.XNull(DtBillToParty.Rows(I)("Bill To Party")) & ", "
                    End If
                End If
            End If
        Next

        Dim DtAgent = DtFile1.DefaultView.ToTable(True, "Agent")
        For I = 0 To DtAgent.Rows.Count - 1
            If AgL.XNull(DtAgent.Rows(I)("Agent")) <> "" Then
                If AgL.Dman_Execute("SELECT Count(*) From SubGroup where Name = '" & AgL.XNull(DtAgent.Rows(I)("Agent")) & "'", AgL.GCn).ExecuteScalar = 0 Then
                    If ErrorLog.Contains("These Agents Are Not Present In Master") = False Then
                        ErrorLog += vbCrLf & "These Agents Are Not Present In Master" & vbCrLf
                        ErrorLog += AgL.XNull(DtAgent.Rows(I)("Agent")) & ", "
                    Else
                        ErrorLog += AgL.XNull(DtAgent.Rows(I)("Agent")) & ", "
                    End If
                End If
            End If
        Next

        Dim DtRateType = DtFile1.DefaultView.ToTable(True, "Rate Type")
        For I = 0 To DtRateType.Rows.Count - 1
            If AgL.XNull(DtRateType.Rows(I)("Rate Type")) <> "" Then
                If AgL.Dman_Execute("SELECT Count(*) From RateTYpe where Description = '" & AgL.XNull(DtRateType.Rows(I)("Rate Type")) & "'", AgL.GCn).ExecuteScalar = 0 Then
                    If ErrorLog.Contains("These Rate Types Are Not Present In Master") = False Then
                        ErrorLog += vbCrLf & "These Rate Types Are Not Present In Master" & vbCrLf
                        ErrorLog += AgL.XNull(DtRateType.Rows(I)("Rate Type")) & ", "
                    Else
                        ErrorLog += AgL.XNull(DtRateType.Rows(I)("Rate Type")) & ", "
                    End If
                End If
            End If
        Next

        Dim DtSalesTaxGroupParty = DtFile1.DefaultView.ToTable(True, "Sales Tax Group Party")
        For I = 0 To DtSalesTaxGroupParty.Rows.Count - 1
            If AgL.XNull(DtSalesTaxGroupParty.Rows(I)("Sales Tax Group Party")) <> "" Then
                If AgL.Dman_Execute("SELECT Count(*) From PostingGroupSalesTaxParty where Description = '" & AgL.XNull(DtSalesTaxGroupParty.Rows(I)("Sales Tax Group Party")) & "'", AgL.GCn).ExecuteScalar = 0 Then
                    If ErrorLog.Contains("These Sales Tax Group Parties Are Not Present In Master") = False Then
                        ErrorLog += vbCrLf & "These Sales Tax Group Parties Are Not Present In Master" & vbCrLf
                        ErrorLog += AgL.XNull(DtSalesTaxGroupParty.Rows(I)("Sales Tax Group Party")) & ", "
                    Else
                        ErrorLog += AgL.XNull(DtSalesTaxGroupParty.Rows(I)("Sales Tax Group Party")) & ", "
                    End If
                End If
            End If
        Next




        For I = 0 To DtFile1.Rows.Count - 1
            If AgL.XNull(DtFile1.Rows(I)("Sale To Party")) = "" Then
                ErrorLog += "Sale To Party is blank at row no." + (I + 2).ToString() & vbCrLf
            End If

            If AgL.XNull(DtFile1.Rows(I)("Bill To Party")) = "" Then
                ErrorLog += "Bill To Party is blank at row no." + (I + 2).ToString() & vbCrLf
            End If

            If AgL.XNull(DtFile1.Rows(I)("Sales Tax Group Party")) = "" Then
                ErrorLog += "Sales Tax Group Party is blank at row no." + (I + 2).ToString() & vbCrLf
            End If

            If AgL.XNull(DtFile1.Rows(I)("V_Date")) = "" Then
                ErrorLog += "V_Date is blank at row no." + (I + 2).ToString() & vbCrLf
            End If

            If AgL.XNull(DtFile1.Rows(I)("V_Type")) = "" Then
                ErrorLog += "V_Type is blank at row no." + (I + 2).ToString() & vbCrLf
            End If
        Next

        Dim DtItem = DTFile2.DefaultView.ToTable(True, "Item Name")
        For I = 0 To DtItem.Rows.Count - 1
            If AgL.XNull(DtItem.Rows(I)("Item Name")) <> "" Then
                If AgL.Dman_Execute("SELECT Count(*) From Item where Description = '" & AgL.XNull(DtItem.Rows(I)("Item Name")) & "'", AgL.GCn).ExecuteScalar = 0 Then
                    If ErrorLog.Contains("These Item Names Are Not Present In Master") = False Then
                        ErrorLog += vbCrLf & "These Item Names Are Not Present In Master" & vbCrLf
                        ErrorLog += AgL.XNull(DtItem.Rows(I)("Item Name")) & ", "
                    Else
                        ErrorLog += AgL.XNull(DtItem.Rows(I)("Item Name")) & ", "
                    End If
                End If
            End If
        Next

        Dim DtSalesTaxGroupItem = DTFile2.DefaultView.ToTable(True, "Sales Tax Group Item")
        For I = 0 To DtSalesTaxGroupItem.Rows.Count - 1
            If AgL.XNull(DtSalesTaxGroupItem.Rows(I)("Sales Tax Group Item")) <> "" Then
                If AgL.Dman_Execute("SELECT Count(*) From PostingGroupSalesTaxItem where Description = '" & AgL.XNull(DtSalesTaxGroupItem.Rows(I)("Sales Tax Group Item")) & "'", AgL.GCn).ExecuteScalar = 0 Then
                    If ErrorLog.Contains("These SalesTaxGroupItems Are Not Present In Master") = False Then
                        ErrorLog += vbCrLf & "These SalesTaxGroupItems Are Not Present In Master" & vbCrLf
                        ErrorLog += AgL.XNull(DtSalesTaxGroupItem.Rows(I)("Sales Tax Group Item")) & ", "
                    Else
                        ErrorLog += AgL.XNull(DtSalesTaxGroupItem.Rows(I)("Sales Tax Group Item")) & ", "
                    End If
                End If
            End If
        Next

        For I = 0 To DTFile2.Rows.Count - 1
            If AgL.XNull(DTFile2.Rows(I)("Item Name")) = "" Then
                ErrorLog += "Item Name is blank at row no." + (I + 2).ToString() & vbCrLf
            End If

            If AgL.XNull(DTFile2.Rows(I)("Sales Tax Group Item")) = "" Then
                ErrorLog += "Sales Tax Group Item is blank at row no." + (I + 2).ToString() & vbCrLf
            End If
        Next

        If ErrorLog <> "" Then
            If File.Exists(My.Application.Info.DirectoryPath + " \ " + "ErrorLog.txt") Then
                My.Computer.FileSystem.WriteAllText(My.Application.Info.DirectoryPath + "\" + "ErrorLog.txt", ErrorLog, False)
            Else
                File.Create(My.Application.Info.DirectoryPath + " \ " + "ErrorLog.txt")
                My.Computer.FileSystem.WriteAllText(My.Application.Info.DirectoryPath + " \ " + "ErrorLog.txt", ErrorLog, False)
            End If
            System.Diagnostics.Process.Start("notepad.exe", My.Application.Info.DirectoryPath + "\" + "ErrorLog.txt")
            Exit Sub
        End If

        Try
            AgL.ECmd = AgL.GCn.CreateCommand
            AgL.ETrans = AgL.GCn.BeginTransaction(IsolationLevel.ReadCommitted)
            AgL.ECmd.Transaction = AgL.ETrans
            mTrans = "Begin"


            For I = 0 To DtFile1.Rows.Count - 1
                'Dim mDocId = AgL.GetDocId(AgL.XNull(DtFile1.Rows(I)("V_Type")), CStr(DglMain.Item(Col1Value, rowV_No).Value), CDate(AgL.XNull(DtFile1.Rows(I)("V_Date"))),
                '                          AgL.GCn, AgL.PubDivCode, AgL.PubSiteCode)
                Dim mDocId = AgL.CreateDocId(AgL, "SaleInvoice", AgL.XNull(DtFile1.Rows(I)("V_Type")), CStr(DglMain.Item(Col1Value, rowV_No).Value), CDate(AgL.XNull(DtFile1.Rows(I)("V_Date"))),
                                          AgL.GCn, AgL.PubDivCode, AgL.PubSiteCode)

                Dim mV_No As String = Val(AgL.DeCodeDocID(mDocId, AgLibrary.ClsMain.DocIdPart.VoucherNo))
                Dim mV_Prefix As String = AgL.DeCodeDocID(mDocId, AgLibrary.ClsMain.DocIdPart.VoucherPrefix)

                Dim mSaleToParty As String = ""
                Dim mSaleToPartyName As String = ""
                Dim mSaleToPartyAddress As String = ""
                Dim mSaleToPartyCity As String = ""
                Dim mSaleToPartyMobile As String = ""
                Dim mSaleToPartySalesTaxNo As String = ""

                mQry = "SELECT Sg.SubCode As SaleToParty, Name As SaleToPartyName, Address As SaleToPartyAddress, CityCode As SaleToPartyCity, Mobile As SaleToPartyMobile, Sgr.RegistrationNo As SaleToPartySalesTaxNo
                        FROM Subgroup Sg
                        left join (Select SubCode, RegistrationNo From SubgroupRegistration Where RegistrationType = 'Sales Tax No') As Sgr On Sg.Subcode = Sgr.Subcode
                        Where Sg.Name =  '" & AgL.XNull(DtFile1.Rows(I)("Sale To Party")) & "'"
                Dim DtAcGroup As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)
                If (DtAcGroup.Rows.Count > 0) Then
                    mSaleToParty = AgL.XNull(DtAcGroup.Rows(0)("SaleToParty"))
                    mSaleToPartyName = AgL.XNull(DtAcGroup.Rows(0)("SaleToPartyName"))
                    mSaleToPartyAddress = AgL.XNull(DtAcGroup.Rows(0)("SaleToPartyAddress"))
                    mSaleToPartyCity = AgL.XNull(DtAcGroup.Rows(0)("SaleToPartyCity"))
                    mSaleToPartyMobile = AgL.XNull(DtAcGroup.Rows(0)("SaleToPartyMobile"))
                    mSaleToPartySalesTaxNo = AgL.XNull(DtAcGroup.Rows(0)("SaleToPartySalesTaxNo"))
                End If



                Dim mBillToParty As String = AgL.Dman_Execute("SELECT Sg.SubCode As BillToParty
                        FROM Subgroup Sg
                        Where Sg.Name =  '" & AgL.XNull(DtFile1.Rows(I)("Bill To Party")) & "'", AgL.GCn).ExecuteScalar()

                If AgL.Dman_Execute("SELECT Count(*) From SaleInvoice where V_Type = '" & AgL.XNull(DtFile1.Rows(I)("V_Type")) & "' And ReferenceNo = '" & AgL.XNull(DtFile1.Rows(I)("Manual Ref No")) & "' ", AgL.GCn).ExecuteScalar = 0 Then
                    mQry = " INSERT INTO SaleInvoice (DocID,  V_Type,  V_Prefix, V_Date,  V_No,  Div_Code,  Site_Code,
                             ReferenceNo,  SaleToParty,  BillToParty,  Agent, SaleToPartyName,  SaleToPartyAddress,
                             SaleToPartyCity,  SaleToPartyMobile, SaleToPartySalesTaxNo,  ShipToAddress,
                             RateType,  SalesTaxGroupParty, PlaceOfSupply,  Structure,
                             CustomFields,  SaleToPartyDocNo, SaleToPartyDocDate,  ReferenceDocId,
                             Remarks,  TermsAndConditions, Gross_Amount,  Taxable_Amount,
                             Tax1_Per,  Tax1,  Tax2_Per, Tax2,  Tax3_Per,  Tax3,
                             Tax4_Per,  Tax4,  Tax5_Per, Tax5,  SubTotal1,  Deduction_Per,
                             Deduction,  Other_Charge_Per,  Other_Charge, Round_Off,  Net_Amount,  PaidAmt,
                             CreditLimit,  CreditDays,  Status, EntryBy,  EntryDate,  ApproveBy,
                             ApproveDate,  MoveToLog,  MoveToLogDate, UploadDate)
                             Select  " & AgL.Chk_Text(mDocId) & ",  
                             " & AgL.Chk_Text(AgL.XNull(DtFile1.Rows(I)("V_Type"))) & ",  
                             " & AgL.Chk_Text(mV_Prefix) & ",  
                             " & AgL.Chk_Date(AgL.XNull(DtFile1.Rows(I)("V_Date"))) & ",  
                             " & AgL.Chk_Text(mV_No) & ",  
                             " & AgL.Chk_Text(AgL.PubDivCode) & ",
                             " & AgL.Chk_Text(AgL.PubSiteCode) & ",  " & AgL.Chk_Text(AgL.XNull(DtFile1.Rows(I)("Manual Ref No"))) & ",  
                             " & AgL.Chk_Text(mSaleToParty) & ", 
                             (SELECT SubCode  From SubGroup WHERE Name = '" & AgL.XNull(DtFile1.Rows(I)("Bill To Party")) & "') As BillToParty,
                             (SELECT SubCode  From SubGroup WHERE Name = '" & AgL.XNull(DtFile1.Rows(I)("Agent")) & "') As Agent,
                             " & AgL.Chk_Text(mSaleToPartyName) & ",
                             " & AgL.Chk_Text(mSaleToPartyAddress) & ",  " & AgL.Chk_Text(mSaleToPartyCity) & ",  
                             " & AgL.Chk_Text(mSaleToPartyMobile) & ", " & AgL.Chk_Text(mSaleToPartySalesTaxNo) & ",  
                             " & AgL.Chk_Text(AgL.XNull(DtFile1.Rows(I)("Ship To Address"))) & ",  
                             (SELECT Code  From RateType Where Description = '" & AgL.XNull(DtFile1.Rows(I)("Rate Type")) & "') As RateType,
                             '" & AgL.XNull(DtFile1.Rows(I)("Sales Tax Group Party")) & "' As SalesTaxGroupParty,
                             " & AgL.Chk_Text(AgL.XNull(DtFile1.Rows(I)("Place Of Supply"))) & ",  
                             (Select IfNull(Max(Structure),'') From Voucher_Type Where V_Type = '" & AgL.XNull(DtFile1.Rows(I)("V_Type")) & "') As Structure, 
                             Null As CustomFields,  
                              " & AgL.Chk_Text(AgL.XNull(DtFile1.Rows(I)("Sale To Party Doc No"))) & ",  
                              " & AgL.Chk_Date(AgL.XNull(DtFile1.Rows(I)("Sale To Party Doc Date"))) & ",  
                              Null As ReferenceDocId,  " & AgL.Chk_Text(AgL.XNull(DtFile1.Rows(I)("Remark"))) & ",  
                              " & AgL.Chk_Text(AgL.XNull(DtFile1.Rows(I)("Terms And Conditions"))) & ", 
                              " & AgL.VNull(DtFile1.Rows(I)("Gross Amount")) & ",  
                              " & AgL.VNull(DtFile1.Rows(I)("Taxable_Amount")) & ",  
                              " & AgL.VNull(DtFile1.Rows(I)("Tax1_Per")) & " As Tax1_Per,
                              " & AgL.VNull(DtFile1.Rows(I)("Tax1")) & " As Tax1,  
                              " & AgL.VNull(DtFile1.Rows(I)("Tax2_Per")) & " As Tax2_Per,  
                              " & AgL.VNull(DtFile1.Rows(I)("Tax2")) & " As Tax2, 
                              " & AgL.VNull(DtFile1.Rows(I)("Tax3_Per")) & " As Tax3_Per,  
                              " & AgL.VNull(DtFile1.Rows(I)("Tax3")) & " As Tax3,  
                              " & AgL.VNull(DtFile1.Rows(I)("Tax4_Per")) & " As Tax4_Per,
                              " & AgL.VNull(DtFile1.Rows(I)("Tax4")) & " As Tax4,  
                              " & AgL.VNull(DtFile1.Rows(I)("Tax5_Per")) & " As Tax5_Per,  
                              " & AgL.VNull(DtFile1.Rows(I)("Tax5")) & " As Tax5, 
                              " & AgL.VNull(DtFile1.Rows(I)("SubTotal1")) & " As SubTotal1,  
                              " & AgL.VNull(DtFile1.Rows(I)("Deduction_Per")) & " As Deduction_Per,  
                              " & AgL.VNull(DtFile1.Rows(I)("Deduction")) & " As Deduction,
                              " & AgL.VNull(DtFile1.Rows(I)("Other_Charge_Per")) & " As Other_Charge_Per,  
                              " & AgL.VNull(DtFile1.Rows(I)("Other_Charge")) & " As Other_Charge,  
                              " & AgL.VNull(DtFile1.Rows(I)("Round_Off")) & " As Round_Off, 
                              " & AgL.VNull(DtFile1.Rows(I)("Net_Amount")) & " As Net_Amount,  
                              0 As PaidAmt,  
                              " & AgL.VNull(DtFile1.Rows(I)("Credit Limit")) & " As CreditLimit,
                              " & AgL.VNull(DtFile1.Rows(I)("Credit Days")) & " As CreditDays,  
                              'Active' As Status,  
                              " & AgL.Chk_Text(AgL.PubUserName) & " As EntryBy, 
                              " & AgL.Chk_Date(AgL.PubLoginDate) & "  As EntryDate,  
                              Null As ApproveBy,  Null As ApproveDate,
                              Null As MoveToLog,  Null As MoveToLogDate,  Null As UploadDate"
                    AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)



                    Dim DtSaleInvoiceDetail_ForHeader As New DataTable
                    For M = 0 To DTFile2.Columns.Count - 1
                        Dim DColumn As New DataColumn
                        DColumn.ColumnName = DTFile2.Columns(M).ColumnName
                        DtSaleInvoiceDetail_ForHeader.Columns.Add(DColumn)
                    Next

                    Dim DtRowSaleInvoiceDetail_ForHeader As DataRow() = DTFile2.Select("V_Type = " + AgL.Chk_Text(AgL.XNull(DtFile1.Rows(I)("V_Type"))) + " And [Manual Ref No] = " + AgL.Chk_Text(AgL.XNull(DtFile1.Rows(I)("Manual Ref No"))))
                    If DtRowSaleInvoiceDetail_ForHeader.Length > 0 Then
                        For M = 0 To DtRowSaleInvoiceDetail_ForHeader.Length - 1
                            DtSaleInvoiceDetail_ForHeader.Rows.Add()
                            For N = 0 To DtSaleInvoiceDetail_ForHeader.Columns.Count - 1
                                DtSaleInvoiceDetail_ForHeader.Rows(M)(N) = DtRowSaleInvoiceDetail_ForHeader(M)(N)
                            Next
                        Next
                    End If

                    For J = 0 To DtSaleInvoiceDetail_ForHeader.Rows.Count - 1
                        mQry = "Insert Into SaleInvoiceDetail(DocId, Sr, Item, Specification, SalesTaxGroupItem, 
                           DocQty, FreeQty, Qty, Unit, Pcs, UnitMultiplier, DealUnit, 
                           DocDealQty, Rate, DiscountPer, DiscountAmount, AdditionalDiscountPer, AdditionalDiscountAmount,  
                           Amount, Remark, BaleNo, LotNo,  
                           ReferenceDocId, ReferenceDocIdSr, 
                           SaleInvoice, SaleInvoiceSr, V_Nature, GrossWeight, NetWeight, Gross_Amount, Taxable_Amount,
                           Tax1_Per, Tax1, Tax2_Per, Tax2, Tax3_Per, Tax3, Tax4_Per, Tax4, Tax5_Per, Tax5, SubTotal1, Deduction_Per, 
                           Deduction, Other_Charge_Per, Other_Charge, Round_Off, Net_Amount)
                           Select " & AgL.Chk_Text(mDocId) & ", " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("TSr")) & ", " &
                            " (SELECT Code From Item WHERE Description = '" & AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Item Name")) & "') As Item, " &
                            " " & AgL.Chk_Text(AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Specification"))) & ", " &
                            " " & AgL.Chk_Text(AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Sales Tax Group Item"))) & ", " &
                            " " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Doc Qty")) & ", " &
                            " " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Free Qty")) & ", " &
                            " " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Qty")) & ", " &
                            " " & AgL.Chk_Text(AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Unit"))) & ", " &
                            " " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Pcs")) & ", " &
                            " " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Unit Multiplier")) & ", " &
                            " " & AgL.Chk_Text(AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Deal Unit"))) & ", " &
                            " " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Doc Deal Qty")) & ", " &
                            " " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Rate")) & ", " &
                            " " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Discount Per")) & ", " &
                            " " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Discount Amount")) & ", " &
                            " " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Additional Discount Per")) & ", " &
                            " " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Additional Discount Amount")) & ", " &
                            " " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Amount")) & ", " &
                            " " & AgL.Chk_Text(AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Remark"))) & ", " &
                            " " & AgL.Chk_Text(AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Bale No"))) & ", " &
                            " " & AgL.Chk_Text(AgL.XNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Lot No"))) & ", " &
                            " Null As ReferenceDocId, " &
                            " Null As ReferenceDocIdSr, " &
                            " " & AgL.Chk_Text(mDocId) & " As SaleInvoice, " &
                            " " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("TSr")) & " As Sr, " &
                            " 'Invoice' As V_Nature,
                            " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Gross Weight")) & ", " & "
                            " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Net Weight")) & ", 
                            " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Gross_Amount")) & ", " & "
                            " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Taxable_Amount")) & ", 
                            " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Tax1_Per")) & ", 
                            " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Tax1")) & ", 
                            " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Tax2_Per")) & ", 
                            " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Tax2")) & ", 
                            " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Tax3_Per")) & ", 
                            " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Tax3")) & ", 
                            " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Tax4_Per")) & ", 
                            " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Tax4")) & ", 
                            " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Tax5_Per")) & ", 
                            " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Tax5")) & ", 
                            " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("SubTotal1")) & ", 
                            " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Deduction_Per")) & ", 
                            " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Deduction")) & ", 
                            " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Other_Charge_Per")) & ", 
                            " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Other_Charge")) & ", 
                            " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Round_Off")) & ", 
                            " & AgL.VNull(DtSaleInvoiceDetail_ForHeader.Rows(J)("Net_Amount")) & ""
                        AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)






                        Dim DtSaleInvoiceDimensionDetail_ForHeader As New DataTable
                        For M = 0 To DtSaleInvoiceDimensionDetail.Columns.Count - 1
                            Dim DColumn As New DataColumn
                            DColumn.ColumnName = DtSaleInvoiceDimensionDetail.Columns(M).ColumnName
                            DtSaleInvoiceDimensionDetail_ForHeader.Columns.Add(DColumn)
                        Next

                        Dim DtRowSaleInvoiceDimensionDetail_ForHeader As DataRow() = DtSaleInvoiceDimensionDetail.Select("V_Type = " + AgL.Chk_Text(AgL.XNull(DTFile2.Rows(J)("V_Type"))) + " And [Manual Ref No] = " + AgL.Chk_Text(AgL.XNull(DTFile2.Rows(J)("Manual Ref No"))) + " And TSr = " + AgL.XNull(DTFile2.Rows(J)("TSr")), "TSr")
                        If DtRowSaleInvoiceDimensionDetail_ForHeader.Length > 0 Then
                            For M = 0 To DtRowSaleInvoiceDetail_ForHeader.Length - 1
                                'DtSaleInvoiceDimensionDetail_ForHeader.Rows.Add(DtRowSaleInvoiceDimensionDetail_ForHeader(M))
                                DtSaleInvoiceDetail_ForHeader.Rows.Add()
                                For N = 0 To DtSaleInvoiceDimensionDetail_ForHeader.Columns.Count - 1
                                    DtSaleInvoiceDimensionDetail_ForHeader.Rows(M)(N) = DtRowSaleInvoiceDimensionDetail_ForHeader(M)(N)
                                Next
                            Next
                        End If




                        For K = 0 To DtSaleInvoiceDimensionDetail_ForHeader.Rows.Count - 1
                            mQry = " INSERT INTO SaleInvoiceDimensionDetail (DocID, TSr, SR, Specification, Pcs, Qty, TotalQty) 
                                    Select " & AgL.Chk_Text(mDocId) & ", 
                                    " & AgL.VNull(DtSaleInvoiceDimensionDetail_ForHeader.Rows(K)("TSr")) & " As Sr, 
                                    " & (K + 1) & ", 
                                    " & AgL.Chk_Text(AgL.XNull(DtSaleInvoiceDimensionDetail_ForHeader.Rows(K)("Specification"))) & ", 
                                    " & AgL.VNull(DtSaleInvoiceDimensionDetail_ForHeader.Rows(K)("Pcs")) & ", 
                                    " & AgL.VNull(DtSaleInvoiceDimensionDetail_ForHeader.Rows(K)("Qty")) & ", 
                                    " & AgL.VNull(DtSaleInvoiceDimensionDetail_ForHeader.Rows(K)("TotalQty")) & " "
                            AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)
                        Next
                    Next

                    mQry = "Insert Into Stock(DocID, TSr, Sr, V_Type, V_Prefix, V_Date, V_No, RecID, Div_Code, Site_Code, 
                                  SubCode, SalesTaxGroupParty,  Item,  LotNo, 
                                  EType_IR, Qty_Iss, Qty_Rec, Unit, UnitMultiplier, DealQty_Iss , DealQty_Rec, DealUnit, 
                                  ReferenceDocID, ReferenceDocIDSr, Rate, Amount, Landed_Value) 
                                  Select L.DocId, L.Sr, L.Sr, H.V_Type, H.V_Prefix, H.V_Date, H.V_No, H.ReferenceNo, 
                                  H.Div_Code, H.Site_Code, H.SaleToParty,  H.SalesTaxGroupParty,  L.Item,
                                  L.LotNo, 'I', 
                                  Case When  IfNull(L.Qty,0) >= 0 Then L.Qty Else 0 End As Qty_Iss, 
                                  Case When  IfNull(L.Qty,0) < 0 Then L.Qty Else 0 End As Qty_Rec, 
                                  L.Unit, L.UnitMultiplier, 
                                  Case When  IfNull(L.DealQty,0) >= 0 Then L.DealQty Else 0 End As DealQty_Iss, 
                                  Case When  IfNull(L.DealQty,0) < 0 Then L.DealQty Else 0 End As DealQty_Rec, 
                                  L.DealUnit,  
                                  L.ReferenceDocId, L.ReferenceDocIdSr, 
                                  L.Amount/L.Qty, L.Amount, L.Amount
                                  FROM SaleInvoiceDetail L    
                                  LEFT JOIN SaleInvoice H On L.DocId = H.DocId 
                                  WHERE L.DocId =  '" & mDocId & "' "
                    AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)


                    AgL.UpdateVoucherCounter(mDocId, CDate(AgL.XNull(DtFile1.Rows(I)("V_Date"))), AgL.GCn, AgL.ECmd, AgL.PubDivCode, AgL.PubSiteCode)
                End If
            Next

            AgL.ETrans.Commit()
            mTrans = "Commit"

        Catch ex As Exception
            AgL.ETrans.Rollback()
            MsgBox(ex.Message)
        End Try
        If StrErrLog <> "" Then MsgBox(StrErrLog)


        For I = 0 To DTMaster.Rows.Count - 1
            BMBMaster.Position = I
            MoveRec()



            Dim mNarrParty As String
            Dim mNarr As String

            mNarrParty = DglMain.Item(Col1Value, rowV_Type).Value
            'mNarr = DglMain.Item(Col1Value, rowV_Type).Value & " : " & mSaleToParty

        Next
    End Sub
    Public Sub FImportFromExcel(bImportFor As ImportFor)
        Dim mTrans As String = ""
        Dim ErrorLog As String = ""
        Dim DtPurchaseInvoice As DataTable
        Dim DtPurchaseInvoiceDetail As DataTable
        Dim DtPurchaseInvoiceDimensionDetail As DataTable
        Dim DtPurchInvoice_DataFields As DataTable
        Dim DtPurchInvoiceDetail_DataFields As DataTable
        Dim DtPurchInvoiceDimensionDetail_DataFields As DataTable
        Dim DtMain As DataTable = Nothing

        Dim I As Integer
        Dim J As Integer
        Dim K As Integer
        Dim M As Integer
        Dim N As Integer
        'Dim FW As System.IO.StreamWriter = New System.IO.StreamWriter("C:\ImportLog.Txt", False, System.Text.Encoding.Default)
        Dim StrErrLog As String = ""

        mQry = "Select '' as Srl, '" & GetFieldAliasName(bImportFor, "V_TYPE") & "' as [Field Name], 'Text' as [Data Type], 5 as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "V_NO") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "V_Date") & "' as [Field Name], 'Date' as [Data Type], Null as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Invoice No") & "' as [Field Name], 'Text' as [Data Type], 20 as [Length], 'Mandatory, Should be unique.' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Vendor") & "' as [Field Name], 'Text' as [Data Type], 255 as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Vendor Address") & "' as [Field Name], 'Text' as [Data Type], 255 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Vendor City") & "' as [Field Name], 'Text' as [Data Type], 50 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Vendor Pincode") & "' as [Field Name], 'Text' as [Data Type], 6 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Vendor Mobile") & "' as [Field Name], 'Text' as [Data Type], 20 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Vendor Sales Tax No") & "' as [Field Name], 'Text' as [Data Type], 20 as [Length], 'Vendor GST No.' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Vendor Doc No") & "' as [Field Name], 'Text' as [Data Type], 50 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Vendor Doc Date") & "' as [Field Name], 'Date' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Bill To Party") & "' as [Field Name], 'Text' as [Data Type], 255 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Agent") & "' as [Field Name], 'Text' as [Data Type], 255 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Sales Tax Group Party") & "' as [Field Name], 'Text' as [Data Type], 20 as [Length], 'Mandatory, Registered / Unregistered / Composition' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Place Of Supply") & "' as [Field Name], 'Text' as [Data Type], 20 as [Length], 'Mandatory, Outside State / Within State' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Ship To Address") & "' as [Field Name], 'Text' as [Data Type], 255 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Remark") & "' as [Field Name], 'Text' as [Data Type], 255 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "SubTotal1") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Deduction_Per") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Deduction") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Other_Charge_Per") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Other_Charge") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Round_Off") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Net_Amount") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        DtPurchInvoice_DataFields = AgL.FillData(mQry, AgL.GCn).Tables(0)


        mQry = "Select '' as Srl, '" & GetFieldAliasName(bImportFor, "V_TYPE") & "' as [Field Name], 'Text' as [Data Type], 5 as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Invoice No") & "' as [Field Name], 'Text' as [Data Type], 20 as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select '' as Srl, '" & GetFieldAliasName(bImportFor, "TSr") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], 'Sr Of Second Table' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Item Name") & "' as [Field Name], 'Text' as [Data Type], 255 as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Specification") & "' as [Field Name], 'Text' as [Data Type], 255 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Bale No") & "' as [Field Name], 'Text' as [Data Type], 50 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Sales Tax Group Item") & "' as [Field Name], 'Text' as [Data Type],  20 as [Length], 'Mandatory, GST 0% / GST 5% / GST 12% / GST 18% / GST 28%' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Profit Margin Per") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Qty") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Unit") & "' as [Field Name], 'Text' as [Data Type], 50 as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Pcs") & "' as [Field Name], 'Number' as [Data Type], 50 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Deal Unit") & "' as [Field Name], 'Text' as [Data Type], 50 as [Length], 'If billing unit is different from unit then that billing unit will be save in deal unit other wise unit will be save here.' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Deal Qty") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Rate") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Discount Per") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Discount Amount") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Additional Discount Per") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Additional Discount Amount") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Amount") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Sale Rate") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "MRP") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Remark") & "' as [Field Name], 'Text' as [Data Type], 255 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "LR No") & "' as [Field Name], 'Text' as [Data Type], 50 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "LR Date") & "' as [Field Name], 'Date' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Lot No") & "' as [Field Name], 'Text' as [Data Type], 50 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Gross_Amount") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Taxable_Amount") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Tax1_Per") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], 'IGST Per' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Tax1") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], 'IGST Amount' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Tax2_Per") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], 'CGST Per' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Tax2") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], 'CGST Amount' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Tax3_Per") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], 'SGST Per' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Tax3") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], 'SGST Amount' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Tax4_Per") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Tax4") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Tax5_Per") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Tax5") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "SubTotal1") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        DtPurchInvoiceDetail_DataFields = AgL.FillData(mQry, AgL.GCn).Tables(0)


        mQry = "Select '' as Srl, '" & GetFieldAliasName(bImportFor, "V_TYPE") & "' as [Field Name], 'Text' as [Data Type], 5 as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Invoice No") & "' as [Field Name], 'Text' as [Data Type], 20 as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select '' as Srl, '" & GetFieldAliasName(bImportFor, "TSr") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], 'Sr Of Second Table' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Sr") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Specification") & "' as [Field Name], 'Text' as [Data Type], 50 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Pcs") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "Qty") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'" & GetFieldAliasName(bImportFor, "TotalQty") & "' as [Field Name], 'Number' as [Data Type], Null as [Length], '' as Remark "
        DtPurchInvoiceDimensionDetail_DataFields = AgL.FillData(mQry, AgL.GCn).Tables(0)


        Dim ObjFrmImport As New FrmImportSaleFromExcel
        ObjFrmImport.Text = "Purchase Invoice Import"
        ObjFrmImport.Dgl1.DataSource = DtPurchInvoice_DataFields
        ObjFrmImport.Dgl2.DataSource = DtPurchInvoiceDetail_DataFields
        ObjFrmImport.Dgl3.DataSource = DtPurchInvoiceDimensionDetail_DataFields
        ObjFrmImport.StartPosition = FormStartPosition.CenterScreen
        ObjFrmImport.ShowDialog()

        If Not AgL.StrCmp(ObjFrmImport.UserAction, "OK") Then Exit Sub

        DtPurchaseInvoice = ObjFrmImport.P_DsExcelData_SaleInvoice.Tables(0)
        DtPurchaseInvoiceDetail = ObjFrmImport.P_DsExcelData_SaleInvoiceDetail.Tables(0)
        DtPurchaseInvoiceDimensionDetail = ObjFrmImport.P_DsExcelData_SaleInvoiceDimensionDetail.Tables(0)

        mFlag_Import = True

        If bImportFor = ImportFor.Dos Then
            ''''''''''''''For Filtering Data To Import In This Entry'''''''''''''''''''''''''''''''''''
            Dim DtPurchaseInvoice_Filtered As New DataTable
            DtPurchaseInvoice_Filtered = DtPurchaseInvoice.Clone
            Dim DtPurchaseInvoiceRows_Filtered As DataRow() = DtPurchaseInvoice.Select("[" & GetFieldAliasName(bImportFor, "V_Type") & "] In ('GP','GR')")
            For I = 0 To DtPurchaseInvoiceRows_Filtered.Length - 1
                DtPurchaseInvoice_Filtered.ImportRow(DtPurchaseInvoiceRows_Filtered(I))
            Next
            DtPurchaseInvoice = DtPurchaseInvoice_Filtered
            '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

            For I = 0 To DtPurchaseInvoice.Rows.Count - 1
                DtPurchaseInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Sales Tax Group Party")) = DtPurchaseInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Sales Tax Group Party")).ToString().Replace(" ", "")

                If DtPurchaseInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Place Of Supply")).ToString().Trim() = "EX.U.P." Then
                    DtPurchaseInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Place Of Supply")) = PlaceOfSupplay.OutsideState
                Else
                    DtPurchaseInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Place Of Supply")) = PlaceOfSupplay.WithinState
                End If

                If DtPurchaseInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Vendor")).ToString().Trim() = "CASH A/C." Then
                    DtPurchaseInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Vendor")) = "CASH A/C"
                End If

                If DtPurchaseInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Vendor Doc Date")).ToString().Trim() = "30/Dec/1899 12:00:00 AM" Then
                    DtPurchaseInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Vendor Doc Date")) = DtPurchaseInvoice.Rows(I)(GetFieldAliasName(bImportFor, "V_Date"))
                End If

                'PurchInvoiceTableList(0).VendorDocDate <> "12:00:00 AM"

                If AgL.XNull(DtPurchaseInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Agent"))).ToString().Trim() = "N.A" Or
                        AgL.XNull(DtPurchaseInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Agent"))).ToString().Trim() = "." Then
                    DtPurchaseInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Agent")) = ""
                End If

                If DtPurchaseInvoice.Rows(I)(GetFieldAliasName(bImportFor, "V_Type")) = "GP" Then
                    DtPurchaseInvoice.Rows(I)(GetFieldAliasName(bImportFor, "V_Type")) = "PI"
                ElseIf DtPurchaseInvoice.Rows(I)(GetFieldAliasName(bImportFor, "V_Type")) = "GR" Then
                    DtPurchaseInvoice.Rows(I)(GetFieldAliasName(bImportFor, "V_Type")) = "PR"
                End If

                If DtPurchaseInvoice.Columns.Contains(GetFieldAliasName(bImportFor, "fv_no")) Then
                    DtPurchaseInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Remark")) = DtPurchaseInvoice.Rows(I)(GetFieldAliasName(bImportFor, "fv_no"))
                End If
            Next


            DtPurchaseInvoiceDetail.Columns.Add(GetFieldAliasName(bImportFor, "TSr"))

            For I = 0 To DtPurchaseInvoiceDetail.Rows.Count - 1
                DtPurchaseInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "Sales Tax Group Item")) = DtPurchaseInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "Sales Tax Group Item")).ToString().Replace("@ ", "").Replace("@", "").Trim

                'mQry = "Select Description From Item Where Specification = " & AgL.Chk_Text(DtPurchaseInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "Item Name")).ToString.Trim) & " "
                'DtPurchaseInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "Item Name")) = AgL.Dman_Execute(mQry, AgL.GCn).ExecuteScalar

                Dim bItemDesc As String = ""
                mQry = "Select I.Description 
                        From Item I
                        LEFT JOIN ItemGroup Ig ON I.ItemGroup = Ig.Code
                        LEFT JOIN ItemCategory Ic On I.ItemCategory = Ic.Code
                        Where IsNull(Specification,'') = " & AgL.Chk_Text(DtPurchaseInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "Item Name")).ToString.Trim) & " 
                        And IsNull(Ig.Description,'') = " & AgL.Chk_Text(DtPurchaseInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "Item Group")).ToString.Trim) & " 
                        And IsNull(Ic.Description,'') = " & AgL.Chk_Text(DtPurchaseInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "Item Category")).ToString.Trim) & ""
                bItemDesc = AgL.Dman_Execute(mQry, AgL.GCn).ExecuteScalar

                If bItemDesc = "" Then
                    mQry = "Select Description From Item Where Description = " & AgL.Chk_Text(DtPurchaseInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "Item Name")).ToString.Trim) & " "
                    bItemDesc = AgL.Dman_Execute(mQry, AgL.GCn).ExecuteScalar

                    If bItemDesc = "" Then
                        mQry = "Select Description From Item Where Specification = " & AgL.Chk_Text(DtPurchaseInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "Item Name")).ToString.Trim) & " "
                        bItemDesc = AgL.Dman_Execute(mQry, AgL.GCn).ExecuteScalar
                    End If
                End If
                DtPurchaseInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "Item Name")) = bItemDesc


                If DtPurchaseInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "V_Type")) = "GP" Or
                        DtPurchaseInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "V_Type")) = "CO" Or
                        DtPurchaseInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "V_Type")) = "DO" Or
                        DtPurchaseInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "V_Type")) = "MP" Then
                    DtPurchaseInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "V_Type")) = "PI"
                ElseIf DtPurchaseInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "V_Type")) = "GR" Then
                    DtPurchaseInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "V_Type")) = "PR"
                End If

                If DtPurchaseInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "Unit")).ToString.Trim = "P" Then
                    DtPurchaseInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "Unit")) = "Pcs"
                ElseIf DtPurchaseInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "Unit")).ToString.Trim.ToUpper = "MTR" Then
                    DtPurchaseInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "Unit")) = "Meter"
                ElseIf DtPurchaseInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "Unit")).ToString.Trim.ToUpper = "M" Then
                    DtPurchaseInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "Unit")) = "Meter"
                End If


                If DtPurchaseInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "TSr")).ToString.Trim = "" Then
                    DtPurchaseInvoiceDetail.Rows(I)(GetFieldAliasName(bImportFor, "TSr")) = I + 1
                End If
            Next
        End If



        Dim DtV_Type = DtPurchaseInvoice.DefaultView.ToTable(True, GetFieldAliasName(bImportFor, "V_Type"))
        For I = 0 To DtV_Type.Rows.Count - 1
            If AgL.XNull(DtV_Type.Rows(I)(GetFieldAliasName(bImportFor, "V_Type"))) <> "" Then
                If AgL.Dman_Execute("SELECT Count(*) From Voucher_TYpe where V_Type = '" & AgL.XNull(DtV_Type.Rows(I)(GetFieldAliasName(bImportFor, "V_Type"))) & "'", AgL.GCn).ExecuteScalar = 0 Then
                    If ErrorLog.Contains("These Voucher Types Are Not Present In Master") = False Then
                        ErrorLog += vbCrLf & "These Voucher Types Not Present In Master" & vbCrLf
                        ErrorLog += AgL.XNull(DtV_Type.Rows(I)(GetFieldAliasName(bImportFor, "V_Type"))) & ", "
                    Else
                        ErrorLog += AgL.XNull(DtV_Type.Rows(I)(GetFieldAliasName(bImportFor, "V_Type"))) & ", "
                    End If
                End If
            End If
        Next

        Dim DtSaleToParty = DtPurchaseInvoice.DefaultView.ToTable(True, GetFieldAliasName(bImportFor, "Vendor"))
        For I = 0 To DtSaleToParty.Rows.Count - 1
            If AgL.XNull(DtSaleToParty.Rows(I)(GetFieldAliasName(bImportFor, "Vendor"))).ToString().Trim <> "" Then
                If AgL.Dman_Execute("SELECT Count(*) From SubGroup where Upper(RTrim(LTrim(Name))) = " & AgL.Chk_Text(AgL.XNull(DtSaleToParty.Rows(I)(GetFieldAliasName(bImportFor, "Vendor"))).ToString().Trim().ToUpper) & "", AgL.GCn).ExecuteScalar = 0 Then
                    If ErrorLog.Contains("These Parties Are Not Present In Master") = False Then
                        ErrorLog += vbCrLf & "These Parties Are Not Present In Master" & vbCrLf
                        ErrorLog += AgL.XNull(DtSaleToParty.Rows(I)(GetFieldAliasName(bImportFor, "Vendor"))) & ", "
                    Else
                        ErrorLog += AgL.XNull(DtSaleToParty.Rows(I)(GetFieldAliasName(bImportFor, "Vendor"))) & ", "
                    End If
                End If
            End If
        Next

        Dim DtBillToParty = DtPurchaseInvoice.DefaultView.ToTable(True, GetFieldAliasName(bImportFor, "Bill To Party"))
        For I = 0 To DtBillToParty.Rows.Count - 1
            If AgL.XNull(DtBillToParty.Rows(I)(GetFieldAliasName(bImportFor, "Bill To Party"))).ToString().Trim <> "" Then
                If AgL.Dman_Execute("SELECT Count(*) From SubGroup where Upper(RTrim(LTrim(Name)))  = '" & AgL.XNull(DtBillToParty.Rows(I)(GetFieldAliasName(bImportFor, "Bill To Party"))).ToString().Trim.ToUpper & "'", AgL.GCn).ExecuteScalar = 0 Then
                    If ErrorLog.Contains("These Parties Are Not Present In Master") = False Then
                        ErrorLog += vbCrLf & "These Parties Are Not Present In Master" & vbCrLf
                        ErrorLog += AgL.XNull(DtBillToParty.Rows(I)(GetFieldAliasName(bImportFor, "Bill To Party"))) & ", "
                    Else
                        ErrorLog += AgL.XNull(DtBillToParty.Rows(I)(GetFieldAliasName(bImportFor, "Bill To Party"))) & ", "
                    End If
                End If
            End If
        Next

        'Dim DtAgent = DtPurchaseInvoice.DefaultView.ToTable(True, GetFieldAliasName(bImportFor, "Agent"))
        'For I = 0 To DtAgent.Rows.Count - 1
        '    If AgL.XNull(DtAgent.Rows(I)(GetFieldAliasName(bImportFor, "Agent"))).ToString().Trim <> "" Then
        '        If AgL.Dman_Execute("SELECT Count(*) From SubGroup where Name = '" & AgL.XNull(DtAgent.Rows(I)(GetFieldAliasName(bImportFor, "Agent"))).ToString().Trim & "'", AgL.GCn).ExecuteScalar = 0 Then
        '            If ErrorLog.Contains("These Agents Are Not Present In Master") = False Then
        '                ErrorLog += vbCrLf & "These Agents Are Not Present In Master" & vbCrLf
        '                ErrorLog += AgL.XNull(DtAgent.Rows(I)(GetFieldAliasName(bImportFor, "Agent"))) & ", "
        '            Else
        '                ErrorLog += AgL.XNull(DtAgent.Rows(I)(GetFieldAliasName(bImportFor, "Agent"))) & ", "
        '            End If
        '        End If
        '    End If
        'Next



        Dim DtSalesTaxGroupParty = DtPurchaseInvoice.DefaultView.ToTable(True, GetFieldAliasName(bImportFor, "Sales Tax Group Party"))
        For I = 0 To DtSalesTaxGroupParty.Rows.Count - 1
            If AgL.XNull(DtSalesTaxGroupParty.Rows(I)(GetFieldAliasName(bImportFor, "Sales Tax Group Party"))) <> "" Then
                If AgL.Dman_Execute("SELECT Count(*) From PostingGroupSalesTaxParty where Description = '" & AgL.XNull(DtSalesTaxGroupParty.Rows(I)(GetFieldAliasName(bImportFor, "Sales Tax Group Party"))) & "'", AgL.GCn).ExecuteScalar = 0 Then
                    If ErrorLog.Contains("These Sales Tax Group Parties Are Not Present In Master") = False Then
                        ErrorLog += vbCrLf & "These Sales Tax Group Parties Are Not Present In Master" & vbCrLf
                        ErrorLog += AgL.XNull(DtSalesTaxGroupParty.Rows(I)(GetFieldAliasName(bImportFor, "Sales Tax Group Party"))) & ", "
                    Else
                        ErrorLog += AgL.XNull(DtSalesTaxGroupParty.Rows(I)(GetFieldAliasName(bImportFor, "Sales Tax Group Party"))) & ", "
                    End If
                End If
            End If
        Next

        Dim DtCity = DtPurchaseInvoice.DefaultView.ToTable(True, GetFieldAliasName(bImportFor, "Vendor City"))
        For I = 0 To DtCity.Rows.Count - 1
            If AgL.XNull(DtCity.Rows(I)(GetFieldAliasName(bImportFor, "Vendor City"))).ToString().Trim().ToUpper <> "" Then
                If AgL.Dman_Execute("SELECT Count(*) From City where CityName = '" & AgL.XNull(DtCity.Rows(I)(GetFieldAliasName(bImportFor, "Vendor City")).ToString().Trim().ToUpper) & "'", AgL.GCn).ExecuteScalar = 0 Then
                    If ErrorLog.Contains("These Cities Are Not Present In Master") = False Then
                        ErrorLog += vbCrLf & "These Cities Are Not Present In Master" & vbCrLf
                        ErrorLog += AgL.XNull(DtCity.Rows(I)(GetFieldAliasName(bImportFor, "Vendor City"))) & ", "
                    Else
                        ErrorLog += AgL.XNull(DtCity.Rows(I)(GetFieldAliasName(bImportFor, "Vendor City"))) & ", "
                    End If
                End If
            End If
        Next

        For I = 0 To DtPurchInvoice_DataFields.Rows.Count - 1
            If AgL.XNull(DtPurchInvoice_DataFields.Rows(I)("Remark")).ToString().Contains("Mandatory") Then
                If Not DtPurchaseInvoice.Columns.Contains(AgL.XNull(DtPurchInvoice_DataFields.Rows(I)("Field Name")).ToString()) Then
                    If ErrorLog.Contains("These fields are not present is excel file") = False Then
                        ErrorLog += vbCrLf & "These fields are not present is excel file" & vbCrLf
                        ErrorLog += AgL.XNull(DtPurchInvoice_DataFields.Rows(I)("Field Name")).ToString() & ", "
                    Else
                        ErrorLog += AgL.XNull(DtPurchInvoice_DataFields.Rows(I)("Field Name")).ToString() & ", "
                    End If
                End If

                'For J = 0 To DtPurchInvoice_DataFields.Rows.Count - 1
                '    If AgL.XNull(DtPurchaseInvoice.Rows(I)(DtPurchInvoice_DataFields.Rows(J)("Field Name"))) = "" Then
                '        ErrorLog += DtPurchInvoice_DataFields.Rows(J)("Field Name") + " is blank at row no." + (I + 2).ToString() & vbCrLf
                '    End If
                'Next
            End If
        Next

        'Dim DtItem = DtPurchaseInvoiceDetail.DefaultView.ToTable(True, GetFieldAliasName(bImportFor, "Item Name"))
        'For I = 0 To DtItem.Rows.Count - 1
        '    If AgL.XNull(DtItem.Rows(I)(GetFieldAliasName(bImportFor, "Item Name"))) <> "" Then
        '        If AgL.Dman_Execute("SELECT Count(*) From Item where Description = " & AgL.Chk_Text(AgL.XNull(DtItem.Rows(I)(GetFieldAliasName(bImportFor, "Item Name")))) & "", AgL.GCn).ExecuteScalar = 0 Then
        '            If ErrorLog.Contains("These Item Names Are Not Present In Master") = False Then
        '                ErrorLog += vbCrLf & "These Item Names Are Not Present In Master" & vbCrLf
        '                ErrorLog += AgL.XNull(DtItem.Rows(I)(GetFieldAliasName(bImportFor, "Item Name"))) & ", "
        '            Else
        '                ErrorLog += AgL.XNull(DtItem.Rows(I)(GetFieldAliasName(bImportFor, "Item Name"))) & ", "
        '            End If
        '        End If
        '    End If
        'Next

        mQry = " Select Description From Item  "
        Dim DtItemTable As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)
        Dim DtItem = DtPurchaseInvoiceDetail.DefaultView.ToTable(True, GetFieldAliasName(bImportFor, "Item Name"))
        For I = 0 To DtItem.Rows.Count - 1
            If AgL.XNull(DtItem.Rows(I)(GetFieldAliasName(bImportFor, "Item Name"))) <> "" Then
                Dim DtRowItem As DataRow() = DtItemTable.Select("Description = " + AgL.Chk_Text(AgL.XNull(DtItem.Rows(I)(GetFieldAliasName(bImportFor, "Item Name")))))
                If DtRowItem.Length = 0 Then
                    If ErrorLog.Contains("These Item Names Are Not Present In Master") = False Then
                        ErrorLog += vbCrLf & "These Item Names Are Not Present In Master" & vbCrLf
                        ErrorLog += AgL.XNull(DtItem.Rows(I)(GetFieldAliasName(bImportFor, "Item Name"))) & ", "
                    Else
                        ErrorLog += AgL.XNull(DtItem.Rows(I)(GetFieldAliasName(bImportFor, "Item Name"))) & ", "
                    End If
                End If
            End If
        Next

        Dim DtSalesTaxGroupItem = DtPurchaseInvoiceDetail.DefaultView.ToTable(True, GetFieldAliasName(bImportFor, "Sales Tax Group Item"))
        For I = 0 To DtSalesTaxGroupItem.Rows.Count - 1
            If AgL.XNull(DtSalesTaxGroupItem.Rows(I)(GetFieldAliasName(bImportFor, "Sales Tax Group Item"))) <> "" Then
                If AgL.Dman_Execute("SELECT Count(*) From PostingGroupSalesTaxItem where Description = '" & AgL.XNull(DtSalesTaxGroupItem.Rows(I)(GetFieldAliasName(bImportFor, "Sales Tax Group Item"))) & "'", AgL.GCn).ExecuteScalar = 0 Then
                    If ErrorLog.Contains("These SalesTaxGroupItems Are Not Present In Master") = False Then
                        ErrorLog += vbCrLf & "These SalesTaxGroupItems Are Not Present In Master" & vbCrLf
                        ErrorLog += AgL.XNull(DtSalesTaxGroupItem.Rows(I)(GetFieldAliasName(bImportFor, "Sales Tax Group Item"))) & ", "
                    Else
                        ErrorLog += AgL.XNull(DtSalesTaxGroupItem.Rows(I)(GetFieldAliasName(bImportFor, "Sales Tax Group Item"))) & ", "
                    End If
                End If
            End If
        Next

        For I = 0 To DtPurchInvoiceDetail_DataFields.Rows.Count - 1
            If AgL.XNull(DtPurchInvoiceDetail_DataFields.Rows(I)("Remark")).ToString().Contains("Mandatory") Then
                If Not DtPurchaseInvoiceDetail.Columns.Contains(AgL.XNull(DtPurchInvoiceDetail_DataFields.Rows(I)("Field Name")).ToString()) Then
                    If ErrorLog.Contains("These fields are not present is excel file") = False Then
                        ErrorLog += vbCrLf & "These fields are not present is excel file" & vbCrLf
                        ErrorLog += AgL.XNull(DtPurchInvoiceDetail_DataFields.Rows(I)("Field Name")).ToString() & ", "
                    Else
                        ErrorLog += AgL.XNull(DtPurchInvoiceDetail_DataFields.Rows(I)("Field Name")).ToString() & ", "
                    End If
                End If

                'For J = 0 To DtPurchInvoiceDetail_DataFields.Rows.Count - 1
                '    If AgL.XNull(DtPurchaseInvoiceDetail.Rows(I)(DtPurchInvoiceDetail_DataFields.Rows(J)("Field Name"))) = "" Then
                '        ErrorLog += DtPurchInvoiceDetail_DataFields.Rows(J)("Field Name") + " is blank at row no." + (I + 2).ToString() & vbCrLf
                '    End If
                'Next

            End If
        Next

        If ErrorLog <> "" Then
            If File.Exists(My.Application.Info.DirectoryPath + " \ " + "ErrorLog.txt") Then
                My.Computer.FileSystem.WriteAllText(My.Application.Info.DirectoryPath + "\" + "ErrorLog.txt", ErrorLog, False)
            Else
                File.Create(My.Application.Info.DirectoryPath + " \ " + "ErrorLog.txt")
                My.Computer.FileSystem.WriteAllText(My.Application.Info.DirectoryPath + " \ " + "ErrorLog.txt", ErrorLog, False)
            End If
            System.Diagnostics.Process.Start("notepad.exe", My.Application.Info.DirectoryPath + "\" + "ErrorLog.txt")
            Exit Sub
        End If

        Try
            AgL.ECmd = AgL.GCn.CreateCommand
            AgL.ETrans = AgL.GCn.BeginTransaction(IsolationLevel.ReadCommitted)
            AgL.ECmd.Transaction = AgL.ETrans
            mTrans = "Begin"


            For I = 0 To DtPurchaseInvoice.Rows.Count - 1
                Dim Tot_Gross_Amount As Double = 0
                Dim Tot_Taxable_Amount As Double = 0
                Dim Tot_Tax1 As Double = 0
                Dim Tot_Tax2 As Double = 0
                Dim Tot_Tax3 As Double = 0
                Dim Tot_Tax4 As Double = 0
                Dim Tot_Tax5 As Double = 0
                Dim Tot_SubTotal1 As Double = 0


                Dim PurchInvoiceTableList(0) As StructPurchInvoice
                Dim PurchInvoiceDimensionTableList(0) As StructPurchInvoiceDimensionDetail
                Dim PurchInvoiceTable As New StructPurchInvoice

                PurchInvoiceTable.DocID = ""
                PurchInvoiceTable.V_Type = AgL.XNull(DtPurchaseInvoice.Rows(I)(GetFieldAliasName(bImportFor, "V_Type")))
                PurchInvoiceTable.V_Prefix = ""
                PurchInvoiceTable.Site_Code = AgL.PubSiteCode
                PurchInvoiceTable.Div_Code = AgL.PubDivCode
                PurchInvoiceTable.V_No = AgL.VNull(DtPurchaseInvoice.Rows(I)(GetFieldAliasName(bImportFor, "V_No")))
                PurchInvoiceTable.V_Date = AgL.XNull(DtPurchaseInvoice.Rows(I)(GetFieldAliasName(bImportFor, "V_Date")))
                PurchInvoiceTable.ManualRefNo = AgL.XNull(DtPurchaseInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Invoice No"))).ToString.Trim
                PurchInvoiceTable.Vendor = ""
                PurchInvoiceTable.AgentCode = ""
                PurchInvoiceTable.AgentName = AgL.XNull(DtPurchaseInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Agent"))).ToString.Trim
                PurchInvoiceTable.VendorName = AgL.XNull(DtPurchaseInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Vendor"))).ToString.Trim
                PurchInvoiceTable.BillToPartyCode = ""
                PurchInvoiceTable.BillToPartyName = AgL.XNull(DtPurchaseInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Bill To Party"))).ToString.Trim
                PurchInvoiceTable.VendorAddress = AgL.XNull(DtPurchaseInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Vendor Address"))).ToString.Trim
                PurchInvoiceTable.VendorCity = AgL.XNull(DtPurchaseInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Vendor City"))).ToString.Trim

                If DtPurchaseInvoice.Columns.Contains(GetFieldAliasName(bImportFor, "Vendor Mobile")) = True Then
                    PurchInvoiceTable.VendorMobile = AgL.XNull(DtPurchaseInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Vendor Mobile"))).ToString.Trim
                End If


                PurchInvoiceTable.VendorSalesTaxNo = AgL.XNull(DtPurchaseInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Vendor Sales Tax No"))).ToString.Trim
                PurchInvoiceTable.ShipToAddress = ""
                PurchInvoiceTable.SalesTaxGroupParty = AgL.XNull(DtPurchaseInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Sales Tax Group Party"))).ToString.Trim
                PurchInvoiceTable.PlaceOfSupply = AgL.XNull(DtPurchaseInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Place Of Supply"))).ToString.Trim
                PurchInvoiceTable.StructureCode = ""
                PurchInvoiceTable.CustomFields = ""

                If DtPurchaseInvoice.Columns.Contains(GetFieldAliasName(bImportFor, "Vendor Doc No")) = True Then
                    PurchInvoiceTable.VendorDocNo = AgL.XNull(DtPurchaseInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Vendor Doc No"))).ToString.Trim
                End If

                If DtPurchaseInvoice.Columns.Contains(GetFieldAliasName(bImportFor, "Vendor Doc Date")) = True Then
                    PurchInvoiceTable.VendorDocDate = AgL.XNull(DtPurchaseInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Vendor Doc Date")))
                End If

                PurchInvoiceTable.ReferenceDocId = ""
                PurchInvoiceTable.Remarks = AgL.XNull(DtPurchaseInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Remark")))
                PurchInvoiceTable.Status = "Active"
                PurchInvoiceTable.EntryBy = AgL.PubUserName
                PurchInvoiceTable.EntryDate = AgL.GetDateTime(AgL.GcnRead)
                PurchInvoiceTable.ApproveBy = ""
                PurchInvoiceTable.ApproveDate = ""
                PurchInvoiceTable.MoveToLog = ""
                PurchInvoiceTable.MoveToLogDate = ""
                PurchInvoiceTable.UploadDate = ""

                PurchInvoiceTable.Deduction_Per = AgL.VNull(DtPurchaseInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Deduction_Per")))
                PurchInvoiceTable.Deduction = AgL.VNull(DtPurchaseInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Deduction")))
                PurchInvoiceTable.Other_Charge_Per = AgL.VNull(DtPurchaseInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Other_Charge_Per")))
                PurchInvoiceTable.Other_Charge = AgL.VNull(DtPurchaseInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Other_Charge")))
                PurchInvoiceTable.Round_Off = AgL.VNull(DtPurchaseInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Round_Off")))
                PurchInvoiceTable.Net_Amount = AgL.VNull(DtPurchaseInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Net_Amount")))


                If PurchInvoiceTable.V_Type = "PR" Then PurchInvoiceTable.Deduction = PurchInvoiceTable.Deduction * (-1)
                If PurchInvoiceTable.V_Type = "PR" Then PurchInvoiceTable.Other_Charge = PurchInvoiceTable.Other_Charge * (-1)
                If PurchInvoiceTable.V_Type = "PR" Then PurchInvoiceTable.Round_Off = PurchInvoiceTable.Round_Off * (-1)
                If PurchInvoiceTable.V_Type = "PR" Then PurchInvoiceTable.Net_Amount = PurchInvoiceTable.Net_Amount * (-1)



                Dim DtPurchInvoiceDetail_ForHeader As New DataTable
                For M = 0 To DtPurchaseInvoiceDetail.Columns.Count - 1
                    Dim DColumn As New DataColumn
                    DColumn.ColumnName = DtPurchaseInvoiceDetail.Columns(M).ColumnName
                    DtPurchInvoiceDetail_ForHeader.Columns.Add(DColumn)
                Next

                Dim DtRowPurchInvoiceDetail_ForHeader As DataRow() = DtPurchaseInvoiceDetail.Select("[" & GetFieldAliasName(bImportFor, "V_Type") & "] = " + AgL.Chk_Text(AgL.XNull(DtPurchaseInvoice.Rows(I)("V_Type"))) + " And [" & GetFieldAliasName(bImportFor, "Invoice No") & "] = " + AgL.Chk_Text(AgL.XNull(DtPurchaseInvoice.Rows(I)(GetFieldAliasName(bImportFor, "Invoice No")))))
                If DtRowPurchInvoiceDetail_ForHeader.Length > 0 Then
                    For M = 0 To DtRowPurchInvoiceDetail_ForHeader.Length - 1
                        DtPurchInvoiceDetail_ForHeader.Rows.Add()
                        For N = 0 To DtPurchInvoiceDetail_ForHeader.Columns.Count - 1
                            DtPurchInvoiceDetail_ForHeader.Rows(M)(N) = DtRowPurchInvoiceDetail_ForHeader(M)(N)
                        Next
                    Next
                End If

                For J = 0 To DtPurchInvoiceDetail_ForHeader.Rows.Count - 1
                    PurchInvoiceTable.Line_Sr = J + 1
                    PurchInvoiceTable.Line_ItemName = AgL.XNull(DtPurchInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Item Name"))).ToString.Trim
                    PurchInvoiceTable.Line_Specification = AgL.XNull(DtPurchInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Specification"))).ToString.Trim
                    PurchInvoiceTable.Line_SalesTaxGroupItem = AgL.XNull(DtPurchInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Sales Tax Group Item"))).ToString.Trim
                    PurchInvoiceTable.Line_ReferenceNo = ""
                    PurchInvoiceTable.Line_DocQty = AgL.VNull(DtPurchInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Qty")))
                    PurchInvoiceTable.Line_FreeQty = 0
                    PurchInvoiceTable.Line_Qty = AgL.VNull(DtPurchInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Qty")))
                    PurchInvoiceTable.Line_Unit = AgL.XNull(DtPurchInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Unit"))).ToString.Trim
                    PurchInvoiceTable.Line_Pcs = AgL.VNull(DtPurchInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Pcs")))

                    If DtPurchInvoiceDetail_ForHeader.Columns.Contains(GetFieldAliasName(bImportFor, "Unit Multiplier")) = True Then
                        PurchInvoiceTable.Line_UnitMultiplier = AgL.VNull(DtPurchInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Unit Multiplier")))
                    Else
                        PurchInvoiceTable.Line_UnitMultiplier = 1
                    End If

                    If DtPurchInvoiceDetail_ForHeader.Columns.Contains(GetFieldAliasName(bImportFor, "Unit Multiplier")) = True Then
                        PurchInvoiceTable.Line_DealUnit = AgL.XNull(DtPurchInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Deal Unit"))).ToString.Trim
                    Else
                        PurchInvoiceTable.Line_DealUnit = PurchInvoiceTable.Line_Unit
                    End If

                    If DtPurchInvoiceDetail_ForHeader.Columns.Contains(GetFieldAliasName(bImportFor, "Deal Qty")) = True Then
                        PurchInvoiceTable.Line_DocDealQty = AgL.VNull(DtPurchInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Deal Qty")))
                    Else
                        PurchInvoiceTable.Line_DocDealQty = PurchInvoiceTable.Line_Qty
                    End If



                    PurchInvoiceTable.Line_Rate = AgL.VNull(DtPurchInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Rate")))
                    PurchInvoiceTable.Line_DiscountPer = AgL.VNull(DtPurchInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Discount Per")))
                    PurchInvoiceTable.Line_DiscountAmount = AgL.VNull(DtPurchInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Discount Amount")))
                    PurchInvoiceTable.Line_AdditionalDiscountPer = AgL.VNull(DtPurchInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Additional Discount Per")))
                    PurchInvoiceTable.Line_AdditionalDiscountAmount = AgL.VNull(DtPurchInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Additional Discount Amount")))
                    PurchInvoiceTable.Line_Amount = AgL.VNull(DtPurchInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Amount")))
                    PurchInvoiceTable.Line_Remark = AgL.XNull(DtPurchInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Remark")))
                    PurchInvoiceTable.Line_BaleNo = AgL.XNull(DtPurchInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Bale No")))
                    PurchInvoiceTable.Line_LotNo = AgL.XNull(DtPurchInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Lot No")))
                    PurchInvoiceTable.Line_ReferenceDocId = ""
                    PurchInvoiceTable.Line_ReferenceSr = ""
                    PurchInvoiceTable.Line_PurchInvoice = ""
                    PurchInvoiceTable.Line_PurchInvoiceSr = ""
                    PurchInvoiceTable.Line_GrossWeight = 0
                    PurchInvoiceTable.Line_NetWeight = 0
                    PurchInvoiceTable.Line_Gross_Amount = AgL.VNull(DtPurchInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Gross_Amount")))
                    PurchInvoiceTable.Line_Taxable_Amount = AgL.VNull(DtPurchInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Taxable_Amount")))
                    PurchInvoiceTable.Line_Tax1_Per = AgL.VNull(DtPurchInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Tax1_Per")))
                    PurchInvoiceTable.Line_Tax1 = AgL.VNull(DtPurchInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Tax1")))
                    PurchInvoiceTable.Line_Tax2_Per = AgL.VNull(DtPurchInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Tax2_Per")))
                    PurchInvoiceTable.Line_Tax2 = AgL.VNull(DtPurchInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Tax2")))
                    PurchInvoiceTable.Line_Tax3_Per = AgL.VNull(DtPurchInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Tax3_Per")))
                    PurchInvoiceTable.Line_Tax3 = AgL.VNull(DtPurchInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Tax3")))
                    PurchInvoiceTable.Line_Tax4_Per = AgL.VNull(DtPurchInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Tax4_Per")))
                    PurchInvoiceTable.Line_Tax4 = AgL.VNull(DtPurchInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Tax4")))
                    PurchInvoiceTable.Line_Tax5_Per = AgL.VNull(DtPurchInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Tax5_Per")))
                    PurchInvoiceTable.Line_Tax5 = AgL.VNull(DtPurchInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "Tax5")))
                    PurchInvoiceTable.Line_SubTotal1 = AgL.VNull(DtPurchInvoiceDetail_ForHeader.Rows(J)(GetFieldAliasName(bImportFor, "SubTotal1")))


                    'For Header Values
                    Tot_Gross_Amount += PurchInvoiceTable.Line_Gross_Amount
                    Tot_Taxable_Amount += PurchInvoiceTable.Line_Taxable_Amount
                    Tot_Tax1 += PurchInvoiceTable.Line_Tax1
                    Tot_Tax2 += PurchInvoiceTable.Line_Tax2
                    Tot_Tax3 += PurchInvoiceTable.Line_Tax3
                    Tot_Tax4 += PurchInvoiceTable.Line_Tax4
                    Tot_Tax5 += PurchInvoiceTable.Line_Tax5
                    Tot_SubTotal1 += PurchInvoiceTable.Line_SubTotal1


                    If PurchInvoiceTable.V_Type = "PR" Then PurchInvoiceTable.Line_DocQty = PurchInvoiceTable.Line_DocQty * (-1)
                    If PurchInvoiceTable.V_Type = "PR" Then PurchInvoiceTable.Line_Qty = PurchInvoiceTable.Line_Qty * (-1)
                    If PurchInvoiceTable.V_Type = "PR" Then PurchInvoiceTable.Line_DocDealQty = PurchInvoiceTable.Line_DocDealQty * (-1)
                    If PurchInvoiceTable.V_Type = "PR" Then PurchInvoiceTable.Line_Amount = PurchInvoiceTable.Line_Amount * (-1)

                    If PurchInvoiceTable.V_Type = "PR" Then PurchInvoiceTable.Line_Gross_Amount = PurchInvoiceTable.Line_Gross_Amount * (-1)
                    If PurchInvoiceTable.V_Type = "PR" Then PurchInvoiceTable.Line_Taxable_Amount = PurchInvoiceTable.Line_Taxable_Amount * (-1)
                    If PurchInvoiceTable.V_Type = "PR" Then PurchInvoiceTable.Line_Tax1 = PurchInvoiceTable.Line_Tax1 * (-1)
                    If PurchInvoiceTable.V_Type = "PR" Then PurchInvoiceTable.Line_Tax2 = PurchInvoiceTable.Line_Tax2 * (-1)
                    If PurchInvoiceTable.V_Type = "PR" Then PurchInvoiceTable.Line_Tax3 = PurchInvoiceTable.Line_Tax3 * (-1)
                    If PurchInvoiceTable.V_Type = "PR" Then PurchInvoiceTable.Line_Tax4 = PurchInvoiceTable.Line_Tax4 * (-1)
                    If PurchInvoiceTable.V_Type = "PR" Then PurchInvoiceTable.Line_Tax5 = PurchInvoiceTable.Line_Tax5 * (-1)
                    If PurchInvoiceTable.V_Type = "PR" Then PurchInvoiceTable.Line_SubTotal1 = PurchInvoiceTable.Line_SubTotal1 * (-1)

                    Dim DtPurchInvoiceDimensionDetail_ForHeader As New DataTable
                    For M = 0 To DtPurchaseInvoiceDimensionDetail.Columns.Count - 1
                        Dim DColumn As New DataColumn
                        DColumn.ColumnName = DtPurchaseInvoiceDimensionDetail.Columns(M).ColumnName
                        DtPurchInvoiceDimensionDetail_ForHeader.Columns.Add(DColumn)
                    Next

                    Dim DtRowPurchInvoiceDimensionDetail_ForHeader As DataRow() = DtPurchaseInvoiceDimensionDetail.Select("[" & GetFieldAliasName(bImportFor, "V_Type") & "] = " + AgL.Chk_Text(AgL.XNull(DtPurchaseInvoiceDetail.Rows(J)(GetFieldAliasName(bImportFor, "V_Type")))) + " And [" & GetFieldAliasName(bImportFor, "Invoice No") & "] = " + AgL.Chk_Text(AgL.XNull(DtPurchaseInvoiceDetail.Rows(J)(GetFieldAliasName(bImportFor, "Invoice No")))) + " And [" & GetFieldAliasName(bImportFor, "TSr") & "] = " + AgL.XNull(DtPurchaseInvoiceDetail.Rows(J)(GetFieldAliasName(bImportFor, "TSr"))), GetFieldAliasName(bImportFor, "TSr"))
                    If DtRowPurchInvoiceDimensionDetail_ForHeader.Length > 0 Then
                        For M = 0 To DtRowPurchInvoiceDetail_ForHeader.Length - 1
                            DtPurchInvoiceDetail_ForHeader.Rows.Add()
                            For N = 0 To DtPurchInvoiceDimensionDetail_ForHeader.Columns.Count - 1
                                DtPurchInvoiceDimensionDetail_ForHeader.Rows(M)(N) = DtRowPurchInvoiceDimensionDetail_ForHeader(M)(N)
                            Next
                        Next
                    End If

                    For K = 0 To DtPurchInvoiceDimensionDetail_ForHeader.Rows.Count - 1
                        Dim PurchInvoiceDimensionTable As New StructPurchInvoiceDimensionDetail

                        PurchInvoiceDimensionTable.TSr = AgL.VNull(DtPurchInvoiceDimensionDetail_ForHeader.Rows(K)(GetFieldAliasName(bImportFor, "TSr")))
                        PurchInvoiceDimensionTable.Sr = AgL.VNull(DtPurchInvoiceDimensionDetail_ForHeader.Rows(K)(GetFieldAliasName(bImportFor, "Sr")))
                        PurchInvoiceDimensionTable.Specification = AgL.XNull(DtPurchInvoiceDimensionDetail_ForHeader.Rows(K)(GetFieldAliasName(bImportFor, "Specification")))
                        PurchInvoiceDimensionTable.Pcs = AgL.VNull(DtPurchInvoiceDimensionDetail_ForHeader.Rows(K)(GetFieldAliasName(bImportFor, "Pcs")))
                        PurchInvoiceDimensionTable.Qty = AgL.VNull(DtPurchInvoiceDimensionDetail_ForHeader.Rows(K)(GetFieldAliasName(bImportFor, "Qty")))
                        PurchInvoiceDimensionTable.TotalQty = AgL.VNull(DtPurchInvoiceDimensionDetail_ForHeader.Rows(K)(GetFieldAliasName(bImportFor, "TotalQty")))

                        PurchInvoiceDimensionTableList(UBound(PurchInvoiceDimensionTableList)) = PurchInvoiceDimensionTable
                        ReDim Preserve PurchInvoiceDimensionTableList(UBound(PurchInvoiceDimensionTableList) + 1)
                    Next

                    PurchInvoiceTableList(UBound(PurchInvoiceTableList)) = PurchInvoiceTable
                    ReDim Preserve PurchInvoiceTableList(UBound(PurchInvoiceTableList) + 1)
                Next

                PurchInvoiceTableList(0).Gross_Amount = Tot_Gross_Amount
                PurchInvoiceTableList(0).Taxable_Amount = Tot_Taxable_Amount
                PurchInvoiceTableList(0).Tax1 = Tot_Tax1
                PurchInvoiceTableList(0).Tax2 = Tot_Tax2
                PurchInvoiceTableList(0).Tax3 = Tot_Tax3
                PurchInvoiceTableList(0).Tax4 = Tot_Tax4
                PurchInvoiceTableList(0).Tax5 = Tot_Tax5
                PurchInvoiceTableList(0).SubTotal1 = Tot_SubTotal1
                PurchInvoiceTableList(0).Other_Charge = 0
                PurchInvoiceTableList(0).Deduction = 0
                PurchInvoiceTableList(0).Round_Off = Math.Round(Math.Round(PurchInvoiceTableList(0).SubTotal1) - PurchInvoiceTableList(0).SubTotal1, 2)
                PurchInvoiceTableList(0).Net_Amount = Math.Round(PurchInvoiceTableList(0).SubTotal1)


                Dim Tot_RoundOff As Double = 0
                Dim Tot_NetAmount As Double = 0
                For J = 0 To PurchInvoiceTableList.Length - 1
                    PurchInvoiceTableList(J).Line_Round_Off = Math.Round(PurchInvoiceTableList(0).Round_Off * PurchInvoiceTableList(J).Line_Gross_Amount / PurchInvoiceTableList(0).Gross_Amount, 2)
                    PurchInvoiceTableList(J).Line_Net_Amount = Math.Round(PurchInvoiceTableList(0).Net_Amount * PurchInvoiceTableList(J).Line_Gross_Amount / PurchInvoiceTableList(0).Gross_Amount, 2)
                    Tot_RoundOff += PurchInvoiceTableList(J).Line_Round_Off
                    Tot_NetAmount += PurchInvoiceTableList(J).Line_Net_Amount
                Next

                Tot_RoundOff = Math.Round(Tot_RoundOff, 2)

                If Tot_RoundOff <> PurchInvoiceTableList(0).Round_Off Then
                    PurchInvoiceTableList(0).Line_Round_Off = PurchInvoiceTableList(0).Line_Round_Off + (PurchInvoiceTableList(0).Round_Off - Tot_RoundOff)
                End If

                If Tot_NetAmount <> PurchInvoiceTableList(0).Net_Amount Then
                    PurchInvoiceTableList(0).Line_Net_Amount = PurchInvoiceTableList(0).Line_Net_Amount + (PurchInvoiceTableList(0).Net_Amount - Tot_NetAmount)
                End If

                InsertPurchInvoice(PurchInvoiceTableList, PurchInvoiceDimensionTableList)
            Next

            AgL.ETrans.Commit()
            mTrans = "Commit"

            mFlag_Import = False

        Catch ex As Exception
            AgL.ETrans.Rollback()
            MsgBox(ex.Message)
            mFlag_Import = False
        End Try
        If StrErrLog <> "" Then MsgBox(StrErrLog)
    End Sub


    Private Function GetFieldAliasName(bImportFor As ImportFor, bFieldName As String)
        Dim bAliasName As String = bFieldName
        If bImportFor = ImportFor.Dos Then
            Select Case bFieldName




                Case "V_TYPE"
                    bAliasName = "V_TYPE"
                Case "V_NO"
                    bAliasName = "v_no"
                Case "V_Date"
                    bAliasName = "v_date"
                Case "Invoice No"
                    bAliasName = "invoice_no"
                Case "Vendor"
                    bAliasName = "vendor"
                Case "Vendor Address"
                    bAliasName = "vendor_add"
                Case "Vendor City"
                    bAliasName = "vendorcity"
                Case "Vendor Pincode"
                    bAliasName = "pincode"
                Case "Vendor Mobile"
                    bAliasName = "mobile"
                Case "Vendor Sales Tax No"
                    bAliasName = "gstin"
                Case "Vendor Doc No"
                    bAliasName = "doc_no"
                Case "Vendor Doc Date"
                    bAliasName = "doc_date"
                Case "Bill To Party"
                    bAliasName = "bill_party"
                Case "Agent"
                    bAliasName = "agent"
                Case "Sales Tax Group Party"
                    bAliasName = "tax_group"
                Case "Place Of Supply"
                    bAliasName = "place_supp"
                Case "Remark"
                    bAliasName = "remark"
                Case "SubTotal1"
                    bAliasName = "subtotal1"
                Case "Deduction_Per"
                    bAliasName = "ded_per"
                Case "Deduction"
                    bAliasName = "deduction"
                Case "Other_Charge_Per"
                    bAliasName = "ot_ch_per"
                Case "Other_Charge"
                    bAliasName = "ot_charge"
                Case "Round_Off"
                    bAliasName = "round_off"
                Case "Net_Amount"
                    bAliasName = "net_amount"




                Case "TSr"
                    bAliasName = "TSR"
                Case "Item Name"
                    bAliasName = "item_name"
                Case "Item Group"
                    bAliasName = "make_name"
                Case "Item Category"
                    bAliasName = "catagory"
                Case "Specification"
                    bAliasName = "specific"
                Case "Bale No"
                    bAliasName = "bale_no"
                Case "Sales Tax Group Item"
                    bAliasName = "tax_group"
                Case "Qty"
                    bAliasName = "qty"
                Case "Unit"
                    bAliasName = "unit"
                Case "Rate"
                    bAliasName = "Rate"
                Case "Discount Per"
                    bAliasName = "disc_per"
                Case "Discount Amount"
                    bAliasName = "disc_amt"
                Case "Additional Discount Per"
                    bAliasName = "adisc_per"
                Case "Additional Discount Amount"
                    bAliasName = "adisc_amt"
                Case "Amount"
                    bAliasName = "amount"
                Case "Remark"
                    bAliasName = "remark"
                Case "LR No"
                    bAliasName = "lr_no"
                Case "LR Date"
                    bAliasName = "lr_date"
                Case "Lot No"
                    bAliasName = "lot_no"
                Case "Gross_Amount"
                    bAliasName = "gross_amt"
                Case "Taxable_Amount"
                    bAliasName = "taxableamt"
                Case "Tax1_Per"
                    bAliasName = "tax1_per"
                Case "Tax1"
                    bAliasName = "tax1"
                Case "Tax2_Per"
                    bAliasName = "tax2_per"
                Case "Tax2"
                    bAliasName = "tax2"
                Case "Tax3_Per"
                    bAliasName = "tax3_per"
                Case "Tax3"
                    bAliasName = "tax3"
                Case "Tax4_Per"
                    bAliasName = "tax4_per"
                Case "Tax4"
                    bAliasName = "tax4"
                Case "Tax5_Per"
                    bAliasName = "tax5_per"
                Case "Tax5"
                    bAliasName = "tax5"
                Case "SubTotal1"
                    bAliasName = "subtotal1"





            End Select

            Return bAliasName
        Else
            Return bFieldName
        End If
    End Function

    '-------------------------------------------------------------------------------------

    Public Shared Sub FGetCalculationData(mSearchCode As String, Conn As Object, Cmd As Object)
        Dim mQry As String = ""
        mQry = "SELECT Sd.* 
                FROM PurchInvoice H With (NoLock)
                LEFT JOIN StructureDetail Sd With (NoLock) ON H.Structure = Sd.Code
                WHERE H.DocID = '" & mSearchCode & "'"
        Dim DtCalcHeaderData As DataTable = AgL.FillData(mQry, IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).Tables(0)

        mQry = "Select Vt.Description As Voucher_TypeDesc, H.* 
                From PurchInvoice H With (NoLock) 
                LEFT JOIN Voucher_Type Vt On H.V_Type = Vt.V_Type
                Where DocId = '" & mSearchCode & "'"
        Dim DtTransactionDetail As DataTable = AgL.FillData(mQry, IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).Tables(0)

        For I As Integer = 0 To DtCalcHeaderData.Rows.Count - 1
            For J As Integer = 0 To DtTransactionDetail.Columns.Count - 1
                If AgL.XNull(DtCalcHeaderData.Rows(I)("HeaderAmtField")) = DtTransactionDetail.Columns(J).ColumnName Then
                    DtCalcHeaderData.Rows(I)("Amount") = DtTransactionDetail.Rows(0)(DtTransactionDetail.Columns(J).ColumnName)
                End If
            Next
        Next

        mQry = " SELECT Sd.Charges, Pst.*
                FROM PurchInvoice H With (NoLock)
                LEFT JOIN PurchInvoiceDetail L With (NoLock) ON H.DocID = L.DocID
                LEFT JOIN PostingGroupSalesTax Pst With (NoLock) ON H.SalesTaxGroupParty = Pst.PostingGroupSalesTaxParty
	                AND H.PlaceOfSupply = Pst.PlaceOfSupply
	                AND L.SalesTaxGroupItem = Pst.PostingGroupSalesTaxItem
	                AND Pst.Process = 'PURCH'
                LEFT JOIN StructureDetail Sd ON H.Structure = Sd.Code
	                AND Pst.ChargeType = Sd.Charge_Type
                WHERE H.DocID = '" & mSearchCode & "'"
        Dim DtPostingGroupSalesTax As DataTable = AgL.FillData(mQry, IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).Tables(0)



        mQry = "Select "
        For I As Integer = 0 To DtCalcHeaderData.Rows.Count - 1
            mQry += "" & AgL.XNull(DtCalcHeaderData.Rows(I)("LineAmtField")) + " As [" + GetColName(AgL.XNull(DtCalcHeaderData.Rows(I)("Charges"))) + "],"
            'mQry += "Abs(" & AgL.XNull(DtCalcHeaderData.Rows(I)("LineAmtField")) + ") As [" + GetColName(DtCalcHeaderData.Rows(I)("Charges")) + "],"
            mQry += " 0.00  As [" + GetColNamePer(AgL.XNull(DtCalcHeaderData.Rows(I)("Charges"))) + "],"
            mQry += " '' As [" + GetColNamePostAc(AgL.XNull(DtCalcHeaderData.Rows(I)("Charges"))) + "],"
            mQry += AgL.Chk_Text(AgL.XNull(DtCalcHeaderData.Rows(I)("ContraAc"))) + " As [" + GetColNameContraAc(AgL.XNull(DtCalcHeaderData.Rows(I)("Charges"))) + "]" + IIf(I = DtCalcHeaderData.Rows.Count - 1, "", ",")
        Next
        mQry += " From PurchInvoiceDetail With (NoLock) Where DocId = '" & mSearchCode & "'"
        Dim DtCalcLineData As DataTable = AgL.FillData(mQry, IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).Tables(0)

        For I As Integer = 0 To DtCalcLineData.Rows.Count - 1
            For J As Integer = 0 To DtCalcLineData.Columns.Count - 1
                For K As Integer = 0 To DtPostingGroupSalesTax.Rows.Count - 1
                    If DtCalcLineData.Columns(J).ColumnName = GetColNamePostAc(AgL.XNull(DtPostingGroupSalesTax.Rows(K)("Charges"))) Then
                        DtCalcLineData.Rows(I)(J) = AgL.XNull(DtPostingGroupSalesTax.Rows(K)("LedgerAc"))
                    ElseIf DtCalcLineData.Columns(J).ColumnName = GetColNamePer(AgL.XNull(DtPostingGroupSalesTax.Rows(K)("Charges"))) Then
                        DtCalcLineData.Rows(I)(J) = AgL.VNull(DtPostingGroupSalesTax.Rows(K)("Percentage"))
                    End If
                Next
            Next
        Next


        Dim mMultiplyWithMinus As Boolean = False
        Dim mNarrationParty As String
        Dim mNarration As String
        If AgL.XNull(AgL.Dman_Execute("Select NCat 
                        From Voucher_Type 
                        Where V_Type = '" & AgL.XNull(DtTransactionDetail.Rows(0)("V_Type")) & "'", IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar) = Ncat.PurchaseReturn Then
            mNarrationParty = AgL.XNull(DtTransactionDetail.Rows(0)("Voucher_TypeDesc"))
            mNarrationParty += ", " + AgL.XNull(DtTransactionDetail.Rows(0)("Remarks"))
            mNarration = AgL.XNull(DtTransactionDetail.Rows(0)("Voucher_TypeDesc")) & " : " & DtTransactionDetail.Rows(0)("VendorName") & ""
            mNarration += ", " + AgL.XNull(DtTransactionDetail.Rows(0)("Remarks"))
            'mMultiplyWithMinus = True
        Else
            If AgL.XNull(DtTransactionDetail.Rows(0)("VendorDocNo")) <> "" Then
                mNarrationParty = AgL.XNull(DtTransactionDetail.Rows(0)("Voucher_TypeDesc")) & " : " & DtTransactionDetail.Rows(0)("VendorDocNo") & " Dated " & DtTransactionDetail.Rows(0)("VendorDocDate")
                mNarrationParty += ", " + AgL.XNull(DtTransactionDetail.Rows(0)("Remarks"))
                mNarration = AgL.XNull(DtTransactionDetail.Rows(0)("Voucher_TypeDesc")) & " : " & DtTransactionDetail.Rows(0)("VendorName") & " Invoice No. " & DtTransactionDetail.Rows(0)("VendorDocNo") & " Dated " & DtTransactionDetail.Rows(0)("VendorDocDate")
                mNarration += ", " + AgL.XNull(DtTransactionDetail.Rows(0)("Remarks"))
            Else
                mNarrationParty = AgL.XNull(DtTransactionDetail.Rows(0)("Voucher_TypeDesc"))
                mNarrationParty += ", " + AgL.XNull(DtTransactionDetail.Rows(0)("Remarks"))
                mNarration = AgL.XNull(DtTransactionDetail.Rows(0)("Voucher_TypeDesc")) & " : " & DtTransactionDetail.Rows(0)("VendorName") & ""
                mNarration += ", " + AgL.XNull(DtTransactionDetail.Rows(0)("Remarks"))
            End If
            mMultiplyWithMinus = False
        End If

        Dim DtSettings As DataTable
        mQry = "Select * from PurchaseInvoiceSetting  With (NoLock)  Where V_Type = '" & AgL.XNull(DtTransactionDetail.Rows(0)("V_Type")) & "' And Div_Code = '" & AgL.PubDivCode & "' And Site_Code='" & AgL.PubSiteCode & "' "
        DtSettings = AgL.FillData(mQry, IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).Tables(0)
        If DtSettings.Rows.Count = 0 Then
            mQry = "Select * from PurchaseInvoiceSetting  With (NoLock)  Where V_Type = '" & AgL.XNull(DtTransactionDetail.Rows(0)("V_Type")) & "' And Div_Code = '" & AgL.PubDivCode & "' And Site_Code Is Null "
            DtSettings = AgL.FillData(mQry, IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).Tables(0)
            If DtSettings.Rows.Count = 0 Then
                mQry = "Select * from PurchaseInvoiceSetting  With (NoLock)  Where V_Type = '" & AgL.XNull(DtTransactionDetail.Rows(0)("V_Type")) & "' And Div_Code  Is Null And Site_Code='" & AgL.PubSiteCode & "' "
                DtSettings = AgL.FillData(mQry, IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).Tables(0)
                If DtSettings.Rows.Count = 0 Then
                    mQry = "Select * from PurchaseInvoiceSetting  With (NoLock)  Where V_Type = '" & AgL.XNull(DtTransactionDetail.Rows(0)("V_Type")) & "' And Div_Code  Is Null And Site_Code Is Null "
                    DtSettings = AgL.FillData(mQry, IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).Tables(0)
                    If DtSettings.Rows.Count = 0 Then
                        mQry = "Select * from PurchaseInvoiceSetting  With (NoLock)  Where V_Type Is Null And Div_Code  Is Null And Site_Code Is Null "
                        DtSettings = AgL.FillData(mQry, IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).Tables(0)
                    End If
                End If
            End If
        End If



        Dim bPartyLedgerPostingAc As String = ""
        Dim bLinkedPartyAc As String = ""
        If AgL.StrCmp(AgL.XNull(DtSettings.Rows(0)("LedgerPostingPartyAcType")), PurchInvoiceLedgerPostingPartyAcType.Vendor) Then
            bPartyLedgerPostingAc = AgL.XNull(DtTransactionDetail.Rows(0)("Vendor"))
            bLinkedPartyAc = AgL.XNull(DtTransactionDetail.Rows(0)("LinkedParty"))
        Else
            bPartyLedgerPostingAc = AgL.XNull(DtTransactionDetail.Rows(0)("BillToParty"))
            bLinkedPartyAc = AgL.XNull(DtTransactionDetail.Rows(0)("LinkedParty"))
        End If

        ClsMain.PostStructureLineToAccounts(DtCalcHeaderData, DtCalcLineData, mNarrationParty, mNarration, mSearchCode, AgL.XNull(DtTransactionDetail.Rows(0)("Div_Code")),
                                    AgL.XNull(DtTransactionDetail.Rows(0)("Site_Code")),
                                    AgL.XNull(DtTransactionDetail.Rows(0)("V_Type")), AgL.XNull(DtTransactionDetail.Rows(0)("V_Prefix")), AgL.VNull(DtTransactionDetail.Rows(0)("V_No")),
                                    AgL.XNull(DtTransactionDetail.Rows(0)("ManualRefNo")), AgL.XNull(DtTransactionDetail.Rows(0)("Vendor")),
                                    AgL.XNull(DtTransactionDetail.Rows(0)("V_Date")), Conn, Cmd,, mMultiplyWithMinus, AgL.XNull(DtTransactionDetail.Rows(0)("BillToParty")))
    End Sub

    Private Sub FrmPurchInvoiceDirect_BaseFunction_FIniList() Handles Me.BaseFunction_FIniList
        mQry = "Select * From ItemTypeSetting "
        DtItemTypeSettingsAll = AgL.FillData(mQry, AgL.GCn).Tables(0)

        mQry = "SELECT Ir.*, I.V_Type As ItemV_Type, RI.V_Type As RelatedItemV_Type 
                FROM ItemRelation Ir 
                LEFT JOIN Item I On Ir.Item = I.Code 
                LEFT JOIN Item RI On Ir.RelatedItem = Ri.Code "
        DtItemRelation = AgL.FillData(mQry, AgL.GCn).Tables(0)

        mQry = " Select * From ItemMargin "
        DtItemMargin = AgL.FillData(mQry, AgL.GCn).Tables(0)

        If mV_Type <> "" Then
            mQry = "Select V_Type as Code, Description, NCat, Category, Nature, IsFutureDateTransactionAllowed " &
                   "From Voucher_Type " &
                   "Where V_Type = '" & mV_Type & "' "
            DtVoucher_TypeHelpDataSet = AgL.FillData(mQry, AgL.GCn)
        End If
    End Sub
    Private Sub FInsertLRDetail(DocID As String, ByVal Conn As Object, ByVal Cmd As Object)
        Dim bDescription As String = ""
        Dim bSpecification1 As String = ""
        Dim bMfgDate As String = ""
        Dim bSpecification3 As Decimal = 0
        Dim bSpecification4 As String = ""
        Dim bSpecification5 As String = ""

        mQry = " Select IsNull(L.LRNo, Pit.LRNo) As LRNo, Max(Sg.Name) As TransporterName, Max(Pit.Transporter) As TransporterCode, 
                    Max(L.LRDate) As LRDate, Sum(L.Qty) As Qty, Max(H.Vendor) As Vendor
                    From PurchInvoice H With (NoLock)
                    LEFT JOIN PurchInvoiceDetail L With (NoLock) ON H.DocId = L.DocId
                    LEFT JOIN PurchInvoiceTransport Pit With (NoLock) On H.DocId = Pit.DocId
                    LEFT JOIN SubGroup Sg With (NoLock) On Pit.Transporter = Sg.SubCode
                    LEFT JOIN Item I With (NoLock) On L.Item = I.Code
                    Where L.DocId = '" & DocID & "'
                    And IsNull(L.LRNo, Pit.LRNo) Is Not Null
                    Group By IsNull(L.LRNo, Pit.LRNo) "
        Dim DtLrHeader As DataTable = AgL.FillData(mQry, IIf(AgL.PubServerName = "", Conn, AgL.GcnRead)).Tables(0)

        For I As Integer = 0 To DtLrHeader.Rows.Count - 1
            Dim bStockHeadDocId As String = ""
            Dim bV_Prefix As String = ""
            Dim bV_No As String = ""
            Dim bV_Type As String = Ncat.LrEntry
            Dim bV_Date As String = DglMain.Item(Col1Value, rowV_Date).Value
            Dim bManualRefNo As String = ""

            'bStockHeadDocId = AgL.GetDocId(bV_Type, CStr(bV_No), CDate(bV_Date), IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead), AgL.PubDivCode, AgL.PubSiteCode)
            bStockHeadDocId = AgL.CreateDocId(AgL, "StockHead", bV_Type, CStr(bV_No), CDate(bV_Date), IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead), AgL.PubDivCode, AgL.PubSiteCode)
            bV_Prefix = AgL.DeCodeDocID(bStockHeadDocId, AgLibrary.ClsMain.DocIdPart.VoucherPrefix)
            bV_No = Val(AgL.DeCodeDocID(bStockHeadDocId, AgLibrary.ClsMain.DocIdPart.VoucherNo))

            Dim bManualrefNoPrefix As String = AgL.Dman_Execute("Select IfNull(Ref_Prefix,'') From Voucher_Prefix With (NoLock) Where V_Type = '" & bV_Type & "' 
                                And " & AgL.Chk_Date(bV_Date) & " >= Date_From 
                                And " & AgL.Chk_Date(bV_Date) & " <= Date_To ", IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar()
            bManualRefNo = bManualrefNoPrefix + bV_No.ToString().PadLeft(4).Replace(" ", "0")

            mQry = "INSERT INTO StockHead (DocID, V_Type, V_Prefix, V_Date, V_No, Div_Code, Site_Code, ManualRefNo, SubCode, Transporter, 
                        PartyDocNo, PartyDocDate, GenDocId, EntryBy, EntryDate, LockText)
                        Select " & AgL.Chk_Text(bStockHeadDocId) & " As DocID, " & AgL.Chk_Text(bV_Type) & " As V_Type, 
                        " & AgL.Chk_Text(bV_Prefix) & " As V_Prefix, " & AgL.Chk_Date(bV_Date) & " As V_Date, 
                        " & bV_No & " As V_No, " & AgL.Chk_Text(AgL.PubDivCode) & " As Div_Code, 
                        " & AgL.Chk_Text(AgL.PubSiteCode) & " As Site_Code, " & AgL.Chk_Text(bManualRefNo) & " As ManualRefNo, 
                        " & AgL.Chk_Text(AgL.XNull(DtLrHeader.Rows(I)("Vendor"))) & " As SubCode, 
                        " & AgL.Chk_Text(AgL.XNull(DtLrHeader.Rows(I)("TransporterCode"))) & " As Transporter, 
                        " & AgL.Chk_Text(AgL.XNull(DtLrHeader.Rows(I)("LrNo"))) & " As PartyDocNo, 
                        " & AgL.Chk_Text(AgL.XNull(DtLrHeader.Rows(I)("LrDate"))) & " As PartyDocDate, 
                        " & AgL.Chk_Text(DocID) & " As GenDocId, 
                        " & AgL.Chk_Text(AgL.PubUserName) & " As EntryBy, 
                        " & AgL.Chk_Date(AgL.PubLoginDate) & " As EntryDate,  
                        " & AgL.Chk_Text("Auto Generated From " & DglMain.Item(Col1Value, rowV_Type).Value & " " & DglMain.Item(Col1Value, rowReferenceNo).Value) & " As LockText  
                        "
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)


            bDescription = AgL.XNull(DtLrHeader.Rows(I)("LRNo")) + " -" + AgL.XNull(DtLrHeader.Rows(I)("TransporterName"))
            bSpecification1 = AgL.XNull(DtLrHeader.Rows(I)("LRNo"))
            bMfgDate = AgL.XNull(DtLrHeader.Rows(I)("LRDate"))
            bSpecification3 = AgL.VNull(DtLrHeader.Rows(I)("Qty"))

            Dim bLrCode As Integer = FInsertBarCodeForLR(Conn, Cmd, bStockHeadDocId, 0, AgL.XNull(DtLrHeader.Rows(I)("TransporterCode")), bDescription, ItemCode.Lr, bSpecification1, bMfgDate, bSpecification3,
                               bSpecification4, bSpecification5, "")

            mQry = " UPDATE PurchInvoiceDetail Set LrCode = '" & bLrCode & "' Where DocId = '" & DocID & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

            mQry = " Select Max(H.DocId) As DocId, Max(H.ManualRefNo) As InvoiceNo, IsNull(L.LRNo, Pit.LRNo) As LRNo, Max(L.LRDate) As LRDate, 
                            IsNull(L.BaleNo,Pit.LRNo) As BaleNo, Max(I.ItemCategory) As ItemCategory, Max(L.Godown) As Godown,
                            Max(Sg.Name) As TransporterName, Max(Pit.Transporter) As TransporterCode, 
                            Max(Pit.Weight) As Qty, Max(Pit.Freight) as Amount, Max(H.Net_Amount) As InvoiceAmount, Max(Pit.PrivateMark) As Specification
                            From PurchInvoice H With (NoLock)
                            LEFT JOIN PurchInvoiceDetail L With (NoLock) On H.DocId = L.DocId
                            LEFT JOIN PurchInvoiceTransport Pit With (NoLock) On H.DocId = Pit.DocId
                            LEFT JOIN Item I With (NoLock) On L.Item = I.Code
                            LEFT JOIN SubGroup Sg With (NoLock) On Pit.Transporter = Sg.SubCode
                            Where L.DocId = '" & DocID & "'
                            And IsNull(L.LRNo, Pit.LRNo) Is Not Null And IsNull(L.BaleNo,Pit.LRNo) Is Not Null
                            Group By IsNull(L.LRNo, Pit.LRNo), IsNull(L.BaleNo,Pit.LRNo) "
            Dim DtLrLine As DataTable = AgL.FillData(mQry, IIf(AgL.PubServerName = "", Conn, AgL.GcnRead)).Tables(0)

            Dim bSr As Integer = 0
            For J As Integer = 0 To DtLrLine.Rows.Count - 1
                bSr += 1
                mQry = "Insert Into StockHeadDetail(DocId, Sr, Item, BaleNo, LotNo, Godown, Specification, Pcs, Qty, Unit,Amount) "
                mQry += " Select " & AgL.Chk_Text(bStockHeadDocId) & ", " & bSr & ", " &
                            " " & AgL.Chk_Text(AgL.XNull(DtLrLine.Rows(J)("ItemCategory"))) & ", " &
                            " " & AgL.Chk_Text(AgL.XNull(DtLrLine.Rows(J)("BaleNo"))) & ", " &
                            " " & AgL.Chk_Text(AgL.XNull(DtLrLine.Rows(J)("InvoiceNo"))) & ", " &
                            " " & AgL.Chk_Text(AgL.XNull(DtLrLine.Rows(J)("Godown"))) & ", " &
                            " " & AgL.Chk_Text(AgL.XNull(DtLrLine.Rows(J)("Specification"))) & ", " &
                            " " & Val(AgL.VNull(DtLrLine.Rows(J)("InvoiceAmount"))) & ", " &
                            " " & Val(AgL.VNull(DtLrLine.Rows(J)("Qty"))) & ", " &
                            " 'Kg', " & Val(AgL.VNull(DtLrLine.Rows(J)("Amount"))) & " "
                AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

                InsertLRBaleDetail(bStockHeadDocId, bSr, DtLrLine, J, Conn, Cmd, bLrCode)
            Next

            AgL.UpdateVoucherCounter(bStockHeadDocId, CDate(bV_Date), AgL.GCn, AgL.ECmd, AgL.PubDivCode, AgL.PubSiteCode)
        Next
    End Sub
    Private Function FInsertBarCodeForLR(Conn As Object, Cmd As Object, DocId As String, Sr As Integer,
                                    bTransporterCode As String,
                                    BarCodeDesc As String,
                                    bItemCode As String,
                                   bSpecification1 As String, bMfgDate As String,
                                   bSpecification3 As String, bSpecification4 As String,
                                   bSpecification5 As String, Optional Parent As String = "") As Integer
        Dim bMaxCode As Integer = AgL.Dman_Execute("Select IfNull(Max(Code),0) + 1 From BarCode With (NoLock)", IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar()
        mQry = " INSERT INTO Barcode (Code, Description, Div_Code, Item, 
                    GenDocID, GenSr, Qty, ExpiryDate, 
                    GenSubcode, Specification1, Mfgdate, Specification3, Specification4, Specification5, Parent)
                    Select " & bMaxCode & ", " & AgL.Chk_Text(BarCodeDesc) & ", 
                    " & AgL.Chk_Text(TxtDivision.Tag) & ", " & AgL.Chk_Text(bItemCode) & ",                     
                    " & AgL.Chk_Text(DocId) & " As GenDocID, " & Sr & " As gensr, 1 As qty, 
                    Null As expirydate, 
                    " & AgL.Chk_Text(bTransporterCode) & " As gensubcode, 
                    " & AgL.Chk_Text(bSpecification1) & " As Specification1, 
                    " & AgL.Chk_Date(bMfgDate) & " As Mfgdate, 
                    " & AgL.Chk_Text(bSpecification3) & " As Specification3, 
                    " & AgL.Chk_Text(bSpecification4) & " As Specification4, 
                    " & AgL.Chk_Text(bSpecification5) & " As Specification5,
                    " & AgL.Chk_Text(Parent) & " As Parent "
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

        mQry = " INSERT INTO BarcodeSiteDetail (Code, Div_Code, Site_Code, LastTrnDocID, LastTrnSr, 
                        LastTrnV_Type, LastTrnManualRefNo, LastTrnSubcode, LastTrnProcess, CurrentGodown, Status)
                        Select " & bMaxCode & ", " & AgL.Chk_Text(TxtDivision.Tag) & ", " & AgL.Chk_Text(DglMain.Item(Col1Value, rowSite_Code).Tag) & ", 
                        " & AgL.Chk_Text(DocId) & " As lasttrndocid, " & Sr & " As lasttrnsr,
                        " & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_Type).Tag) & " As lasttrnv_type, 
                        " & AgL.Chk_Text(DglMain.Item(Col1Value, rowReferenceNo).Value) & " As lasttrnmanualrefno, 
                        " & AgL.Chk_Text(bTransporterCode) & " As LastTrnSubcode, 
                        Null As lasttrnprocess, 
                        " & AgL.Chk_Text(bTransporterCode) & " As currentgodown, 
                        'Receive' As status "
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

        mQry = "Insert Into Stock(DocID, TSr, Sr, V_Type, V_Prefix, V_Date, V_No, RecID, Div_Code, Site_Code, 
                        SubCode, SalesTaxGroupParty, Godown, Barcode, Item, 
                        SalesTaxGroupItem,  LotNo, EType_IR, Qty_Iss, Qty_Rec, Unit, UnitMultiplier, DealQty_Iss , DealQty_Rec, DealUnit, 
                        Rate, Amount, Landed_Value, ReferenceDocID, ReferenceTSr, ReferenceDocIDSr) 
                        Select B.GenDocId AS DocID, B.GenSr AS TSr, B.GenSr AS Sr, " & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_Type).Tag) & ", " & AgL.Chk_Text(LblPrefix.Text) & ", 
                        " & AgL.Chk_Date(DglMain.Item(Col1Value, rowV_Date).Value) & ", " & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_No).Value) & ", 
                        " & AgL.Chk_Text(DglMain.Item(Col1Value, rowReferenceNo).Value) & ",  " & AgL.Chk_Text(TxtDivision.Tag) & ", 
                        " & AgL.Chk_Text(DglMain.Item(Col1Value, rowSite_Code).Tag) & ",
                        B.GenSubCode AS SubCode, NULL AS SalesTaxGroupParty, 
                        " & AgL.Chk_Text(bTransporterCode) & " As Godown,
                        B.Code AS Barcode, B.Item,                         
                        NULL AS SalesTaxGroupItem,  NULL AS LotNo, NULL AS EType_IR, 0 AS Qty_Iss, 1 AS Qty_Rec, 
                        I.Unit, NULL AS UnitMultiplier, 0 AS DealQty_Iss , 0 AS DealQty_Rec, NULL AS DealUnit, 
                        0 AS Rate, 0 AS Amount, 0 AS Landed_Value, NULL AS ReferenceDocID, NULL AS ReferenceTSr, 
                        NULL AS ReferenceDocIDSr
                        From Barcode B  
                        LEFT JOIN Item I ON B.Item = I.Code
                        Where B.GenDocId = '" & DocId & "' And B.GenSr = " & Sr & ""
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

        mQry = "INSERT INTO StockHeadDetailBarCodeValues (DocID, Sr, BarcodeLastTrnDocID, BarcodeLastTrnSr, 
                BarcodeLastTrnV_Type, BarcodeLastTrnManualRefNo, BarcodeLastTrnSubcode, BarcodeLastTrnProcess, 
                BarcodeCurrentGodown, BarcodeStatus)
                Select B.GenDocId As DocId, B.GenSr As Sr, Bs.LastTrnDocID As BarcodeLastTrnDocID, 
                Bs.LastTrnSr As BarcodeLastTrnSr, Bs.LastTrnV_Type As BarcodeLastTrnV_Type, 
                Bs.LastTrnManualRefNo As BarcodeLastTrnManualRefNo, Bs.LastTrnSubcode As BarcodeLastTrnSubcode, 
                Bs.LastTrnProcess As BarcodeLastTrnProcess, Bs.CurrentGodown As BarcodeCurrentGodown, 
                Bs.Status As BarcodeStatus
                From Barcode B
                LEFT JOIN (SELECT * FROM BarcodeSiteDetail WHERE Div_Code = '" & AgL.PubDivCode & "' 
                            AND Site_Code = '" & AgL.PubSiteCode & "') AS Bs ON B.Code = Bs.Code
                Where B.GenDocId = '" & DocId & "' And B.GenSr = " & Sr & ""
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

        Return bMaxCode
    End Function
    Private Sub FUpdateBarCode(Conn As Object, Cmd As Object, DocId As String, Sr As Integer,
                               bTransporterCode As String,
                               BarCodeDesc As String,
                               bItemCode As String,
                               bSpecification1 As String, bMfgDate As String,
                               bSpecification3 As String, bSpecification4 As String,
                               bSpecification5 As String)
        mQry = " UPDATE Barcode
                        SET Description = " & AgL.Chk_Text(BarCodeDesc) & ",
	                        Div_Code = " & AgL.Chk_Text(TxtDivision.Tag) & ",
	                        Item = " & AgL.Chk_Text(bItemCode) & ",
	                        Dimension1 = Null,
	                        Dimension2 = Null,
	                        Dimension3 = Null,
	                        Dimension4 = Null,
	                        Qty = 1,
	                        ExpiryDate = Null,
	                        GenSubcode = " & AgL.Chk_Text(bTransporterCode) & ",
	                        Specification1 = " & AgL.Chk_Text(bSpecification1) & ",
	                        MfgDate = " & AgL.Chk_Date(bMfgDate) & ",
	                        Specification3 = " & AgL.Chk_Text(bSpecification3) & ",
	                        Specification4 = " & AgL.Chk_Text(bSpecification4) & ",
	                        Specification5 = " & AgL.Chk_Text(bSpecification5) & "
                            Where GenDocId = '" & DocId & "' And GenSr = " & Sr & ""
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

        mQry = "Update Stock Set
                        V_Type = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_Type).Tag) & ", 
                        V_Prefix = " & AgL.Chk_Text(LblPrefix.Text) & ",
                        V_Date = " & AgL.Chk_Date(DglMain.Item(Col1Value, rowV_Date).Value) & ", 
                        V_No = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_No).Value) & ", 
                        RecId = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowReferenceNo).Value) & ",  
                        Div_Code = " & AgL.Chk_Text(TxtDivision.Tag) & ", 
                        Site_Code = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowSite_Code).Tag) & ",
                        Subcode = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowVendor).Tag) & ", 
                        Godown = " & AgL.Chk_Text(bTransporterCode) & ", 
                        SalesTaxGroupParty = Null,
                        Item = " & AgL.Chk_Text(bItemCode) & ", 
                        Dimension1 = Null, 
                        Dimension2 = Null, 
                        Dimension3 = Null, 
                        Dimension4 = Null, 
                        SalesTaxGroupItem = Null, 
                        LotNo = Null,
                        BaleNo = Null,
                        EType_IR = 'I', 
                        Qty_Iss = 0,
                        Qty_Rec = 1, 
                        Unit = 'Nos',
                        UnitMultiplier = 1,
                        DealQty_Iss = 0, 
                        DealQty_Rec =0,  
                        DealUnit = Null ,
                        Rate = 0, 
                        Amount = 0,
                        Landed_Value = 0,
                        ReferenceDocId = Null, 
                        ReferenceTSr = Null, 
                        ReferenceDocIdSr = NUll
                        Where DocId = '" & DocId & "' And Sr = " & Sr & ""
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
    End Sub
    Private Sub InsertLRBaleDetail(DocID As String, Sr As Integer, DtLrBaleDetail As DataTable,
                                        bRowIndex As Integer, ByVal Conn As Object, ByVal Cmd As Object,
                                        LrCode As Integer)
        Dim bDescription As String = ""
        Dim bSpecification1 As String = ""
        Dim bMfgDate As String = ""
        Dim bSpecification3 As Decimal = 0
        Dim bSpecification4 As String = ""
        Dim bSpecification5 As String = ""

        bDescription = AgL.XNull(DtLrBaleDetail.Rows(bRowIndex)("LrNo")) + " -" + AgL.XNull(DtLrBaleDetail.Rows(bRowIndex)("TransporterName")) + "-" + "Bale No : " + AgL.XNull(DtLrBaleDetail.Rows(bRowIndex)("BaleNo"))
        bSpecification1 = AgL.XNull(DtLrBaleDetail.Rows(bRowIndex)("BaleNo"))
        bMfgDate = AgL.XNull(DtLrBaleDetail.Rows(bRowIndex)("LrDate"))
        bSpecification3 = AgL.VNull(DtLrBaleDetail.Rows(bRowIndex)("Qty"))
        bSpecification5 = AgL.XNull(DtLrBaleDetail.Rows(bRowIndex)("LrNo"))

        Dim bLrBaleCode As Integer = FInsertBarCodeForLR(Conn, Cmd, DocID, Sr, AgL.XNull(DtLrBaleDetail.Rows(bRowIndex)("TransporterCode")),
                                   bDescription, ItemCode.LrBale, bSpecification1, bMfgDate, bSpecification3,
                                   bSpecification4, bSpecification5, LrCode)

        mQry = " UPDATE PurchInvoiceDetail Set LrBaleCode = '" & bLrBaleCode & "'
                Where DocId = '" & AgL.XNull(DtLrBaleDetail.Rows(bRowIndex)("DocId")) & "'
                And BaleNo = '" & AgL.XNull(DtLrBaleDetail.Rows(bRowIndex)("BaleNo")) & "'"
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
    End Sub
    Private Sub FUpdateLRDetail(DocID As String, ByVal Conn As Object, ByVal Cmd As Object)
        Dim bDescription As String = ""
        Dim bSpecification1 As String = ""
        Dim bMfgDate As String = ""
        Dim bSpecification3 As Decimal = 0
        Dim bSpecification4 As String = ""
        Dim bSpecification5 As String = ""

        mQry = " Select L.LRCode, Max(Bc.GenDocId) As StockHeadDocId, 
                    Max(IsNull(L.LRNo, Pit.LRNo)) As LRNo, Max(Sg.Name) As TransporterName, Max(Pit.Transporter) As TransporterCode, 
                    Max(L.LRDate) As LRDate, Sum(L.Qty) As Qty, Max(H.Vendor) As Vendor, Max(H.V_Date) As InvoiceDate
                    From PurchInvoice H With (NoLock)
                    LEFT JOIN PurchInvoiceDetail L With (NoLock) ON H.DocId = L.DocId
                    LEFT JOIN PurchInvoiceTransport Pit With (NoLock) On H.DocId = Pit.DocId
                    LEFT JOIN SubGroup Sg On Pit.Transporter = Sg.SubCode
                    LEFT JOIN Item I On L.Item = I.Code
                    LEFT JOIN Barcode Bc On L.LRCode = Bc.Code
                    Where L.DocId = '" & DocID & "'
                    And L.LRCode Is Not Null
                    Group By L.LRCode "
        Dim DtLrHeader As DataTable = AgL.FillData(mQry, IIf(AgL.PubServerName = "", Conn, AgL.GcnRead)).Tables(0)

        For I As Integer = 0 To DtLrHeader.Rows.Count - 1
            mQry = " UPDATE StockHead
                    Set V_Date = " & AgL.Chk_Text(AgL.XNull(DtLrHeader.Rows(I)("InvoiceDate"))) & ", 
                        SubCode = " & AgL.Chk_Text(AgL.XNull(DtLrHeader.Rows(I)("Vendor"))) & ", 
                        Transporter = " & AgL.Chk_Text(AgL.XNull(DtLrHeader.Rows(I)("TransporterCode"))) & ", 
                        PartyDocNo = " & AgL.Chk_Text(AgL.XNull(DtLrHeader.Rows(I)("LrNo"))) & ", 
                        PartyDocDate = " & AgL.Chk_Text(AgL.XNull(DtLrHeader.Rows(I)("LrDate"))) & ", 
                        GenDocId = " & AgL.Chk_Text(DocID) & ", 
                        EntryBy = " & AgL.Chk_Text(AgL.PubUserName) & ", 
                        EntryDate = " & AgL.Chk_Date(AgL.PubLoginDate) & ",  
                        LockText = " & AgL.Chk_Text("Auto Generated From " & DglMain.Item(Col1Value, rowV_Type).Value & " " & DglMain.Item(Col1Value, rowReferenceNo).Value) & "
                        Where DocId = " & AgL.Chk_Text(AgL.XNull(DtLrHeader.Rows(I)("StockHeadDocId"))) & ""
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)


            bDescription = AgL.XNull(DtLrHeader.Rows(I)("LRNo")) + " -" + AgL.XNull(DtLrHeader.Rows(I)("TransporterName"))
            bSpecification1 = AgL.XNull(DtLrHeader.Rows(I)("LRNo"))
            bMfgDate = AgL.XNull(DtLrHeader.Rows(I)("LRDate"))
            bSpecification3 = AgL.VNull(DtLrHeader.Rows(I)("Qty"))

            FUpdateBarCode(Conn, Cmd, AgL.XNull(DtLrHeader.Rows(I)("StockHeadDocId")), 0,
                                    AgL.XNull(DtLrHeader.Rows(I)("TransporterCode")), bDescription, ItemCode.Lr, bSpecification1, bMfgDate, bSpecification3,
                                    bSpecification4, bSpecification5)

            mQry = " Select L.LrBaleCode, Max(Bc.GenDocId) As StockHeadDocId, Max(Bc.GenSr) As StockHeadSr,
                            Max(H.ManualRefNo) As InvoiceNo, Max(IsNull(L.LRNo, Pit.LRNo)) As LRNo, Max(L.LRDate) As LRDate, 
                            Max(IsNull(L.BaleNo,Pit.LRNo)) As BaleNo, Max(I.ItemCategory) As ItemCategory, Max(L.Godown) As Godown,
                            Max(Sg.Name) As TransporterName, Max(Pit.Transporter) As TransporterCode, 
                            Max(Pit.Weight) As Qty, Max(Pit.Freight) as Amount, Max(H.Net_Amount) As InvoiceAmount, Max(Pit.PrivateMark) As Specification
                            From PurchInvoice H With (NoLock)
                            LEFT JOIN PurchInvoiceDetail L With (NoLock) On H.DocId = L.DocId
                            LEFT JOIN PurchInvoiceTransport Pit With (NoLock) On H.DocId = Pit.DocId
                            LEFT JOIN Item I With (NoLock) On L.Item = I.Code
                            LEFT JOIN SubGroup Sg With (NoLock) On Pit.Transporter = Sg.SubCode
                            LEFT JOIN Barcode Bc With (NoLock) On L.LrBaleCode = Bc.Code
                            Where L.DocId = '" & DocID & "'
                            And L.LrBaleCode Is Not Null
                            Group By L.LrBaleCode "
            Dim DtLrLine As DataTable = AgL.FillData(mQry, IIf(AgL.PubServerName = "", Conn, AgL.GcnRead)).Tables(0)

            Dim bSr As Integer = 0
            For J As Integer = 0 To DtLrLine.Rows.Count - 1
                bSr += 1
                mQry = " UPDATE StockHeadDetail
                            Set Item = " & AgL.Chk_Text(AgL.XNull(DtLrLine.Rows(J)("ItemCategory"))) & ", 
                            BaleNo = " & AgL.Chk_Text(AgL.XNull(DtLrLine.Rows(J)("BaleNo"))) & ", 
                            LotNo = " & AgL.Chk_Text(AgL.XNull(DtLrLine.Rows(J)("InvoiceNo"))) & ", 
                            Godown = " & AgL.Chk_Text(AgL.XNull(DtLrLine.Rows(J)("Godown"))) & ", 
                            Specification = " & AgL.Chk_Text(AgL.XNull(DtLrLine.Rows(J)("Specification"))) & ", 
                            Pcs = " & Val(AgL.VNull(DtLrLine.Rows(J)("InvoiceAmount"))) & ", 
                            Qty = " & Val(AgL.VNull(DtLrLine.Rows(J)("Qty"))) & ", 
                            Unit = 'Kg', 
                            Amount = " & Val(AgL.VNull(DtLrLine.Rows(J)("Amount"))) & " 
                            Where DocId = " & AgL.Chk_Text(AgL.XNull(DtLrLine.Rows(I)("StockHeadDocId"))) & "
                            And Sr = " & Val(AgL.VNull(DtLrLine.Rows(I)("StockHeadSr"))) & ""
                AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

                UpdateLRBaleDetail(AgL.XNull(DtLrHeader.Rows(I)("StockHeadDocId")),
                                   AgL.VNull(DtLrLine.Rows(I)("StockHeadSr")),
                                   DtLrLine, J, Conn, Cmd)
            Next
        Next
    End Sub
    Private Sub UpdateLRBaleDetail(DocID As String, Sr As Integer, DtLrBaleDetail As DataTable,
                                   bRowIndex As Integer, ByVal Conn As Object, ByVal Cmd As Object)
        Dim bDescription As String = ""
        Dim bSpecification1 As String = ""
        Dim bMfgDate As String = ""
        Dim bSpecification3 As Decimal = 0
        Dim bSpecification4 As String = ""
        Dim bSpecification5 As Decimal = 0

        For I As Integer = 0 To Dgl1.Rows.Count - 1
            If Dgl1.Item(Col1Item, I).Value <> "" Then
                bDescription = Dgl1.Item(Col1LRNo, I).Value + " -" + CType(Dgl2.Item(Col1Value, rowBtnTransportDetail).Tag, FrmPurchaseInvoiceHeader).Dgl1.Item(FrmPurchaseInvoiceHeader.Col1Value, FrmPurchaseInvoiceHeader.rowTransporter).Value + "-" + "Bale No : " + Dgl1.Item(Col1BaleNo, bRowIndex).Value
                bSpecification1 = Dgl1.Item(Col1BaleNo, bRowIndex).Value
                bMfgDate = Dgl1.Item(Col1LRDate, I).Value
                bSpecification3 = Val(Dgl1.Item(Col1Qty, bRowIndex).Value)
                bSpecification5 = Dgl1.Item(Col1LRNo, I).Value

                FUpdateBarCode(Conn, Cmd, DocID, Sr, AgL.XNull(DtLrBaleDetail.Rows(bRowIndex)("TransporterCode")),
                                   bDescription, ItemCode.LrBale, bSpecification1, bMfgDate, bSpecification3,
                                   bSpecification4, bSpecification5)
            End If
        Next
    End Sub
    Private Sub FrmPurchInvoiceDirect_BaseEvent_Topctrl_tbMore() Handles Me.BaseEvent_Topctrl_tbMore
        MnuOptions.Show(Topctrl1, Topctrl1.btbSite.Rectangle.X, Topctrl1.btbSite.Rectangle.Y + Topctrl1.btbSite.Rectangle.Size.Height)
    End Sub
    Private Sub ShowAttachments()
        Dim FrmObj As New AgLibrary.FrmAttachmentViewer(AgL)
        FrmObj.LblDocNo.Text = "Document No. : " + DglMain.Item(Col1Value, rowReferenceNo).Value
        FrmObj.SearchCode = mSearchCode
        FrmObj.TableName = "SubGroupAttachments"
        FrmObj.StartPosition = FormStartPosition.CenterParent
        FrmObj.ShowDialog()
        FrmObj.Dispose()
        FrmObj = Nothing
        SetAttachmentCaption()
    End Sub
    Private Sub SetAttachmentCaption()
        Dim AttachmentPath As String = PubAttachmentPath + mSearchCode + "\"
        If Directory.Exists(AttachmentPath) Then
            Dim FileCount As Integer = Directory.GetFiles(AttachmentPath).Count
            If FileCount > 0 Then Dgl2.Item(Col1Value, rowBtnAttachments).Value = FileCount.ToString + IIf(FileCount = 1, " Attachment", " Attachments") Else Dgl2.Item(Col1Value, rowBtnAttachments).Value = ""
        Else
            Dgl2.Item(Col1Value, rowBtnAttachments).Value = ""
        End If
    End Sub
    Private Sub FShowRefrentialEntries(bDocId As String)
        Dim FrmObj As New FrmReferenceEntries()
        FrmObj.SearchCode = bDocId
        FrmObj.LblDocNo.Text = "Entry No : " + DglMain.Item(Col1Value, rowReferenceNo).Value
        FrmObj.StartPosition = FormStartPosition.CenterParent
        FrmObj.MdiParent = Me.MdiParent
        FrmObj.Show()
    End Sub
    Private Sub FShowHistory(SearchCode As String)
        Dim StrSenderText As String = "Log Report"
        GridReportFrm = New AgLibrary.FrmRepDisplay(StrSenderText, AgL)
        GridReportFrm.Filter_IniGrid()
        Dim CRep As ClsReports = New ClsReports(GridReportFrm)
        CRep.GRepFormName = Replace(Replace(Replace(Replace(StrSenderText, "&", ""), " ", ""), "(", ""), ")", "")
        CRep.Ini_Grid()
        ClsMain.FAdjustBackgroudMaximizedWindow(Me.MdiParent)
        GridReportFrm.MdiParent = Me.MdiParent
        GridReportFrm.Show()
        CRep.ProcLogReport(,, SearchCode)
    End Sub
    Private Sub Dgl2_CellEnter(sender As Object, e As DataGridViewCellEventArgs) Handles Dgl2.CellEnter
        Try
            Dim mRow As Integer
            Dim mColumn As Integer
            mRow = Dgl2.CurrentCell.RowIndex
            mColumn = Dgl2.CurrentCell.ColumnIndex

            Dgl2.AgHelpDataSet(Dgl2.CurrentCell.ColumnIndex) = Nothing
            CType(Dgl2.Columns(Col1Value), AgControls.AgTextColumn).AgValueType = AgControls.AgTextColumn.TxtValueType.Text_Value
            CType(Dgl2.Columns(Col1Value), AgControls.AgTextColumn).MaxInputLength = 0

            Select Case mRow
                Case rowVendorDocDate, rowDeliveryDate
                    CType(Dgl2.Columns(Col1Value), AgControls.AgTextColumn).AgValueType = AgControls.AgTextColumn.TxtValueType.Date_Value
                    If Dgl2.Item(Col1Value, rowVendorDocDate).Value = "" Then
                        Dgl2.Item(Col1Value, rowVendorDocDate).Value = DglMain.Item(Col1Value, rowV_Date).Value
                    End If
                Case rowPaidAmount
                    Dgl2.Item(Col1Value, rowPaidAmount).ReadOnly = True
                Case rowStockInNo
                    Dgl2.Item(Col1Value, rowStockInNo).ReadOnly = True
            End Select
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub
    Private Sub Dgl2_CellContentClick(sender As Object, e As DataGridViewCellEventArgs) Handles Dgl2.CellContentClick
        Select Case e.RowIndex
            Case rowBtnTransportDetail
                ShowPurchInvoiceHeader()
            Case rowPaidAmount
                ShowPurchInvoicePayment()
            Case rowBtnPendingPurchPlan
                FOpenPurchPlanForPurchOrder(-1)
            Case rowCatalog
                ShowCatalogDetail()
            Case rowBtnPendingPurchOrder
                If FDivisionNameForCustomization(14) = "PRATHAM APPARE" Or
            FDivisionNameForCustomization(15) = "AGARWAL UNIFORM" Then
                    FOpenSelectedPurchOrderBalanceForPurchReceive()
                Else
                    'FOpenPendingPurchaseOrderOption()
                    FOpenPurchOrderForPurchInvoice(-1)
                End If
            Case rowBtnPendingStockReceive
                FOpenPurchReceiveForPurchInvoice(-1)
            Case rowBtnStockBalance
                If FDivisionNameForCustomization(14) = "PRATHAM APPARE" Or
            FDivisionNameForCustomization(15) = "AGARWAL UNIFORM" Then
                    FOpenSelectedStock()
                Else
                    FOpenStockBalanceOption()
                End If
            Case rowBtnPendingSaleInvoiceForPurchInvoice
                FOpenSaleOrderForPurchInvoice_FallPico(-1)
            Case rowBtnMaterialIssue
                If FDivisionNameForCustomization(14) = "PRATHAM APPARE" Or
            FDivisionNameForCustomization(15) = "AGARWAL UNIFORM" Then
                    FMaterialIssueForJob(mSearchCode)
                Else
                    FMaterialIssue()
                End If
            Case rowBtnAttachments
                ShowAttachments()
        End Select
    End Sub
    Private Sub FrmPurchInvoiceDirect_BaseEvent_DglMainContentClick(sender As Object, e As DataGridViewCellEventArgs) Handles Me.BaseEvent_DglMainContentClick
        Try
            Select Case DglMain.Columns(e.ColumnIndex).Name
                Case Col1BtnDetail
                    If Topctrl1.Mode = "Add" Then
                        ShowPurchaseInvoiceParty("", DglMain.Item(Col1Value, rowVendor).Tag, TxtNature.Text)
                    Else
                        ShowPurchaseInvoiceParty(mSearchCode, "", TxtNature.Text)
                    End If
            End Select
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub
    Private Sub FOpenPendingPurchaseOrderOption()
        mQry = "Select 'Show Order Balance' As Code, 'Show Order Balance' As Name 
                UNION ALL 
                Select 'Show Selected Order Balance' As Code, 'Show Selected Order Balance' As Name "
        Dim DtOptions As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)

        Dim FRH_Single As DMHelpGrid.FrmHelpGrid
        FRH_Single = New DMHelpGrid.FrmHelpGrid(New DataView(DtOptions), "", 350, 300, 150, 520, False)
        FRH_Single.FFormatColumn(0, , 0, , False)
        FRH_Single.FFormatColumn(1, "Option", 200, DataGridViewContentAlignment.MiddleLeft)
        FRH_Single.StartPosition = FormStartPosition.Manual
        FRH_Single.ShowDialog()

        Dim bChoosenOption As String = ""
        If FRH_Single.BytBtnValue = 0 Then
            bChoosenOption = FRH_Single.DRReturn(1)
        End If

        If bChoosenOption = "Show Order Balance" Then
            FOpenPurchOrderForPurchInvoice(-1)
        ElseIf bChoosenOption = "Show Selected Order Balance" Then
            FOpenSelectedPurchOrderBalanceForPurchReceive()
        End If
    End Sub
    Private Sub FOpenSelectedPurchOrderBalanceForPurchReceive(Optional FrmObj As FrmPurchInvoiceOrderSelection = Nothing)
        If FrmObj Is Nothing Then
            FrmObj = New FrmPurchInvoiceOrderSelection
            FrmObj.PartyCode = DglMain.Item(Col1Value, rowVendor).Tag
            FrmObj.V_Type = LblV_Type.Tag
            FrmObj.V_Date = DglMain.Item(Col1Value, rowV_Date).Value
            FrmObj.PartyCode = DglMain.Item(Col1Value, rowVendor).Tag
            FrmObj.ProcessCode = DglMain.Item(Col1Value, rowProcess).Tag
            FrmObj.EntryMode = Topctrl1.Mode
            FrmObj.IniGrid(mSearchCode)
            Dgl2.Item(Col1Value, rowBtnPendingPurchOrder).Tag = FrmObj
            FrmObj.StartPosition = FormStartPosition.CenterScreen
            FrmObj.ShowDialog()
        Else
            FrmObj.FFillOrderBalance()
            FrmObj.ShowDialog()
        End If

        If FrmObj.mOkButtonPressed = False Then Exit Sub

        Dim mRow As Integer = -1

        If mRow < 0 Then
            If Dgl1.Rows.Count > 1 Then
                mRow = Dgl1.Rows.Count - 1
            Else
                mRow = 0
            End If
        End If

        If Dgl1.Rows(mRow).IsNewRow = False Then
            Dgl1.Rows.Remove(Dgl1.Rows(mRow))
        End If
        Dim bRowCount As Integer = 0
        For I As Integer = 0 To FrmObj.Dgl1.Rows.Count - 1
            If Val(FrmObj.Dgl1.Item(FrmPurchInvoiceOrderSelection.Col1ReceiveQty, I).Value) > 0 Then
                bRowCount += 1
            End If
        Next

        If bRowCount = 0 Then Exit Sub

        Dim Cnt As Integer = 0
        Dgl1.Rows.Insert(mRow, bRowCount)
        For I As Integer = 0 To FrmObj.Dgl1.Rows.Count - 1
            If Val(FrmObj.Dgl1.Item(FrmPurchInvoiceOrderSelection.Col1ReceiveQty, I).Value) > 0 Then
                Dgl1.Item(Col1ItemType, mRow + Cnt).Tag = FrmObj.Dgl1.Item(FrmPurchInvoiceOrderSelection.Col1ItemType, I).Tag
                Dgl1.Item(Col1ItemType, mRow + Cnt).Value = FrmObj.Dgl1.Item(FrmPurchInvoiceOrderSelection.Col1ItemType, I).Value

                Dgl1.Item(Col1SKU, mRow + Cnt).Tag = FrmObj.Dgl1.Item(FrmPurchInvoiceOrderSelection.Col1Sku, I).Tag
                Dgl1.Item(Col1SKU, mRow + Cnt).Value = FrmObj.Dgl1.Item(FrmPurchInvoiceOrderSelection.Col1Sku, I).Value

                Dgl1.Item(Col1ItemCategory, mRow + Cnt).Tag = FrmObj.Dgl1.Item(FrmPurchInvoiceOrderSelection.Col1ItemCategory, I).Tag
                Dgl1.Item(Col1ItemCategory, mRow + Cnt).Value = FrmObj.Dgl1.Item(FrmPurchInvoiceOrderSelection.Col1ItemCategory, I).Value

                Dgl1.Item(Col1ItemGroup, mRow + Cnt).Tag = FrmObj.Dgl1.Item(FrmPurchInvoiceOrderSelection.Col1ItemGroup, I).Tag
                Dgl1.Item(Col1ItemGroup, mRow + Cnt).Value = FrmObj.Dgl1.Item(FrmPurchInvoiceOrderSelection.Col1ItemGroup, I).Value

                Dgl1.Item(Col1Item, mRow + Cnt).Tag = FrmObj.Dgl1.Item(FrmPurchInvoiceOrderSelection.Col1Item, I).Tag
                Dgl1.Item(Col1Item, mRow + Cnt).Value = FrmObj.Dgl1.Item(FrmPurchInvoiceOrderSelection.Col1Item, I).Value

                Dgl1.Item(Col1Dimension1, mRow + Cnt).Tag = FrmObj.Dgl1.Item(FrmPurchInvoiceOrderSelection.Col1Dimension1, I).Tag
                Dgl1.Item(Col1Dimension1, mRow + Cnt).Value = FrmObj.Dgl1.Item(FrmPurchInvoiceOrderSelection.Col1Dimension1, I).Value

                Dgl1.Item(Col1Dimension2, mRow + Cnt).Tag = FrmObj.Dgl1.Item(FrmPurchInvoiceOrderSelection.Col1Dimension2, I).Tag
                Dgl1.Item(Col1Dimension2, mRow + Cnt).Value = FrmObj.Dgl1.Item(FrmPurchInvoiceOrderSelection.Col1Dimension2, I).Value

                Dgl1.Item(Col1Dimension3, mRow + Cnt).Tag = FrmObj.Dgl1.Item(FrmPurchInvoiceOrderSelection.Col1Dimension3, I).Tag
                Dgl1.Item(Col1Dimension3, mRow + Cnt).Value = FrmObj.Dgl1.Item(FrmPurchInvoiceOrderSelection.Col1Dimension3, I).Value

                Dgl1.Item(Col1Dimension4, mRow + Cnt).Tag = FrmObj.Dgl1.Item(FrmPurchInvoiceOrderSelection.Col1Dimension4, I).Tag
                Dgl1.Item(Col1Dimension4, mRow + Cnt).Value = FrmObj.Dgl1.Item(FrmPurchInvoiceOrderSelection.Col1Dimension4, I).Value

                Dgl1.Item(Col1Size, mRow + Cnt).Tag = FrmObj.Dgl1.Item(FrmPurchInvoiceOrderSelection.Col1Size, I).Tag
                Dgl1.Item(Col1Size, mRow + Cnt).Value = FrmObj.Dgl1.Item(FrmPurchInvoiceOrderSelection.Col1Size, I).Value


                Dgl1.Item(Col1Qty, mRow + Cnt).Value = FrmObj.Dgl1.Item(FrmPurchInvoiceOrderSelection.Col1ReceiveQty, I).Value
                Dgl1.Item(Col1DocQty, mRow + Cnt).Value = FrmObj.Dgl1.Item(FrmPurchInvoiceOrderSelection.Col1ReceiveQty, I).Value
                Dgl1.Item(Col1Unit, mRow + Cnt).Value = FrmObj.Dgl1.Item(FrmPurchInvoiceOrderSelection.Col1Unit, I).Value
                Dgl1.Item(Col1Unit, mRow + Cnt).Tag = FrmObj.Dgl1.Item(FrmPurchInvoiceOrderSelection.Col1Unit, I).Tag

                Dgl1.Item(Col1RawMaterial, mRow + Cnt).Tag = FrmObj.Dgl1.Item(FrmPurchInvoiceOrderSelection.Col1RawMaterial, I).Tag
                Dgl1.Item(Col1RawMaterial, mRow + Cnt).Value = FrmObj.Dgl1.Item(FrmPurchInvoiceOrderSelection.Col1RawMaterial, I).Value
                Dgl1.Item(Col1ReferenceDocIdBalanceQty, mRow + Cnt).Value = FrmObj.Dgl1.Item(FrmPurchInvoiceOrderSelection.Col1BalanceQty, I).Value

                Dgl1.Item(Col1ReferenceDocID, mRow + Cnt).Value = FrmObj.Dgl1.Item(FrmPurchInvoiceOrderSelection.Col1ReferenceDocId, I).Tag
                Dgl1.Item(Col1ReferenceNo, mRow + Cnt).Value = FrmObj.Dgl1.Item(FrmPurchInvoiceOrderSelection.Col1ReferenceDocId, I).Value
                Dgl1.Item(Col1ReferenceTSr, mRow + Cnt).Value = FrmObj.Dgl1.Item(FrmPurchInvoiceOrderSelection.Col1ReferenceDocIdTSr, I).Value
                Dgl1.Item(Col1ReferenceSr, mRow + Cnt).Value = FrmObj.Dgl1.Item(FrmPurchInvoiceOrderSelection.Col1ReferenceDocIdSr, I).Value

                Dgl1.Item(Col1ReferenceDocIdDate, mRow + Cnt).Value = FrmObj.Dgl1.Item(FrmPurchInvoiceOrderSelection.Col1ReferenceDocIdDate, I).Value

                Dgl1.Item(Col1RawMaterialConsumptionQty, mRow + Cnt).Value = FGetFabricConsumption_Garment(mRow + Cnt)


                If (Dgl1.Item(Col1Unit, mRow + Cnt).Tag) Then
                    Dgl1.Item(Col1DocQty, mRow + Cnt).Style.ForeColor = Color.Blue
                    ShowPurchInvoiceDimensionDetail(mRow + Cnt, False)
                    CType(Dgl1.Item(Col1DocQty, mRow + Cnt).Tag, FrmPurchaseInvoiceDimension_WithDimension).Dgl1.Item(FrmPurchaseInvoiceDimension_WithDimension.Col1Qty, 0).Value = Dgl1.Item(Col1Qty, mRow + Cnt).Value
                    CType(Dgl1.Item(Col1DocQty, mRow + Cnt).Tag, FrmPurchaseInvoiceDimension_WithDimension).Dgl1.Item(FrmPurchaseInvoiceDimension_WithDimension.Col1TotalQty, 0).Value = Dgl1.Item(Col1Qty, mRow + Cnt).Value
                    CType(Dgl1.Item(Col1DocQty, mRow + Cnt).Tag, FrmPurchaseInvoiceDimension_WithDimension).Calculation()
                End If

                mQry = "INSERT INTO StockVirtual (DocID, TSr, Sr, V_Type, V_Prefix, V_Date, V_No, Div_Code, Site_Code, SubCode, Process, 
                        Godown, Item, Qty_Iss, Qty_Rec, Unit, ReferenceDocId, ReferenceTSr) 
                        Select '" & mSearchCode & "' As DocID, " & I & " As TSr, " & I & " As Sr, 
                        " & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_Type).Tag) & " As V_Type, 
                        " & AgL.Chk_Text(LblPrefix.Text) & " As V_Prefix, 
                        " & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_Date).Tag) & " As V_Date, 
                        " & Val(DglMain.Item(Col1Value, rowV_No).Tag) & " As V_No, 
                        " & AgL.Chk_Text(TxtDivision.Tag) & " As Div_Code, 
                        " & AgL.Chk_Text(DglMain.Item(Col1Value, rowSite_Code).Tag) & " As Site_Code, 
                        " & AgL.Chk_Text(DglMain.Item(Col1Value, rowVendor).Tag) & " As SubCode, 
                        " & AgL.Chk_Text(DglMain.Item(Col1Value, rowProcess).Tag) & " As Process, 
                        " & AgL.Chk_Text(Dgl2.Item(Col1Value, rowGodown).Tag) & " As Godown, 
                        " & AgL.Chk_Text(Dgl1.Item(Col1SKU, mRow + Cnt).Tag) & " As Item, 
                        0 As Qty_Iss, 
                        " & Val(Dgl1.Item(Col1Qty, mRow + Cnt).Value) & " As Qty_Rec, 
                        " & AgL.Chk_Text(Dgl1.Item(Col1Unit, mRow + Cnt).Value) & " As Unit, 
                        " & AgL.Chk_Text(Dgl1.Item(Col1ReferenceDocID, mRow + Cnt).Value) & " As ReferenceDocId,
                        " & Val(Dgl1.Item(Col1ReferenceTSr, mRow + Cnt).Value) & " As ReferenceTSr "
                AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)

                Cnt = Cnt + 1
            End If
        Next

        For I As Integer = 0 To Dgl1.Rows.Count - 1
            Dgl1.Item(ColSNo, I).Value = I + 1
            FGeterateSkuName(I)
        Next
        Calculation()

        FOpenSelectedPurchOrderBalanceForPurchReceive(CType(Dgl2.Item(Col1Value, rowBtnPendingPurchOrder).Tag, FrmPurchInvoiceOrderSelection))
    End Sub
    Private Sub FGetProcessFromVoucher_Type()
        If DglMain.Item(Col1Head, rowProcess).Tag Is Nothing Then
            DglMain.Item(Col1Head, rowProcess).Tag = FCreateHelpProcess()
        End If

        If CType(DglMain.Item(Col1Head, rowProcess).Tag, DataSet).Tables(0).Rows.Count = 1 Then
            DglMain.Item(Col1Value, rowProcess).Tag = CType(DglMain.Item(Col1Head, rowProcess).Tag, DataSet).Tables(0).Rows(0)("Code")
        Else
            If LblV_Type.Tag = Ncat.PurchaseOrder Or LblV_Type.Tag = Ncat.PurchaseOrderCancel Or
                LblV_Type.Tag = Ncat.PurchaseInvoice Or LblV_Type.Tag = Ncat.PurchaseReturn Then
                DglMain.Item(Col1Value, rowProcess).Tag = Process.Purchase
            End If
        End If

        If AgL.XNull(DglMain.Item(Col1Value, rowProcess).Tag) <> "" Then
            DglMain.Item(Col1Value, rowProcess).Value = AgL.XNull(AgL.Dman_Execute("Select Name From SubGroup 
                                Where SubCode = '" & DglMain.Item(Col1Value, rowProcess).Tag & "'", AgL.GCn).ExecuteScalar())
        End If
        FGetProcessDetail()
    End Sub
    Private Sub FGeterateSkuName(bRowIndex As Integer)
        If Dgl1.Item(Col1ItemCategory, bRowIndex).Value <> "" Or
                Dgl1.Item(Col1ItemGroup, bRowIndex).Value <> "" Or
                Dgl1.Item(Col1Item, bRowIndex).Value <> "" Or
                Dgl1.Item(Col1Dimension1, bRowIndex).Value <> "" Or
                Dgl1.Item(Col1Dimension2, bRowIndex).Value <> "" Or
                Dgl1.Item(Col1Dimension3, bRowIndex).Value <> "" Or
                Dgl1.Item(Col1Dimension4, bRowIndex).Value <> "" Or
                Dgl1.Item(Col1Size, bRowIndex).Value <> "" Then
            Dgl1.Item(Col1SKU, bRowIndex).Value = Dgl1.Item(Col1ItemCategory, bRowIndex).Value + " " +
                                    Dgl1.Item(Col1ItemGroup, bRowIndex).Value + " " +
                                    Dgl1.Item(Col1Item, bRowIndex).Value + " " +
                                    Dgl1.Item(Col1Dimension1, bRowIndex).Value + " " +
                                    Dgl1.Item(Col1Dimension2, bRowIndex).Value + " " +
                                    Dgl1.Item(Col1Dimension3, bRowIndex).Value + " " +
                                    Dgl1.Item(Col1Dimension4, bRowIndex).Value + " " +
                                    Dgl1.Item(Col1Size, bRowIndex).Value

            Dim DrSKU As DataRow() = AgL.PubDtItem.Select(" IsNull(ItemCategory,'') = '" & Dgl1.Item(Col1ItemCategory, bRowIndex).Tag & "'
                                    And IsNull(ItemGroup,'') = '" & Dgl1.Item(Col1ItemGroup, bRowIndex).Tag & "'
                                    And IsNull(BaseItem,'') = '" & Dgl1.Item(Col1Item, bRowIndex).Tag & "'
                                    And IsNull(Dimension1,'') = '" & Dgl1.Item(Col1Dimension1, bRowIndex).Tag & "'
                                    And IsNull(Dimension2,'') = '" & Dgl1.Item(Col1Dimension2, bRowIndex).Tag & "'
                                    And IsNull(Dimension3,'') = '" & Dgl1.Item(Col1Dimension3, bRowIndex).Tag & "'
                                    And IsNull(Dimension4,'') = '" & Dgl1.Item(Col1Dimension4, bRowIndex).Tag & "'
                                    And IsNull(Size,'') = '" & Dgl1.Item(Col1Size, bRowIndex).Tag & "'")
            If DrSKU.Length > 0 Then
                Dgl1.Item(Col1SKU, bRowIndex).Tag = AgL.XNull(DrSKU(0)("Code"))
                FShowTransactionHistory(Dgl1.Item(Col1SKU, bRowIndex).Tag)
            End If
        Else
            Dgl1.Item(Col1SKU, bRowIndex).Value = ""
        End If
    End Sub
    Private Sub FrmPurchInvoiceDirect_BaseEvent_DglMainKeyDown(sender As Object, e As KeyEventArgs) Handles Me.BaseEvent_DglMainKeyDown
        Try
            If DglMain.CurrentCell IsNot Nothing Then
                If e.KeyCode = Keys.Enter Then
                    Dim LastCell As DataGridViewCell = ClsMain.LastDisplayedCell(DglMain)
                    If DglMain.CurrentCell.RowIndex = LastCell.RowIndex Then
                        If Dgl2.Visible Then
                            Dgl2.CurrentCell = Dgl2.Item(Col1Value, Dgl2.FirstDisplayedCell.RowIndex)
                            Dgl2.Focus()
                        Else
                            Dgl1.CurrentCell = Dgl1.FirstDisplayedCell
                            Dgl1.Focus()
                        End If
                    End If
                End If
            End If
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub
    Private Sub Dgl1_CellBeginEdit(sender As Object, e As DataGridViewCellCancelEventArgs) Handles Dgl1.CellBeginEdit
        Try
            Select Case Dgl1.Columns(e.ColumnIndex).Name
                Case Col1ItemCategory, Col1ItemGroup, Col1Item, Col1Dimension1, Col1Dimension2, Col1Dimension3, Col1Dimension4
                    If AgL.XNull(Dgl1.Item(Col1PurchasePlan, e.RowIndex).Tag) <> "" Or
                            (AgL.XNull(Dgl1.Item(Col1PurchaseInvoice, e.RowIndex).Tag) <> "" And AgL.XNull(Dgl1.Item(Col1PurchaseInvoice, e.RowIndex).Tag) <> mSearchCode) Then
                        e.Cancel = True
                    ElseIf AgL.XNull(Dgl1.Item(Col1Catalog, Dgl1.CurrentCell.RowIndex).Tag) <> "" Then
                        If My.Computer.Keyboard.CtrlKeyDown Then e.Cancel = True : Exit Sub
                        e.Cancel = True
                        MsgBox("Items are linked with catalog. It can not be change.", MsgBoxStyle.Information)
                        Exit Sub
                    End If
            End Select
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub
    Private Sub FOpenPurchPlanForPurchOrder(mRow As Integer)
        Dim DtTemp As DataTable
        Dim StrRtn As String = ""
        Dim bPendingPlanQry As String = ""

        If AgL.StrCmp(Topctrl1.Mode, "Browse") Then Exit Sub

        bPendingPlanQry = " SELECT VPlan.PurchPlan, VPlan.PurchPlanSr, IsNull(VPlan.PlanQty,0) - IsNull(VOrder.OrderQty,0) AS BalanceQty
                FROM (
                    SELECT L.PurchPlan, L.PurchPlanSr, Sum(L.Qty) AS PlanQty
                    FROM PurchPlan H 
                    LEFT JOIN PurchPlanDetail L ON H.DocID = L.DocID
                    LEFT JOIN Voucher_Type Vt ON H.V_Type = Vt.V_Type
                    Where L.Process = '" & DglMain.Item(Col1Value, rowProcess).Tag & "'
	                GROUP BY L.PurchPlan, L.PurchPlanSr
                ) AS VPlan
                LEFT JOIN (
                    SELECT L.PurchPlan, L.PurchPlanSr, Sum(L.Qty) AS OrderQty
                    FROM PurchInvoiceDetail L 
                    GROUP BY L.PurchPlan, L.PurchPlanSr	
                ) AS VOrder ON VPlan.PurchPlan = VOrder.PurchPlan AND VPlan.PurchPlanSr = VOrder.PurchPlanSr 
                WHERE 1=1 
                And IsNull(VPlan.PlanQty,0) - IsNull(VOrder.OrderQty,0) > 0 "

        mQry = " Select 'o' As Tick, L.DocID || '#' || Cast(L.Sr as Varchar) As SearchKey, 
                H.ManualRefNo As PurchPlanNo, H.V_Date As PurchPlanDate, 
                It.Name As ItemType, Ic.Description As ItemCategory, 
                Ig.Description As ItemGroup, I.Description As Item,
                D1.Description As Dimension1, D2.Description As Dimension2, 
                D3.Description As Dimension3, D4.Description As Dimension4,
                Size.Description As Size, VPendingPlan.BalanceQty, L.Unit,
                Size.Area As UnitMultiplier, 
                VPendingPlan.BalanceQty * Size.Area As BalanceDealQty, Size.SizeUnit As DealUnit,
                It.Code As ItemTypeCode, Ic.Code As ItemCategoryCode, Ig.Code As ItemGroupCode, I.Code As ItemCode,
                D1.Code As Dimension1Code, D2.Code As Dimension2Code, 
                D3.Code As Dimension3Code, D4.Code As Dimension4Code,
                Size.Code As SizeCode, 
                VPendingPlan.PurchPlan, VPendingPlan.PurchPlanSr
                FROM (" & bPendingPlanQry & ") As VPendingPlan
                LEFT JOIN PurchPlanDetail L On VPendingPlan.PurchPlan = L.DocId And VPendingPlan.PurchPlanSr = L.Sr 
                LEFT JOIN PurchPlan H On L.DocId = H.DocId 
                LEFT JOIN Item Sku ON Sku.Code = L.Item
                LEFT JOIN Item I ON I.Code = IsNull(Sku.BaseItem,Sku.Code) And I.V_Type <> '" & ItemV_Type.SKU & "'
                LEFT JOIN ItemType It On Sku.ItemType = It.Code
                LEFT JOIN Item IC On Sku.ItemCategory = IC.Code
                LEFT JOIN Item IG On Sku.ItemGroup = IG.Code
                LEFT JOIN Item D1 ON D1.Code = Sku.Dimension1  
                LEFT JOIN Item D2 ON D2.Code = Sku.Dimension2
                LEFT JOIN Item D3 ON D3.Code = Sku.Dimension3
                LEFT JOIN Item D4 ON D4.Code = Sku.Dimension4
                LEFT JOIN Size Size ON Size.Code = Sku.Size 
                Where 1=1 "

        If mRow >= 0 Then
            If AgL.XNull(Dgl1.Item(Col1ItemCategory, mRow).Tag) <> "" Then
                mQry += " And Ic.Code = '" & Dgl1.Item(Col1ItemCategory, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1ItemGroup, mRow).Tag) <> "" Then
                mQry += " And Ig.Code = '" & Dgl1.Item(Col1ItemGroup, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Item, mRow).Tag) <> "" Then
                mQry += " And I.Code = '" & Dgl1.Item(Col1Item, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Dimension1, mRow).Tag) <> "" Then
                mQry += " And D1.Code = '" & Dgl1.Item(Col1Dimension1, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Dimension2, mRow).Tag) <> "" Then
                mQry += " And D2.Code = '" & Dgl1.Item(Col1Dimension2, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Dimension3, mRow).Tag) <> "" Then
                mQry += " And D3.Code = '" & Dgl1.Item(Col1Dimension3, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Dimension4, mRow).Tag) <> "" Then
                mQry += " And D4.Code = '" & Dgl1.Item(Col1Dimension4, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Dimension4, mRow).Tag) <> "" Then
                mQry += " And Size.Code = '" & Dgl1.Item(Col1Size, mRow).Tag & "'"
            End If
        End If

        DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)

        Dim FRH_Multiple As DMHelpGrid.FrmHelpGrid_Multi
        FRH_Multiple = New DMHelpGrid.FrmHelpGrid_Multi(New DataView(DtTemp), "", 400, 990, , , False)
        FRH_Multiple.FFormatColumn(0, "Tick", 40, DataGridViewContentAlignment.MiddleCenter, True)
        FRH_Multiple.FFormatColumn(1, , 0, , False)
        FRH_Multiple.FFormatColumn(2, "Plan No.", 100, DataGridViewContentAlignment.MiddleLeft)
        FRH_Multiple.FFormatColumn(3, "Plan Date", 100, DataGridViewContentAlignment.MiddleLeft)
        FRH_Multiple.FFormatColumn(4, , 0, , False)
        FRH_Multiple.FFormatColumn(5, AgL.PubCaptionItemCategory, 100, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[ItemCategory] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(6, AgL.PubCaptionItemGroup, 100, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[ItemGroup] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(7, AgL.PubCaptionItem, 200, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Item] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(8, AgL.PubCaptionDimension1, 100, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension1] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(9, AgL.PubCaptionDimension2, 100, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension2] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(10, AgL.PubCaptionDimension3, 100, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension3] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(11, AgL.PubCaptionDimension4, 100, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension4] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(12, "Size", 100, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Size] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(13, "Bal Qty", 100, DataGridViewContentAlignment.MiddleRight)
        FRH_Multiple.FFormatColumn(14, "Unit", 70, DataGridViewContentAlignment.MiddleLeft)
        FRH_Multiple.FFormatColumn(15, , 0, , False)
        FRH_Multiple.FFormatColumn(16, "Bal Deal Qty", 100, DataGridViewContentAlignment.MiddleRight, False)
        FRH_Multiple.FFormatColumn(17, "Deal Unit", 70, DataGridViewContentAlignment.MiddleLeft, False)
        FRH_Multiple.FFormatColumn(18, , 0, , False)
        FRH_Multiple.FFormatColumn(19, , 0, , False)
        FRH_Multiple.FFormatColumn(20, , 0, , False)
        FRH_Multiple.FFormatColumn(21, , 0, , False)
        FRH_Multiple.FFormatColumn(22, , 0, , False)
        FRH_Multiple.FFormatColumn(23, , 0, , False)
        FRH_Multiple.FFormatColumn(24, , 0, , False)
        FRH_Multiple.FFormatColumn(25, , 0, , False)
        FRH_Multiple.FFormatColumn(26, , 0, , False)
        FRH_Multiple.FFormatColumn(27, , 0, , False)
        FRH_Multiple.FFormatColumn(28, , 0, , False)
        'FRH_Multiple.FFormatColumn(29, , 0, , False)
        'FRH_Multiple.FFormatColumn(30, , 0, , False)
        'FRH_Multiple.FFormatColumn(31, , 0, , False)


        FRH_Multiple.StartPosition = FormStartPosition.CenterScreen
        FRH_Multiple.ShowDialog()

        If FRH_Multiple.BytBtnValue = 0 Then
            StrRtn = FRH_Multiple.FFetchData(1, "'", "'", ",", True)
        End If

        Dim DrSelected As DataRow()
        If StrRtn <> "" Then
            DrSelected = DtTemp.Select("SearchKey In (" & StrRtn & ")")

            If mRow < 0 Then
                If Dgl1.Rows.Count > 1 Then
                    If MsgBox("Do you want to overwrite existing data in grid ? ", MsgBoxStyle.Question + MsgBoxStyle.YesNo) = MsgBoxResult.Yes Then
                        'Dgl1.Rows.Clear() : Dgl1.RowCount = 1 : mRow = 0
                        For I As Integer = 0 To Dgl1.Rows.Count - 1
                            If Dgl1.Item(Col1IsRecordLocked, I).Value = 0 Then
                                If Not Dgl1.Rows(I).IsNewRow Then
                                    Dgl1.Rows(I).Visible = False
                                End If
                            End If
                        Next
                        mRow = Dgl1.Rows.Count - 1
                    Else
                        mRow = Dgl1.Rows.Count - 1
                    End If
                Else
                    mRow = 0
                End If
            End If

            If Dgl1.Rows(mRow).IsNewRow = False Then
                Dgl1.Rows.Remove(Dgl1.Rows(mRow))
            End If

            Dgl1.Rows.Insert(mRow, DrSelected.Length)
            For I As Integer = 0 To DrSelected.Length - 1
                Dgl1.Item(Col1ItemType, mRow + I).Tag = AgL.XNull(DrSelected(I)("ItemTypeCode"))
                Dgl1.Item(Col1ItemType, mRow + I).Value = AgL.XNull(DrSelected(I)("ItemType"))

                Dgl1.Item(Col1ItemCategory, mRow + I).Tag = AgL.XNull(DrSelected(I)("ItemCategoryCode"))
                Dgl1.Item(Col1ItemCategory, mRow + I).Value = AgL.XNull(DrSelected(I)("ItemCategory"))

                Dgl1.Item(Col1ItemGroup, mRow + I).Tag = AgL.XNull(DrSelected(I)("ItemGroupCode"))
                Dgl1.Item(Col1ItemGroup, mRow + I).Value = AgL.XNull(DrSelected(I)("ItemGroup"))

                Dgl1.Item(Col1Item, mRow + I).Tag = AgL.XNull(DrSelected(I)("ItemCode"))
                Dgl1.Item(Col1Item, mRow + I).Value = AgL.XNull(DrSelected(I)("Item"))

                Dgl1.Item(Col1Dimension1, mRow + I).Tag = AgL.XNull(DrSelected(I)("Dimension1Code"))
                Dgl1.Item(Col1Dimension1, mRow + I).Value = AgL.XNull(DrSelected(I)("Dimension1"))

                Dgl1.Item(Col1Dimension2, mRow + I).Tag = AgL.XNull(DrSelected(I)("Dimension2Code"))
                Dgl1.Item(Col1Dimension2, mRow + I).Value = AgL.XNull(DrSelected(I)("Dimension2"))

                Dgl1.Item(Col1Dimension3, mRow + I).Tag = AgL.XNull(DrSelected(I)("Dimension3Code"))
                Dgl1.Item(Col1Dimension3, mRow + I).Value = AgL.XNull(DrSelected(I)("Dimension3"))

                Dgl1.Item(Col1Dimension4, mRow + I).Tag = AgL.XNull(DrSelected(I)("Dimension4Code"))
                Dgl1.Item(Col1Dimension4, mRow + I).Value = AgL.XNull(DrSelected(I)("Dimension4"))

                Dgl1.Item(Col1Size, mRow + I).Tag = AgL.XNull(DrSelected(I)("SizeCode"))
                Dgl1.Item(Col1Size, mRow + I).Value = AgL.XNull(DrSelected(I)("Size"))

                Dgl1.Item(Col1PurchasePlan, mRow + I).Tag = AgL.XNull(DrSelected(I)("PurchPlan"))
                Dgl1.Item(Col1PurchasePlan, mRow + I).Value = AgL.XNull(DrSelected(I)("PurchPlanNo"))
                Dgl1.Item(Col1PurchasePlanSr, mRow + I).Value = AgL.VNull(DrSelected(I)("PurchPlanSr"))

                Dgl1.Item(Col1Qty, mRow + I).Value = AgL.VNull(DrSelected(I)("BalanceQty"))
                Dgl1.Item(Col1DocQty, mRow + I).Value = AgL.VNull(DrSelected(I)("BalanceQty"))
                Dgl1.Item(Col1Unit, mRow + I).Value = AgL.XNull(DrSelected(I)("Unit"))

                Dgl1.Item(Col1UnitMultiplier, mRow + I).Value = AgL.VNull(DrSelected(I)("UnitMultiplier"))
                Dgl1.Item(Col1DealQty, mRow + I).Value = AgL.VNull(DrSelected(I)("BalanceDealQty"))
                Dgl1.Item(Col1DealUnit, mRow + I).Value = AgL.XNull(DrSelected(I)("DealUnit"))



            Next

            For I As Integer = 0 To Dgl1.Rows.Count - 1
                Dgl1.Item(ColSNo, I).Value = I + 1

                FGeterateSkuName(I)
            Next
        End If
    End Sub
    Private Sub FOpenPurchOrderForPurchInvoice(mRow As Integer)
        Dim DtTemp As DataTable
        Dim StrRtn As String = ""
        Dim bPendingOrderQry As String = ""

        If AgL.StrCmp(Topctrl1.Mode, "Browse") Then Exit Sub

        Dim ContraBalanceQtyType As String = FGetSettings(SettingFields.ContraBalanceQtyType, SettingType.General)
        If ContraBalanceQtyType = "" Then ContraBalanceQtyType = "Qty"

        bPendingOrderQry = " Select VOrder.PurchOrder, VOrder.PurchOrderSr, IsNull(VOrder.OrderQty,0) - IsNull(VInvoice.InvoiceQty,0) As BalanceQty
                FROM (
                    SELECT L.PurchOrder, L.PurchOrderSr, Sum(L." & ContraBalanceQtyType & ") AS OrderQty
                    FROM PurchOrder H 
                    LEFT JOIN PurchOrderDetail L ON H.DocID = L.DocID
                    LEFT JOIN Voucher_Type Vt ON H.V_Type = Vt.V_Type
                    Where H.Vendor = '" & DglMain.Item(Col1Value, rowVendor).Tag & "'
                    And H.Process = '" & DglMain.Item(Col1Value, rowProcess).Tag & "'
	                GROUP BY L.PurchOrder, L.PurchOrderSr
                ) AS VOrder
                LEFT JOIN (
                    SELECT L.PurchOrder, L.PurchOrderSr, Sum(L.Qty) AS InvoiceQty
                    FROM PurchBillDetail L 
                    GROUP BY L.PurchOrder, L.PurchOrderSr	
                ) AS VInvoice ON VOrder.PurchOrder = VInvoice.PurchOrder AND VOrder.PurchOrderSr = VInvoice.PurchOrderSr 
                WHERE 1=1 
                And IsNull(VOrder.OrderQty,0) - IsNull(VInvoice.InvoiceQty,0) > 0 "

        mQry = " Select 'o' As Tick, L.DocID || '#' || Cast(L.Sr as Varchar) As SearchKey, 
                H.V_Type || '-' || H.ManualRefNo As PurchOrderNo, H.V_Date As PurchOrderDate, 
                Ic.Description As ItemCategory, Ig.Description As ItemGroup, I.Description As Item,
                D1.Description As Dimension1, D2.Description As Dimension2, 
                D3.Description As Dimension3, D4.Description As Dimension4,
                Size.Description As Size, VPendingOrder.BalanceQty, L.Unit, L.Rate,
                Ic.Code As ItemCategoryCode, Ig.Code As ItemGroupCode, I.Code As ItemCode,
                D1.Code As Dimension1Code, D2.Code As Dimension2Code, 
                D3.Code As Dimension3Code, D4.Code As Dimension4Code, I.SalesTaxPostingGroup,
                Size.Code As SizeCode, It.Code As ItemTypeCode, It.Name As ItemType, 
                VPendingOrder.PurchOrder, VPendingOrder.PurchOrderSr,
                Case When IfNull(U.ShowDimensionDetailInSales,0) = 1 Or IfNull(Ic.ShowDimensionDetailInSales,0) = 1 Then 1
                        Else 0 End As ShowDimensionDetailInSales, 
                U.DecimalPlaces as QtyDecimalPlaces, DU.DecimalPlaces as DealQtyDecimalPlaces, I.DealUnit
                FROM (" & bPendingOrderQry & ") As VPendingOrder
                LEFT JOIN PurchOrderDetail L On VPendingOrder.PurchOrder = L.DocId And VPendingOrder.PurchOrderSr = L.Sr 
                LEFT JOIN PurchOrder H On L.DocId = H.DocId 
                LEFT JOIN Item Sku ON Sku.Code = L.Item
                LEFT JOIN Item I ON I.Code = IsNull(Sku.BaseItem,Sku.Code) And I.V_Type <> '" & ItemV_Type.SKU & "'
                LEFT JOIN ItemType It On Sku.ItemType = It.Code
                LEFT JOIN Item IC On IsNull(Sku.ItemCategory,Sku.code) = IC.Code
                LEFT JOIN Item IG On Sku.ItemGroup = IG.Code
                LEFT JOIN Item D1 ON D1.Code = Sku.Dimension1  
                LEFT JOIN Item D2 ON D2.Code = Sku.Dimension2
                LEFT JOIN Item D3 ON D3.Code = Sku.Dimension3
                LEFT JOIN Item D4 ON D4.Code = Sku.Dimension4
                LEFT JOIN Item Size ON Size.Code = Sku.Size 
                Left Join Unit U  With (NoLock) On I.Unit = U.Code 
                LEFT JOIN Unit Du With (NoLock) On I.DealUnit = Du.Code 
                Where 1=1 "

        If mRow >= 0 Then
            If AgL.XNull(Dgl1.Item(Col1ItemCategory, mRow).Tag) <> "" Then
                mQry += " And Ic.Code = '" & Dgl1.Item(Col1ItemCategory, mRow).Tag & "' "
            End If
            If AgL.XNull(Dgl1.Item(Col1ItemGroup, mRow).Tag) <> "" Then
                mQry += " And Ig.Code = '" & Dgl1.Item(Col1ItemGroup, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Item, mRow).Tag) <> "" Then
                mQry += " And I.Code = '" & Dgl1.Item(Col1Item, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Dimension1, mRow).Tag) <> "" Then
                mQry += " And D1.Code = '" & Dgl1.Item(Col1Dimension1, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Dimension2, mRow).Tag) <> "" Then
                mQry += " And D2.Code = '" & Dgl1.Item(Col1Dimension2, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Dimension3, mRow).Tag) <> "" Then
                mQry += " And D3.Code = '" & Dgl1.Item(Col1Dimension3, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Dimension4, mRow).Tag) <> "" Then
                mQry += " And D4.Code = '" & Dgl1.Item(Col1Dimension4, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Size, mRow).Tag) <> "" Then
                mQry += " And Size.Code = '" & Dgl1.Item(Col1Size, mRow).Tag & "'"
            End If
        End If

        DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)

        Dim FRH_Multiple As DMHelpGrid.FrmHelpGrid_Multi
        FRH_Multiple = New DMHelpGrid.FrmHelpGrid_Multi(New DataView(DtTemp), "", 400, 990, , , False)
        FRH_Multiple.FFormatColumn(0, "Tick", 40, DataGridViewContentAlignment.MiddleCenter, True)
        FRH_Multiple.FFormatColumn(1, , 0, , False)
        FRH_Multiple.FFormatColumn(2, "Order No.", 90, DataGridViewContentAlignment.MiddleLeft)
        FRH_Multiple.FFormatColumn(3, "Order Date", 100, DataGridViewContentAlignment.MiddleLeft)
        FRH_Multiple.FFormatColumn(4, AgL.PubCaptionItemCategory, 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[ItemCategory] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(5, AgL.PubCaptionItemGroup, 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[ItemGroup] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(6, AgL.PubCaptionItem, 180, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Item] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(7, AgL.PubCaptionDimension1, 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension1] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(8, AgL.PubCaptionDimension2, 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension2] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(9, AgL.PubCaptionDimension3, 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension3] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(10, AgL.PubCaptionDimension4, 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension4] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(11, "Size", 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Size] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(12, "Bal Qty", 90, DataGridViewContentAlignment.MiddleRight)
        FRH_Multiple.FFormatColumn(13, "Unit", 70, DataGridViewContentAlignment.MiddleLeft)
        FRH_Multiple.FFormatColumn(14, "Rate", 70, DataGridViewContentAlignment.MiddleLeft)

        FRH_Multiple.FFormatColumn(15, , 0, , False)
        FRH_Multiple.FFormatColumn(16, , 0, , False)
        FRH_Multiple.FFormatColumn(17, , 0, , False)
        FRH_Multiple.FFormatColumn(18, , 0, , False)
        FRH_Multiple.FFormatColumn(19, , 0, , False)
        FRH_Multiple.FFormatColumn(20, , 0, , False)
        FRH_Multiple.FFormatColumn(21, , 0, , False)
        FRH_Multiple.FFormatColumn(22, , 0, , False)
        FRH_Multiple.FFormatColumn(23, , 0, , False)
        FRH_Multiple.FFormatColumn(24, , 0, , False)
        FRH_Multiple.FFormatColumn(25, , 0, , False)
        FRH_Multiple.FFormatColumn(26, , 0, , False)
        FRH_Multiple.FFormatColumn(27, , 0, , False)
        FRH_Multiple.FFormatColumn(28, , 0, , False)
        FRH_Multiple.FFormatColumn(29, , 0, , False)
        FRH_Multiple.FFormatColumn(30, , 0, , False)
        FRH_Multiple.FFormatColumn(31, , 0, , False)

        FRH_Multiple.StartPosition = FormStartPosition.CenterScreen
        FRH_Multiple.ShowDialog()

        If FRH_Multiple.BytBtnValue = 0 Then
            StrRtn = FRH_Multiple.FFetchData(1, "'", "'", ",", True)
        End If

        Dim DrSelected As DataRow()
        If StrRtn <> "" Then
            DrSelected = DtTemp.Select("SearchKey In (" & StrRtn & ")")

            If mRow < 0 Then
                If Dgl1.Rows.Count > 1 Then
                    If MsgBox("Do you want to overwrite existing data in grid ? ", MsgBoxStyle.Question + MsgBoxStyle.YesNo) = MsgBoxResult.Yes Then
                        'Dgl1.Rows.Clear() : Dgl1.RowCount = 1 : mRow = 0
                        For I As Integer = 0 To Dgl1.Rows.Count - 1
                            If Dgl1.Item(Col1IsRecordLocked, I).Value = 0 Then
                                If Not Dgl1.Rows(I).IsNewRow Then
                                    Dgl1.Rows(I).Visible = False
                                End If
                            End If
                        Next
                        mRow = Dgl1.Rows.Count - 1
                    Else
                        mRow = Dgl1.Rows.Count - 1
                    End If
                Else
                    mRow = 0
                End If
            End If

            If Dgl1.Rows(mRow).IsNewRow = False Then
                Dgl1.Rows.Remove(Dgl1.Rows(mRow))
            End If
            Dgl1.Rows.Insert(mRow, DrSelected.Length)
            For I As Integer = 0 To DrSelected.Length - 1
                Dgl1.Item(Col1ItemType, mRow + I).Tag = AgL.XNull(DrSelected(I)("ItemTypeCode"))
                Dgl1.Item(Col1ItemType, mRow + I).Value = AgL.XNull(DrSelected(I)("ItemType"))

                Dgl1.Item(Col1ItemCategory, mRow + I).Tag = AgL.XNull(DrSelected(I)("ItemCategoryCode"))
                Dgl1.Item(Col1ItemCategory, mRow + I).Value = AgL.XNull(DrSelected(I)("ItemCategory"))

                Dgl1.Item(Col1ItemGroup, mRow + I).Tag = AgL.XNull(DrSelected(I)("ItemGroupCode"))
                Dgl1.Item(Col1ItemGroup, mRow + I).Value = AgL.XNull(DrSelected(I)("ItemGroup"))

                Dgl1.Item(Col1Item, mRow + I).Tag = AgL.XNull(DrSelected(I)("ItemCode"))
                Dgl1.Item(Col1Item, mRow + I).Value = AgL.XNull(DrSelected(I)("Item"))

                Dgl1.Item(Col1Dimension1, mRow + I).Tag = AgL.XNull(DrSelected(I)("Dimension1Code"))
                Dgl1.Item(Col1Dimension1, mRow + I).Value = AgL.XNull(DrSelected(I)("Dimension1"))

                Dgl1.Item(Col1Dimension2, mRow + I).Tag = AgL.XNull(DrSelected(I)("Dimension2Code"))
                Dgl1.Item(Col1Dimension2, mRow + I).Value = AgL.XNull(DrSelected(I)("Dimension2"))

                Dgl1.Item(Col1Dimension3, mRow + I).Tag = AgL.XNull(DrSelected(I)("Dimension3Code"))
                Dgl1.Item(Col1Dimension3, mRow + I).Value = AgL.XNull(DrSelected(I)("Dimension3"))

                Dgl1.Item(Col1Dimension4, mRow + I).Tag = AgL.XNull(DrSelected(I)("Dimension4Code"))
                Dgl1.Item(Col1Dimension4, mRow + I).Value = AgL.XNull(DrSelected(I)("Dimension4"))

                Dgl1.Item(Col1Size, mRow + I).Tag = AgL.XNull(DrSelected(I)("SizeCode"))
                Dgl1.Item(Col1Size, mRow + I).Value = AgL.XNull(DrSelected(I)("Size"))

                Dgl1.Item(Col1SalesTaxGroup, mRow + I).Tag = AgL.XNull(DrSelected(I)("SalesTaxPostingGroup"))
                Dgl1.Item(Col1SalesTaxGroup, mRow + I).Value = AgL.XNull(DrSelected(I)("SalesTaxPostingGroup"))

                Dgl1.Item(Col1PurchaseInvoice, mRow + I).Tag = AgL.XNull(DrSelected(I)("PurchOrder"))
                Dgl1.Item(Col1PurchaseInvoice, mRow + I).Value = AgL.XNull(DrSelected(I)("PurchOrderNo"))
                Dgl1.Item(Col1PurchaseInvoiceSr, mRow + I).Value = AgL.VNull(DrSelected(I)("PurchOrderSr"))

                Dgl1.Item(Col1ReferenceNo, mRow + I).Value = AgL.XNull(DrSelected(I)("PurchOrderNo"))
                Dgl1.Item(Col1ReferenceDocID, mRow + I).Value = AgL.XNull(DrSelected(I)("PurchOrder"))
                Dgl1.Item(Col1ReferenceTSr, mRow + I).Value = AgL.VNull(DrSelected(I)("PurchOrderSr"))
                Dgl1.Item(Col1ReferenceSr, mRow + I).Value = AgL.VNull(DrSelected(I)("PurchOrderSr"))
                Dgl1.Item(Col1ReferenceDocIdDate, mRow + I).Value = AgL.XNull(DrSelected(I)("PurchOrderDate"))


                Dgl1.Item(Col1Qty, mRow + I).Value = AgL.XNull(DrSelected(I)("BalanceQty"))
                Dgl1.Item(Col1DocQty, mRow + I).Value = AgL.XNull(DrSelected(I)("BalanceQty"))

                Dgl1.Item(Col1ReferenceDocIdBalanceQty, mRow + I).Value = AgL.XNull(DrSelected(I)("BalanceQty"))

                Dgl1.Item(Col1Rate, mRow + I).Value = AgL.XNull(DrSelected(I)("Rate"))

                Dgl1.Item(Col1QtyDecimalPlaces, mRow + I).Value = AgL.VNull(DrSelected(I)("QtyDecimalPlaces"))
                Dgl1.Item(Col1DealQtyDecimalPlaces, mRow + I).Value = AgL.VNull(DrSelected(I)("DealQtyDecimalPlaces"))


                Dgl1.Item(Col1Unit, mRow + I).Value = AgL.XNull(DrSelected(I)("Unit"))
                Dgl1.Item(Col1Unit, mRow + I).Tag = AgL.VNull(DrSelected(I)("ShowDimensionDetailInSales"))
                Dgl1.Item(Col1DealUnit, mRow + I).Value = AgL.XNull(DrSelected(I)("DealUnit"))

                Dgl1.Item(Col1RawMaterialConsumptionQty, mRow + I).Value = FGetFabricConsumption_Garment(mRow + I)

                FGetRateConsideringAllDimensions(mRow + I)
            Next

            For I As Integer = 0 To Dgl1.Rows.Count - 1
                Dgl1.Item(ColSNo, I).Value = I + 1
                FGeterateSkuName(I)
            Next
        End If
        Calculation()
    End Sub
    Private Sub FOpenStockProcessForPurchInvoice(mRow As Integer)
        Dim DtTemp As DataTable
        Dim StrRtn As String = ""
        Dim bPendingStockProcessQry As String = ""

        If AgL.StrCmp(Topctrl1.Mode, "Browse") Then Exit Sub

        bPendingStockProcessQry = " SELECT L.StockProcess, L.StockProcessTSr, L.StockProcessSr, 
                    IsNull(Sum(L.Qty_Iss),0) - IsNull(Sum(L.Qty_Rec),0) AS BalanceQty
                    FROM StockProcess L 
                    Where L.SubCode = '" & DglMain.Item(Col1Value, rowVendor).Tag & "'
                    And L.Process = '" & DglMain.Item(Col1Value, rowProcess).Tag & "'
                    GROUP BY L.StockProcess, L.StockProcessTSr, L.StockProcessSr
                    HAVING IsNull(Sum(L.Qty_Iss),0) - IsNull(Sum(L.Qty_Rec),0) > 0 "

        mQry = " Select 'o' As Tick, L.DocID || '#' || Cast(L.TSr as Varchar) || '#' || Cast(L.Sr as Varchar) As SearchKey, 
                H.V_Type || '-' || H.ManualRefNo As StockReceiveNo, H.V_Date As StockReceiveDate, 
                Ic.Description As ItemCategory, Ig.Description As ItemGroup, I.Description As Item,
                D1.Description As Dimension1, D2.Description As Dimension2, 
                D3.Description As Dimension3, D4.Description As Dimension4,
                Size.Description As Size, VPendingStockProcess.BalanceQty, L.Unit,
                Ic.Code As ItemCategoryCode, Ig.Code As ItemGroupCode, I.Code As ItemCode,
                D1.Code As Dimension1Code, D2.Code As Dimension2Code, 
                D3.Code As Dimension3Code, D4.Code As Dimension4Code,
                Size.Code As SizeCode, It.Code As ItemTypeCode, It.Name As ItemType, 
                VPendingStockProcess.StockProcess, VPendingStockProcess.StockProcessTSr, VPendingStockProcess.StockProcessSr,
                IfNull(Sku.SalesTaxPostingGroup,Ic.SalesTaxPostingGroup) As SalesTaxGroupItem,
                L.DealUnit, L.UnitMultiplier, L.UnitMultiplier * VPendingStockProcess.BalanceQty As DealQty,
                L.Barcode, Bc.Description As BarcodeDesc,
                L.ReferenceDocID, L.ReferenceTSr, L.ReferenceDocIDSr
                FROM (" & bPendingStockProcessQry & ") As VPendingStockProcess
                LEFT JOIN StockProcess L On VPendingStockProcess.StockProcess = L.DocId 
                            And VPendingStockProcess.StockProcessTSr = L.TSr 
                            And VPendingStockProcess.StockProcessSr = L.Sr 
                LEFT JOIN StockHead H On L.StockProcess = H.DocId 
                LEFT JOIN Item Sku ON Sku.Code = L.Item
                LEFT JOIN Item I ON I.Code = IsNull(Sku.BaseItem,Sku.Code) And I.V_Type <> '" & ItemV_Type.SKU & "'
                LEFT JOIN ItemType It On Sku.ItemType = It.Code
                LEFT JOIN Item IC On Sku.ItemCategory = IC.Code
                LEFT JOIN Item IG On Sku.ItemGroup = IG.Code
                LEFT JOIN Item D1 ON D1.Code = Sku.Dimension1  
                LEFT JOIN Item D2 ON D2.Code = Sku.Dimension2
                LEFT JOIN Item D3 ON D3.Code = Sku.Dimension3
                LEFT JOIN Item D4 ON D4.Code = Sku.Dimension4
                LEFT JOIN Item Size ON Size.Code = Sku.Size 
                LEFT JOIN Barcode Bc On L.Barcode = Bc.Code
                Where 1=1 "

        If mRow >= 0 Then
            If AgL.XNull(Dgl1.Item(Col1ItemCategory, mRow).Tag) <> "" Then
                mQry += " And Ic.Code = '" & Dgl1.Item(Col1ItemCategory, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1ItemGroup, mRow).Tag) <> "" Then
                mQry += " And Ig.Code = '" & Dgl1.Item(Col1ItemGroup, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Item, mRow).Tag) <> "" Then
                mQry += " And I.Code = '" & Dgl1.Item(Col1Item, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Dimension1, mRow).Tag) <> "" Then
                mQry += " And D1.Code = '" & Dgl1.Item(Col1Dimension1, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Dimension2, mRow).Tag) <> "" Then
                mQry += " And D2.Code = '" & Dgl1.Item(Col1Dimension2, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Dimension3, mRow).Tag) <> "" Then
                mQry += " And D3.Code = '" & Dgl1.Item(Col1Dimension3, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Dimension4, mRow).Tag) <> "" Then
                mQry += " And D4.Code = '" & Dgl1.Item(Col1Dimension4, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Size, mRow).Tag) <> "" Then
                mQry += " And Size.Code = '" & Dgl1.Item(Col1Size, mRow).Tag & "'"
            End If
        End If

        DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)

        Dim FRH_Multiple As DMHelpGrid.FrmHelpGrid_Multi
        FRH_Multiple = New DMHelpGrid.FrmHelpGrid_Multi(New DataView(DtTemp), "", 400, 990, , , False)
        FRH_Multiple.FFormatColumn(0, "Tick", 40, DataGridViewContentAlignment.MiddleCenter, True)
        FRH_Multiple.FFormatColumn(1, , 0, , False)
        FRH_Multiple.FFormatColumn(2, "Receipt No.", 100, DataGridViewContentAlignment.MiddleLeft)
        FRH_Multiple.FFormatColumn(3, "Receipt Date", 100, DataGridViewContentAlignment.MiddleLeft)
        FRH_Multiple.FFormatColumn(4, AgL.PubCaptionItemCategory, 100, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[ItemCategory] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(5, AgL.PubCaptionItemGroup, 100, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[ItemGroup] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(6, AgL.PubCaptionItem, 200, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Item] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(7, AgL.PubCaptionDimension1, 100, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension1] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(8, AgL.PubCaptionDimension2, 100, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension2] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(9, AgL.PubCaptionDimension3, 100, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension3] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(10, AgL.PubCaptionDimension4, 100, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension4] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(11, "Size", 100, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Size] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(12, "Bal Qty", 100, DataGridViewContentAlignment.MiddleRight)
        FRH_Multiple.FFormatColumn(13, "Unit", 70, DataGridViewContentAlignment.MiddleLeft)

        FRH_Multiple.FFormatColumn(14, , 0, , False)
        FRH_Multiple.FFormatColumn(15, , 0, , False)
        FRH_Multiple.FFormatColumn(16, , 0, , False)
        FRH_Multiple.FFormatColumn(17, , 0, , False)
        FRH_Multiple.FFormatColumn(18, , 0, , False)
        FRH_Multiple.FFormatColumn(19, , 0, , False)
        FRH_Multiple.FFormatColumn(20, , 0, , False)
        FRH_Multiple.FFormatColumn(21, , 0, , False)
        FRH_Multiple.FFormatColumn(22, , 0, , False)
        FRH_Multiple.FFormatColumn(23, , 0, , False)
        FRH_Multiple.FFormatColumn(24, , 0, , False)
        FRH_Multiple.FFormatColumn(25, , 0, , False)
        FRH_Multiple.FFormatColumn(26, , 0, , False)
        FRH_Multiple.FFormatColumn(27, , 0, , False)
        FRH_Multiple.FFormatColumn(28, , 0, , False)
        FRH_Multiple.FFormatColumn(29, , 0, , False)
        FRH_Multiple.FFormatColumn(30, , 0, , False)
        FRH_Multiple.FFormatColumn(31, , 0, , False)
        FRH_Multiple.FFormatColumn(32, , 0, , False)
        FRH_Multiple.FFormatColumn(33, , 0, , False)
        FRH_Multiple.FFormatColumn(34, , 0, , False)
        FRH_Multiple.FFormatColumn(35, , 0, , False)

        FRH_Multiple.StartPosition = FormStartPosition.CenterScreen
        FRH_Multiple.ShowDialog()

        If FRH_Multiple.BytBtnValue = 0 Then
            StrRtn = FRH_Multiple.FFetchData(1, "'", "'", ",", True)
        End If

        Dim DrSelected As DataRow()
        If StrRtn <> "" Then
            DrSelected = DtTemp.Select("SearchKey In (" & StrRtn & ")")

            If mRow < 0 Then
                If Dgl1.Rows.Count > 1 Then
                    If MsgBox("Do you want to overwrite existing data in grid ? ", MsgBoxStyle.Question + MsgBoxStyle.YesNo) = MsgBoxResult.Yes Then
                        'Dgl1.Rows.Clear() : Dgl1.RowCount = 1 : mRow = 0
                        For I As Integer = 0 To Dgl1.Rows.Count - 1
                            If Dgl1.Item(Col1IsRecordLocked, I).Value = 0 Then
                                If Not Dgl1.Rows(I).IsNewRow Then
                                    Dgl1.Rows(I).Visible = False
                                End If
                            End If
                        Next
                        mRow = Dgl1.Rows.Count - 1
                    Else
                        mRow = Dgl1.Rows.Count - 1
                    End If
                Else
                    mRow = 0
                End If
            End If

            If Dgl1.Rows(mRow).IsNewRow = False Then
                Dgl1.Rows.Remove(Dgl1.Rows(mRow))
            End If
            Dgl1.Rows.Insert(mRow, DrSelected.Length)
            For I As Integer = 0 To DrSelected.Length - 1
                Dgl1.Item(Col1ItemType, mRow + I).Tag = AgL.XNull(DrSelected(I)("ItemTypeCode"))
                Dgl1.Item(Col1ItemType, mRow + I).Value = AgL.XNull(DrSelected(I)("ItemType"))

                Dgl1.Item(Col1ItemCategory, mRow + I).Tag = AgL.XNull(DrSelected(I)("ItemCategoryCode"))
                Dgl1.Item(Col1ItemCategory, mRow + I).Value = AgL.XNull(DrSelected(I)("ItemCategory"))

                Dgl1.Item(Col1ItemGroup, mRow + I).Tag = AgL.XNull(DrSelected(I)("ItemGroupCode"))
                Dgl1.Item(Col1ItemGroup, mRow + I).Value = AgL.XNull(DrSelected(I)("ItemGroup"))

                Dgl1.Item(Col1Item, mRow + I).Tag = AgL.XNull(DrSelected(I)("ItemCode"))
                Dgl1.Item(Col1Item, mRow + I).Value = AgL.XNull(DrSelected(I)("Item"))

                Dgl1.Item(Col1Dimension1, mRow + I).Tag = AgL.XNull(DrSelected(I)("Dimension1Code"))
                Dgl1.Item(Col1Dimension1, mRow + I).Value = AgL.XNull(DrSelected(I)("Dimension1"))

                Dgl1.Item(Col1Dimension2, mRow + I).Tag = AgL.XNull(DrSelected(I)("Dimension2Code"))
                Dgl1.Item(Col1Dimension2, mRow + I).Value = AgL.XNull(DrSelected(I)("Dimension2"))

                Dgl1.Item(Col1Dimension3, mRow + I).Tag = AgL.XNull(DrSelected(I)("Dimension3Code"))
                Dgl1.Item(Col1Dimension3, mRow + I).Value = AgL.XNull(DrSelected(I)("Dimension3"))

                Dgl1.Item(Col1Dimension4, mRow + I).Tag = AgL.XNull(DrSelected(I)("Dimension4Code"))
                Dgl1.Item(Col1Dimension4, mRow + I).Value = AgL.XNull(DrSelected(I)("Dimension4"))

                Dgl1.Item(Col1Size, mRow + I).Tag = AgL.XNull(DrSelected(I)("SizeCode"))
                Dgl1.Item(Col1Size, mRow + I).Value = AgL.XNull(DrSelected(I)("Size"))

                Dgl1.Item(Col1SalesTaxGroup, mRow + I).Tag = AgL.XNull(DrSelected(I)("SalesTaxGroupItem"))
                Dgl1.Item(Col1SalesTaxGroup, mRow + I).Value = AgL.XNull(DrSelected(I)("SalesTaxGroupItem"))

                Dgl1.Item(Col1Barcode, mRow + I).Tag = AgL.XNull(DrSelected(I)("Barcode"))
                Dgl1.Item(Col1Barcode, mRow + I).Value = AgL.XNull(DrSelected(I)("BarcodeDesc"))

                Dgl1.Item(Col1StockProcess, mRow + I).Tag = AgL.XNull(DrSelected(I)("StockProcess"))
                Dgl1.Item(Col1StockProcess, mRow + I).Value = AgL.XNull(DrSelected(I)("StockReceiveNo"))
                Dgl1.Item(Col1StockProcessTSr, mRow + I).Value = AgL.VNull(DrSelected(I)("StockProcessTSr"))
                Dgl1.Item(Col1StockProcessSr, mRow + I).Value = AgL.VNull(DrSelected(I)("StockProcessSr"))

                Dgl1.Item(Col1ReferenceNo, mRow + I).Value = AgL.XNull(DrSelected(I)("StockReceiveNo"))
                Dgl1.Item(Col1ReferenceDocID, mRow + I).Value = AgL.XNull(DrSelected(I)("StockProcess"))
                Dgl1.Item(Col1ReferenceTSr, mRow + I).Value = AgL.VNull(DrSelected(I)("StockProcessTSr"))
                Dgl1.Item(Col1ReferenceSr, mRow + I).Value = AgL.VNull(DrSelected(I)("StockProcessSr"))
                Dgl1.Item(Col1ReferenceDocIdDate, mRow + I).Value = AgL.XNull(DrSelected(I)("StockReceiveDate"))

                Dgl1.Item(Col1PurchaseInvoice, mRow + I).Tag = AgL.XNull(DrSelected(I)("ReferenceDocId"))
                Dgl1.Item(Col1PurchaseInvoiceSr, mRow + I).Value = AgL.VNull(DrSelected(I)("ReferenceTSr"))

                Dgl1.Item(Col1Qty, mRow + I).Value = AgL.VNull(DrSelected(I)("BalanceQty"))
                Dgl1.Item(Col1DocQty, mRow + I).Value = AgL.VNull(DrSelected(I)("BalanceQty"))
                Dgl1.Item(Col1Unit, mRow + I).Value = AgL.XNull(DrSelected(I)("Unit"))

                Dgl1.Item(Col1UnitMultiplier, mRow + I).Value = AgL.VNull(DrSelected(I)("UnitMultiplier"))
                Dgl1.Item(Col1DealQty, mRow + I).Value = AgL.VNull(DrSelected(I)("DealQty"))
                Dgl1.Item(Col1DealUnit, mRow + I).Value = AgL.XNull(DrSelected(I)("DealUnit"))

                Dgl1.Item(Col1ReferenceDocIdBalanceQty, mRow + I).Value = AgL.XNull(DrSelected(I)("BalanceQty"))

                FGetRateConsideringAllDimensions(mRow + I)
            Next

            For I As Integer = 0 To Dgl1.Rows.Count - 1
                Dgl1.Item(ColSNo, I).Value = I + 1
                FGeterateSkuName(I)
            Next
        End If
        Calculation()
    End Sub


    Private Sub FOpenPurchReceiveForPurchInvoice(mRow As Integer)
        Dim DtTemp As DataTable
        Dim StrRtn As String = ""
        Dim bPendingReceiveQry As String = ""

        If AgL.StrCmp(Topctrl1.Mode, "Browse") Then Exit Sub

        bPendingReceiveQry = " SELECT VReceive.StockReceive, VReceive.StockReceiveSr, IsNull(VReceive.ReceiveQty,0) - IsNull(VInvoice.InvoiceQty,0) AS BalanceQty
                FROM (
                    SELECT L.DocId As StockReceive, L.Sr As StockReceiveSr, Sum(L.Qty) AS ReceiveQty
                    FROM PurchInvoice H 
                    LEFT JOIN PurchInvoiceDetail L ON H.DocID = L.DocID
                    LEFT JOIN Voucher_Type Vt ON H.V_Type = Vt.V_Type
                    Where H.Vendor = '" & DglMain.Item(Col1Value, rowVendor).Tag & "'
                    And H.Process = '" & DglMain.Item(Col1Value, rowProcess).Tag & "'
                    And Vt.Nature = 'Receive'
                    And L.SubRecordType Is Null
	                GROUP BY L.DocId, L.Sr
                ) AS VReceive
                LEFT JOIN (
                    SELECT L.ReferenceDocId, L.ReferenceTSr, Sum(L.Qty) AS InvoiceQty
                    FROM PurchBillDetail L 
                    GROUP BY L.ReferenceDocId, L.ReferenceTSr	
                ) AS VInvoice ON VReceive.StockReceive = VInvoice.ReferenceDocId AND VReceive.StockReceiveSr = VInvoice.ReferenceTSr 
                WHERE 1=1 
                And IsNull(VReceive.ReceiveQty,0) - IsNull(VInvoice.InvoiceQty,0) > 0 "

        mQry = " Select 'o' As Tick, L.DocID || '#' || Cast(L.Sr as Varchar) As SearchKey, 
                H.V_Type || '-' || H.ManualRefNo As StockReceiveNo, H.V_Date As StockReceiveDate, 
                Ic.Description As ItemCategory, Ig.Description As ItemGroup, I.Description As Item,
                D1.Description As Dimension1, D2.Description As Dimension2, 
                D3.Description As Dimension3, D4.Description As Dimension4,
                Size.Description As Size, VPendingReceive.BalanceQty, L.Unit, L.Rate,
                Ic.Code As ItemCategoryCode, Ig.Code As ItemGroupCode, I.Code As ItemCode,
                D1.Code As Dimension1Code, D2.Code As Dimension2Code, 
                D3.Code As Dimension3Code, D4.Code As Dimension4Code,
                Size.Code As SizeCode, It.Code As ItemTypeCode, It.Name As ItemType, 
                VPendingReceive.StockReceive, VPendingReceive.StockReceiveSr, 
                L.ReferenceDocId, L.ReferenceTSr, L.ReferenceSr
                FROM (" & bPendingReceiveQry & ") As VPendingReceive
                LEFT JOIN PurchInvoiceDetail L On VPendingReceive.StockReceive = L.DocId And VPendingReceive.StockReceiveSr = L.Sr 
                LEFT JOIN PurchInvoice H On L.DocId = H.DocId 
                LEFT JOIN Item Sku ON Sku.Code = L.Item
                LEFT JOIN Item I ON I.Code = IsNull(Sku.BaseItem,Sku.Code) And I.V_Type <> '" & ItemV_Type.SKU & "'
                LEFT JOIN ItemType It On Sku.ItemType = It.Code
                LEFT JOIN Item IC On Sku.ItemCategory = IC.Code
                LEFT JOIN Item IG On Sku.ItemGroup = IG.Code
                LEFT JOIN Item D1 ON D1.Code = Sku.Dimension1  
                LEFT JOIN Item D2 ON D2.Code = Sku.Dimension2
                LEFT JOIN Item D3 ON D3.Code = Sku.Dimension3
                LEFT JOIN Item D4 ON D4.Code = Sku.Dimension4
                LEFT JOIN Item Size ON Size.Code = Sku.Size 
                Where 1=1 "

        If mRow >= 0 Then
            If AgL.XNull(Dgl1.Item(Col1ItemCategory, mRow).Tag) <> "" Then
                mQry += " And Ic.Code = '" & Dgl1.Item(Col1ItemCategory, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1ItemGroup, mRow).Tag) <> "" Then
                mQry += " And Ig.Code = '" & Dgl1.Item(Col1ItemGroup, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Item, mRow).Tag) <> "" Then
                mQry += " And I.Code = '" & Dgl1.Item(Col1Item, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Dimension1, mRow).Tag) <> "" Then
                mQry += " And D1.Code = '" & Dgl1.Item(Col1Dimension1, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Dimension2, mRow).Tag) <> "" Then
                mQry += " And D2.Code = '" & Dgl1.Item(Col1Dimension2, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Dimension3, mRow).Tag) <> "" Then
                mQry += " And D3.Code = '" & Dgl1.Item(Col1Dimension3, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Dimension4, mRow).Tag) <> "" Then
                mQry += " And D4.Code = '" & Dgl1.Item(Col1Dimension4, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Size, mRow).Tag) <> "" Then
                mQry += " And Size.Code = '" & Dgl1.Item(Col1Size, mRow).Tag & "'"
            End If
        End If

        mQry += "Order By StockReceiveDate, StockReceiveNo "

        DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)

        Dim FRH_Multiple As DMHelpGrid.FrmHelpGrid_Multi
        FRH_Multiple = New DMHelpGrid.FrmHelpGrid_Multi(New DataView(DtTemp), "", 400, 990, , , False)
        FRH_Multiple.FFormatColumn(0, "Tick", 40, DataGridViewContentAlignment.MiddleCenter, True)
        FRH_Multiple.FFormatColumn(1, , 0, , False)
        FRH_Multiple.FFormatColumn(2, "Receive No.", 90, DataGridViewContentAlignment.MiddleLeft)
        FRH_Multiple.FFormatColumn(3, "Receive Date", 100, DataGridViewContentAlignment.MiddleLeft)
        FRH_Multiple.FFormatColumn(4, AgL.PubCaptionItemCategory, 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[ItemCategory] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(5, AgL.PubCaptionItemGroup, 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[ItemGroup] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(6, AgL.PubCaptionItem, 180, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Item] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(7, AgL.PubCaptionDimension1, 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension1] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(8, AgL.PubCaptionDimension2, 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension2] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(9, AgL.PubCaptionDimension3, 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension3] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(10, AgL.PubCaptionDimension4, 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension4] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(11, "Size", 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Size] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(12, "Bal Qty", 90, DataGridViewContentAlignment.MiddleRight)
        FRH_Multiple.FFormatColumn(13, "Unit", 70, DataGridViewContentAlignment.MiddleLeft)

        FRH_Multiple.FFormatColumn(14, , 0, , False)
        FRH_Multiple.FFormatColumn(15, , 0, , False)
        FRH_Multiple.FFormatColumn(16, , 0, , False)
        FRH_Multiple.FFormatColumn(17, , 0, , False)
        FRH_Multiple.FFormatColumn(18, , 0, , False)
        FRH_Multiple.FFormatColumn(19, , 0, , False)
        FRH_Multiple.FFormatColumn(20, , 0, , False)
        FRH_Multiple.FFormatColumn(21, , 0, , False)
        FRH_Multiple.FFormatColumn(22, , 0, , False)
        FRH_Multiple.FFormatColumn(23, , 0, , False)
        FRH_Multiple.FFormatColumn(24, , 0, , False)
        FRH_Multiple.FFormatColumn(25, , 0, , False)
        FRH_Multiple.FFormatColumn(26, , 0, , False)
        FRH_Multiple.FFormatColumn(27, , 0, , False)
        FRH_Multiple.FFormatColumn(28, , 0, , False)
        FRH_Multiple.FFormatColumn(29, , 0, , False)

        FRH_Multiple.StartPosition = FormStartPosition.CenterScreen
        FRH_Multiple.ShowDialog()

        If FRH_Multiple.BytBtnValue = 0 Then
            StrRtn = FRH_Multiple.FFetchData(1, "'", "'", ",", True)
        End If

        Dim DrSelected As DataRow()
        If StrRtn <> "" Then
            DrSelected = DtTemp.Select("SearchKey In (" & StrRtn & ")")

            If mRow < 0 Then
                If Dgl1.Rows.Count > 1 Then
                    If MsgBox("Do you want to overwrite existing data in grid ? ", MsgBoxStyle.Question + MsgBoxStyle.YesNo) = MsgBoxResult.Yes Then
                        'Dgl1.Rows.Clear() : Dgl1.RowCount = 1 : mRow = 0
                        For I As Integer = 0 To Dgl1.Rows.Count - 1
                            If Dgl1.Item(Col1IsRecordLocked, I).Value = 0 Then
                                If Not Dgl1.Rows(I).IsNewRow Then
                                    Dgl1.Rows(I).Visible = False
                                End If
                            End If
                        Next
                        mRow = Dgl1.Rows.Count - 1
                    Else
                        mRow = Dgl1.Rows.Count - 1
                    End If
                Else
                    mRow = 0
                End If
            End If

            If Dgl1.Rows(mRow).IsNewRow = False Then
                Dgl1.Rows.Remove(Dgl1.Rows(mRow))
            End If
            Dgl1.Rows.Insert(mRow, DrSelected.Length)
            For I As Integer = 0 To DrSelected.Length - 1
                Dgl1.Item(Col1ItemType, I).Tag = AgL.XNull(DrSelected(I)("ItemTypeCode"))
                Dgl1.Item(Col1ItemType, I).Value = AgL.XNull(DrSelected(I)("ItemType"))

                Dgl1.Item(Col1ItemCategory, mRow + I).Tag = AgL.XNull(DrSelected(I)("ItemCategoryCode"))
                Dgl1.Item(Col1ItemCategory, mRow + I).Value = AgL.XNull(DrSelected(I)("ItemCategory"))

                Dgl1.Item(Col1ItemGroup, mRow + I).Tag = AgL.XNull(DrSelected(I)("ItemGroupCode"))
                Dgl1.Item(Col1ItemGroup, mRow + I).Value = AgL.XNull(DrSelected(I)("ItemGroup"))

                Dgl1.Item(Col1Item, mRow + I).Tag = AgL.XNull(DrSelected(I)("ItemCode"))
                Dgl1.Item(Col1Item, mRow + I).Value = AgL.XNull(DrSelected(I)("Item"))

                Dgl1.Item(Col1Dimension1, mRow + I).Tag = AgL.XNull(DrSelected(I)("Dimension1Code"))
                Dgl1.Item(Col1Dimension1, mRow + I).Value = AgL.XNull(DrSelected(I)("Dimension1"))

                Dgl1.Item(Col1Dimension2, mRow + I).Tag = AgL.XNull(DrSelected(I)("Dimension2Code"))
                Dgl1.Item(Col1Dimension2, mRow + I).Value = AgL.XNull(DrSelected(I)("Dimension2"))

                Dgl1.Item(Col1Dimension3, mRow + I).Tag = AgL.XNull(DrSelected(I)("Dimension3Code"))
                Dgl1.Item(Col1Dimension3, mRow + I).Value = AgL.XNull(DrSelected(I)("Dimension3"))

                Dgl1.Item(Col1Dimension4, mRow + I).Tag = AgL.XNull(DrSelected(I)("Dimension4Code"))
                Dgl1.Item(Col1Dimension4, mRow + I).Value = AgL.XNull(DrSelected(I)("Dimension4"))

                Dgl1.Item(Col1Size, mRow + I).Tag = AgL.XNull(DrSelected(I)("SizeCode"))
                Dgl1.Item(Col1Size, mRow + I).Value = AgL.XNull(DrSelected(I)("Size"))

                Dgl1.Item(Col1PurchaseInvoice, mRow + I).Tag = AgL.XNull(DrSelected(I)("ReferenceDocId"))
                Dgl1.Item(Col1PurchaseInvoice, mRow + I).Value = AgL.XNull(DrSelected(I)("ReferenceTSr"))
                Dgl1.Item(Col1PurchaseInvoiceSr, mRow + I).Value = AgL.VNull(DrSelected(I)("ReferenceSr"))

                Dgl1.Item(Col1ReferenceNo, mRow + I).Value = AgL.XNull(DrSelected(I)("StockReceiveNo"))
                Dgl1.Item(Col1ReferenceDocID, mRow + I).Value = AgL.XNull(DrSelected(I)("StockReceive"))
                Dgl1.Item(Col1ReferenceTSr, mRow + I).Value = AgL.VNull(DrSelected(I)("StockReceiveSr"))
                Dgl1.Item(Col1ReferenceSr, mRow + I).Value = AgL.VNull(DrSelected(I)("StockReceiveSr"))
                Dgl1.Item(Col1ReferenceDocIdDate, mRow + I).Value = AgL.XNull(DrSelected(I)("StockReceiveDate"))


                Dgl1.Item(Col1Qty, mRow + I).Value = AgL.XNull(DrSelected(I)("BalanceQty"))
                Dgl1.Item(Col1DocQty, mRow + I).Value = AgL.XNull(DrSelected(I)("BalanceQty"))

                Dgl1.Item(Col1Rate, mRow + I).Value = AgL.XNull(DrSelected(I)("Rate"))

                Dgl1.Item(Col1Unit, mRow + I).Value = AgL.XNull(DrSelected(I)("Unit"))
                Dgl1.Item(Col1ReferenceDocIdBalanceQty, mRow + I).Value = AgL.XNull(DrSelected(I)("BalanceQty"))
                FGetRateConsideringAllDimensions(mRow + I)
            Next

            For I As Integer = 0 To Dgl1.Rows.Count - 1
                Dgl1.Item(ColSNo, I).Value = I + 1
                FGeterateSkuName(I)
            Next
        End If
        Calculation()
    End Sub

    Private Sub FrmPurchInvoiceDirect_KeyDown(sender As Object, e As KeyEventArgs) Handles Me.KeyDown
        If e.KeyCode = (Keys.W And e.Control) Then
            If Topctrl1.Mode = "Add" Then
                ShowPurchaseInvoiceParty("", DglMain.Item(Col1Value, rowVendor).Tag, TxtNature.Text)
            Else
                ShowPurchaseInvoiceParty(mSearchCode, "", TxtNature.Text)
            End If
        End If
    End Sub
    Private Sub InsertPurchInvoiceBarcodeLastTransactionDetail(DocID As String, Sr As Integer, LineGridRowIndex As Integer, ByRef Conn As Object, ByRef Cmd As Object)
        If Dgl1.Item(Col1Barcode, LineGridRowIndex).Tag <> "" Then
            mQry = "
                        INSERT INTO PurchInvoiceBarcodeLastTransactionValues 
                        (DocID, Sr, LastTrnDiv_Code, LastTrnSite_Code, LastTrnDocID, LastTrnSr, LastTrnV_Type, LastTrnManualRefNo, LastTrnSubcode, LastTrnProcess, CurrentGodown, Status)
                        select '" & DocID & "' DocID, " & Sr & " Sr, Div_Code, Site_Code, LastTrnDocID, LastTrnSr, LastTrnV_Type, LastTrnManualRefNo, LastTrnSubcode, LastTrnProcess, CurrentGodown, Status
                        From BarCodeSiteDetail  With (NoLock)
                        WHERE CODE='" & Dgl1.Item(Col1Barcode, LineGridRowIndex).Tag & "' 
                        AND Div_Code='" & TxtDivision.Tag & "' 
                        And Site_code='" & DglMain.Item(Col1Value, rowSite_Code).Tag & "'                    
                    "
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
        End If
    End Sub
    Private Sub UpdateBarcodeSiteDetail(DocID As String, Sr As Integer, LineGridRowIndex As Integer, ByRef Conn As Object, ByRef Cmd As Object)
        Dim mBarcodeStatus As String = ""
        If LblV_Type.Tag = Ncat.SaleInvoice Then
            mBarcodeStatus = BarcodeStatus.Issue
        ElseIf LblV_Type.Tag = Ncat.SaleInvoice Then
            mBarcodeStatus = BarcodeStatus.Receive
        End If

        If Dgl1.Item(Col1Barcode, LineGridRowIndex).Tag <> "" And mBarcodeStatus <> "" Then
            mQry = "Update BarcodeSiteDetail Set
                                LastTrnDocID = " & AgL.Chk_Text(DocID) & ",
                                LastTrnSr=" & AgL.Chk_Text(Sr) & ",
                                LastTrnV_Type=" & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_Type).Tag) & ",
                                LastTrnManualRefNo = " & AgL.Chk_Text(DglMain.Item(Col1Value, rowReferenceNo).Value) & ",
                                LastTrnSubcode=" & AgL.Chk_Text(DglMain.Item(Col1Value, rowVendor).Tag) & ",
                                LastTrnProcess=" & AgL.Chk_Text(Process.Purchase) & ",
                                CurrentGodown=" & AgL.Chk_Text(Dgl1.Item(Col1Godown, LineGridRowIndex).Tag) & ",
                                Status = " & AgL.Chk_Text(mBarcodeStatus) & "
                                WHERE CODE='" & Dgl1.Item(Col1Barcode, LineGridRowIndex).Tag & "' 
                                AND Div_Code='" & TxtDivision.Tag & "' 
                                And Site_code='" & DglMain.Item(Col1Value, rowSite_Code).Tag & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
        End If
    End Sub
    Private Sub TxtBarcode_Validating(sender As Object, e As CancelEventArgs) Handles TxtBarcode.Validating
        Dim DtBarcode As DataTable
        If TxtBarcode.Text <> "" Then
            mQry = "Select * From Barcode  With (NoLock) 
                    Where Description = '" & TxtBarcode.Text & "'"
            DtBarcode = AgL.FillData(mQry, AgL.GCn).Tables(0)

            If FGetBarcodeDetail(DtBarcode) = False Then
                TxtBarcode.Text = ""
                e.Cancel = True
                Exit Sub
            End If

            Dim mRow As Integer
            mRow = Dgl1.Rows.Add()
            Dgl1.Item(ColSNo, mRow).Value = Dgl1.Rows.Count - 1
            Dgl1.Item(Col1Barcode, mRow).Tag = AgL.XNull(DtBarcode.Rows(0)("Code"))
            Dgl1.Item(Col1Barcode, mRow).Value = AgL.XNull(DtBarcode.Rows(0)("Description"))
            Validating_ItemCode(DtBarcode.Rows(0)("Item"), Dgl1.Columns(Col1Item).Index, mRow)
            If Dgl1.Item(Col1Item, mRow).Value = "" Then
                Dgl1.Rows(mRow).Visible = False
            Else
                Dgl1.Item(Col1Qty, mRow).Value = 1
                Dgl1.Item(Col1DocQty, mRow).Value = 1
            End If
            FGeterateSkuName(mRow)
            Calculation()
            Calculation()
            TxtBarcode.Text = ""
            TxtBarcode.Focus()
        Else
            Dgl1.CurrentCell = Dgl1.FirstDisplayedCell
            Dgl1.Focus()
        End If
    End Sub
    Private Function FGetBarcodeDetail(DtBarcode As DataTable) As Boolean
        Dim DtBarcodeSiteDetail As DataTable
        Dim DtBarcodeLastValues As DataTable

        If DtBarcode.Rows.Count = 0 Then
            MsgBox("Invalid Barcode")
            FGetBarcodeDetail = False
            Exit Function
        Else
            If AgL.XNull(DtBarcode.Rows(0)("Div_Code")) <> TxtDivision.Tag Then
                MsgBox("Barcode does not belong to current division. Can not continue.")
                FGetBarcodeDetail = False
                Exit Function
            End If

            mQry = "Select * from BarcodeSiteDetail  With (NoLock) Where Code = '" & DtBarcode.Rows(0)("Code") & "' And Div_Code='" & TxtDivision.Tag & "' And Site_Code = '" & DglMain.Item(Col1Value, rowSite_Code).Tag & "' "
            DtBarcodeSiteDetail = AgL.FillData(mQry, AgL.GCn).Tables(0)

            If DtBarcodeSiteDetail.Rows.Count = 0 Then
                MsgBox("No record found for barcode for current site. Can not continue.")
                FGetBarcodeDetail = False
                Exit Function
            End If

            mQry = "Select H.Qty, L.* From BarcodeSiteDetail L  With (NoLock) Left Join Barcode H  With (NoLock) On L.Code = H.Code Where H.Description = '" & AgL.XNull(DtBarcode.Rows(0)("Description")) & "' And L.Div_Code = '" & TxtDivision.Tag & "' And L.Site_Code = '" & DglMain.Item(Col1Value, rowSite_Code).Tag & "'"
            DtBarcodeLastValues = AgL.FillData(mQry, AgL.GCn).Tables(0)
            If DtBarcodeLastValues.Rows.Count > 0 Then
                If LblNCatNature.Tag = NCatNature.Invoice Then
                    If AgL.VNull(DtBarcodeLastValues.Rows(0)("CurrentStock")) <= 0 Then
                        MsgBox("Barcode " & DtBarcode.Rows(0)("Description") & " Is Not In Stock. Can't Issue It.")
                        FGetBarcodeDetail = False
                        Exit Function
                    End If
                ElseIf LblNCatNature.Tag = NCatNature.Return_ Then
                    If AgL.VNull(DtBarcodeLastValues.Rows(0)("CurrentStock")) > 0 And AgL.VNull(DtBarcodeLastValues.Rows(0)("CurrentStock")) <> AgL.VNull(DtBarcodeLastValues.Rows(0)("Qty")) Then
                        MsgBox("Barcode " & AgL.XNull(DtBarcode.Rows(0)("Description")) & " Is Already In Our Stock. Can't Receive It.")
                        FGetBarcodeDetail = False
                        Exit Function
                    End If
                ElseIf LblNCatNature.Tag = NCatNature.Order Then
                    If AgL.VNull(DtBarcodeLastValues.Rows(0)("CurrentStock")) < 0 Then
                        MsgBox("Barcode " & DtBarcode.Rows(0)("Description") & " Is Not In Stock. Can't Issue It.")
                        FGetBarcodeDetail = False
                        Exit Function
                    End If
                End If
            End If
        End If

        FGetBarcodeDetail = True
    End Function
    Private Sub FPostConsumption(mDocId As String, mSr As Integer, mRow As Integer, ByVal Conn As Object, ByVal Cmd As Object)
        'Dim bBomItem As String = ClsMain.GetConsumption(Dgl1.Item(Col1SKU, mRow).Tag)
        Dim bBomItem As String = ClsMain.FGetBomWithBomPattern("", "",
                            "", "", "", "", "", "", "", Dgl1.Item(Col1RawMaterial, mRow).Tag, Dgl1.Item(Col1SKU, mRow).Tag, "")

        mQry = " INSERT INTO PurchInvoiceDetailBom(DocId, TSr, Sr, Item, Qty, Unit)
                    Select " & AgL.Chk_Text(mDocId) & " As DocId, 
                    " & Val(mSr) & " As TSr, L.Sr, L.Item, 
                    " & Val(Dgl1.Item(Col1Qty, mRow).Value) & " * L.Qty, I.Unit
                    From (Select * From BomDetail Where Code = '" & bBomItem & "') As L 
                    LEFT JOIN Item I On L.Item = I.Code "
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

        mQry = " INSERT INTO PurchInvoiceDetailBomSku(DocId, TSr, Sr, ItemCategory, ItemGroup, 
                    Item, Dimension1, Dimension2, Dimension3, Dimension4, Size)
                    Select L.DocId, L.TSr, L.Sr, Sku.ItemCategory, Sku.ItemGroup, 
                    L.Item As Item, Sku.Dimension1, Sku.Dimension2, Sku.Dimension3, Sku.Dimension4, Sku.Size
                    From PurchInvoiceDetailBom L With (NoLock)
                    LEFT JOIN Item Sku With (NoLock) On L.Item = Sku.Code
                    Where L.DocId = '" & mDocId & "' And L.TSr = " & Val(mSr) & ""
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

    End Sub
    Private Sub FOpenMultiLineUI(mRow As Integer)
        Dim FrmObj As FrmPurchInvoiceMultiLineUI_WithDimension = New FrmPurchInvoiceMultiLineUI_WithDimension
        FrmObj.DglRow = Dgl1.Rows(mRow)
        FrmObj.SiteCode = DglMain.Item(Col1Value, rowSite_Code).Tag
        FrmObj.DivCode = TxtDivision.Tag
        FrmObj.SettingGroup = DglMain.Item(Col1Value, rowSettingGroup).Tag
        FrmObj.PartyCode = DglMain.Item(Col1Value, rowVendor).Tag
        FrmObj.VType = DglMain.Item(Col1Value, rowV_Type).Tag
        FrmObj.ProcessCode = DglMain.Item(Col1Value, rowProcess).Tag
        FrmObj.RateType = Dgl2.Item(Col1Value, rowRateType).Tag

        FrmObj.EntryMode = Topctrl1.Mode
        FrmObj.DtV_TypeSettings = DtV_TypeSettings
        FrmObj.IniGrid(mSearchCode)
        FrmObj.StartPosition = FormStartPosition.CenterScreen
        FrmObj.ShowDialog()

        If FrmObj.mOkButtonPressed = True Then
            Dim DglCurrentRow As DataGridViewRow = Dgl1.Rows(mRow)

            If FrmObj.Dgl1.Rows.Count > 0 Then
                Dgl1.Rows(mRow).Visible = False

                Dgl1.Rows.Insert(mRow, FrmObj.Dgl1.Rows.Count - 1)
                For I As Integer = 0 To FrmObj.Dgl1.Rows.Count - 1
                    Dgl1.Item(Col1ItemType, mRow + I).Tag = AgL.XNull(DglCurrentRow.Cells(Col1ItemType).Tag)
                    Dgl1.Item(Col1ItemType, mRow + I).Value = AgL.XNull(DglCurrentRow.Cells(Col1ItemType).Value)

                    Dgl1.Item(Col1ItemCategory, mRow + I).Tag = AgL.XNull(DglCurrentRow.Cells(Col1ItemCategory).Tag)
                    Dgl1.Item(Col1ItemCategory, mRow + I).Value = AgL.XNull(DglCurrentRow.Cells(Col1ItemCategory).Value)

                    Dgl1.Item(Col1ItemGroup, mRow + I).Tag = AgL.XNull(DglCurrentRow.Cells(Col1ItemGroup).Tag)
                    Dgl1.Item(Col1ItemGroup, mRow + I).Value = AgL.XNull(DglCurrentRow.Cells(Col1ItemGroup).Value)

                    Dgl1.Item(Col1Item, mRow + I).Tag = AgL.XNull(DglCurrentRow.Cells(Col1Item).Tag)
                    Dgl1.Item(Col1Item, mRow + I).Value = AgL.XNull(DglCurrentRow.Cells(Col1Item).Value)

                    Dgl1.Item(Col1Dimension1, mRow + I).Tag = AgL.XNull(DglCurrentRow.Cells(Col1Dimension1).Tag)
                    Dgl1.Item(Col1Dimension1, mRow + I).Value = AgL.XNull(DglCurrentRow.Cells(Col1Dimension1).Value)

                    Dgl1.Item(Col1Dimension2, mRow + I).Tag = AgL.XNull(DglCurrentRow.Cells(Col1Dimension2).Tag)
                    Dgl1.Item(Col1Dimension2, mRow + I).Value = AgL.XNull(DglCurrentRow.Cells(Col1Dimension2).Value)

                    Dgl1.Item(Col1Dimension3, mRow + I).Tag = AgL.XNull(DglCurrentRow.Cells(Col1Dimension3).Tag)
                    Dgl1.Item(Col1Dimension3, mRow + I).Value = AgL.XNull(DglCurrentRow.Cells(Col1Dimension3).Value)

                    Dgl1.Item(Col1Dimension4, mRow + I).Tag = AgL.XNull(DglCurrentRow.Cells(Col1Dimension4).Tag)
                    Dgl1.Item(Col1Dimension4, mRow + I).Value = AgL.XNull(DglCurrentRow.Cells(Col1Dimension4).Value)

                    Dgl1.Item(Col1Unit, mRow + I).Value = AgL.XNull(DglCurrentRow.Cells(Col1Unit).Value)

                    Dgl1.Item(Col1SalesTaxGroup, mRow + I).Tag = AgL.XNull(DglCurrentRow.Cells(Col1SalesTaxGroup).Tag)
                    Dgl1.Item(Col1SalesTaxGroup, mRow + I).Value = AgL.XNull(DglCurrentRow.Cells(Col1SalesTaxGroup).Value)

                    Dgl1.Item(Col1Size, mRow + I).Tag = FrmObj.Dgl1.Item(FrmPurchInvoiceMultiLineUI_WithDimension.Col1Size, I).Tag
                    Dgl1.Item(Col1Size, mRow + I).Value = FrmObj.Dgl1.Item(FrmPurchInvoiceMultiLineUI_WithDimension.Col1Size, I).Value

                    Dgl1.Item(Col1DocQty, mRow + I).Value = FrmObj.Dgl1.Item(FrmPurchInvoiceMultiLineUI_WithDimension.Col1Qty, I).Value
                    Dgl1.Item(Col1Qty, mRow + I).Value = Dgl1.Item(Col1DocQty, mRow + I).Value

                    Dgl1.Item(Col1Rate, mRow + I).Value = FrmObj.Dgl1.Item(FrmPurchInvoiceMultiLineUI_WithDimension.Col1Rate, I).Value

                Next

                For I As Integer = 0 To Dgl1.Rows.Count - 1
                    Dgl1.Item(ColSNo, I).Value = I + 1

                    FGeterateSkuName(I)
                Next
                Calculation()
            End If
        End If
        Dgl1.CurrentCell = Dgl1.Item(Dgl1.FirstDisplayedCell.ColumnIndex, Dgl1.Rows.Count - 1)
    End Sub
    Private Sub FrmPurchInvoiceDirect_BaseEvent_Save_PostTrans(SearchCode As String) Handles Me.BaseEvent_Save_PostTrans
        If AgL.StrCmp(Topctrl1.Mode, "Add") Then
            If FGetSettings(SettingFields.ActionToPrintOnAdd, SettingType.General) = ActionToPrint.AskAndPrintOnScreen Then
                If MsgBox("Do you want to print ? ", MsgBoxStyle.Question + MsgBoxStyle.YesNo) = MsgBoxResult.Yes Then
                    FGetPrint(SearchCode, ClsMain.PrintFor.DocumentPrint)
                End If
            ElseIf FGetSettings(SettingFields.ActionToPrintOnAdd, SettingType.General) = ActionToPrint.AskAndPrintToPrinter Then
                If MsgBox("Do you want to print ? ", MsgBoxStyle.Question + MsgBoxStyle.YesNo) = MsgBoxResult.Yes Then
                    FGetPrint(SearchCode, ClsMain.PrintFor.DocumentPrint, True)
                End If
            ElseIf FGetSettings(SettingFields.ActionToPrintOnAdd, SettingType.General) = ActionToPrint.PrintOnScreen Then
                FGetPrint(SearchCode, ClsMain.PrintFor.DocumentPrint)
            ElseIf FGetSettings(SettingFields.ActionToPrintOnAdd, SettingType.General) = ActionToPrint.PrintToPrinter Then
                FGetPrint(SearchCode, ClsMain.PrintFor.DocumentPrint, True)
            End If
        End If
    End Sub
    Private Function FValidateSalesTaxGroup() As Boolean
        Dim bAllowedSalesTaxGroupParty As String = FGetSettings(SettingFields.AllowedSalesTaxGroupParty, SettingType.General)
        If bAllowedSalesTaxGroupParty <> "" Then
            Dim bSalesTaxPostingGroup As String = AgL.XNull(AgL.Dman_Execute("Select SalesTaxPostingGroup 
                                        From SubGroup 
                                        Where SubCode = '" & DglMain.Item(Col1Value, rowVendor).Tag & "'", AgL.GCn).ExecuteScalar())
            If bAllowedSalesTaxGroupParty.ToUpper.Contains("+" + bSalesTaxPostingGroup.ToUpper) = False Then
                MsgBox(bSalesTaxPostingGroup + " Parties are not allowed for " & DglMain.Item(Col1Value, rowV_Type).Value & "...!", MsgBoxStyle.Information)
                FValidateSalesTaxGroup = False : Exit Function
            End If
        End If
        FValidateSalesTaxGroup = True
    End Function
    Private Sub Dgl2_CellBeginEdit(sender As Object, e As DataGridViewCellCancelEventArgs) Handles Dgl2.CellBeginEdit
        Try
            If Dgl2.CurrentCell Is Nothing Then Exit Sub

            Select Case Dgl2.CurrentCell.RowIndex
                Case rowSalesTaxNo
                    e.Cancel = True
            End Select
            Dgl2.Item(Col1LastValue, Dgl2.CurrentCell.RowIndex).Tag = Dgl2.Item(Col1Value, Dgl2.CurrentCell.RowIndex).Tag
            Dgl2.Item(Col1LastValue, Dgl2.CurrentCell.RowIndex).Value = Dgl2.Item(Col1Value, Dgl2.CurrentCell.RowIndex).Value
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub
    Private Sub FMaterialIssue()
        Dim mMaterialIssueDocIDs As String = ""
        mQry = " Select H.DocId 
                From StockHead H 
                LEFT JOIN StockHeadDetail L On H.DocId = L.DocID 
                LEFT JOIN Voucher_Type Vt ON H.V_Type = Vt.V_Type
                Where Vt.NCat In ('" & Ncat.StockIssue & "','" & Ncat.StockReceive & "')
                And L.ReferenceDocId = '" & mSearchCode & "'"
        If AgL.PubServerName <> "" Then
            mMaterialIssueDocIDs = AgL.Dman_Execute("Select H.DocId + ',' 
                        From StockHead H 
                        LEFT JOIN StockHeadDetail L On H.DocId = L.DocID 
                        LEFT JOIN Voucher_Type Vt ON H.V_Type = Vt.V_Type
                        Where Vt.NCat In ('" & Ncat.StockIssue & "','" & Ncat.StockReceive & "')
                        And L.ReferenceDocId = '" & mSearchCode & "' for xml path('')", AgL.GcnRead).executescalar()
        End If


        If mMaterialIssueDocIDs <> "" Then
            Dim FrmObj As New FrmPurchInvoiceMaterialIssueDisp
            FrmObj.MaterialIssueDocId = mMaterialIssueDocIDs
            FrmObj.VendorCode = DglMain.Item(Col1Value, rowVendor).Tag
            FrmObj.SearchCode = mSearchCode
            FrmObj.IniGrid(mSearchCode)
            FrmObj.ObjFrm = Me
            FrmObj.StartPosition = FormStartPosition.CenterScreen
            FrmObj.ShowDialog()
        Else
            Dim StrUserPermission As String
            Dim DTUP As DataTable
            Dim objMdi As New MDIMain
            StrUserPermission = AgIniVar.FunGetUserPermission(ClsMain.ModuleName, objMdi.MnuItemMaster.Name, objMdi.MnuItemMaster.Text, DTUP)
            Dim FrmObj As New FrmStockEntry(StrUserPermission, DTUP, Ncat.StockIssue)
            FrmObj.MdiParent = Me.MdiParent
            FrmObj.Show()
            FrmObj.Topctrl1.FButtonClick(0)
            FrmObj.DglMain.Item(Col1Value, FrmObj.rowParty).Tag = DglMain.Item(Col1Value, rowVendor).Tag
            FrmObj.DglMain.Item(Col1Value, FrmObj.rowParty).Value = DglMain.Item(Col1Value, rowVendor).Value
            FrmObj.DglMain.Item(Col1Value, FrmObj.rowV_Date).Value = DglMain.Item(Col1Value, rowV_Date).Value
            FrmObj.Validating_SaleToParty(FrmObj.DglMain.Item(Col1Value, FrmObj.rowParty).Tag)
            FrmObj.Dgl2.Item(Col1Value, FrmObj.rowReferenceDocId).Tag = mSearchCode
            FrmObj.Dgl2.Item(Col1Value, FrmObj.rowReferenceDocId).Value = DglMain.Item(Col1Value, rowV_Type).Tag + "-" + DglMain.Item(Col1Value, rowReferenceNo).Value

            If AgL.XNull(Dgl2.Item(Col1Value, rowGodown).Tag) = "" Then
                mQry = "Select SubCode As Code, Name 
                        From SubGroup 
                        Where SubGroupType = '" & SubgroupType.Godown & "'"
                Dim DtGodown As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)

                If DtGodown.Rows.Count = 1 Then
                    FrmObj.Dgl2.Item(Col1Value, FrmObj.rowGodown).Tag = AgL.XNull(DtGodown.Rows(0)("Code"))
                    FrmObj.Dgl2.Item(Col1Value, FrmObj.rowGodown).Value = AgL.XNull(DtGodown.Rows(0)("Name"))
                End If
            Else
                FrmObj.Dgl2.Item(Col1Value, FrmObj.rowGodown).Tag = Dgl2.Item(Col1Value, rowGodown).Tag
                FrmObj.Dgl2.Item(Col1Value, FrmObj.rowGodown).Value = Dgl2.Item(Col1Value, rowGodown).Value
            End If

            If ClsMain.FDivisionNameForCustomization(14) = "PRATHAM APPARE" Or
            FDivisionNameForCustomization(15) = "AGARWAL UNIFORM" Then
                FrmObj.DglMain.Item(FrmStockEntry.Col1Value, FrmObj.rowSettingGroup).Tag = ClsGarmentProduction.SettingGroup_RawAndOtherMaterial
                FrmObj.DglMain.Item(FrmStockEntry.Col1Value, FrmObj.rowSettingGroup).Value = AgL.XNull(AgL.Dman_Execute("Select Name From SettingGroup Where Code = '" & FrmObj.DglMain.Item(FrmStockEntry.Col1Value, FrmObj.rowSettingGroup).Tag & "'", AgL.GCn).ExecuteScalar())
                FrmObj.IniGrid()
            End If
        End If
    End Sub
    'Private Sub FPostConsumption_Garment(mDocId As String, mSr As Integer, mRow As Integer, ByVal Conn As Object, ByVal Cmd As Object)
    '    'Dim bBomItem As String = ClsMain.GetConsumption(Dgl1.Item(Col1SKU, mRow).Tag)
    '    Dim bBomItemForCloth As String = ClsMain.FGetBomWithBomPattern("", "",
    '                        "", "", "", "", "", "", "", Dgl1.Item(Col1RawMaterial, mRow).Tag, Dgl1.Item(Col1SKU, mRow).Tag, "Item Category,Size,Raw Material")

    '    Dim bBomItem As String = ClsMain.FGetBomWithBomPattern("", "",
    '                        "", "", "", "", "", "", "", "", Dgl1.Item(Col1SKU, mRow).Tag, "Item Category")

    '    Dim bBomItemException As String = ClsMain.FGetBomWithBomPattern("", "",
    '                        "", "", "", "", "", "", "", "", Dgl1.Item(Col1SKU, mRow).Tag, "Item Category,Dimension3")



    '    mQry = " Select " & AgL.Chk_Text(mDocId) & " As DocId, 
    '            " & Val(mSr) & " As TSr, L.Sr, '' As Sku, 
    '            Ic.ItemType, L.Item As ItemCategory, Ic.Description As ItemCategoryDesc, 
    '            '" & Dgl1.Item(Col1Dimension2, mRow).Tag & "' As Dimension2, 
    '            '" & Dgl1.Item(Col1Dimension2, mRow).Value & "' As Dimension2Desc, 
    '            '" & Dgl1.Item(Col1Dimension3, mRow).Tag & "' As Dimension3, 
    '            '" & Dgl1.Item(Col1Dimension3, mRow).Value & "' As Dimension3Desc, 
    '            '" & Dgl1.Item(Col1RawMaterial, mRow).Tag & "' As Dimension4, 
    '            '" & Dgl1.Item(Col1RawMaterial, mRow).Value & "' As Dimension4Desc, 
    '            " & Val(Dgl1.Item(Col1Qty, mRow).Value) & " * L.Qty As Qty, Ic.Unit
    '            From (Select * From BomDetail With (NoLock) Where Code = '" & bBomItemForCloth & "') As L 
    '            LEFT JOIN Item Ic On L.Item = Ic.Code "

    '    mQry += " UNION ALL "

    '    mQry += " Select " & AgL.Chk_Text(mDocId) & " As DocId, 
    '            " & Val(mSr) & " As TSr, L.Sr, '' As Sku, 
    '            Ic.ItemType, L.Item As ItemCategory, Ic.Description As ItemCategoryDesc, 
    '            '" & Dgl1.Item(Col1Dimension2, mRow).Tag & "' As Dimension2, 
    '            '" & Dgl1.Item(Col1Dimension2, mRow).Value & "' As Dimension2Desc, 
    '            '" & Dgl1.Item(Col1Dimension3, mRow).Tag & "' As Dimension3, 
    '            '" & Dgl1.Item(Col1Dimension3, mRow).Value & "' As Dimension3Desc, 
    '            Null As Dimension4, 
    '            Null As Dimension4Desc, 
    '            " & Val(Dgl1.Item(Col1Qty, mRow).Value) & " * L.Qty As Qty, Ic.Unit
    '            From (Select * From BomDetail With (NoLock) Where Code In ('" & bBomItem & "','" & bBomItemException & "')) As L 
    '            LEFT JOIN Item Ic On L.Item = Ic.Code "
    '    Dim DtBomDetail As DataTable = AgL.FillData(mQry, AgL.GcnRead).Tables(0)



    '    For I As Integer = 0 To DtBomDetail.Rows.Count - 1
    '        DtBomDetail.Rows(I)("Sku") = ClsMain.FGetSKUCode(Dgl1.Item(ColSNo, I).Value, AgL.XNull(DtBomDetail.Rows(0)("ItemType")) _
    '                , AgL.XNull(DtBomDetail.Rows(I)("ItemCategory")), AgL.XNull(DtBomDetail.Rows(I)("ItemCategoryDesc")) _
    '                , "", "", "", "" _
    '                , "", "" _
    '                , AgL.XNull(DtBomDetail.Rows(I)("Dimension2")), AgL.XNull(DtBomDetail.Rows(I)("Dimension2Desc")) _
    '                , AgL.XNull(DtBomDetail.Rows(I)("Dimension3")), AgL.XNull(DtBomDetail.Rows(I)("Dimension3Desc")) _
    '                , AgL.XNull(DtBomDetail.Rows(I)("Dimension4")), AgL.XNull(DtBomDetail.Rows(I)("Dimension4Desc")) _
    '                , "", "", "", "", "", "", "", "", "", "")


    '        mQry = " INSERT INTO PurchInvoiceDetailBom(DocId, TSr, Sr, Item, Qty, Unit)
    '                Select " & AgL.Chk_Text(mDocId) & " As DocId, 
    '                " & Val(mSr) & " As TSr, " & Val(I + 1) & " As Sr, '" & AgL.XNull(DtBomDetail.Rows(I)("Sku")) & "' As Item, 
    '                " & AgL.VNull(DtBomDetail.Rows(I)("Qty")) & " As Qty, 
    '                '" & AgL.XNull(DtBomDetail.Rows(I)("Unit")) & "' As Unit "
    '        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

    '        mQry = " INSERT INTO PurchInvoiceDetailBomSku(DocId, TSr, Sr, ItemCategory, ItemGroup, 
    '                Item, Dimension1, Dimension2, Dimension3, Dimension4, Size)
    '                Select " & AgL.Chk_Text(mDocId) & " As DocId, 
    '                " & Val(mSr) & " As TSr, " & Val(I + 1) & " As Sr,
    '                " & AgL.Chk_Text(AgL.XNull(DtBomDetail.Rows(I)("ItemCategory"))) & " As ItemCategory, 
    '                Null As ItemGroup, 
    '                Null As Item, 
    '                Null As Dimension1, 
    '                " & AgL.Chk_Text(AgL.XNull(DtBomDetail.Rows(I)("Dimension2"))) & " As Dimension2, 
    '                " & AgL.Chk_Text(AgL.XNull(DtBomDetail.Rows(I)("Dimension3"))) & " As Dimension3, 
    '                " & AgL.Chk_Text(AgL.XNull(DtBomDetail.Rows(I)("Dimension4"))) & " As Dimension4, 
    '                Null As Size "
    '        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
    '    Next
    'End Sub
    'Private Sub FPostConsumption_Garment(mDocId As String, mSr As Integer, mRow As Integer, ByVal Conn As Object, ByVal Cmd As Object)
    '    Dim bBomItemForCloth As String = AgL.Dman_Execute(" Select * From Item With (NoLock) Where V_Type = '" & ItemV_Type.BOM & "'
    '            And ItemCategory = '" & Dgl1.Item(Col1ItemCategory, mRow).Tag & "'
    '            And RawMaterial = '" & Dgl1.Item(Col1RawMaterial, mRow).Tag & "'
    '            And Size = '" & Dgl1.Item(Col1Size, mRow).Tag & "' ", AgL.GcnRead).ExecuteScalar()

    '    Dim bBomItem As String = AgL.Dman_Execute(" Select * From Item With (NoLock) Where V_Type = '" & ItemV_Type.BOM & "'
    '            And ItemCategory = '" & Dgl1.Item(Col1ItemCategory, mRow).Tag & "'
    '            And RawMaterial Is Null
    '            And Size Is Null ", AgL.GcnRead).ExecuteScalar()

    '    Dim bBomItemException As String = AgL.Dman_Execute(" Select * From Item With (NoLock) Where V_Type = '" & ItemV_Type.BOM & "'
    '            And ItemCategory = '" & Dgl1.Item(Col1ItemCategory, mRow).Tag & "'
    '            And Dimension3 = '" & Dgl1.Item(Col1Dimension3, mRow).Tag & "'
    '            And Size Is Null ", AgL.GcnRead).ExecuteScalar()


    '    mQry = " Select " & AgL.Chk_Text(mDocId) & " As DocId, 
    '            " & Val(mSr) & " As TSr, L.Sr, L.Item As Sku, 
    '            " & Val(Dgl1.Item(Col1Qty, mRow).Value) & " * L.Qty As Qty, Ic.Unit
    '            From (Select * From BomDetail With (NoLock) Where Code In ('" & bBomItem & "','" & bBomItemForCloth & "','" & bBomItemException & "')) As L 
    '            LEFT JOIN Item Ic On L.Item = Ic.Code "
    '    Dim DtBomDetail As DataTable = AgL.FillData(mQry, AgL.GcnRead).Tables(0)

    '    For I As Integer = 0 To DtBomDetail.Rows.Count - 1
    '        mQry = " INSERT INTO PurchInvoiceDetailBom(DocId, TSr, Sr, Item, Qty, Unit)
    '                Select " & AgL.Chk_Text(mDocId) & " As DocId, 
    '                " & Val(mSr) & " As TSr, " & Val(I + 1) & " As Sr, 
    '                '" & AgL.XNull(DtBomDetail.Rows(I)("Sku")) & "' As Item, 
    '                " & AgL.VNull(DtBomDetail.Rows(I)("Qty")) & " As Qty, 
    '                '" & AgL.XNull(DtBomDetail.Rows(I)("Unit")) & "' As Unit "
    '        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
    '    Next

    '    mQry = " INSERT INTO PurchInvoiceDetailBomSku(DocId, TSr, Sr, ItemCategory, ItemGroup, 
    '                Item, Dimension1, Dimension2, Dimension3, Dimension4, Size)
    '                Select L.DocId, L.TSr, L.Sr, I.ItemCategory, I.ItemGroup, 
    '                Case When I.V_Type <> '" & ItemV_Type.SKU & "' Then I.Code Else Null End As Item, 
    '                I.Dimension1, I.Dimension2, I.Dimension3, I.Dimension4, I.Size
    '                From PurchInvoiceDetailBom L 
    '                LEFT JOIN Item I ON L.Item = I.Code 
    '                Where L.DocId = '" & mDocId & "' ANd L.TSr = " & Val(mSr) & ""
    '    AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
    'End Sub

    Private Sub FPostConsumption_Garment(mDocId As String, mSr As Integer, mRow As Integer, ByVal Conn As Object, ByVal Cmd As Object)
        Dim bBomItemForCloth As String = AgL.Dman_Execute(" Select * From Item With (NoLock) Where V_Type = '" & ItemV_Type.BOM & "'
                And ItemCategory = '" & Dgl1.Item(Col1ItemCategory, mRow).Tag & "'
                And RawMaterial = '" & Dgl1.Item(Col1RawMaterial, mRow).Tag & "'
                And Size = '" & Dgl1.Item(Col1Size, mRow).Tag & "' ", AgL.GcnRead).ExecuteScalar()

        If DglMain.Item(Col1Value, rowProcess).Tag = ClsGarmentProduction.Process_Cutting Or DglMain.Item(Col1Value, rowProcess).Tag = ClsGarmentProduction.Process_CuttingAndStitching Then
            If bBomItemForCloth = "" Then
                Err.Raise(1, "", "Consumption not found for line no." & mRow + 1)
            End If
        End If

        Dim bBomItem As String = AgL.Dman_Execute(" Select * From Item With (NoLock) Where V_Type = '" & ItemV_Type.BOM & "'
                And ItemCategory = '" & Dgl1.Item(Col1ItemCategory, mRow).Tag & "'
                And RawMaterial Is Null
                And Size Is Null
                And Dimension3 Is Null ", AgL.GcnRead).ExecuteScalar()

        If FDivisionNameForCustomization(15) = "AGARWAL UNIFORM" Then
            Dim bBomItemWithSize As String = AgL.Dman_Execute(" Select * From Item With (NoLock) Where V_Type = '" & ItemV_Type.BOM & "'
                And ItemCategory = '" & Dgl1.Item(Col1ItemCategory, mRow).Tag & "'
                And RawMaterial Is Null
                And Size = '" & Dgl1.Item(Col1Size, mRow).Tag & "'
                And Dimension3 Is Null ", AgL.GcnRead).ExecuteScalar()
            If bBomItemWithSize <> "" Then
                bBomItem = bBomItemWithSize
            End If

            If DglMain.Item(Col1Value, rowProcess).Tag = ClsGarmentProduction.Process_Stitching Then
                If bBomItem = "" Then
                    Err.Raise(1, "", "Consumption not found for line no." & mRow + 1)
                End If
            End If
        End If



        Dim bBomItemException As String = AgL.Dman_Execute(" Select * From Item With (NoLock) Where V_Type = '" & ItemV_Type.BOM & "'
                And ItemCategory = '" & Dgl1.Item(Col1ItemCategory, mRow).Tag & "'
                And Dimension3 = '" & Dgl1.Item(Col1Dimension3, mRow).Tag & "'
                And Size Is Null ", AgL.GcnRead).ExecuteScalar()

        Dim bProcessCondStr$ = ""
        If DglMain.Item(Col1Value, rowProcess).Tag = ClsGarmentProduction.Process_CuttingAndStitching Then
            bProcessCondStr = " And Process In ('" & ClsGarmentProduction.Process_Cutting & "','" & ClsGarmentProduction.Process_Stitching & "')"
        Else
            bProcessCondStr = " And Process = '" & DglMain.Item(Col1Value, rowProcess).Tag & "'"
        End If


        mQry = " Select " & AgL.Chk_Text(mDocId) & " As DocId, 
                    " & Val(mSr) & " As TSr, L.Sr, '' As Sku, 
                    Ic.ItemType, L.Item As ItemCategory, Ic.Description As ItemCategoryDesc, 
                    '" & Dgl1.Item(Col1Dimension1, mRow).Tag & "' As Dimension1, 
                    '" & Dgl1.Item(Col1Dimension1, mRow).Value & "' As Dimension1Desc, 
                    '" & Dgl1.Item(Col1Dimension2, mRow).Tag & "' As Dimension2, 
                    '" & Dgl1.Item(Col1Dimension2, mRow).Value & "' As Dimension2Desc, 
                    '" & Dgl1.Item(Col1Dimension3, mRow).Tag & "' As Dimension3, 
                    '" & Dgl1.Item(Col1Dimension3, mRow).Value & "' As Dimension3Desc, 
                    '" & Dgl1.Item(Col1RawMaterial, mRow).Tag & "' As Dimension4, 
                    '" & Dgl1.Item(Col1RawMaterial, mRow).Value & "' As Dimension4Desc, 
                    " & Val(Dgl1.Item(Col1Qty, mRow).Value) * Val(Dgl1.Item(Col1RawMaterialConsumptionQty, mRow).Value) & " As Qty, 
                    L.Unit
                    From (Select * From BomDetail With (NoLock) Where Code = '" & bBomItemForCloth & "'" & bProcessCondStr & ") As L 
                    LEFT JOIN Item Ic On L.Item = Ic.Code "

        mQry += " UNION ALL "

        mQry += " Select " & AgL.Chk_Text(mDocId) & " As DocId, 
                    " & Val(mSr) & " As TSr, L.Sr, L.Item As Sku, 
                    Ic.ItemType, '' As ItemCategory, '' As ItemCategoryDesc, 
                    '' As Dimension1, 
                    '' As Dimension1Desc, 
                    '' As Dimension2, 
                    '' As Dimension2Desc, 
                    '' As Dimension3, 
                    '' As Dimension3Desc, 
                    '' As Dimension4, 
                    '' As Dimension4Desc, 
                    " & Val(Dgl1.Item(Col1Qty, mRow).Value) & " * L.Qty As Qty, L.Unit
                    From (Select * From BomDetail With (NoLock) Where Code In ('" & bBomItem & "','" & bBomItemException & "') " & bProcessCondStr & ") As L 
                    LEFT JOIN Item Ic On L.Item = Ic.Code "
        Dim DtBomDetail As DataTable = AgL.FillData(mQry, AgL.GcnRead).Tables(0)



        For I As Integer = 0 To DtBomDetail.Rows.Count - 1
            If AgL.XNull(DtBomDetail.Rows(I)("Sku")) = "" Then
                DtBomDetail.Rows(I)("Sku") = ClsMain.FGetSKUCode(Dgl1.Item(ColSNo, mRow).Value, AgL.XNull(DtBomDetail.Rows(0)("ItemType")) _
                        , AgL.XNull(DtBomDetail.Rows(I)("ItemCategory")), AgL.XNull(DtBomDetail.Rows(I)("ItemCategoryDesc")) _
                        , "", "", "", "" _
                        , AgL.XNull(DtBomDetail.Rows(I)("Dimension1")), AgL.XNull(DtBomDetail.Rows(I)("Dimension1Desc")) _
                        , AgL.XNull(DtBomDetail.Rows(I)("Dimension2")), AgL.XNull(DtBomDetail.Rows(I)("Dimension2Desc")) _
                        , AgL.XNull(DtBomDetail.Rows(I)("Dimension3")), AgL.XNull(DtBomDetail.Rows(I)("Dimension3Desc")) _
                        , AgL.XNull(DtBomDetail.Rows(I)("Dimension4")), AgL.XNull(DtBomDetail.Rows(I)("Dimension4Desc")) _
                        , "", "", "", "", "", "", "", "", "", "")
            End If

            mQry = " INSERT INTO PurchInvoiceDetailBom(DocId, TSr, Sr, Item, Qty, Unit)
                    Select " & AgL.Chk_Text(mDocId) & " As DocId, 
                    " & Val(mSr) & " As TSr, " & Val(I + 1) & " As Sr, 
                    '" & AgL.XNull(DtBomDetail.Rows(I)("Sku")) & "' As Item, 
                    " & AgL.VNull(DtBomDetail.Rows(I)("Qty")) & " As Qty, 
                    " & AgL.Chk_Text(AgL.XNull(DtBomDetail.Rows(I)("Unit"))) & " As Unit "
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
        Next

        mQry = " INSERT INTO PurchInvoiceDetailBomSku(DocId, TSr, Sr, ItemCategory, ItemGroup, 
                    Item, Dimension1, Dimension2, Dimension3, Dimension4, Size)
                    Select L.DocId, L.TSr, L.Sr, I.ItemCategory, I.ItemGroup, 
                    Case When I.V_Type <> '" & ItemV_Type.SKU & "' Then I.Code Else Null End As Item, 
                    I.Dimension1, I.Dimension2, I.Dimension3, I.Dimension4, I.Size
                    From PurchInvoiceDetailBom L 
                    LEFT JOIN Item I ON L.Item = I.Code 
                    Where L.DocId = '" & mDocId & "' ANd L.TSr = " & Val(mSr) & ""
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

        FSaveWastage(mDocId, mSr, Conn, Cmd)
    End Sub

    Private Function FGetLastPurchaseRate(mRow As Integer) As Double
        mQry = "SELECT " & IIf(AgL.PubServerName = "", "", "Top 1") & " L.Rate
                FROM PurchInvoice H 
                LEFT JOIN PurchInvoiceDetail L ON H.DocID = L.DocID
                LEFT JOIN Voucher_Type Vt ON H.V_Type = Vt.V_Type
                WHERE Vt.NCat = '" & Ncat.PurchaseInvoice & "' 
                And H.Vendor = '" & DglMain.Item(Col1Value, rowVendor).Tag & "'
                AND L.Item = '" & Dgl1.Item(Col1Item, mRow).Tag & "' 
                ORDER BY H.V_Date DESC " & IIf(AgL.PubServerName = "", "Limit 1", "") & "	"
        Dim DtRate As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)

        If DtRate.Rows.Count > 0 Then
            FGetLastPurchaseRate = AgL.VNull(DtRate.Rows(0)("Rate"))
        Else
            FGetLastPurchaseRate = 0
        End If
    End Function
    Private Sub FGetRateConsideringAllDimensions(mRowIndex As Integer)
        If FDivisionNameForCustomization(14) = "PRATHAM APPARE" Or
            FDivisionNameForCustomization(15) = "AGARWAL UNIFORM" Then
            Dgl1.Item(Col1Rate, mRowIndex).Value = ClsMain.FGetRateWithRatePattern("", DglMain.Item(Col1Value, rowVendor).Tag, DglMain.Item(Col1Value, rowSettingGroup).Tag, TxtDivision.Tag, DglMain.Item(Col1Value, rowSite_Code).Tag, DglMain.Item(Col1Value, rowProcess).Tag, DglMain.Item(Col1Value, rowV_Type).Tag,
                    AgL.XNull(Dgl2.Item(Col1Value, rowRateType).Tag),
                    AgL.XNull(Dgl1.Item(Col1ItemCategory, mRowIndex).Tag),
                    AgL.XNull(Dgl1.Item(Col1ItemGroup, mRowIndex).Tag),
                    AgL.XNull(Dgl1.Item(Col1Item, mRowIndex).Tag),
                    AgL.XNull(Dgl1.Item(Col1Dimension1, mRowIndex).Tag),
                    AgL.XNull(Dgl1.Item(Col1Dimension2, mRowIndex).Tag),
                    AgL.XNull(Dgl1.Item(Col1Dimension3, mRowIndex).Tag),
                    AgL.XNull(Dgl1.Item(Col1Dimension4, mRowIndex).Tag),
                    AgL.XNull(Dgl1.Item(Col1Size, mRowIndex).Tag))

            If Val(Dgl1.Item(Col1Rate, mRowIndex).Value) > 0 Then
                Dgl1.Item(Col1Rate, mRowIndex).Value = Val(Dgl1.Item(Col1Rate, mRowIndex).Value) +
                    ClsMain.FGetRateWithRatePattern(RateCategory.RateAddition, DglMain.Item(Col1Value, rowVendor).Tag, DglMain.Item(Col1Value, rowSettingGroup).Tag, TxtDivision.Tag, DglMain.Item(Col1Value, rowSite_Code).Tag, DglMain.Item(Col1Value, rowProcess).Tag, DglMain.Item(Col1Value, rowV_Type).Tag,
                        AgL.XNull(Dgl2.Item(Col1Value, rowRateType).Tag),
                        AgL.XNull(Dgl1.Item(Col1ItemCategory, mRowIndex).Tag),
                        AgL.XNull(Dgl1.Item(Col1ItemGroup, mRowIndex).Tag),
                        AgL.XNull(Dgl1.Item(Col1Item, mRowIndex).Tag),
                        AgL.XNull(Dgl1.Item(Col1Dimension1, mRowIndex).Tag),
                        AgL.XNull(Dgl1.Item(Col1Dimension2, mRowIndex).Tag),
                        AgL.XNull(Dgl1.Item(Col1Dimension3, mRowIndex).Tag),
                        AgL.XNull(Dgl1.Item(Col1Dimension4, mRowIndex).Tag),
                        AgL.XNull(Dgl1.Item(Col1Size, mRowIndex).Tag))
            End If


            If CType(AgL.VNull(FGetSettings(SettingFields.GenerateBarcodeYn, SettingType.General)), Boolean) = True Then
                Dgl1.Item(Col1MRP, mRowIndex).Value = ClsMain.FGetRateWithRatePattern("", DglMain.Item(Col1Value, rowVendor).Tag, DglMain.Item(Col1Value, rowSettingGroup).Tag, TxtDivision.Tag, DglMain.Item(Col1Value, rowSite_Code).Tag, Process.Sales, DglMain.Item(Col1Value, rowV_Type).Tag,
                    AgL.XNull(Dgl2.Item(Col1Value, rowRateType).Tag),
                    AgL.XNull(Dgl1.Item(Col1ItemCategory, mRowIndex).Tag),
                    AgL.XNull(Dgl1.Item(Col1ItemGroup, mRowIndex).Tag),
                    AgL.XNull(Dgl1.Item(Col1Item, mRowIndex).Tag),
                    AgL.XNull(Dgl1.Item(Col1Dimension1, mRowIndex).Tag),
                    AgL.XNull(Dgl1.Item(Col1Dimension2, mRowIndex).Tag),
                    AgL.XNull(Dgl1.Item(Col1Dimension3, mRowIndex).Tag),
                    AgL.XNull(Dgl1.Item(Col1Dimension4, mRowIndex).Tag),
                    AgL.XNull(Dgl1.Item(Col1Size, mRowIndex).Tag), "MRP")
            End If
        End If
    End Sub
    Private Sub Dgl1_CellContentClick(sender As Object, e As DataGridViewCellEventArgs) Handles Dgl1.CellContentClick
        Dim bColumnIndex As Integer = 0
        Dim bRowIndex As Integer = 0
        Dim I As Integer = 0
        Try
            bColumnIndex = Dgl1.CurrentCell.ColumnIndex
            bRowIndex = Dgl1.CurrentCell.RowIndex
            Select Case Dgl1.Columns(e.ColumnIndex).Name
                Case Col1ReferenceNo
                    ClsMain.FOpenForm(Dgl1.Item(Col1ReferenceDocID, bRowIndex).Value, Me)
            End Select
        Catch ex As Exception
            MsgBox(ex.Message & " in Dgl1_CellContentClick function")
        End Try
    End Sub
    Private Function FGetStock(mRowIndex As Integer) As Double
        Dim bCondStr As String = ""

        If AgL.XNull(Dgl4.Item(Col4ItemCategory, mRowIndex).Tag) <> "" Then
            bCondStr += " And I.ItemCategory = '" & Dgl4.Item(Col4ItemCategory, mRowIndex).Tag & "'"
        End If
        If AgL.XNull(Dgl4.Item(Col4Item, mRowIndex).Tag) <> "" Then
            bCondStr += " And (Case When I.V_Type = '" & ItemV_Type.SKU & "' Then I.BaseItem Else I.Code End) = '" & Dgl4.Item(Col4Item, mRowIndex).Tag & "'"
        End If
        If AgL.XNull(Dgl4.Item(Col4Dimension1, mRowIndex).Tag) <> "" Then
            bCondStr += " And I.Dimension1 = '" & Dgl4.Item(Col4Dimension1, mRowIndex).Tag & "'"
        End If
        If AgL.XNull(Dgl4.Item(Col4Dimension2, mRowIndex).Tag) <> "" Then
            bCondStr += " And I.Dimension2 = '" & Dgl4.Item(Col4Dimension2, mRowIndex).Tag & "'"
        End If
        'If AgL.XNull(Dgl4.Item(Col4Dimension3, mRowIndex).Tag) <> "" Then
        '    bCondStr += " And I.Dimension3 = '" & Dgl4.Item(Col4Dimension3, mRowIndex).Tag & "'"
        'End If
        If AgL.XNull(Dgl4.Item(Col4Dimension4, mRowIndex).Tag) <> "" Then
            bCondStr += " And I.Dimension4 = '" & Dgl4.Item(Col4Dimension4, mRowIndex).Tag & "'"
        End If

        If bCondStr <> "" Then
            mQry = "SELECT Round(IsNull(Sum(L.Qty_Rec),0) - IsNull(Sum(L.Qty_Iss),0),3) AS Qty
                FROM Stock L 
                LEFT JOIN Item I ON L.Item = I.Code
                WHERE 1 = 1 " & bCondStr
            FGetStock = AgL.VNull(AgL.Dman_Execute(mQry, AgL.GCn).ExecuteScalar())
        Else
            FGetStock = 0
        End If
    End Function
    Private Sub Dgl4_MouseUp(sender As Object, e As MouseEventArgs) Handles Dgl4.MouseUp
        Try
            If e.Button = Windows.Forms.MouseButtons.Left Then
                If Dgl4.CurrentCell.ColumnIndex = Dgl4.Columns(Col4ConsiderInIssueYN).Index Then
                    ClsMain.FManageTick(Dgl4, Dgl4.CurrentCell.ColumnIndex, Dgl4.Columns(Col4ItemCategory).Index)
                    FConsiderConsumptionForIssue(Dgl4.CurrentCell.RowIndex)
                End If
            End If
            Calculation()
        Catch ex As Exception
            MsgBox("System Exception : " & vbCrLf & ex.Message, MsgBoxStyle.Exclamation)
        End Try
    End Sub
    Private Sub Dgl4_KeyUp(sender As Object, e As KeyEventArgs) Handles Dgl4.KeyUp
        Try
            If e.KeyCode = Keys.Space Then
                If Dgl4.CurrentCell.ColumnIndex = Dgl4.Columns(Col4ConsiderInIssueYN).Index Then
                    ClsMain.FManageTick(Dgl4, Dgl4.CurrentCell.ColumnIndex, Dgl4.Columns(Col4ItemCategory).Index)
                    FConsiderConsumptionForIssue(Dgl4.CurrentCell.RowIndex)
                End If
            End If
            Calculation()
        Catch ex As Exception
            MsgBox("System Exception : " & vbCrLf & ex.Message, MsgBoxStyle.Exclamation)
        End Try
    End Sub
    Private Sub FConsiderConsumptionForIssue(bRow As Integer)
        mQry = " UPDATE PurchInvoiceDetailBom 
                Set ConsiderInIssueYN = " & IIf(Dgl4.Item(Col4ConsiderInIssueYN, bRow).Value = "o", 0, 1) & "
                Where Item = '" & Dgl4.Item(Col4Sku, bRow).Tag & "'"
        AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)
    End Sub
    Private Sub FOpenStockBalance(mRow As Integer)
        Dim DtTemp As DataTable
        Dim StrRtn As String = ""
        Dim bPendingStockQry As String = ""

        If AgL.StrCmp(Topctrl1.Mode, "Browse") Then Exit Sub

        bPendingStockQry = " SELECT L.Process, L.Item, 
	                IsNull(Sum(L.Qty_Rec),0) - IsNull(Sum(L.Qty_Iss),0) AS BalanceQty
	                FROM Stock L 
                    Where 1 = 1 " &
                    IIf(AgL.XNull(Dgl2.Item(Col1Value, rowGodown).Tag) = "", "", "And L.Godown = '" & Dgl2.Item(Col1Value, rowGodown).Tag & "'") &
                    IIf(AgL.XNull(Dgl2.Item(Col1Value, rowFromProcess).Tag) = "", "", "And L.Process = '" & Dgl2.Item(Col1Value, rowFromProcess).Tag & "'") &
                    " GROUP BY L.Process, L.Item
                    HAVING IsNull(Sum(L.Qty_Rec),0) - IsNull(Sum(L.Qty_Iss),0) > 0 "

        mQry = " SELECT 'o' As Tick, VPendingStock.Item As SearchKey, 
                Prs.Name As Process, Ic.Description As ItemCategory, Ig.Description As ItemGroup, I.Description As Item,
                D1.Description As Dimension1, D2.Description As Dimension2, 
                D3.Description As Dimension3, D4.Description As Dimension4,
                Size.Description As Size, VPendingStock.BalanceQty AS BalanceQty, Sku.Unit,
                Ic.Code As ItemCategoryCode, Ig.Code As ItemGroupCode, I.Code As ItemCode,
                D1.Code As Dimension1Code, D2.Code As Dimension2Code, 
                D3.Code As Dimension3Code, D4.Code As Dimension4Code,
                Size.Code As SizeCode, Prs.SubCode As ProcessCode, It.Code As ItemTypeCode, 
                It.Name As ItemType, 
                Case When IfNull(U.ShowDimensionDetailInPurchase,0) = 1 Or IfNull(Ic.ShowDimensionDetailInPurchase,0) = 1 Then 1
                            Else 0 End As ShowDimensionDetailInPurchase, 
                FROM (" & bPendingStockQry & ") AS VPendingStock
                LEFT JOIN SubGroup Prs ON VPendingStock.Process = Prs.SubCode
                LEFT JOIN Item Sku ON Sku.Code = VPendingStock.Item
                LEFT JOIN Item I ON I.Code = Sku.BaseItem
                LEFT JOIN ItemType It On Sku.ItemType = It.Code
                LEFT JOIN Item IC On Sku.ItemCategory = IC.Code
                LEFT JOIN Item IG On Sku.ItemGroup = IG.Code
                LEFT JOIN Item D1 ON D1.Code = Sku.Dimension1  
                LEFT JOIN Item D2 ON D2.Code = Sku.Dimension2
                LEFT JOIN Item D3 ON D3.Code = Sku.Dimension3
                LEFT JOIN Item D4 ON D4.Code = Sku.Dimension4
                LEFT JOIN Item Size ON Size.Code = Sku.Size 
                Left Join Unit U  With (NoLock) On Sku.Unit = U.Code 
                Where 1=1 "

        If mRow >= 0 Then
            If AgL.XNull(Dgl1.Item(Col1ItemCategory, mRow).Tag) <> "" Then
                mQry += " And Ic.Code = '" & Dgl1.Item(Col1ItemCategory, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1ItemGroup, mRow).Tag) <> "" Then
                mQry += " And Ig.Code = '" & Dgl1.Item(Col1ItemGroup, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Item, mRow).Tag) <> "" Then
                mQry += " And I.Code = '" & Dgl1.Item(Col1Item, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Dimension1, mRow).Tag) <> "" Then
                mQry += " And D1.Code = '" & Dgl1.Item(Col1Dimension1, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Dimension2, mRow).Tag) <> "" Then
                mQry += " And D2.Code = '" & Dgl1.Item(Col1Dimension2, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Dimension3, mRow).Tag) <> "" Then
                mQry += " And D3.Code = '" & Dgl1.Item(Col1Dimension3, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Dimension4, mRow).Tag) <> "" Then
                mQry += " And D4.Code = '" & Dgl1.Item(Col1Dimension4, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Size, mRow).Tag) <> "" Then
                mQry += " And Size.Code = '" & Dgl1.Item(Col1Size, mRow).Tag & "'"
            End If
        End If

        Dim bFilterInclude_ItemType As String = FGetSettings(SettingFields.FilterInclude_ItemType, SettingType.General)
        If bFilterInclude_ItemType <> "" Then
            If bFilterInclude_ItemType.ToString.Substring(0, 1) = "+" Then
                mQry += " And CharIndex('+' || Sku.ItemType,'" & bFilterInclude_ItemType & "') > 0 "
            ElseIf bFilterInclude_ItemType.ToString.Substring(0, 1) = "-" Then
                mQry += " And CharIndex('-' || Sku.ItemType,'" & bFilterInclude_ItemType & "') <= 0 "
            End If
        End If

        mQry += " Order By Ic.Description, Ig.Description, I.Description,
                D1.Description, D2.Description, D3.Description, D4.Description, Size.Description "

        DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)

        Dim FRH_Multiple As DMHelpGrid.FrmHelpGrid_Multi
        FRH_Multiple = New DMHelpGrid.FrmHelpGrid_Multi(New DataView(DtTemp), "", 400, 990, , , False)
        FRH_Multiple.FFormatColumn(0, "Tick", 40, DataGridViewContentAlignment.MiddleCenter, True)
        FRH_Multiple.FFormatColumn(1, , 0, , False)
        FRH_Multiple.FFormatColumn(2, "Process", 100, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Process] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(3, AgL.PubCaptionItemCategory, 100, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[ItemCategory] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(4, AgL.PubCaptionItemGroup, 100, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[ItemGroup] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(5, AgL.PubCaptionItem, 200, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Item] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(6, AgL.PubCaptionDimension1, 100, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension1] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(7, AgL.PubCaptionDimension2, 100, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension2] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(8, AgL.PubCaptionDimension3, 100, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension3] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(9, AgL.PubCaptionDimension4, 100, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension4] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(10, "Size", 100, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Size] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(11, "Bal Qty", 100, DataGridViewContentAlignment.MiddleRight)
        FRH_Multiple.FFormatColumn(12, "Unit", 70, DataGridViewContentAlignment.MiddleLeft)

        FRH_Multiple.FFormatColumn(13, , 0, , False)
        FRH_Multiple.FFormatColumn(14, , 0, , False)
        FRH_Multiple.FFormatColumn(15, , 0, , False)
        FRH_Multiple.FFormatColumn(16, , 0, , False)
        FRH_Multiple.FFormatColumn(17, , 0, , False)
        FRH_Multiple.FFormatColumn(18, , 0, , False)
        FRH_Multiple.FFormatColumn(19, , 0, , False)
        FRH_Multiple.FFormatColumn(20, , 0, , False)
        FRH_Multiple.FFormatColumn(21, , 0, , False)
        FRH_Multiple.FFormatColumn(22, , 0, , False)
        FRH_Multiple.FFormatColumn(23, , 0, , False)
        FRH_Multiple.FFormatColumn(24, , 0, , False)

        FRH_Multiple.StartPosition = FormStartPosition.CenterScreen
        FRH_Multiple.ShowDialog()

        If FRH_Multiple.BytBtnValue = 0 Then
            StrRtn = FRH_Multiple.FFetchData(1, "'", "'", ",", True)
        End If

        Dim DrSelected As DataRow()
        If StrRtn <> "" Then
            DrSelected = DtTemp.Select("SearchKey In (" & StrRtn & ")")

            If mRow < 0 Then
                If Dgl1.Rows.Count > 1 Then
                    If MsgBox("Do you want to overwrite existing data in grid ? ", MsgBoxStyle.Question + MsgBoxStyle.YesNo) = MsgBoxResult.Yes Then
                        'Dgl1.Rows.Clear() : Dgl1.RowCount = 1 : mRow = 0
                        For I As Integer = 0 To Dgl1.Rows.Count - 1
                            If AgL.VNull(Dgl1.Item(Col1IsRecordLocked, I).Value) = 0 Then
                                If Not Dgl1.Rows(I).IsNewRow Then
                                    Dgl1.Rows(I).Visible = False
                                End If
                            End If
                        Next
                        mRow = Dgl1.Rows.Count - 1
                    Else
                        mRow = Dgl1.Rows.Count - 1
                    End If
                Else
                    mRow = 0
                End If
            End If

            If Dgl1.Rows(mRow).IsNewRow = False Then
                Dgl1.Rows.Remove(Dgl1.Rows(mRow))
            End If
            Dgl1.Rows.Insert(mRow, DrSelected.Length)
            For I As Integer = 0 To DrSelected.Length - 1
                Dgl1.Item(Col1ItemType, mRow + I).Tag = AgL.XNull(DrSelected(I)("ItemTypeCode"))
                Dgl1.Item(Col1ItemType, mRow + I).Value = AgL.XNull(DrSelected(I)("ItemType"))

                Dgl1.Item(Col1ItemCategory, mRow + I).Tag = AgL.XNull(DrSelected(I)("ItemCategoryCode"))
                Dgl1.Item(Col1ItemCategory, mRow + I).Value = AgL.XNull(DrSelected(I)("ItemCategory"))

                Dgl1.Item(Col1ItemGroup, mRow + I).Tag = AgL.XNull(DrSelected(I)("ItemGroupCode"))
                Dgl1.Item(Col1ItemGroup, mRow + I).Value = AgL.XNull(DrSelected(I)("ItemGroup"))

                Dgl1.Item(Col1Item, mRow + I).Tag = AgL.XNull(DrSelected(I)("ItemCode"))
                Dgl1.Item(Col1Item, mRow + I).Value = AgL.XNull(DrSelected(I)("Item"))

                Dgl1.Item(Col1Dimension1, mRow + I).Tag = AgL.XNull(DrSelected(I)("Dimension1Code"))
                Dgl1.Item(Col1Dimension1, mRow + I).Value = AgL.XNull(DrSelected(I)("Dimension1"))

                Dgl1.Item(Col1Dimension2, mRow + I).Tag = AgL.XNull(DrSelected(I)("Dimension2Code"))
                Dgl1.Item(Col1Dimension2, mRow + I).Value = AgL.XNull(DrSelected(I)("Dimension2"))

                Dgl1.Item(Col1Dimension3, mRow + I).Tag = AgL.XNull(DrSelected(I)("Dimension3Code"))
                Dgl1.Item(Col1Dimension3, mRow + I).Value = AgL.XNull(DrSelected(I)("Dimension3"))

                Dgl1.Item(Col1Dimension4, mRow + I).Tag = AgL.XNull(DrSelected(I)("Dimension4Code"))
                Dgl1.Item(Col1Dimension4, mRow + I).Value = AgL.XNull(DrSelected(I)("Dimension4"))

                Dgl1.Item(Col1Size, mRow + I).Tag = AgL.XNull(DrSelected(I)("SizeCode"))
                Dgl1.Item(Col1Size, mRow + I).Value = AgL.XNull(DrSelected(I)("Size"))

                Dgl1.Item(Col1FromProcess, mRow + I).Tag = AgL.XNull(DrSelected(I)("ProcessCode"))
                Dgl1.Item(Col1FromProcess, mRow + I).Value = AgL.XNull(DrSelected(I)("Process"))


                Dgl1.Item(Col1Qty, mRow + I).Value = AgL.VNull(DrSelected(I)("BalanceQty"))
                Dgl1.Item(Col1DocQty, mRow + I).Value = AgL.VNull(DrSelected(I)("BalanceQty"))
                Dgl1.Item(Col1Unit, mRow + I).Value = AgL.XNull(DrSelected(I)("Unit"))
                Dgl1.Item(Col1Unit, mRow + I).Tag = AgL.VNull(DrSelected(I)("ShowDimensionDetailInPurchase"))

                If (Dgl1.Item(Col1Unit, mRow + I).Tag) Then
                    Dgl1.Item(Col1DocQty, mRow + I).Style.ForeColor = Color.Blue
                    ShowPurchInvoiceDimensionDetail(mRow + I, False)
                    CType(Dgl1.Item(Col1DocQty, mRow + I).Tag, FrmPurchaseInvoiceDimension_WithDimension).Dgl1.Item(FrmPurchaseInvoiceDimension_WithDimension.Col1Qty, 0).Value = Dgl1.Item(Col1Qty, mRow + I).Value
                    CType(Dgl1.Item(Col1DocQty, mRow + I).Tag, FrmPurchaseInvoiceDimension_WithDimension).Dgl1.Item(FrmPurchaseInvoiceDimension_WithDimension.Col1TotalQty, 0).Value = Dgl1.Item(Col1Qty, mRow + I).Value
                    CType(Dgl1.Item(Col1DocQty, mRow + I).Tag, FrmPurchaseInvoiceDimension_WithDimension).Calculation()
                End If
                FGetRateConsideringAllDimensions(mRow + I)
            Next

            For I As Integer = 0 To Dgl1.Rows.Count - 1
                Dgl1.Item(ColSNo, I).Value = I + 1
                FGeterateSkuName(I)
            Next
            Calculation()
        End If
    End Sub
    Private Sub ShowPurchInvoicePayment(Optional ShowDialog As Boolean = True)
        If Dgl2.Item(Col1Value, rowPaidAmount).Tag IsNot Nothing Then
            CType(Dgl2.Item(Col1Value, rowPaidAmount).Tag, FrmPurchaseInvoicePayment).PartyCode = DglMain.Item(Col1Value, rowVendor).Tag
            CType(Dgl2.Item(Col1Value, rowPaidAmount).Tag, FrmPurchaseInvoicePayment).V_Type = LblV_Type.Tag
            CType(Dgl2.Item(Col1Value, rowPaidAmount).Tag, FrmPurchaseInvoicePayment).EntryMode = Topctrl1.Mode
            If ShowDialog Then Dgl2.Item(Col1Value, rowPaidAmount).Tag.ShowDialog()
        Else
            Dim FrmObj As FrmPurchaseInvoicePayment
            FrmObj = New FrmPurchaseInvoicePayment
            FrmObj.PartyCode = DglMain.Item(Col1Value, rowVendor).Tag
            FrmObj.V_Type = LblV_Type.Tag
            FrmObj.EntryMode = Topctrl1.Mode
            FrmObj.IniGrid(mSearchCode)

            If AgL.StrCmp(Topctrl1.Mode, "Add") Then
                mQry = "Select IfNull(Sum(L.AmtCr),0) - IfNull(Sum(L.AmtDr),0) As Balance
                    From Ledger L 
                    Where L.SubCode = '" & DglMain.Item(Col1Value, rowVendor).Tag & "'
                    And L.DocId <> '" & mSearchCode & "'"
                FrmObj.Dgl1.Item(Col1Value, FrmPurchaseInvoicePayment.rowOpeningBalance).Value = AgL.VNull(AgL.Dman_Execute(mQry, AgL.GCn).ExecuteScalar())
                FrmObj.Dgl1.Item(Col1Value, FrmPurchaseInvoicePayment.rowInvoiceValue).Value = Val(AgCalcGrid1.AgChargesValue(AgTemplate.ClsMain.Charges.NETAMOUNT, AgStructure.AgCalcGrid.AgCalcGridColumn.Col_Amount))
                FrmObj.Dgl1.Item(Col1Value, FrmPurchaseInvoicePayment.rowToPayAmount).Value = Val(FrmObj.Dgl1.Item(Col1Value, FrmPurchaseInvoicePayment.rowOpeningBalance).Value) + Val(FrmObj.Dgl1.Item(Col1Value, FrmPurchaseInvoicePayment.rowInvoiceValue).Value)
                If FDivisionNameForCustomization(14) = "PRATHAM APPARE" Or
            FDivisionNameForCustomization(15) = "AGARWAL UNIFORM" Then
                    mQry = "SELECT Sg.Subcode, Sg.Name FROM Subgroup Sg WHERE Sg.Nature = 'Cash'"
                    Dim DtCash As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)
                    If DtCash.Rows.Count > 0 Then
                        FrmObj.Dgl1.Item(Col1Value, FrmPurchaseInvoicePayment.rowBankCashAc).Tag = AgL.XNull(DtCash.Rows(0)("SubCode"))
                        FrmObj.Dgl1.Item(Col1Value, FrmPurchaseInvoicePayment.rowBankCashAc).Value = AgL.XNull(DtCash.Rows(0)("Name"))
                        FrmObj.Dgl1.CurrentCell = FrmObj.Dgl1.Item(Col1Value, FrmPurchaseInvoicePayment.rowPaidAmount)
                        FrmObj.Dgl1.Focus()
                    End If
                End If
            End If

            Dgl2.Item(Col1Value, rowPaidAmount).Tag = FrmObj
            If ShowDialog Then Dgl2.Item(Col1Value, rowPaidAmount).Tag.ShowDialog()
        End If
        Dgl1.Focus()
        If Val(CType(Dgl2.Item(Col1Value, rowPaidAmount).Tag, FrmPurchaseInvoicePayment).Dgl1(FrmPurchaseInvoicePayment.Col1Value, FrmPurchaseInvoicePayment.rowPaidAmount).Value) <> 0 Then
            Dgl2.Item(Col1Value, rowPaidAmount).Value = Val(CType(Dgl2.Item(Col1Value, rowPaidAmount).Tag, FrmPurchaseInvoicePayment).Dgl1(FrmPurchaseInvoicePayment.Col1Value, FrmPurchaseInvoicePayment.rowPaidAmount).Value)
        End If
    End Sub

    Private Sub FOpenStockBalanceOption()
        mQry = "Select 'Show Selected Stock' As Code, 'Show Selected Stock' As Name 
                UNION ALL 
                Select 'Show Stock Balance' As Code, 'Show Stock Balance' As Name "
        Dim DtOptions As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)

        Dim FRH_Single As DMHelpGrid.FrmHelpGrid
        FRH_Single = New DMHelpGrid.FrmHelpGrid(New DataView(DtOptions), "", 350, 300, 150, 520, False)
        FRH_Single.FFormatColumn(0, , 0, , False)
        FRH_Single.FFormatColumn(1, "Option", 200, DataGridViewContentAlignment.MiddleLeft)
        FRH_Single.StartPosition = FormStartPosition.Manual
        FRH_Single.ShowDialog()

        Dim bChoosenOption As String = ""
        If FRH_Single.BytBtnValue = 0 Then
            bChoosenOption = FRH_Single.DRReturn(1)
        End If

        If bChoosenOption = "Show Stock Balance" Then
            FOpenStockBalance(-1)
        ElseIf bChoosenOption = "Show Selected Stock" Then
            FOpenSelectedStock()
        End If

    End Sub

    Private Sub FOpenSelectedStock(Optional FrmObj As FrmPurchaseInvoiceStockSelection = Nothing)
        If FrmObj Is Nothing Then
            FrmObj = New FrmPurchaseInvoiceStockSelection
            FrmObj.PartyCode = DglMain.Item(Col1Value, rowVendor).Tag
            FrmObj.V_Type = LblV_Type.Tag
            FrmObj.ProcessCode = DglMain.Item(Col1Value, rowProcess).Tag
            FrmObj.V_Date = DglMain.Item(Col1Value, rowV_Date).Value
            FrmObj.EntryMode = Topctrl1.Mode
            FrmObj.IniGrid(mSearchCode)
            Dgl2.Item(Col1Value, rowBtnStockBalance).Tag = FrmObj
            FrmObj.StartPosition = FormStartPosition.CenterScreen
            FrmObj.ShowDialog()
        Else
            FrmObj.FFillStockBalance()
            FrmObj.DglMain.Focus()
            FrmObj.ShowDialog()
        End If

        If FrmObj.mOkButtonPressed = False Then Exit Sub

        Dim mRow As Integer = -1

        If mRow < 0 Then
            If Dgl1.Rows.Count > 1 Then
                'If MsgBox("Do you want to overwrite existing data in grid ? ", MsgBoxStyle.Question + MsgBoxStyle.YesNo) = MsgBoxResult.Yes Then
                '    'Dgl1.Rows.Clear() : Dgl1.RowCount = 1 : mRow = 0
                '    For I As Integer = 0 To Dgl1.Rows.Count - 1
                '        If AgL.VNull(Dgl1.Item(Col1IsRecordLocked, I).Value) = 0 Then
                '            If Not Dgl1.Rows(I).IsNewRow Then
                '                Dgl1.Rows(I).Visible = False
                '            End If
                '        End If
                '    Next
                '    mRow = Dgl1.Rows.Count - 1
                'Else
                mRow = Dgl1.Rows.Count - 1
                'End If
            Else
                mRow = 0
            End If
        End If

        If Dgl1.Rows(mRow).IsNewRow = False Then
            Dgl1.Rows.Remove(Dgl1.Rows(mRow))
        End If
        Dim bRowCount As Integer = 0
        For I As Integer = 0 To FrmObj.Dgl1.Rows.Count - 1
            If Val(FrmObj.Dgl1.Item(FrmPurchaseInvoiceStockSelection.Col1Qty, I).Value) > 0 Then
                bRowCount += 1
            End If
        Next

        If bRowCount = 0 Then Exit Sub

        Dim Cnt As Integer = 0
        Dgl1.Rows.Insert(mRow, bRowCount)
        For I As Integer = 0 To FrmObj.Dgl1.Rows.Count - 1
            If Val(FrmObj.Dgl1.Item(FrmPurchaseInvoiceStockSelection.Col1Qty, I).Value) > 0 Then
                Dgl1.Item(Col1ItemType, mRow + Cnt).Tag = FrmObj.Dgl1.Item(FrmPurchaseInvoiceStockSelection.Col1ItemType, I).Tag
                Dgl1.Item(Col1ItemType, mRow + Cnt).Value = FrmObj.Dgl1.Item(FrmPurchaseInvoiceStockSelection.Col1ItemType, I).Value

                Dgl1.Item(Col1SKU, mRow + Cnt).Tag = FrmObj.Dgl1.Item(FrmPurchaseInvoiceStockSelection.Col1Sku, I).Tag
                Dgl1.Item(Col1SKU, mRow + Cnt).Value = FrmObj.Dgl1.Item(FrmPurchaseInvoiceStockSelection.Col1Sku, I).Value


                Dgl1.Item(Col1ItemCategory, mRow + Cnt).Tag = FrmObj.Dgl1.Item(FrmPurchaseInvoiceStockSelection.Col1ItemCategory, I).Tag
                Dgl1.Item(Col1ItemCategory, mRow + Cnt).Value = FrmObj.Dgl1.Item(FrmPurchaseInvoiceStockSelection.Col1ItemCategory, I).Value

                Dgl1.Item(Col1ItemGroup, mRow + Cnt).Tag = FrmObj.Dgl1.Item(FrmPurchaseInvoiceStockSelection.Col1ItemGroup, I).Tag
                Dgl1.Item(Col1ItemGroup, mRow + Cnt).Value = FrmObj.Dgl1.Item(FrmPurchaseInvoiceStockSelection.Col1ItemGroup, I).Value

                Dgl1.Item(Col1Item, mRow + Cnt).Tag = FrmObj.Dgl1.Item(FrmPurchaseInvoiceStockSelection.Col1Item, I).Tag
                Dgl1.Item(Col1Item, mRow + Cnt).Value = FrmObj.Dgl1.Item(FrmPurchaseInvoiceStockSelection.Col1Item, I).Value

                Dgl1.Item(Col1Dimension1, mRow + Cnt).Tag = FrmObj.Dgl1.Item(FrmPurchaseInvoiceStockSelection.Col1Dimension1, I).Tag
                Dgl1.Item(Col1Dimension1, mRow + Cnt).Value = FrmObj.Dgl1.Item(FrmPurchaseInvoiceStockSelection.Col1Dimension1, I).Value

                Dgl1.Item(Col1Dimension2, mRow + Cnt).Tag = FrmObj.Dgl1.Item(FrmPurchaseInvoiceStockSelection.Col1Dimension2, I).Tag
                Dgl1.Item(Col1Dimension2, mRow + Cnt).Value = FrmObj.Dgl1.Item(FrmPurchaseInvoiceStockSelection.Col1Dimension2, I).Value

                Dgl1.Item(Col1Dimension3, mRow + Cnt).Tag = FrmObj.Dgl1.Item(FrmPurchaseInvoiceStockSelection.Col1Dimension3, I).Tag
                Dgl1.Item(Col1Dimension3, mRow + Cnt).Value = FrmObj.Dgl1.Item(FrmPurchaseInvoiceStockSelection.Col1Dimension3, I).Value

                Dgl1.Item(Col1Dimension4, mRow + Cnt).Tag = FrmObj.Dgl1.Item(FrmPurchaseInvoiceStockSelection.Col1Dimension4, I).Tag
                Dgl1.Item(Col1Dimension4, mRow + Cnt).Value = FrmObj.Dgl1.Item(FrmPurchaseInvoiceStockSelection.Col1Dimension4, I).Value

                Dgl1.Item(Col1Size, mRow + Cnt).Tag = FrmObj.Dgl1.Item(FrmPurchaseInvoiceStockSelection.Col1Size, I).Tag
                Dgl1.Item(Col1Size, mRow + Cnt).Value = FrmObj.Dgl1.Item(FrmPurchaseInvoiceStockSelection.Col1Size, I).Value

                Dgl1.Item(Col1FromProcess, mRow + Cnt).Tag = FrmObj.Dgl1.Item(FrmPurchaseInvoiceStockSelection.Col1FromProcess, I).Tag
                Dgl1.Item(Col1FromProcess, mRow + Cnt).Value = FrmObj.Dgl1.Item(FrmPurchaseInvoiceStockSelection.Col1FromProcess, I).Value

                Dgl1.Item(Col1BarcodePattern, mRow + Cnt).Value = FrmObj.Dgl1.Item(FrmPurchaseInvoiceStockSelection.Col1BarcodePattern, I).Value
                Dgl1.Item(Col1BarcodeType, mRow + Cnt).Value = FrmObj.Dgl1.Item(FrmPurchaseInvoiceStockSelection.Col1BarcodeType, I).Value


                Dgl1.Item(Col1Qty, mRow + Cnt).Value = FrmObj.Dgl1.Item(FrmPurchaseInvoiceStockSelection.Col1Qty, I).Value
                Dgl1.Item(Col1DocQty, mRow + Cnt).Value = FrmObj.Dgl1.Item(FrmPurchaseInvoiceStockSelection.Col1Qty, I).Value
                Dgl1.Item(Col1Unit, mRow + Cnt).Value = FrmObj.Dgl1.Item(FrmPurchaseInvoiceStockSelection.Col1Unit, I).Value
                Dgl1.Item(Col1Unit, mRow + Cnt).Tag = FrmObj.Dgl1.Item(FrmPurchaseInvoiceStockSelection.Col1Unit, I).Tag

                If (Dgl1.Item(Col1Unit, mRow + Cnt).Tag) Then
                    Dgl1.Item(Col1DocQty, mRow + Cnt).Style.ForeColor = Color.Blue
                    ShowPurchInvoiceDimensionDetail(mRow + Cnt, False)
                    CType(Dgl1.Item(Col1DocQty, mRow + Cnt).Tag, FrmPurchaseInvoiceDimension_WithDimension).Dgl1.Item(FrmPurchaseInvoiceDimension_WithDimension.Col1Qty, 0).Value = Dgl1.Item(Col1Qty, mRow + Cnt).Value
                    CType(Dgl1.Item(Col1DocQty, mRow + Cnt).Tag, FrmPurchaseInvoiceDimension_WithDimension).Dgl1.Item(FrmPurchaseInvoiceDimension_WithDimension.Col1TotalQty, 0).Value = Dgl1.Item(Col1Qty, mRow + Cnt).Value
                    CType(Dgl1.Item(Col1DocQty, mRow + Cnt).Tag, FrmPurchaseInvoiceDimension_WithDimension).Calculation()
                End If
                FGetRateConsideringAllDimensions(mRow + Cnt)

                mQry = "INSERT INTO StockVirtual (DocID, TSr, Sr, V_Type, V_Prefix, V_Date, V_No, Div_Code, Site_Code, SubCode, Process, 
                        Godown, Item, Qty_Iss, Qty_Rec, Unit) 
                        Select '" & mSearchCode & "' As DocID, " & I & " As TSr, " & I & " As Sr, 
                        " & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_Type).Tag) & " As V_Type, 
                        " & AgL.Chk_Text(LblPrefix.Text) & " As V_Prefix, 
                        " & AgL.Chk_Date("01/Apr/2000") & " As V_Date, 
                        " & Val(DglMain.Item(Col1Value, rowV_No).Tag) & " As V_No, 
                        " & AgL.Chk_Text(TxtDivision.Tag) & " As Div_Code, 
                        " & AgL.Chk_Text(DglMain.Item(Col1Value, rowSite_Code).Tag) & " As Site_Code, 
                        " & AgL.Chk_Text(DglMain.Item(Col1Value, rowVendor).Tag) & " As SubCode, 
                        " & AgL.Chk_Text(Dgl1.Item(Col1FromProcess, mRow + Cnt).Tag) & " As Process, 
                        " & AgL.Chk_Text(Dgl2.Item(Col1Value, rowGodown).Tag) & " As Godown, 
                        " & AgL.Chk_Text(Dgl1.Item(Col1SKU, mRow + Cnt).Tag) & " As Item, 
                        " & Val(Dgl1.Item(Col1Qty, mRow + Cnt).Value) & " As Qty_Iss, 
                        0 As Qty_Rec, 
                        " & AgL.Chk_Text(Dgl1.Item(Col1Unit, mRow + Cnt).Value) & " As Unit "
                AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)

                Cnt = Cnt + 1
            End If
        Next

        For I As Integer = 0 To Dgl1.Rows.Count - 1
            Dgl1.Item(ColSNo, I).Value = I + 1
            FGeterateSkuName(I)
        Next
        Calculation()

        FOpenSelectedStock(CType(Dgl2.Item(Col1Value, rowBtnStockBalance).Tag, FrmPurchaseInvoiceStockSelection))
    End Sub
    Private Function FCreateItem(Code As String, Conn As Object, Cmd As Object, ItemV_Type As String, ItemSpecification As String, mRow As Integer) As String
        Dim BaseItem As String = ""
        Dim mName As String
        If ItemV_Type = AgLibrary.ClsMain.agConstants.ItemV_Type.Item Then
            mName = FGetSettings(SettingFields.ItemNamePattern, SettingType.General)
            If mName = "" Then mName = "<SPECIFICATION>"
            mName = mName.ToString.ToUpper.Replace("+", "||").Replace("'%*S'", "'%*s'").
                          Replace("<SPECIFICATION>", ItemSpecification).
                          Replace("<ITEMGROUP>", Dgl1.Item(Col1ItemGroup, mRow).Value).
                          Replace("<ITEMCATEGORY>", Dgl1.Item(Col1ItemCategory, mRow).Value)
            mName = "SELECT " & "'" & mName & "'"
            mName = AgL.GetBackendBasedQuery(mName)
            mName = AgL.Dman_Execute(mName, AgL.GCn).ExecuteScalar
        Else
            mName = ItemSpecification + " - " + Dgl1.Item(Col1Item, mRow).Value + " - " +
                        Dgl1.Item(Col1ItemGroup, mRow).Value + " - " +
                        Dgl1.Item(Col1ItemCategory, mRow).Value
            BaseItem = Dgl1.Item(Col1Item, mRow).Tag
        End If

        mName = mName + "-" + mSearchCode

        If Code = "" Then
            Dim mMaxId As String = AgL.GetMaxId("Item", "Code", AgL.GcnMain, AgL.PubDivCode, AgL.PubSiteCode, 8, True, True, AgL.ECmd, AgL.Gcn_ConnectionString)

            mQry = "INSERT INTO Item (Code, ManualCode, Description, Specification, Unit, ItemGroup, ItemCategory, 
                ItemType, BaseItem, V_Type, PurchaseRate, Rate, MRP, ProfitMarginPer, HSN, EntryBy, EntryDate, Div_Code, SalesTaxPostingGroup, GenDocId) 
                Select '" & mMaxId & "' As Code, '" & mMaxId & "' As ManualCode, 
                " & AgL.Chk_Text(mName) & " As Description, 
                " & AgL.Chk_Text(ItemSpecification) & " As Specification, 
                " & AgL.Chk_Text(Dgl1.Item(Col1Unit, mRow).Value) & " As Unit, 
                " & AgL.Chk_Text(Dgl1.Item(Col1ItemGroup, mRow).Tag) & " As ItemGroup, 
                " & AgL.Chk_Text(Dgl1.Item(Col1ItemCategory, mRow).Tag) & " As ItemCategory, 
                " & AgL.Chk_Text(Dgl1.Item(Col1ItemType, mRow).Tag) & " As ItemType, 
                " & AgL.Chk_Text(BaseItem) & " As BaseItem, 
                " & AgL.Chk_Text(ItemV_Type) & " As V_Type, 
                " & Val(Dgl1.Item(Col1Rate, mRow).Value) & " As PurchaseRate, 
                " & Val(Dgl1.Item(Col1SaleRate, mRow).Value) & " As Rate, 
                " & Val(Dgl1.Item(Col1MRP, mRow).Value) & " As MRP, 
                " & Val(Dgl1.Item(Col1ProfitMarginPer, mRow).Value) & " As ProfitMarginPer, 
                " & AgL.Chk_Text(Dgl1.Item(Col1HSN, mRow).Value) & " As HSN, 
                '" & AgL.PubUserName & "' As EntryBy, 
                " & AgL.Chk_Date(AgL.PubLoginDate) & " As EntryDate, 
                '" & AgL.PubDivCode & "' As Div_Code, 
                " & AgL.Chk_Text(Dgl1.Item(Col1SalesTaxGroup, mRow).Tag) & " As SalesTaxPostingGroup,
                " & AgL.Chk_Text(mSearchCode) & " As GenDocId "
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

            If ItemV_Type = AgLibrary.ClsMain.agConstants.ItemV_Type.Item Then
                Dim bRateListCode As String = AgL.GetMaxId("RateList", "Code", AgL.GCn, AgL.PubDivCode, AgL.PubSiteCode, 8, True, True, AgL.ECmd, AgL.Gcn_ConnectionString)

                mQry = " INSERT INTO RateList(Code, WEF, EntryBy, EntryDate, EntryType, " &
                        " EntryStatus, Status, Div_Code, GenDocId, GenV_Type) " &
                        " VALUES (" & AgL.Chk_Text(bRateListCode) & ", " & AgL.Chk_Date(AgL.PubLoginDate) & ",	" &
                        " " & AgL.Chk_Text(AgL.PubUserName) & ", " & AgL.Chk_Date(AgL.PubLoginDate) & ", " &
                        " " & AgL.Chk_Text(Topctrl1.Mode) & ", 'Open', " & AgL.Chk_Text(AgTemplate.ClsMain.EntryStatus.Active) & ", " &
                        " '" & TxtDivision.AgSelectedValue & "', " & AgL.Chk_Text(mSearchCode) & ", " & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_Type).Tag) & ")"
                AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

                mQry = "INSERT INTO RateListDetail(Code, Sr, Item, RateType, Rate) " &
                      " VALUES (" & AgL.Chk_Text(bRateListCode) & ", " &
                      " 0, " &
                      " " & AgL.Chk_Text(mMaxId) & ", " &
                      " NULL, " & Val(Dgl1(Col1SaleRate, mRow).Value) & " ) "
                AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            End If

            FCreateItem = mMaxId
        Else
            mQry = " UPDATE Item Set 
                    Description = " & AgL.Chk_Text(mName) & ", 
                    Specification = " & AgL.Chk_Text(ItemSpecification) & ", 
                    Unit = " & AgL.Chk_Text(Dgl1.Item(Col1Unit, mRow).Value) & ", 
                    ItemGroup = " & AgL.Chk_Text(Dgl1.Item(Col1ItemGroup, mRow).Tag) & ", 
                    ItemCategory = " & AgL.Chk_Text(Dgl1.Item(Col1ItemCategory, mRow).Tag) & ", 
                    ItemType = " & AgL.Chk_Text(Dgl1.Item(Col1ItemType, mRow).Tag) & ", 
                    V_Type = " & AgL.Chk_Text(ItemV_Type) & ", 
                    PurchaseRate = " & Val(Dgl1.Item(Col1Rate, mRow).Value) & ", 
                    Rate = " & Val(Dgl1.Item(Col1SaleRate, mRow).Value) & ", 
                    MRP = " & Val(Dgl1.Item(Col1MRP, mRow).Value) & ", 
                    ProfitMarginPer = " & Val(Dgl1.Item(Col1ProfitMarginPer, mRow).Value) & ", 
                    HSN = " & AgL.Chk_Text(Dgl1.Item(Col1HSN, mRow).Value) & ", 
                    EntryBy = '" & AgL.PubUserName & "', 
                    EntryDate = " & AgL.Chk_Date(AgL.PubLoginDate) & ", 
                    Div_Code = '" & AgL.PubDivCode & "', 
                    SalesTaxPostingGroup = " & AgL.Chk_Text(Dgl1.Item(Col1SalesTaxGroup, mRow).Tag) & ",
                    GenDocId = " & AgL.Chk_Text(mSearchCode) & "
                    Where Code = '" & Code & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

            mQry = " UPDATE RateListDetail Set Rate = " & Val(Dgl1.Item(Col1SaleRate, mRow).Value) & "
                    Where Item = '" & Code & "' And RateType Is Null "
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

            FCreateItem = Code
        End If
    End Function
    Private Sub FPostStockReverse(SearchCode As String, Conn As Object, Cmd As Object)
        mQry = " Delete From Stock Where DocId = '" & SearchCode & "' And SubRecordType = '" & mSubRecordType_ReversePosted & "'"
        AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

        Dim bQty_Issue As Double = 0
        Dim bQty_Receive As Double = 0
        Dim bProcess As String = DglMain.Item(Col1Value, rowProcess).Tag
        Dim mSr As Integer = 0

        mQry = " Select Max(TSr) As TSr From Stock With (NoLock) Where DocId = '" & SearchCode & "'"
        Dim mTSr As Integer = AgL.VNull(AgL.Dman_Execute(mQry, IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).ExecuteScalar())


        For I As Integer = 0 To Dgl1.RowCount - 1
            If Dgl1.Item(Col1SKU, I).Tag <> "" And Dgl1.Rows(I).Visible = True Then
                mTSr += 1
                mSr += 1

                If LblNCatNature.Tag = NCatNature.Receive Or LblNCatNature.Tag = NCatNature.Invoice Then
                    If Val(Dgl1.Item(Col1StockQty, I).Value) <> 0 Then
                        bQty_Issue = Math.Abs(Val(Dgl1.Item(Col1StockQty, I).Value))
                        bQty_Receive = 0
                    Else
                        bQty_Issue = Math.Abs(Val(Dgl1.Item(Col1Qty, I).Value))
                        bQty_Receive = 0
                    End If

                    bProcess = Dgl1.Item(Col1FromProcess, I).Tag

                    If bProcess = "" Then
                        If FDivisionNameForCustomization(14) = "PRATHAM APPARE" Or
                                FDivisionNameForCustomization(15) = "AGARWAL UNIFORM" Then
                            bProcess = AgL.XNull(DglMain.Item(Col1Value, rowPrevProcess).Tag)
                        End If
                    End If
                Else
                    If Val(Dgl1.Item(Col1StockQty, I).Value) <> 0 Then
                        bQty_Issue = 0
                        bQty_Receive = Math.Abs(Val(Dgl1.Item(Col1StockQty, I).Value))
                    Else
                        bQty_Issue = 0
                        bQty_Receive = Math.Abs(Val(Dgl1.Item(Col1Qty, I).Value))
                    End If

                    If AgL.XNull(DglMain.Item(Col1Value, rowLastProcessOfCombination).Tag) <> "" Then bProcess = DglMain.Item(Col1Value, rowLastProcessOfCombination).Tag
                End If

                mQry = "Insert Into Stock(DocID, TSr, Sr, V_Type, V_Prefix, V_Date, V_No, RecID, Div_Code, Site_Code, 
                    SubCode, SalesTaxGroupParty, Item, SalesTaxGroupItem,  LotNo, ExpiryDate, MRP, Process, Godown, 
                    EType_IR, Qty_Iss, Qty_Rec, Unit, UnitMultiplier, DealQty_Iss , DealQty_Rec, DealUnit, 
                    Rate, Amount, Sale_Rate, DiscountPer, AdditionalDiscountPer, Deal, Landed_Value, ReferenceDocID, ReferenceTSr, ReferenceDocIDSr, SubRecordType) 
                    Values
                    (
                        '" & mSearchCode & "', " & mTSr & ", " & mDimensionSrl & ", " & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_Type).Tag) & ", " & AgL.Chk_Text(LblPrefix.Text) & ",
                        " & AgL.Chk_Date(DglMain.Item(Col1Value, rowV_Date).Value) & ", " & AgL.Chk_Text(DglMain.Item(Col1Value, rowV_No).Value) & ", " & AgL.Chk_Text(DglMain.Item(Col1Value, rowReferenceNo).Value) & ",  " & AgL.Chk_Text(TxtDivision.Tag) & ", " & AgL.Chk_Text(DglMain.Item(Col1Value, rowSite_Code).Tag) & ",
                        " & AgL.Chk_Text(DglMain.Item(Col1Value, rowVendor).Tag) & ", Null, " & AgL.Chk_Text(Dgl1.Item(Col1SKU, I).Tag) & ", 
                        " & AgL.Chk_Text(Dgl1.Item(Col1SalesTaxGroup, I).Tag) & ", 
                        " & AgL.Chk_Text(Dgl1.Item(Col1LotNo, I).Value) & ", 
                        " & AgL.Chk_Date(Dgl1.Item(Col1ExpiryDate, I).Value) & ", 
                        " & Val(Dgl1.Item(Col1MRP, I).Value) & ", 
                        " & AgL.Chk_Text(bProcess) & ", " & AgL.Chk_Text(Dgl1.Item(Col1Godown, I).Tag) & ",
                        '', " & Val(bQty_Issue) & "," & Val(bQty_Receive) & ", " & AgL.Chk_Text(Dgl1.Item(Col1Unit, I).Value) & "," & Val(Dgl1.Item(Col1UnitMultiplier, I).Value) & ",
                        " & Val(Dgl1.Item(Col1DealQty, I).Value) & ", 0,  " & AgL.Chk_Text(Dgl1.Item(Col1DealUnit, I).Value) & ", " & Val(Dgl1.Item(Col1Rate, I).Value) & ", 
                        " & Val(Dgl1.Item(Col1Amount, I).Value) & ",
                        " & Val(Dgl1.Item(Col1SaleRate, I).Value) & ",
                        " & Val(Dgl1.Item(Col1DiscountPer, I).Value) & ",
                        " & Val(Dgl1.Item(Col1AdditionalDiscountPer, I).Value) & ",
                        " & AgL.Chk_Text(Dgl1.Item(Col1Deal, I).Value) & ", 0,
                        " & AgL.Chk_Text(Dgl1.Item(Col1ReferenceDocID, I).Value) & ", " & Val(Dgl1.Item(Col1ReferenceTSr, I).Value) & ", 
                        " & Val(Dgl1.Item(Col1ReferenceSr, I).Value) & ",
                        " & AgL.Chk_Text(mSubRecordType_ReversePosted) & "
                    )"
                AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            End If
        Next
    End Sub
    Private Sub Topctrl1_tbDiscard() Handles Topctrl1.tbDiscard
        mQry = " Delete From StockVirtual Where DocId = '" & mSearchCode & "'"
        AgL.Dman_ExecuteNonQry(mQry, AgL.GCn, AgL.ECmd)
    End Sub
    Private Sub CheckBoxFullCalculate_CheckedChanged(sender As Object, e As EventArgs) Handles CheckBoxFullCalculate.CheckedChanged
        Calculation()
    End Sub
    Private Function FGetItemMargin(mItemCategory As String, mItemGroup As String,
                                    mItemCode As String, mRate As Double)
        Dim DtRowItemMargin As DataRow()

        DtRowItemMargin = DtItemMargin.Select(" Item = '" & mItemCategory & "'
                                And " & mRate & "  > RateGreaterThan", "RateGreaterThan Desc")
        If DtRowItemMargin.Length = 0 Then
            DtRowItemMargin = DtItemMargin.Select(" Item Is Null 
                                And " & mRate & " > RateGreaterThan", "RateGreaterThan Desc")
        End If

        If DtRowItemMargin.Length > 0 Then
            FGetItemMargin = AgL.VNull(DtRowItemMargin(0)("Margin"))
        Else
            FGetItemMargin = 0
        End If
    End Function
    Private Sub FShowVoucherTypeHelp()
        mQry = " SELECT V_Type As Code, Description FROM Voucher_Type WHERE NCat In ('" & EntryNCat & "') And IfNull(Status,'Active') = 'Active'"
        Dim FRH_Single As DMHelpGrid.FrmHelpGrid
        FRH_Single = New DMHelpGrid.FrmHelpGrid(New DataView(AgL.FillData(mQry, AgL.GCn).TABLES(0)), "", 350, 400, 150, 520, False)
        FRH_Single.FFormatColumn(0, , 0, , False)
        FRH_Single.FFormatColumn(1, "Type", 300, DataGridViewContentAlignment.MiddleLeft)
        FRH_Single.StartPosition = FormStartPosition.Manual
        FRH_Single.ShowDialog()

        Dim bCode As String = ""
        If FRH_Single.BytBtnValue = 0 Then
            mV_Type = FRH_Single.DRReturn("Code")
        Else
            Me.BeginInvoke(New MethodInvoker(AddressOf Close))
        End If
    End Sub
    Private Sub FMaterialIssueForJob(DocID As String)
        If Dgl2.Item(Col1Value, rowBtnMaterialIssue).Tag IsNot Nothing Then
            CType(Dgl2.Item(Col1Value, rowBtnMaterialIssue).Tag, FrmPurchaseInvoiceStockIssRec).EntryMode = Topctrl1.Mode
            CType(Dgl2.Item(Col1Value, rowBtnMaterialIssue).Tag, FrmPurchaseInvoiceStockIssRec).objFrmPurchInvoice = Me
            Dgl2.Item(Col1Value, rowBtnMaterialIssue).Tag.ShowDialog()
        Else
            Dim FrmObj As FrmPurchaseInvoiceStockIssRec
            FrmObj = New FrmPurchaseInvoiceStockIssRec
            FrmObj.EntryMode = Topctrl1.Mode
            FrmObj.objFrmPurchInvoice = Me
            FrmObj.IniGrid(DocID)
            Dgl2.Item(Col1Value, rowBtnMaterialIssue).Tag = FrmObj
            Dgl2.Item(Col1Value, rowBtnMaterialIssue).Tag.ShowDialog()
        End If
    End Sub
    Private Function FHPGD_StockIssRec(ByRef Code As String, ByRef Description As String) As String
        Dim FRH_Multiple As DMHelpGrid.FrmHelpGrid_Multi
        Dim StrRtn As String = ""
        Dim mLineCond As String = ""
        Dim DtTemp As DataTable

        mQry = "SELECT 'o' As Tick, H.DocID, H.V_Type + '-' +  H.ManualRefNo AS StockIssNo, H.V_Date As Date
                FROM StockHead H 
                LEFT JOIN Voucher_Type Vt ON H.V_Type = Vt.V_Type
                WHERE Vt.NCat = '" & Ncat.StockIssue & "' "
        DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)

        FRH_Multiple = New DMHelpGrid.FrmHelpGrid_Multi(New DataView(DtTemp), "", 300, 330, , , False)
        FRH_Multiple.FFormatColumn(0, "Tick", 40, DataGridViewContentAlignment.MiddleCenter, True)
        FRH_Multiple.FFormatColumn(1, , 0, , False)
        FRH_Multiple.FFormatColumn(2, "Stock Iss No", 100, DataGridViewContentAlignment.MiddleLeft)
        FRH_Multiple.FFormatColumn(3, "Stock Iss Date", 100, DataGridViewContentAlignment.MiddleLeft)
        FRH_Multiple.StartPosition = FormStartPosition.CenterScreen
        FRH_Multiple.ShowDialog()

        If FRH_Multiple.BytBtnValue = 0 Then
            Code = FRH_Multiple.FFetchData(1, "", "", ",")
            Description = FRH_Multiple.FFetchData(2, "", "", ",")
        Else
            Code = ""
            Description = ""
        End If
        FRH_Multiple = Nothing
    End Function
    Private Function FGetFabricConsumption_Garment(mRow As Integer) As Double
        Dim bBomItem As String = ""
        If AgL.XNull(Dgl1.Item(Col1SKU, mRow).Tag) = "" Then
            bBomItem = ClsMain.FGetBomWithBomPattern("", Dgl1.Item(Col1ItemCategory, mRow).Tag,
                        Dgl1.Item(Col1ItemGroup, mRow).Tag, Dgl1.Item(Col1Item, mRow).Tag,
                        Dgl1.Item(Col1Dimension1, mRow).Tag, Dgl1.Item(Col1Dimension2, mRow).Tag,
                        Dgl1.Item(Col1Dimension3, mRow).Tag, Dgl1.Item(Col1Dimension4, mRow).Tag, Dgl1.Item(Col1Size, mRow).Tag,
                        Dgl1.Item(Col1RawMaterial, mRow).Tag, Dgl1.Item(Col1SKU, mRow).Tag, "")
        Else
            bBomItem = ClsMain.FGetBomWithBomPattern("", "",
                "", "", "", "", "", "", "",
                Dgl1.Item(Col1RawMaterial, mRow).Tag, Dgl1.Item(Col1SKU, mRow).Tag, "")
        End If

        mQry = " Select Qty From BomDetail With (NoLock) Where Code = '" & bBomItem & "'"
        Dim DtBomDetail As DataTable = AgL.FillData(mQry, AgL.GcnRead).Tables(0)

        If DtBomDetail.Rows.Count > 0 Then
            FGetFabricConsumption_Garment = AgL.VNull(DtBomDetail.Rows(0)("Qty"))
        Else
            FGetFabricConsumption_Garment = 0
        End If
    End Function
    Private Sub FPostConsumptionInStock(SearchCode As String, Conn As Object, Cmd As Object)
        If CType(AgL.VNull(FGetSettings(SettingFields.PostConsumptionInStockYn, SettingType.General)), Boolean) = True Then
            mQry = " Delete From Stock Where DocId = '" & SearchCode & "' And SubRecordType = '" & mSubRecordType_Consumption & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

            Dim MaxTSr As Integer = 0
            Dim MaxSr As Integer = 0
            mQry = " Select IfNull(Max(TSr),0) As MaxTSr, Max(Sr) As MaxSr 
                    From Stock With (NoLock) 
                    Where DocId = '" & SearchCode & "'
                    And SubRecordType = '" & mSubRecordType_Consumption & "'"
            Dim DtStockSr As DataTable = AgL.FillData(mQry, IIf(AgL.PubServerName = "", Conn, AgL.GcnRead)).Tables(0)
            If DtStockSr.Rows.Count > 0 Then
                MaxTSr = AgL.VNull(DtStockSr.Rows(0)("MaxTSr"))
                If MaxTSr = 0 Then MaxTSr = 1000
                MaxSr = AgL.VNull(DtStockSr.Rows(0)("MaxSr"))
            End If

            mQry = "Insert Into Stock(DocID, TSr, Sr, V_Type, V_Prefix, V_Date, V_No, RecID, Div_Code, Site_Code, 
                    SubCode, SalesTaxGroupParty,  Item,   
                    EType_IR, Qty_Iss, Qty_Rec, Unit, SubRecordType) 
                    Select L.DocId, " & MaxTSr & " + L.TSr As TSr, " & MaxSr & " + L.Sr As Sr, 
                    H.V_Type, H.V_Prefix, H.V_Date, H.V_No, H.ManualRefNo, 
                    H.Div_Code, H.Site_Code, H.Vendor,  H.SalesTaxGroupParty,  L.Item,
                    'I' AS EType_IR, IsNull(L.Qty,0) + IsNull(L.Wastage,0) As Qty_Iss, 0 As Qty_Rec, L.Unit, 
                    '" & mSubRecordType_Consumption & "' As SubRecordType
                    FROM PurchInvoiceDetailBom L With (NoLock)    
                    LEFT JOIN PurchInvoice H With (NoLock) On L.DocId = H.DocId 
                    WHERE L.DocId =  '" & SearchCode & "' "
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
        End If
    End Sub
    Private Sub FPostConsumptionInStockProcess(SearchCode As String, Conn As Object, Cmd As Object)
        If CType(AgL.VNull(FGetSettings(SettingFields.PostConsumptionInStockProcessYn, SettingType.General)), Boolean) = True Then
            mQry = " Delete From StockProcess Where DocId = '" & SearchCode & "' And SubRecordType = '" & mSubRecordType_Consumption & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

            Dim MaxTSr As Integer = 0
            Dim MaxSr As Integer = 0
            mQry = " Select IfNull(Max(TSr),0) As MaxTSr, IfNull(Max(Sr),0) As MaxSr 
                    From StockProcess With (NoLock) 
                    Where DocId = '" & SearchCode & "'
                    And SubRecordType = '" & mSubRecordType_Consumption & "'"
            Dim DtStockProcessSr As DataTable = AgL.FillData(mQry, IIf(AgL.PubServerName = "", Conn, AgL.GcnRead)).Tables(0)
            If DtStockProcessSr.Rows.Count > 0 Then
                MaxTSr = AgL.VNull(DtStockProcessSr.Rows(0)("MaxTSr"))
                If MaxTSr = 0 Then MaxTSr = 1000
                MaxSr = AgL.VNull(DtStockProcessSr.Rows(0)("MaxSr"))
            End If

            mQry = "Insert Into StockProcess(DocID, TSr, Sr, V_Type, V_Prefix, V_Date, V_No, RecID, Div_Code, Site_Code, 
                    SubCode, SalesTaxGroupParty,  Item,   
                    EType_IR, Qty_Iss, Qty_Rec, Unit, SubRecordType) 
                    Select L.DocId, " & MaxTSr & " + L.TSr As TSr, " & MaxSr & " + L.Sr As Sr, 
                    H.V_Type, H.V_Prefix, H.V_Date, H.V_No, H.ManualRefNo, 
                    H.Div_Code, H.Site_Code, H.Vendor,  H.SalesTaxGroupParty,  L.Item,
                    'I' AS EType_IR, IsNull(L.Qty,0) + IsNull(L.Wastage,0) As Qty_Iss, 0 As Qty_Rec, L.Unit, 
                    '" & mSubRecordType_Consumption & "' As SubRecordType
                    FROM PurchInvoiceDetailBom L With (NoLock)    
                    LEFT JOIN PurchInvoice H With (NoLock) On L.DocId = H.DocId 
                    WHERE L.DocId =  '" & SearchCode & "' "
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
        End If
    End Sub
    Private Sub FGetProcessDetail()
        If DglMain.Item(Col1Value, rowProcess).Tag <> "" Then
            mQry = " Select PrevProcess, FirstProcessOfCombination, LastProcessOfCombination 
                    From ProcessDetail 
                    Where SubCode = '" & DglMain.Item(Col1Value, rowProcess).Tag & "' "
            Dim DtProcessDetail As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)
            If DtProcessDetail.Rows.Count > 0 Then
                DglMain.Item(Col1Value, rowPrevProcess).Tag = AgL.XNull(DtProcessDetail.Rows(0)("PrevProcess"))
                DglMain.Item(Col1Value, rowFirstProcessOfCombination).Tag = AgL.XNull(DtProcessDetail.Rows(0)("FirstProcessOfCombination"))
                DglMain.Item(Col1Value, rowLastProcessOfCombination).Tag = AgL.XNull(DtProcessDetail.Rows(0)("LastProcessOfCombination"))
            End If
        End If
    End Sub
    Private Sub FGetTransactionHistory(ByVal FrmObj As Form, ByVal mSearchCode As String, ByVal mQry As String,
                                     ByVal DGL As AgControls.AgDataGrid, ByVal DtV_TypeSettings As DataTable, ByVal Item As String)
        Dim DtTemp As DataTable = Nothing
        Dim CSV_Qry As String = ""
        Dim CSV_QryArr() As String = Nothing
        Dim I As Integer, J As Integer
        Dim IGridWidth As Integer = 0
        Try
            'If DtV_TypeSettings.Rows.Count <> 0 Then
            '    If AgL.XNull(DtV_TypeSettings.Rows(0)("TransactionHistory_SqlQuery")) <> "" Then
            '        mQry = AgL.XNull(DtV_TypeSettings.Rows(0)("TransactionHistory_SqlQuery"))
            '        mQry = Replace(mQry.ToString.ToUpper, "`<ITEMCODE>`", "'" & Item & "'")
            '        mQry = Replace(mQry.ToString.ToUpper, "`<SEARCHCODE>`", "'" & mSearchCode & "'")
            '    End If

            '    If AgL.XNull(DtV_TypeSettings.Rows(0)("TransactionHistory_ColumnWidthCsv")) <> "" Then
            '        CSV_Qry = AgL.XNull(DtV_TypeSettings.Rows(0)("TransactionHistory_ColumnWidthCsv"))
            '    End If
            'End If

            If CSV_Qry <> "" Then CSV_QryArr = Split(CSV_Qry, ",")
            DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)

            If DtTemp.Rows.Count = 0 Then DGL.DataSource = Nothing : DGL.Visible = False : Exit Sub

            DGL.DataSource = DtTemp
            DGL.Visible = True
            FrmObj.Controls.Add(DGL)
            DGL.Left = FrmObj.Left + 3
            'DGL.Top = FrmObj.Bottom - DGL.Height - 130
            DGL.Top = PnlTotals.Bottom
            DGL.Height = 130
            DGL.Width = 450
            DGL.ColumnHeadersHeight = 40
            DGL.AllowUserToAddRows = False

            If DGL.Columns.Count > 0 Then
                If CSV_Qry <> "" Then J = CSV_QryArr.Length
                For I = 0 To DGL.ColumnCount - 1
                    If CSV_Qry <> "" Then
                        If I < J Then
                            If Val(CSV_QryArr(I)) > 0 Then
                                DGL.Columns(I).Width = Val(CSV_QryArr(I))
                            Else
                                DGL.Columns(I).Width = 100
                            End If
                        Else
                            DGL.Columns(I).Width = 100
                        End If
                    Else
                        DGL.Columns(I).Width = 100
                    End If
                    DGL.Columns(I).SortMode = DataGridViewColumnSortMode.NotSortable
                    IGridWidth += DGL.Columns(I).Width
                Next
                DGL.Columns(0).Width = 0

                DGL.ScrollBars = ScrollBars.None
                DGL.Width = IGridWidth - 50
                DGL.RowHeadersVisible = False
                DGL.EnableHeadersVisualStyles = False
                DGL.AllowUserToResizeRows = False
                DGL.ReadOnly = True
                DGL.AutoResizeRows()
                DGL.AutoResizeColumnHeadersHeight()
                DGL.BackgroundColor = Color.Cornsilk
                DGL.ColumnHeadersDefaultCellStyle.BackColor = Color.Cornsilk
                DGL.DefaultCellStyle.BackColor = Color.Cornsilk
                DGL.ColumnHeadersBorderStyle = DataGridViewHeaderBorderStyle.None
                DGL.CellBorderStyle = DataGridViewCellBorderStyle.None
                DGL.Font = New Font(New FontFamily("Verdana"), 8)
                DGL.ColumnHeadersDefaultCellStyle.Font = New Font(New FontFamily("Verdana"), 8, FontStyle.Bold)
                DGL.BringToFront()
                DGL.Show()
            End If
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub

    Public Sub FImportOpeningFromExcel()
        Dim mQry As String = ""
        Dim bHeadSubCodeName As String = ""
        Dim mTrans As String = ""
        Dim ErrorLog As String = ""
        Dim DtStock As DataTable
        Dim DtStock_DataFields As DataTable
        Dim DtMain As DataTable = Nothing
        Dim DtItem As DataTable = Nothing

        Dim I As Integer
        Dim J As Integer
        Dim K As Integer
        Dim M As Integer
        Dim N As Integer
        Dim StrErrLog As String = ""

        mQry = "Select '' as Srl, 'V_TYPE' as [Field Name], 'Text' as [Data Type], 5 as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'V_No' as [Field Name], 'Text' as [Data Type], 255 as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'V_Date' as [Field Name], 'Date' as [Data Type], Null as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Item Name' as [Field Name], 'Text' as [Data Type], 255 as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Item Group' as [Field Name], 'Text' as [Data Type], 255 as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Item Category' as [Field Name], 'Text' as [Data Type], 255 as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Specification' as [Field Name], 'Text' as [Data Type], 255 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Bale No' as [Field Name], 'Text' as [Data Type], 255 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Lot No' as [Field Name], 'Text' as [Data Type], 255 as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Qty' as [Field Name], 'Text' as [Data Type], Null as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Pcs' as [Field Name], 'Text' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Unit' as [Field Name], 'Text' as [Data Type], 10 as [Length], 'Mandatory' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Rate' as [Field Name], 'Text' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Amount' as [Field Name], 'Text' as [Data Type], Null as [Length], '' as Remark "
        mQry = mQry + "Union All Select  '' as Srl,'Remark' as [Field Name], 'Text' as [Data Type], 255 as [Length], '' as Remark "
        DtStock_DataFields = AgL.FillData(mQry, AgL.GCn).Tables(0)

        Dim ObjFrmImport As FrmImportFromExcel
        ObjFrmImport = New FrmImportFromExcel
        ObjFrmImport.Dgl1.DataSource = DtStock_DataFields
        ObjFrmImport.Text = "Opening Stock Import"
        ObjFrmImport.StartPosition = FormStartPosition.CenterScreen
        ObjFrmImport.ShowDialog()

        If Not AgL.StrCmp(ObjFrmImport.UserAction, "OK") Then Exit Sub

        DtStock = ObjFrmImport.P_DsExcelData.Tables(0)

        mFlag_Import = True

        Dim DtV_Date = DtStock.DefaultView.ToTable(True, "V_Date")
        For I = 0 To DtV_Date.Rows.Count - 1
            If AgL.XNull(DtV_Date.Rows(I)("V_Date")) <> "" Then
                If CDate(AgL.XNull(DtV_Date.Rows(I)("V_Date"))).Year < "2010" Then
                    If ErrorLog.Contains("These Dates are not valid") = False Then
                        ErrorLog += vbCrLf & "These Dates are not valid" & vbCrLf
                        ErrorLog += AgL.XNull(DtV_Date.Rows(I)("V_Date")) & ", "
                    Else
                        ErrorLog += AgL.XNull(DtV_Date.Rows(I)("V_Date")) & ", "
                    End If
                End If
            End If
        Next

        Dim DtV_Type = DtStock.DefaultView.ToTable(True, "V_Type")
        For I = 0 To DtV_Type.Rows.Count - 1
            If AgL.XNull(DtV_Type.Rows(I)("V_Type")) <> "" Then
                If AgL.Dman_Execute("SELECT Count(*) From Voucher_TYpe where V_Type = '" & AgL.XNull(DtV_Type.Rows(I)("V_Type")) & "'", AgL.GCn).ExecuteScalar = 0 Then
                    If ErrorLog.Contains("These Voucher Types Are Not Present In Master") = False Then
                        ErrorLog += vbCrLf & "These Voucher Types Not Present In Master" & vbCrLf
                        ErrorLog += AgL.XNull(DtV_Type.Rows(I)("V_Type")) & ", "
                    Else
                        ErrorLog += AgL.XNull(DtV_Type.Rows(I)("V_Type")) & ", "
                    End If
                End If
            End If
        Next


        For I = 0 To DtStock_DataFields.Rows.Count - 1
            If AgL.XNull(DtStock_DataFields.Rows(I)("Remark")).ToString().Contains("Mandatory") Then
                If Not DtStock.Columns.Contains(AgL.XNull(DtStock_DataFields.Rows(I)("Field Name")).ToString()) Then
                    If ErrorLog.Contains("These fields are not present is excel file") = False Then
                        ErrorLog += vbCrLf & "These fields are not present is excel file" & vbCrLf
                        ErrorLog += AgL.XNull(DtStock_DataFields.Rows(I)("Field Name")).ToString() & ", "
                    Else
                        ErrorLog += AgL.XNull(DtStock_DataFields.Rows(I)("Field Name")).ToString() & ", "
                    End If
                End If
            End If
        Next

        If ErrorLog <> "" Then
            If File.Exists(My.Application.Info.DirectoryPath + " \ " + "ErrorLog.txt") Then
                My.Computer.FileSystem.WriteAllText(My.Application.Info.DirectoryPath + "\" + "ErrorLog.txt", ErrorLog, False)
            Else
                File.Create(My.Application.Info.DirectoryPath + " \ " + "ErrorLog.txt")
                My.Computer.FileSystem.WriteAllText(My.Application.Info.DirectoryPath + " \ " + "ErrorLog.txt", ErrorLog, False)
            End If
            System.Diagnostics.Process.Start("notepad.exe", My.Application.Info.DirectoryPath + "\" + "ErrorLog.txt")
            Exit Sub
        End If

        mQry = "Select I.Code, I.Specification, I.Description, Ig.Description As ItemGroupDesc, 
                Ic.Description As ItemCategoryDesc, I.Description As ItemDesc 
                From Item I 
                LEFT JOIN ItemGroup Ig On I.ItemGroup = Ig.Code
                LEFT JOIN ItemCategory Ic On I.ItemCategory = Ic.Code
                Where I.V_Type = '" & ItemV_Type.Item & "'"
        DtItem = AgL.FillData(mQry, AgL.GCn).Tables(0)

        Try
            AgL.ECmd = AgL.GCn.CreateCommand
            AgL.ETrans = AgL.GCn.BeginTransaction(IsolationLevel.ReadCommitted)
            AgL.ECmd.Transaction = AgL.ETrans
            mTrans = "Begin"

            Dim DtStockHeader As DataTable
            DtStockHeader = DtStock.DefaultView.ToTable(True, "V_Type", "V_No", "V_Date")


            For I = 0 To DtStockHeader.Rows.Count - 1
                bHeadSubCodeName = ""
                Dim PurchEntryTableList(0) As StructPurchInvoice
                Dim PurchEntryTable As New StructPurchInvoice


                PurchEntryTable.DocID = ""
                PurchEntryTable.V_Type = AgL.XNull(DtStockHeader.Rows(I)("V_Type"))
                PurchEntryTable.V_Prefix = ""
                PurchEntryTable.V_Date = AgL.XNull(DtStockHeader.Rows(I)("V_Date"))
                PurchEntryTable.V_No = AgL.VNull(DtStockHeader.Rows(I)("V_No"))
                PurchEntryTable.Div_Code = AgL.PubDivCode
                PurchEntryTable.Site_Code = AgL.PubSiteCode
                PurchEntryTable.ManualRefNo = AgL.VNull(DtStockHeader.Rows(I)("V_No"))
                PurchEntryTable.Vendor = ""
                PurchEntryTable.VendorName = ""
                PurchEntryTable.VendorAddress = ""
                PurchEntryTable.Remarks = ""
                PurchEntryTable.Status = "Active"
                PurchEntryTable.StructureCode = ""
                PurchEntryTable.CustomFields = ""
                PurchEntryTable.VendorDocNo = ""
                PurchEntryTable.VendorDocDate = ""
                PurchEntryTable.EntryBy = AgL.PubUserName
                PurchEntryTable.EntryDate = AgL.GetDateTime(AgL.GcnRead)
                PurchEntryTable.ApproveBy = ""
                PurchEntryTable.ApproveDate = ""
                PurchEntryTable.MoveToLog = ""
                PurchEntryTable.MoveToLogDate = ""



                Dim DtPurchDetail_ForHeader As New DataTable
                For M = 0 To DtStock.Columns.Count - 1
                    Dim DColumn As New DataColumn
                    DColumn.ColumnName = DtStock.Columns(M).ColumnName
                    DtPurchDetail_ForHeader.Columns.Add(DColumn)
                Next

                Dim DtRowStockHeadDetail_ForHeader As DataRow() = DtStock.Select("[V_Type] = " + AgL.Chk_Text(AgL.XNull(DtStock.Rows(I)("V_Type"))) + " And [V_No] = " + AgL.Chk_Text(AgL.XNull(DtStock.Rows(I)("V_No"))))
                If DtRowStockHeadDetail_ForHeader.Length > 0 Then
                    For M = 0 To DtRowStockHeadDetail_ForHeader.Length - 1
                        DtPurchDetail_ForHeader.Rows.Add()
                        For N = 0 To DtPurchDetail_ForHeader.Columns.Count - 1
                            DtPurchDetail_ForHeader.Rows(M)(N) = DtRowStockHeadDetail_ForHeader(M)(N)
                        Next
                    Next
                End If

                For J = 0 To DtPurchDetail_ForHeader.Rows.Count - 1
                    PurchEntryTable.Line_Sr = J + 1

                    Dim DtRowItem As DataRow() = DtItem.Select("Specification = " + AgL.Chk_Text(AgL.XNull(DtPurchDetail_ForHeader.Rows(J)("Item Name"))) +
                                " And ItemGroupDesc = " + AgL.Chk_Text(AgL.XNull(DtPurchDetail_ForHeader.Rows(J)("Item Group"))) +
                                " And ItemCategoryDesc = " + AgL.Chk_Text(AgL.XNull(DtPurchDetail_ForHeader.Rows(J)("Item Category"))))

                    If DtRowItem.Length > 0 Then
                        PurchEntryTable.Line_ItemCode = DtRowItem(0)("Code")
                        PurchEntryTable.Line_ItemName = DtRowItem(0)("Description")
                    Else
                        DtRowItem = DtItem.Select("ItemDesc = " + AgL.Chk_Text(AgL.XNull(DtPurchDetail_ForHeader.Rows(J)("Item Name")) + Space(10) +
                            "[" + AgL.XNull(DtPurchDetail_ForHeader.Rows(J)("Item Group")) +
                            " | " + AgL.XNull(DtPurchDetail_ForHeader.Rows(J)("Item Category")) + "]"))
                        If DtRowItem.Length > 0 Then
                            PurchEntryTable.Line_ItemCode = DtRowItem(0)("Code")
                            PurchEntryTable.Line_ItemName = DtRowItem(0)("Description")
                        Else
                            Dim ItemTable As New FrmItemMaster.StructItem
                            Dim bItemCode As String = AgL.GetMaxId("Item", "Code", AgL.GCn, AgL.PubDivCode, AgL.PubSiteCode, 4, True, True, AgL.ECmd, AgL.Gcn_ConnectionString)
                            ItemTable.Code = bItemCode
                            ItemTable.ManualCode = bItemCode
                            ItemTable.DisplayName = AgL.XNull(DtPurchDetail_ForHeader.Rows(J)("Item Name")) + Space(10) +
                                "[" + AgL.XNull(DtPurchDetail_ForHeader.Rows(J)("Item Group")) +
                                " | " + AgL.XNull(DtPurchDetail_ForHeader.Rows(J)("Item Category")) + "]"
                            ItemTable.Specification = AgL.XNull(DtPurchDetail_ForHeader.Rows(J)("Item Name"))
                            ItemTable.ItemGroupDesc = AgL.XNull(DtPurchDetail_ForHeader.Rows(J)("Item Group"))
                            ItemTable.ItemCategoryDesc = AgL.XNull(DtPurchDetail_ForHeader.Rows(J)("Item Category"))
                            ItemTable.Description = ItemTable.DisplayName
                            ItemTable.ItemType = "TP"
                            ItemTable.Unit = "Pcs"
                            ItemTable.PurchaseRate = 0
                            ItemTable.Rate = 0
                            ItemTable.SalesTaxPostingGroup = "GST 5%"
                            ItemTable.HSN = ""
                            ItemTable.EntryBy = AgL.PubUserName
                            ItemTable.EntryDate = AgL.GetDateTime(AgL.GcnRead)
                            ItemTable.EntryType = "Add"
                            ItemTable.EntryStatus = LogStatus.LogOpen
                            ItemTable.Div_Code = AgL.PubDivCode
                            ItemTable.Status = "InActive"
                            ItemTable.StockYN = 0
                            ItemTable.IsSystemDefine = 0
                            Dim DTUP As DataTable = AgL.FillData("Select '' As [UP] ", AgL.GcnRead).Tables(0)
                            Dim FrmObj As New FrmItemMaster("", DTUP, ItemV_Type.Item)
                            FrmObj.ImportItemTable(ItemTable)
                            PurchEntryTable.Line_ItemCode = ItemTable.Code
                            PurchEntryTable.Line_ItemName = ItemTable.Description
                        End If
                    End If

                    If DtPurchDetail_ForHeader.Columns.Contains("Lot No") Then
                        PurchEntryTable.Line_LotNo = AgL.XNull(DtPurchDetail_ForHeader.Rows(J)("Lot No"))
                    End If

                    If DtPurchDetail_ForHeader.Columns.Contains("Bale No") Then
                        PurchEntryTable.Line_BaleNo = AgL.XNull(DtPurchDetail_ForHeader.Rows(J)("Bale No"))
                    End If

                    PurchEntryTable.Line_DocQty = AgL.VNull(DtPurchDetail_ForHeader.Rows(J)("Qty"))
                    PurchEntryTable.Line_Qty = AgL.VNull(DtPurchDetail_ForHeader.Rows(J)("Qty"))
                    PurchEntryTable.Line_Pcs = 0
                    PurchEntryTable.Line_Unit = AgL.XNull(DtPurchDetail_ForHeader.Rows(J)("Unit"))
                    If DtPurchDetail_ForHeader.Columns.Contains("Rate") Then
                        PurchEntryTable.Line_Rate = AgL.VNull(DtPurchDetail_ForHeader.Rows(J)("Rate"))
                    End If
                    If DtPurchDetail_ForHeader.Columns.Contains("Amount") Then
                        PurchEntryTable.Line_Amount = AgL.VNull(DtPurchDetail_ForHeader.Rows(J)("Amount"))
                    End If
                    PurchEntryTable.Line_DiscountPer = 0
                    PurchEntryTable.Line_DiscountAmount = 0
                    PurchEntryTable.Line_SpecialDiscount_Per = 0
                    PurchEntryTable.Line_SpecialDiscount = 0
                    PurchEntryTable.Line_AdditionalDiscountPer = 0
                    PurchEntryTable.Line_AdditionalDiscountAmount = 0
                    If DtPurchDetail_ForHeader.Columns.Contains("Remark") Then
                        PurchEntryTable.Line_Remark = AgL.XNull(DtPurchDetail_ForHeader.Rows(J)("Remark"))
                    End If


                    PurchEntryTableList(UBound(PurchEntryTableList)) = PurchEntryTable
                    ReDim Preserve PurchEntryTableList(UBound(PurchEntryTableList) + 1)
                Next

                InsertPurchInvoice(PurchEntryTableList)
            Next

            AgL.ETrans.Commit()
            mTrans = "Commit"

            mFlag_Import = False
        Catch ex As Exception
            AgL.ETrans.Rollback()
            MsgBox(ex.Message)
            mFlag_Import = False
        End Try
        If StrErrLog <> "" Then MsgBox(StrErrLog)
    End Sub
    Private Sub FrmSaleInvoiceDirect_WithDimension_BaseEvent_DglMainCellEnter(sender As Object, e As DataGridViewCellEventArgs) Handles Me.BaseEvent_DglMainCellEnter
        Try
            If DglMain.CurrentCell Is Nothing Then Exit Sub
            If Topctrl1.Mode = "BROWSE" Then DglMain.CurrentCell.ReadOnly = True

        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub
    Private Function FGetNarrationStr(bDocId As String, Conn As Object, Cmd As Object, SettingFieldName As String) As String
        Dim NarrationStrColumns As String = ""
        Dim NarrationStr As String = ""

        NarrationStrColumns = FGetSettings(SettingFieldName, SettingType.General)
        If NarrationStrColumns <> "" Then
            mQry = " Select L.DocID "
            If NarrationStrColumns.ToUpper.Contains("PARTY NAME") Then
                mQry += " ,H.VendorName As PartyName "
            End If
            If NarrationStrColumns.ToUpper.Contains("PARTY DOC.NO.") Then
                mQry += " ,IfNull(H.VendorDocNo,'') As PartyDocNo "
            End If
            If NarrationStrColumns.ToUpper.Contains("PARTY DOC.DATE") Then
                mQry += " ,IfNull(H.VendorDocDate,'') As PartyDocDate "
            End If
            If NarrationStrColumns.ToUpper.Contains("ITEM CATEGORY") Then
                mQry += " ,IfNull(Ic.Description,'') As ItemCategory "
            End If
            mQry += " ,Sum(L.Qty) As Qty 
                From PurchInvoice H With (NoLock)
                LEFT JOIN PurchInvoiceDetail L  With (NoLock) On H.DocId = L.DocId
                LEFT JOIN Item I With (NoLock) ON L.Item = I.Code
                LEFT JOIN Item Ic  With (NoLock) On I.ItemCategory = Ic.Code
                Where L.DocId = '" & bDocId & "'
                Group By L.DocId "
            If NarrationStrColumns.ToUpper.Contains("PARTY NAME") Then
                mQry += " ,H.VendorName "
            End If
            If NarrationStrColumns.ToUpper.Contains("PARTY DOC.NO.") Then
                mQry += " ,IfNull(H.VendorDocNo,'')  "
            End If
            If NarrationStrColumns.ToUpper.Contains("PARTY DOC.DATE") Then
                mQry += " ,IfNull(H.VendorDocDate,'') "
            End If
            If NarrationStrColumns.ToUpper.Contains("ITEM CATEGORY") Then
                mQry += " ,IfNull(Ic.Description,'') "
            End If
            Dim DtSalesTaxSummary As DataTable = AgL.FillData(mQry, IIf(AgL.PubServerName = "", Conn, AgL.GcnRead)).Tables(0)

            For I As Integer = 0 To DtSalesTaxSummary.Rows.Count - 1
                If NarrationStrColumns.ToUpper.Contains("PARTY NAME") And I = 0 Then
                    If AgL.XNull(DtSalesTaxSummary.Rows(I)("PartyName")) <> "" Then
                        NarrationStr += AgL.XNull(DtSalesTaxSummary.Rows(I)("PartyName")) + " "
                    End If
                End If
                If NarrationStrColumns.ToUpper.Contains("PARTY DOC.NO.") And I = 0 Then
                    If AgL.XNull(DtSalesTaxSummary.Rows(I)("PartyDocNo")) <> "" Then
                        If LblNCatNature.Tag = NCatNature.Return_ Then
                            NarrationStr += "Against Doc.No." & AgL.XNull(DtSalesTaxSummary.Rows(I)("PartyDocNo")) + " "
                        Else
                            NarrationStr += "Doc.No." & AgL.XNull(DtSalesTaxSummary.Rows(I)("PartyDocNo")) + " "
                        End If
                    End If
                End If
                If NarrationStrColumns.ToUpper.Contains("PARTY DOC.DATE") And I = 0 Then
                    If AgL.XNull(DtSalesTaxSummary.Rows(I)("PartyDocDate")) <> "" Then
                        If LblNCatNature.Tag = NCatNature.Return_ Then
                            NarrationStr += "Against Doc.Date " & AgL.XNull(DtSalesTaxSummary.Rows(I)("PartyDocDate")) + " "
                        Else
                            NarrationStr += "Doc.Date " & AgL.XNull(DtSalesTaxSummary.Rows(I)("PartyDocDate")) + " "
                        End If
                    End If
                End If
                If NarrationStrColumns.ToUpper.Contains("ITEM CATEGORY") Then
                    If AgL.XNull(DtSalesTaxSummary.Rows(I)("ItemCategory")) <> "" Then
                        NarrationStr += "Item " & AgL.XNull(DtSalesTaxSummary.Rows(I)("ItemCategory")) + " "
                    End If
                End If
                If NarrationStrColumns.ToUpper.Contains("QTY") Then
                    NarrationStr += " Qty. " & AgL.XNull(DtSalesTaxSummary.Rows(I)("Qty"))
                End If
                If I < DtSalesTaxSummary.Rows.Count - 1 Then
                    NarrationStr += ", "
                End If
            Next
        End If
        FGetNarrationStr = NarrationStr
    End Function
    Private Sub FGetStructureForInputField()
        Dgl2.Item(Col1Value, rowStructure).Tag = TxtStructure.Tag
        Dgl2.Item(Col1Value, rowStructure).Value = AgL.XNull(AgL.Dman_Execute(" Select Description 
                        From Structure Where Code = '" & Dgl2.Item(Col1Value, rowStructure).Tag & "'", AgL.GCn).ExecuteScalar())
    End Sub
    Private Sub FFillCatalogItems(SiteCode As String, CatalogCode As String, ItemCategoryCode As String, ItemGroupCode As String, Qty As Double, DiscPer As Double,
                                  IsOverwriteGridData As Boolean, mRow As Integer)

        If SiteCode = "" And CatalogCode = "" And ItemCategoryCode = "" And ItemGroupCode = "" Then Exit Sub
        mQry = " Select H.Code As CatalogCode, H.Description As Catalog,
                It.Name As ItemType, Ic.Description As ItemCategory, 
                Ig.Description As ItemGroup, I.Description As Item,
                D1.Description As Dimension1, D2.Description As Dimension2, 
                D3.Description As Dimension3, D4.Description As Dimension4,
                Ic.Code As ItemCategoryCode, Ig.Code As ItemGroupCode, I.Code As ItemCode,
                D1.Code As Dimension1Code, D2.Code As Dimension2Code, 
                D3.Code As Dimension3Code, D4.Code As Dimension4Code,
                Size.Code As SizeCode, It.Code As ItemTypeCode,
                Size.Description As Size, I.SalesTaxPostingGroup, L.Qty, L.Unit, L.Rate, 
                L.DiscountPer, L.AdditionalDiscountPer, L.AdditionPer, 
                Sku.Div_Code As StockInDiv_Code, D.Div_Name As StockInDiv_Name,
                L.ItemState As ItemStateCode, ItemState.Description As ItemState                
                FROM CatalogDetail L
                LEFT JOIN Catalog H ON L.Code = H.Code	
                LEFT JOIN Item Sku ON Sku.Code = L.Item
                LEFT JOIN Item I ON I.Code = IsNull(Sku.BaseItem,Sku.Code) And I.V_Type <> '" & ItemV_Type.SKU & "'
                LEFT JOIN ItemType It On Sku.ItemType = It.Code
                LEFT JOIN Item IC On Sku.ItemCategory = IC.Code
                LEFT JOIN Item IG On Sku.ItemGroup = IG.Code
                LEFT JOIN Item D1 ON D1.Code = Sku.Dimension1  
                LEFT JOIN Item D2 ON D2.Code = Sku.Dimension2
                LEFT JOIN Item D3 ON D3.Code = Sku.Dimension3
                LEFT JOIN Item D4 ON D4.Code = Sku.Dimension4
                LEFT JOIN Size Size ON Size.Code = Sku.Size 
                LEFT JOIN Item ItemState On L.ItemState = ItemState.Code
                LEFT JOIN Division D On Sku.Div_Code = D.Div_Code
                Where 1=1 "
        If SiteCode <> "" Then mQry = mQry + " And H.Site_Code = '" & SiteCode & "'"
        If CatalogCode <> "" Then mQry = mQry + " And L.Code = '" & CatalogCode & "'"
        If ItemCategoryCode <> "" Then mQry = mQry + " And IC.Code = '" & ItemCategoryCode & "'"
        If ItemGroupCode <> "" Then mQry = mQry + " And IG.Code = '" & ItemGroupCode & "'"
        Dim DtTemp As DataTable = AgL.FillData(mQry, AgL.GCn).Tables(0)


        Dgl1.Rows.Insert(mRow, DtTemp.Rows.Count)
        For I As Integer = 0 To DtTemp.Rows.Count - 1
            Dgl1.Item(ColSNo, mRow + I).Value = mRow + I

            Dgl1.Item(Col1Catalog, mRow + I).Tag = AgL.XNull(DtTemp.Rows(I)("CatalogCode"))
            Dgl1.Item(Col1Catalog, mRow + I).Value = AgL.XNull(DtTemp.Rows(I)("Catalog"))

            Dgl1.Item(Col1ItemType, mRow + I).Tag = AgL.XNull(DtTemp.Rows(I)("ItemTypeCode"))
            Dgl1.Item(Col1ItemType, mRow + I).Value = AgL.XNull(DtTemp.Rows(I)("ItemType"))

            Dgl1.Item(Col1ItemCategory, mRow + I).Tag = AgL.XNull(DtTemp.Rows(I)("ItemCategoryCode"))
            Dgl1.Item(Col1ItemCategory, mRow + I).Value = AgL.XNull(DtTemp.Rows(I)("ItemCategory"))

            Dgl1.Item(Col1ItemGroup, mRow + I).Tag = AgL.XNull(DtTemp.Rows(I)("ItemGroupCode"))
            Dgl1.Item(Col1ItemGroup, mRow + I).Value = AgL.XNull(DtTemp.Rows(I)("ItemGroup"))

            Dgl1.Item(Col1Item, mRow + I).Tag = AgL.XNull(DtTemp.Rows(I)("ItemCode"))
            Dgl1.Item(Col1Item, mRow + I).Value = AgL.XNull(DtTemp.Rows(I)("Item"))

            Dgl1.Item(Col1Dimension1, mRow + I).Tag = AgL.XNull(DtTemp.Rows(I)("Dimension1Code"))
            Dgl1.Item(Col1Dimension1, mRow + I).Value = AgL.XNull(DtTemp.Rows(I)("Dimension1"))

            Dgl1.Item(Col1Dimension2, mRow + I).Tag = AgL.XNull(DtTemp.Rows(I)("Dimension2Code"))
            Dgl1.Item(Col1Dimension2, mRow + I).Value = AgL.XNull(DtTemp.Rows(I)("Dimension2"))

            Dgl1.Item(Col1Dimension3, mRow + I).Tag = AgL.XNull(DtTemp.Rows(I)("Dimension3Code"))
            Dgl1.Item(Col1Dimension3, mRow + I).Value = AgL.XNull(DtTemp.Rows(I)("Dimension3"))

            Dgl1.Item(Col1Dimension4, mRow + I).Tag = AgL.XNull(DtTemp.Rows(I)("Dimension4Code"))
            Dgl1.Item(Col1Dimension4, mRow + I).Value = AgL.XNull(DtTemp.Rows(I)("Dimension4"))

            Dgl1.Item(Col1Size, mRow + I).Tag = AgL.XNull(DtTemp.Rows(I)("SizeCode"))
            Dgl1.Item(Col1Size, mRow + I).Value = AgL.XNull(DtTemp.Rows(I)("Size"))

            Dgl1.Item(Col1ItemState, mRow + I).Tag = AgL.XNull(DtTemp.Rows(I)("ItemStateCode"))
            Dgl1.Item(Col1ItemState, mRow + I).Value = AgL.XNull(DtTemp.Rows(I)("ItemState"))

            Dgl1.Item(Col1SalesTaxGroup, mRow + I).Tag = AgL.XNull(DtTemp.Rows(I)("SalesTaxPostingGroup"))
            Dgl1.Item(Col1SalesTaxGroup, mRow + I).Value = AgL.XNull(DtTemp.Rows(I)("SalesTaxPostingGroup"))


            Dgl1.Item(Col1Qty, mRow + I).Value = AgL.VNull(DtTemp.Rows(I)("Qty")) * Qty
            Dgl1.Item(Col1DocQty, mRow + I).Value = AgL.VNull(DtTemp.Rows(I)("Qty")) * Qty

            Dgl1.Item(Col1Rate, mRow + I).Value = AgL.VNull(DtTemp.Rows(I)("Rate"))
            Dgl1.Item(Col1DiscountPer, mRow + I).Value = DiscPer 'AgL.VNull(DtTemp.Rows(I)("DiscountPer"))
            Dgl1.Item(Col1AdditionalDiscountPer, mRow + I).Value = AgL.VNull(DtTemp.Rows(I)("AdditionalDiscountPer"))
            Dgl1.Item(Col1AdditionPer, mRow + I).Value = AgL.VNull(DtTemp.Rows(I)("AdditionPer"))

            Dgl1.Item(Col1Unit, mRow + I).Value = AgL.XNull(DtTemp.Rows(I)("Unit"))

            FGeterateSkuName(mRow + I)
        Next

        Calculation()

        Dgl1.CurrentCell = Dgl1.FirstDisplayedCell
        Dgl1.Focus()
    End Sub
    Public Sub FPostCorrespondenceEntryToBranch(SearchCode As String, Conn As Object, Cmd As Object)
        Dim ErrorLog As String = ""
        Dim DtMain As DataTable = Nothing
        Dim I As Integer
        Dim J As Integer
        Dim StrErrLog As String = ""

        If AgL.VNull(AgL.Dman_Execute(" Select Count(*) From SiteMast With (NoLock)
                Where Code In (Select Vendor 
                        From PurchInvoice With (NoLock)
                        Where DocId = '" & SearchCode & "')", IIf(AgL.PubServerName = "", Conn, AgL.GcnRead)).ExecuteScalar()) > 0 Then

            FDeleteGeneratedPurchase(mSearchCode, Conn, Cmd)

            mQry = " Select * From PurchInvoice With (NoLock) Where DocId = '" & SearchCode & "' "
            Dim DtHeader As DataTable = AgL.FillData(mQry, IIf(AgL.PubServerName = "", Conn, AgL.GcnRead)).Tables(0)

            For I = 0 To DtHeader.Rows.Count - 1
                Dim PurchInvoiceTableList(0) As FrmPurchInvoiceDirect_WithDimension.StructPurchInvoice
                Dim PurchInvoiceTable As New FrmPurchInvoiceDirect_WithDimension.StructPurchInvoice

                PurchInvoiceTable.DocID = ""
                PurchInvoiceTable.V_Type = FGetSettings(SettingFields.GeneratedEntryV_TypeForContraSite, SettingType.General)
                PurchInvoiceTable.V_Prefix = AgL.XNull(DtHeader.Rows(I)("V_Prefix"))
                PurchInvoiceTable.Site_Code = AgL.XNull(DtHeader.Rows(I)("Vendor"))
                PurchInvoiceTable.Div_Code = AgL.PubDivCode
                PurchInvoiceTable.V_No = 0
                PurchInvoiceTable.V_Date = AgL.XNull(DtHeader.Rows(I)("V_Date"))
                PurchInvoiceTable.ManualRefNo = ""
                PurchInvoiceTable.Vendor = AgL.XNull(DtHeader.Rows(I)("Site_Code"))
                PurchInvoiceTable.AgentCode = ""
                PurchInvoiceTable.AgentName = ""
                PurchInvoiceTable.VendorName = ""
                PurchInvoiceTable.BillToPartyCode = AgL.XNull(DtHeader.Rows(I)("Site_Code"))
                PurchInvoiceTable.BillToPartyName = ""
                PurchInvoiceTable.VendorAddress = ""
                PurchInvoiceTable.VendorCity = ""
                PurchInvoiceTable.VendorMobile = ""
                PurchInvoiceTable.VendorSalesTaxNo = ""

                mQry = "  SELECT CASE WHEN C.State <> '" & AgL.PubSiteStateCode & "' THEN '" & PlaceOfSupplay.OutsideState & "' 
                                  ELSE '" & PlaceOfSupplay.WithinState & "' END As PlaceOfSupply, 
                        Sg.SalesTaxPostingGroup
                        FROM Subgroup Sg With (NoLock)
                        LEFT JOIN City C With (NoLock) ON Sg.CityCode = C.CityCode
                        Where Sg.SubCode = '" & PurchInvoiceTable.Vendor & "' "
                Dim DtPartyDetail As DataTable = AgL.FillData(mQry, IIf(AgL.PubServerName = "", Conn, AgL.GcnRead)).Tables(0)

                If DtPartyDetail.Rows.Count > 0 Then
                    PurchInvoiceTable.SalesTaxGroupParty = AgL.XNull(DtPartyDetail.Rows(0)("SalesTaxPostingGroup"))
                    PurchInvoiceTable.PlaceOfSupply = AgL.XNull(DtPartyDetail.Rows(0)("PlaceOfSupply"))
                End If

                PurchInvoiceTable.StructureCode = AgL.XNull(DtHeader.Rows(I)("Structure"))
                PurchInvoiceTable.CustomFields = ""
                PurchInvoiceTable.VendorDocNo = AgL.XNull(DtHeader.Rows(I)("VendorDocNo"))
                PurchInvoiceTable.VendorDocDate = AgL.XNull(DtHeader.Rows(I)("VendorDocDate"))
                PurchInvoiceTable.AmsDocNo = ""
                PurchInvoiceTable.AmsDocDate = ""
                PurchInvoiceTable.AmsDocAmount = ""
                PurchInvoiceTable.ReferenceDocId = ""
                PurchInvoiceTable.GenDocId = mSearchCode
                PurchInvoiceTable.GenDocIdSr = ""
                PurchInvoiceTable.Tags = ""
                PurchInvoiceTable.Remarks = ""
                PurchInvoiceTable.LockText = "This entry is generated from Other Entry. It can be edited from that entry."
                PurchInvoiceTable.Status = "Active"
                PurchInvoiceTable.EntryBy = AgL.PubUserName
                PurchInvoiceTable.EntryDate = AgL.GetDateTime(AgL.GcnRead)
                PurchInvoiceTable.ApproveBy = ""
                PurchInvoiceTable.ApproveDate = ""
                PurchInvoiceTable.MoveToLog = ""
                PurchInvoiceTable.MoveToLogDate = ""
                PurchInvoiceTable.UploadDate = ""

                PurchInvoiceTable.Deduction_Per = 0
                PurchInvoiceTable.Deduction = 0
                PurchInvoiceTable.Other_Charge_Per = 0
                PurchInvoiceTable.Other_Charge = 0
                PurchInvoiceTable.Round_Off = 0
                PurchInvoiceTable.Net_Amount = 0

                mQry = " SELECT Ls.ItemCategory As ItemCategoryCode, Ls.ItemGroup As ItemGroupCode, 
                        I.SalesTaxPostingGroup As SalesTaxGroup_BaseRate, L.*
                        FROM PurchInvoiceDetail L With (NoLock)
                        LEFT JOIN PurchInvoiceDetailSku Ls With (NoLock) On L.DocId = Ls.DocId And L.Sr = Ls.Sr
                        LEFT JOIN PurchInvoiceDetailHelpValues Lv With (NoLock) ON L.DocID = Lv.DocId And L.Sr = Lv.Sr
                        LEFT JOIN Item I On L.Item = I.Code
                        WHERE L.DocID = '" & mSearchCode & "'"
                Dim DtLine As DataTable = AgL.FillData(mQry, IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).Tables(0)


                For J = 0 To DtLine.Rows.Count - 1
                    PurchInvoiceTable.Line_Sr = J + 1
                    PurchInvoiceTable.Line_ItemCategoryCode = AgL.XNull(DtLine.Rows(J)("ItemCategoryCode"))
                    PurchInvoiceTable.Line_ItemGroupCode = AgL.XNull(DtLine.Rows(J)("ItemGroupCode"))
                    PurchInvoiceTable.Line_ItemCode = AgL.XNull(DtLine.Rows(J)("Item"))
                    PurchInvoiceTable.Line_ItemName = ""
                    PurchInvoiceTable.Line_Specification = ""
                    PurchInvoiceTable.Line_ReferenceNo = ""
                    PurchInvoiceTable.Line_DocQty = AgL.VNull(DtLine.Rows(J)("DocQty"))
                    PurchInvoiceTable.Line_FreeQty = AgL.VNull(DtLine.Rows(J)("FreeQty"))
                    PurchInvoiceTable.Line_Qty = AgL.VNull(DtLine.Rows(J)("Qty"))
                    PurchInvoiceTable.Line_Unit = AgL.XNull(DtLine.Rows(J)("Unit"))
                    PurchInvoiceTable.Line_Pcs = AgL.VNull(DtLine.Rows(J)("Pcs"))
                    PurchInvoiceTable.Line_UnitMultiplier = AgL.VNull(DtLine.Rows(J)("UnitMultiplier"))
                    PurchInvoiceTable.Line_DealUnit = AgL.XNull(DtLine.Rows(J)("DealUnit"))
                    PurchInvoiceTable.Line_DocDealQty = AgL.XNull(DtLine.Rows(J)("DocDealQty"))
                    PurchInvoiceTable.Line_Rate = AgL.XNull(DtLine.Rows(J)("Rate"))
                    PurchInvoiceTable.Line_DiscountPer = AgL.XNull(DtLine.Rows(J)("DiscountPer"))
                    PurchInvoiceTable.Line_AdditionalDiscountPer = 0
                    PurchInvoiceTable.Line_DiscountAmount = 0
                    PurchInvoiceTable.Line_AdditionalDiscountAmount = 0
                    PurchInvoiceTable.Line_Amount = AgL.XNull(DtLine.Rows(J)("Amount"))
                    PurchInvoiceTable.Line_CommissionPer = 0
                    PurchInvoiceTable.Line_CommissionAmount = 0
                    PurchInvoiceTable.Line_AdditionalCommissionPer = 0
                    PurchInvoiceTable.Line_AdditionalCommissionAmount = 0
                    PurchInvoiceTable.Line_SalesTaxGroupItem = AgL.XNull(DtLine.Rows(J)("SalesTaxGroupItem"))
                    PurchInvoiceTable.Line_Remark = AgL.XNull(DtLine.Rows(J)("Remark"))
                    PurchInvoiceTable.Line_BaleNo = AgL.XNull(DtLine.Rows(J)("BaleNo"))
                    PurchInvoiceTable.Line_LotNo = AgL.XNull(DtLine.Rows(J)("LotNo"))
                    PurchInvoiceTable.Line_ReferenceDocId = ""
                    PurchInvoiceTable.Line_ReferenceSr = ""
                    PurchInvoiceTable.Line_PurchInvoice = ""
                    PurchInvoiceTable.Line_PurchInvoiceSr = ""
                    PurchInvoiceTable.Line_GrossWeight = 0
                    PurchInvoiceTable.Line_NetWeight = 0
                    PurchInvoiceTable.Line_Gross_Amount = AgL.XNull(DtLine.Rows(J)("Gross_Amount"))
                    PurchInvoiceTable.Line_Taxable_Amount = AgL.XNull(DtLine.Rows(J)("Taxable_Amount"))
                    PurchInvoiceTable.Line_Tax1_Per = AgL.XNull(DtLine.Rows(J)("Tax1_Per"))
                    PurchInvoiceTable.Line_Tax1 = AgL.XNull(DtLine.Rows(J)("Tax1"))
                    PurchInvoiceTable.Line_Tax2_Per = AgL.XNull(DtLine.Rows(J)("Tax2_Per"))
                    PurchInvoiceTable.Line_Tax2 = AgL.XNull(DtLine.Rows(J)("Tax2"))
                    PurchInvoiceTable.Line_Tax3_Per = AgL.XNull(DtLine.Rows(J)("Tax3_Per"))
                    PurchInvoiceTable.Line_Tax3 = AgL.XNull(DtLine.Rows(J)("Tax3"))
                    PurchInvoiceTable.Line_Tax4_Per = AgL.XNull(DtLine.Rows(J)("Tax4_Per"))
                    PurchInvoiceTable.Line_Tax4 = AgL.XNull(DtLine.Rows(J)("Tax4"))
                    PurchInvoiceTable.Line_Tax5_Per = AgL.XNull(DtLine.Rows(J)("Tax5_Per"))
                    PurchInvoiceTable.Line_Tax5 = AgL.XNull(DtLine.Rows(J)("Tax5"))
                    PurchInvoiceTable.Line_SubTotal1 = AgL.XNull(DtLine.Rows(J)("SubTotal1"))
                    PurchInvoiceTable.Line_Round_Off = AgL.XNull(DtLine.Rows(J)("Round_Off"))
                    PurchInvoiceTable.Line_Net_Amount = AgL.XNull(DtLine.Rows(J)("Net_Amount"))



                    PurchInvoiceTableList(UBound(PurchInvoiceTableList)) = PurchInvoiceTable
                    ReDim Preserve PurchInvoiceTableList(UBound(PurchInvoiceTableList) + 1)
                Next


                PurchInvoiceTableList(0).Gross_Amount = AgL.XNull(DtHeader.Rows(I)("Gross_Amount"))
                PurchInvoiceTableList(0).Taxable_Amount = AgL.XNull(DtHeader.Rows(I)("Taxable_Amount"))
                PurchInvoiceTableList(0).Tax1 = AgL.XNull(DtHeader.Rows(I)("Tax1"))
                PurchInvoiceTableList(0).Tax2 = AgL.XNull(DtHeader.Rows(I)("Tax2"))
                PurchInvoiceTableList(0).Tax3 = AgL.XNull(DtHeader.Rows(I)("Tax3"))
                PurchInvoiceTableList(0).Tax4 = AgL.XNull(DtHeader.Rows(I)("Tax4"))
                PurchInvoiceTableList(0).Tax5 = AgL.XNull(DtHeader.Rows(I)("Tax5"))
                PurchInvoiceTableList(0).SubTotal1 = AgL.XNull(DtHeader.Rows(I)("SubTotal1"))
                PurchInvoiceTableList(0).Round_Off = AgL.XNull(DtHeader.Rows(I)("Round_Off"))
                PurchInvoiceTableList(0).Net_Amount = AgL.XNull(DtHeader.Rows(I)("Net_Amount"))

                Dim bDocId As String = FrmPurchInvoiceDirect_WithDimension.InsertPurchInvoice(PurchInvoiceTableList)
            Next
        End If
    End Sub
    Private Sub FDeleteGeneratedPurchase(SearchCode As String, Conn As Object, Cmd As Object)
        mQry = "Select DocId From PurchInvoice With (NoLock) Where GenDocId = '" & SearchCode & "'"
        Dim DtGeneratedEntries As DataTable = AgL.FillData(mQry, IIf(AgL.PubServerName = "", Conn, AgL.GcnRead)).Tables(0)
        For I As Integer = 0 To DtGeneratedEntries.Rows.Count - 1
            mQry = " Delete From StockAdj Where StockInDocId = '" & AgL.XNull(DtGeneratedEntries.Rows(I)("DocId")) & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            mQry = " Delete From Stock Where DocId = '" & AgL.XNull(DtGeneratedEntries.Rows(I)("DocId")) & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            mQry = " Delete From Ledger Where DocId = '" & AgL.XNull(DtGeneratedEntries.Rows(I)("DocId")) & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            mQry = " Delete From PurchInvoicePayment Where DocId = '" & AgL.XNull(DtGeneratedEntries.Rows(I)("DocId")) & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            mQry = " Delete From PurchInvoiceDimensionDetail Where DocId = '" & AgL.XNull(DtGeneratedEntries.Rows(I)("DocId")) & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            mQry = "Delete from PurchInvoiceDimensionDetailSku where DocID='" & AgL.XNull(DtGeneratedEntries.Rows(I)("DocId")) & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            mQry = "Delete from PurchInvoiceBarcodeLastTransactionValues where DocID='" & AgL.XNull(DtGeneratedEntries.Rows(I)("DocId")) & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            mQry = "Delete from PurchInvoiceTransport where DocID='" & AgL.XNull(DtGeneratedEntries.Rows(I)("DocId")) & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            mQry = "Delete from PurchInvoiceDetailHelpValues where DocID='" & AgL.XNull(DtGeneratedEntries.Rows(I)("DocId")) & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            mQry = "Delete from PurchInvoiceDetailSku where DocID='" & AgL.XNull(DtGeneratedEntries.Rows(I)("DocId")) & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            mQry = "Delete from PurchInvoiceDetail where DocID='" & AgL.XNull(DtGeneratedEntries.Rows(I)("DocId")) & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            mQry = "Delete from LedgerHead where DocID='" & AgL.XNull(DtGeneratedEntries.Rows(I)("DocId")) & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
            mQry = "Delete from PurchInvoice where DocID='" & AgL.XNull(DtGeneratedEntries.Rows(I)("DocId")) & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
        Next
    End Sub
    Private Sub FLedgerPostForCustomUI(SearchCode As String, Conn As Object, Cmd As Object)
        If AgL.StrCmp(mCustomUI, mCustomUI_OpeningBalanceDebtors) = True Or
            AgL.StrCmp(mCustomUI, mCustomUI_OpeningBalanceCreditors) = True Then

            mQry = "Delete From Ledger Where DocId = '" & SearchCode & "'"
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)

            mQry = "INSERT INTO Ledger (DocId, V_SNo, V_No, V_Type, V_Prefix, V_Date, SubCode, ContraSub, 
                    AmtDr, AmtCr, Chq_No, Chq_Date, Narration, Site_Code, U_Name, U_EntDt, DivCode, RecId)
                    SELECT H.DocId, 1 As V_SNo, Max(H.V_No) As V_No, Max(H.V_Type) As V_Type, 
                    Max(H.V_Prefix) As V_Prefix, Max(H.V_Date) As V_Date, Max(H.Vendor) As SubCode, Null As ContraSub, 
                    " & IIf(AgL.StrCmp(mCustomUI, mCustomUI_OpeningBalanceDebtors) = True, "Sum(L.Amount)", "0") & "  As AmtDr, 
                    " & IIf(AgL.StrCmp(mCustomUI, mCustomUI_OpeningBalanceCreditors) = True, "Sum(L.Amount)", "0") & "  As AmtCr, 
                    Null As Chq_No, Null As Chq_Date, Max(H.Remarks) As Narration, 
                    Max(H.Site_Code) As Site_Code, Max(H.EntryBy) As U_Name, 
                    Max(H.EntryDate) As U_EntDt, Max(H.Div_Code) As DivCode, Max(H.ManualRefNo) As RecId 
                    From PurchInvoice H 
                    LEFT JOIN PurchInvoiceDetail L On H.DocId = L.DocId 
                    Where H.DocId = '" & SearchCode & "'
                    Group By H.DocId "
            AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
        End If
    End Sub







    Private Sub FOpenSaleOrderForPurchInvoice_FallPico(mRow As Integer)
        Dim DtTemp As DataTable
        Dim StrRtn As String = ""
        Dim bPendingSaleQry As String = ""

        If AgL.StrCmp(Topctrl1.Mode, "Browse") Then Exit Sub

        bPendingSaleQry = " SELECT VSale.SaleInvoice, VSale.SaleInvoiceSr, IsNull(VSale.SaleQty,0) - IsNull(VPurch.PurchQty,0) AS BalanceQty
                FROM (
                    SELECT L.DocId As SaleInvoice, L.Sr As SaleInvoiceSr, Sum(L.Qty) AS SaleQty
                    FROM SaleInvoice H 
                    LEFT JOIN SaleInvoiceDetail L ON H.DocID = L.DocID
                    LEFT JOIN Voucher_Type Vt ON H.V_Type = Vt.V_Type
                    Where Vt.NCat = '" & Ncat.WorkOrder & "'
                    And IfNull(H.Process,'') = '" & AgL.XNull(DglMain.Item(Col1Value, rowProcess).Tag) & "'
	                GROUP BY L.DocId, L.Sr
                ) AS VSale
                LEFT JOIN (
                    SELECT L.SaleInvoice, L.SaleInvoiceSr, Sum(L.Qty) AS PurchQty
                    FROM PurchInvoiceDetail L 
                    GROUP BY L.SaleInvoice, L.SaleInvoiceSr	
                ) AS VPurch ON VPurch.SaleInvoice = VSale.SaleInvoice AND VPurch.SaleInvoiceSr = VSale.SaleInvoiceSr 
                WHERE 1=1 
                And IsNull(VSale.SaleQty,0) - IsNull(VPurch.PurchQty,0) > 0 "

        mQry = " Select 'o' As Tick, L.DocID || '#' || Cast(L.Sr as Varchar) As SearchKey, 
                H.V_Type || '-' || H.ManualRefNo As SaleInvoiceNo, H.V_Date As SaleInvoiceDate, 
                H.SaleToPartyName, H.SaleToPartyMobile,
                Ic.Description As ItemCategory, Ig.Description As ItemGroup, I.Description As Item,
                D1.Description As Dimension1, D2.Description As Dimension2, 
                D3.Description As Dimension3, D4.Description As Dimension4,
                Size.Description As Size, VPendingSale.BalanceQty, L.Unit, L.Rate,
                Ic.Code As ItemCategoryCode, Ig.Code As ItemGroupCode, I.Code As ItemCode,
                D1.Code As Dimension1Code, D2.Code As Dimension2Code, 
                D3.Code As Dimension3Code, D4.Code As Dimension4Code, I.SalesTaxPostingGroup,
                Size.Code As SizeCode, It.Code As ItemTypeCode, It.Name As ItemType, 
                VPendingSale.SaleInvoice, VPendingSale.SaleInvoiceSr,
                Case When IfNull(U.ShowDimensionDetailInSales,0) = 1 Or IfNull(Ic.ShowDimensionDetailInSales,0) = 1 Then 1
                        Else 0 End As ShowDimensionDetailInSales, 
                U.DecimalPlaces as QtyDecimalPlaces, DU.DecimalPlaces as DealQtyDecimalPlaces, I.DealUnit, L.Remark
                FROM (" & bPendingSaleQry & ") As VPendingSale
                LEFT JOIN SaleInvoiceDetail L On VPendingSale.SaleInvoice = L.DocId And VPendingSale.SaleInvoiceSr = L.Sr 
                LEFT JOIN SaleInvoice H On L.DocId = H.DocId 
                LEFT JOIN Item Sku ON Sku.Code = L.Item
                LEFT JOIN Item I ON I.Code = IsNull(Sku.BaseItem,Sku.Code) And I.V_Type <> '" & ItemV_Type.SKU & "'
                LEFT JOIN ItemType It On Sku.ItemType = It.Code
                LEFT JOIN Item IC On IsNull(Sku.ItemCategory,Sku.code) = IC.Code
                LEFT JOIN Item IG On Sku.ItemGroup = IG.Code
                LEFT JOIN Item D1 ON D1.Code = Sku.Dimension1  
                LEFT JOIN Item D2 ON D2.Code = Sku.Dimension2
                LEFT JOIN Item D3 ON D3.Code = Sku.Dimension3
                LEFT JOIN Item D4 ON D4.Code = Sku.Dimension4
                LEFT JOIN Item Size ON Size.Code = Sku.Size 
                Left Join Unit U  With (NoLock) On I.Unit = U.Code 
                LEFT JOIN Unit Du With (NoLock) On I.DealUnit = Du.Code 
                Where 1=1 "

        If mRow >= 0 Then
            If AgL.XNull(Dgl1.Item(Col1ItemCategory, mRow).Tag) <> "" Then
                mQry += " And Ic.Code = '" & Dgl1.Item(Col1ItemCategory, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1ItemGroup, mRow).Tag) <> "" Then
                mQry += " And Ig.Code = '" & Dgl1.Item(Col1ItemGroup, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Item, mRow).Tag) <> "" Then
                mQry += " And I.Code = '" & Dgl1.Item(Col1Item, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Dimension1, mRow).Tag) <> "" Then
                mQry += " And D1.Code = '" & Dgl1.Item(Col1Dimension1, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Dimension2, mRow).Tag) <> "" Then
                mQry += " And D2.Code = '" & Dgl1.Item(Col1Dimension2, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Dimension3, mRow).Tag) <> "" Then
                mQry += " And D3.Code = '" & Dgl1.Item(Col1Dimension3, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Dimension4, mRow).Tag) <> "" Then
                mQry += " And D4.Code = '" & Dgl1.Item(Col1Dimension4, mRow).Tag & "'"
            End If
            If AgL.XNull(Dgl1.Item(Col1Size, mRow).Tag) <> "" Then
                mQry += " And Size.Code = '" & Dgl1.Item(Col1Size, mRow).Tag & "'"
            End If
        End If

        DtTemp = AgL.FillData(mQry, AgL.GCn).Tables(0)

        Dim FRH_Multiple As DMHelpGrid.FrmHelpGrid_Multi
        FRH_Multiple = New DMHelpGrid.FrmHelpGrid_Multi(New DataView(DtTemp), "", 400, 990, , , False)
        FRH_Multiple.FFormatColumn(0, "Tick", 40, DataGridViewContentAlignment.MiddleCenter, True)
        FRH_Multiple.FFormatColumn(1, , 0, , False)
        FRH_Multiple.FFormatColumn(2, "Order No.", 90, DataGridViewContentAlignment.MiddleLeft)
        FRH_Multiple.FFormatColumn(3, "Order Date", 100, DataGridViewContentAlignment.MiddleLeft)
        FRH_Multiple.FFormatColumn(4, "Party", 90, DataGridViewContentAlignment.MiddleLeft)
        FRH_Multiple.FFormatColumn(5, "Phone", 90, DataGridViewContentAlignment.MiddleLeft)
        FRH_Multiple.FFormatColumn(6, AgL.PubCaptionItemCategory, 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[ItemCategory] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(7, AgL.PubCaptionItemGroup, 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[ItemGroup] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(8, AgL.PubCaptionItem, 180, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Item] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(9, AgL.PubCaptionDimension1, 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension1] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(10, AgL.PubCaptionDimension2, 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension2] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(11, AgL.PubCaptionDimension3, 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension3] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(12, AgL.PubCaptionDimension4, 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Dimension4] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(13, "Size", 90, DataGridViewContentAlignment.MiddleLeft, IIf(DtTemp.Select("[Size] <> '' ").Length = 0, False, True))
        FRH_Multiple.FFormatColumn(14, "Bal Qty", 90, DataGridViewContentAlignment.MiddleRight)
        FRH_Multiple.FFormatColumn(15, "Unit", 70, DataGridViewContentAlignment.MiddleLeft)
        FRH_Multiple.FFormatColumn(16, "Rate", 70, DataGridViewContentAlignment.MiddleLeft)

        FRH_Multiple.FFormatColumn(17, , 0, , False)
        FRH_Multiple.FFormatColumn(18, , 0, , False)
        FRH_Multiple.FFormatColumn(19, , 0, , False)
        FRH_Multiple.FFormatColumn(20, , 0, , False)
        FRH_Multiple.FFormatColumn(21, , 0, , False)
        FRH_Multiple.FFormatColumn(22, , 0, , False)
        FRH_Multiple.FFormatColumn(23, , 0, , False)
        FRH_Multiple.FFormatColumn(24, , 0, , False)
        FRH_Multiple.FFormatColumn(25, , 0, , False)
        FRH_Multiple.FFormatColumn(26, , 0, , False)
        FRH_Multiple.FFormatColumn(27, , 0, , False)
        FRH_Multiple.FFormatColumn(28, , 0, , False)
        FRH_Multiple.FFormatColumn(29, , 0, , False)
        FRH_Multiple.FFormatColumn(30, , 0, , False)
        FRH_Multiple.FFormatColumn(31, , 0, , False)
        FRH_Multiple.FFormatColumn(32, , 0, , False)
        FRH_Multiple.FFormatColumn(33, , 0, , False)

        FRH_Multiple.StartPosition = FormStartPosition.CenterScreen
        FRH_Multiple.ShowDialog()

        If FRH_Multiple.BytBtnValue = 0 Then
            StrRtn = FRH_Multiple.FFetchData(1, "'", "'", ",", True)
        End If

        Dim DrSelected As DataRow()
        If StrRtn <> "" Then
            DrSelected = DtTemp.Select("SearchKey In (" & StrRtn & ")")

            If mRow < 0 Then
                If Dgl1.Rows.Count > 1 Then
                    If MsgBox("Do you want to overwrite existing data in grid ? ", MsgBoxStyle.Question + MsgBoxStyle.YesNo) = MsgBoxResult.Yes Then
                        'Dgl1.Rows.Clear() : Dgl1.RowCount = 1 : mRow = 0
                        For I As Integer = 0 To Dgl1.Rows.Count - 1
                            If Dgl1.Item(Col1IsRecordLocked, I).Value = 0 Then
                                If Not Dgl1.Rows(I).IsNewRow Then
                                    Dgl1.Rows(I).Visible = False
                                End If
                            End If
                        Next
                        mRow = Dgl1.Rows.Count - 1
                    Else
                        mRow = Dgl1.Rows.Count - 1
                    End If
                Else
                    mRow = 0
                End If
            End If

            If Dgl1.Rows(mRow).IsNewRow = False Then
                Dgl1.Rows.Remove(Dgl1.Rows(mRow))
            End If
            Dgl1.Rows.Insert(mRow, DrSelected.Length)
            For I As Integer = 0 To DrSelected.Length - 1
                Dgl1.Item(Col1ItemType, mRow + I).Tag = AgL.XNull(DrSelected(I)("ItemTypeCode"))
                Dgl1.Item(Col1ItemType, mRow + I).Value = AgL.XNull(DrSelected(I)("ItemType"))

                Dgl1.Item(Col1ItemCategory, mRow + I).Tag = AgL.XNull(DrSelected(I)("ItemCategoryCode"))
                Dgl1.Item(Col1ItemCategory, mRow + I).Value = AgL.XNull(DrSelected(I)("ItemCategory"))

                Dgl1.Item(Col1ItemGroup, mRow + I).Tag = AgL.XNull(DrSelected(I)("ItemGroupCode"))
                Dgl1.Item(Col1ItemGroup, mRow + I).Value = AgL.XNull(DrSelected(I)("ItemGroup"))

                Dgl1.Item(Col1Item, mRow + I).Tag = AgL.XNull(DrSelected(I)("ItemCode"))
                Dgl1.Item(Col1Item, mRow + I).Value = AgL.XNull(DrSelected(I)("Item"))

                Dgl1.Item(Col1Dimension1, mRow + I).Tag = AgL.XNull(DrSelected(I)("Dimension1Code"))
                Dgl1.Item(Col1Dimension1, mRow + I).Value = AgL.XNull(DrSelected(I)("Dimension1"))

                Dgl1.Item(Col1Dimension2, mRow + I).Tag = AgL.XNull(DrSelected(I)("Dimension2Code"))
                Dgl1.Item(Col1Dimension2, mRow + I).Value = AgL.XNull(DrSelected(I)("Dimension2"))

                Dgl1.Item(Col1Dimension3, mRow + I).Tag = AgL.XNull(DrSelected(I)("Dimension3Code"))
                Dgl1.Item(Col1Dimension3, mRow + I).Value = AgL.XNull(DrSelected(I)("Dimension3"))

                Dgl1.Item(Col1Dimension4, mRow + I).Tag = AgL.XNull(DrSelected(I)("Dimension4Code"))
                Dgl1.Item(Col1Dimension4, mRow + I).Value = AgL.XNull(DrSelected(I)("Dimension4"))

                Dgl1.Item(Col1Size, mRow + I).Tag = AgL.XNull(DrSelected(I)("SizeCode"))
                Dgl1.Item(Col1Size, mRow + I).Value = AgL.XNull(DrSelected(I)("Size"))

                Dgl1.Item(Col1SalesTaxGroup, mRow + I).Tag = AgL.XNull(DrSelected(I)("SalesTaxPostingGroup"))
                Dgl1.Item(Col1SalesTaxGroup, mRow + I).Value = AgL.XNull(DrSelected(I)("SalesTaxPostingGroup"))

                Dgl1.Item(Col1SaleInvoice, mRow + I).Tag = AgL.XNull(DrSelected(I)("SaleInvoice"))
                Dgl1.Item(Col1SaleInvoice, mRow + I).Value = AgL.XNull(DrSelected(I)("SaleInvoiceNo"))
                Dgl1.Item(Col1SaleInvoiceSr, mRow + I).Value = AgL.VNull(DrSelected(I)("SaleInvoiceSr"))

                Dgl1.Item(Col1Qty, mRow + I).Value = AgL.XNull(DrSelected(I)("BalanceQty"))
                Dgl1.Item(Col1DocQty, mRow + I).Value = AgL.XNull(DrSelected(I)("BalanceQty"))

                Dgl1.Item(Col1QtyDecimalPlaces, mRow + I).Value = AgL.VNull(DrSelected(I)("QtyDecimalPlaces"))
                Dgl1.Item(Col1DealQtyDecimalPlaces, mRow + I).Value = AgL.VNull(DrSelected(I)("DealQtyDecimalPlaces"))

                Dgl1.Item(Col1Rate, mRow + I).Value = AgL.XNull(DrSelected(I)("Rate"))

                Dgl1.Item(Col1Unit, mRow + I).Value = AgL.XNull(DrSelected(I)("Unit"))
                Dgl1.Item(Col1Unit, mRow + I).Tag = AgL.VNull(DrSelected(I)("ShowDimensionDetailInSales"))

                Dgl1.Item(Col1DealUnit, mRow + I).Value = AgL.XNull(DrSelected(I)("DealUnit"))

                Dgl1.Item(Col1Remark, mRow + I).Value = AgL.XNull(DrSelected(I)("Remark"))

                FGetRateConsideringAllDimensions(mRow + I)
            Next

            For I As Integer = 0 To Dgl1.Rows.Count - 1
                Dgl1.Item(ColSNo, I).Value = I + 1
                FGeterateSkuName(I)
            Next
        End If
        Calculation()
    End Sub
    Private Sub FSaveWastage(DocId As String, TSr As Integer, Conn As Object, Cmd As Object)
        Dim bWastage As Double = 0
        mQry = "SELECT L.*
                FROM PurchInvoiceDetailBom L With (NoLock) 
                WHERE L.DocID = '" & DocId & "'
                And L.TSr = " & TSr & ""
        Dim DtPurchInvoiceDetailBom As DataTable = AgL.FillData(mQry, IIf(AgL.PubServerName = "", AgL.GCn, AgL.GcnRead)).Tables(0)

        For I As Integer = 0 To DtPurchInvoiceDetailBom.Rows.Count - 1
            For J As Integer = 0 To Dgl4.Rows.Count - 1
                bWastage = 0
                If AgL.XNull(DtPurchInvoiceDetailBom.Rows(I)("Item")) = AgL.XNull(Dgl4.Item(Col4Sku, J).Tag) Then
                    bWastage = Math.Round(AgL.VNull(Dgl4.Item(Col4Wastage, J).Value) * AgL.VNull(DtPurchInvoiceDetailBom.Rows(I)("Qty")) / AgL.VNull(Dgl4.Item(Col4Qty, J).Value), 3)
                    mQry = " Update PurchInvoiceDetailBom Set Wastage = " & Val(bWastage) & "
                            Where DocId = '" & AgL.XNull(DtPurchInvoiceDetailBom.Rows(I)("DocId")) & "'
                            And TSr = " & AgL.XNull(DtPurchInvoiceDetailBom.Rows(I)("TSr")) & " 
                            And Sr = " & AgL.XNull(DtPurchInvoiceDetailBom.Rows(I)("Sr")) & " "
                    AgL.Dman_ExecuteNonQry(mQry, Conn, Cmd)
                End If
            Next
        Next
    End Sub
End Class
